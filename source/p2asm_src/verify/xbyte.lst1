                   '
                   ' ** XBYTE Demo **
                   ' Automatically executes bytecodes via RET/_RET_ to $1F8..$1FF.
                   ' Overhead is 6 clocks, including _RET_ at end of each bytecode routine.
                   '
00000 000          dat		org
                   
00000 000 fd65fe00 		hubset	#$FF		'set clock to 80MHz
                   
00004 001 fd65fe29 		setq2	#$FF		'load bytecode table into lut $100..$1FF
00008 002 fb06003a 		rdlong	$100,#bytetable
                   
0000c 003 fc7c0034 		rdfast	#0,#bytecodes	'init fifo read at start of bytecodes
                   
00010 004 fd67fe2a 		push	#$1FF		'push $1FF for xbyte on ret
00014 005 0d660028 	_ret_	setq	#$100		'start xbyte with lut base = $100, no stack pop
                   '
                   ' Bytecode routines
                   '
00018 006 0d64005f r0	_ret_	drvnot	#0		'toggle pin 0
                   
0001c 007 0d64025f r1	_ret_	drvnot	#1		'toggle pin 1
                   
00020 008 0d64045f r2	_ret_	drvnot	#2		'toggle pin 2
                   
00024 009 0d64065f r3	_ret_	drvnot	#3		'toggle pin 3
                   
00028 00a fd63ec14 r4		rfvars	pa		'get offset
0002c 00b f103eff6 		add	pb,pa		'add offset
00030 00c 0c7801f7 	_ret_	rdfast	#0,pb		'init fifo read at new address
                   '
                   ' Bytecodes that form program in hub
                   '
00034              		orgh
                   
00034     00       bytecodes	byte	0			'toggle pin 0
00035     01       		byte	1			'toggle pin 1
00036     02       		byte	2			'toggle pin 2
00037     03       		byte	3			'toggle pin 3
00038     7b04     		byte	4,(bytecodes-$) & $7F	'relative branch, loop to bytecodes
                   '
                   ' Bytecode EXECF table that gets moved into lut $100..$1FF
                   '
0003a     00000006 bytetable	long	r0			'#0	toggle pin 0
0003e     00000007 		long	r1			'#1	toggle pin 1
00042     00000008 		long	r2			'#2	toggle pin 2
00046     00000009 		long	r3			'#3	toggle pin 3
0004a     0000000a 		long	r4			'#4	relative branch
                   
                   {
                   clock	phase	hidden				description
                   ----------------------------------------------------------------------------------------------------------------------
                   1	go	RFBYTE byte			last clock of instruction which is executing a RET/_RET_ to $1F8..$1FF
                   
                   2	get	RDLUT @byte, write byte to PA	1st clock of 1st cancelled instruction
                   3	go	LUT long --> next D		2nd clock of 1st cancelled instruction
                   4	get	EXECF D,			1st clock of 2nd cancelled instruction
                   5	go	EXECF D, write GETPTR to PB	2nd clock of 2nd cancelled instruction
                   6	get	flush pipe			1st clock of 3rd cancelled instruction
                   7	go	flush pipe			2nd clock of 3rd cancelled instruction
                   
                   8	get					1st clock of 1st instruction of bytecode routine, loop to 1 if _RET_
                   }
