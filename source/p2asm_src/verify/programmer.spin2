' Program SPI flash with HMAC-signed OUTB blinker program
' - Connect SPI flash with a pull-up on spi_cs (and on spi_ck if you want faster booting)
' - Blinks OUTB on boot-up

CON

  spi_cs = 61
  spi_ck = 60
  spi_dq = 59

DAT
		org
'
'
' Init SPI pins
'
		outh	#spi_cs

		dirh	#spi_cs
		dirh	#spi_ck
'
'
' Erase first $1000 bytes
'
		call	#spi_wrena		'write enable

		mov	cmd,cmd_erase		'sector erase
		call	#spi_cmd32

		call	#spi_wait		'wait for completion
'
'
' Program first $400 bytes
'
		loc	ptra,#\pgmdata		'point to program data

.program	call	#spi_wrena		'write enable

		mov	cmd,cmd_program		'page program
		or	cmd,adr
		call	#spi_cmd32

.byte		rdbyte	cmd,ptra++		'get byte

		mov	x,#8			'send byte
		shl	cmd,#24
		call	#spi_out

		add	adr,#1			'page done?
		test	adr,#$FF	wz
	if_nz	jmp	#.byte

		call	#spi_wait		'wait for completion

		testbn	adr,#10		wz	'another page?
	if_z	jmp	#.program
'
'
' Read data back to outa for viewing on logic analyzer (or reset to reboot new program)
'
		mov	dira,#$1FF

.read1k		mov	cmd,cmd_read		'start read
		call	#spi_cmd32

		outh	#8			'trigger signal
		outl	#8

		decod	y,#10			'read byte to outa
.read		call	#spi_in
		setbyte	outa,cmd,#0
		djnz	y,#.read

		jmp	#.read1k		'loop
'
'
' SPI write enable
'
spi_wrena	mov	cmd,#$06		'write enable
		jmp	#spi_cmd8
'
'
' SPI wait while busy
'
spi_wait	mov	cmd,#$05
		call	#spi_cmd8

.wait		call	#spi_in
		test	cmd,#$01	wc
	if_c	jmp	#.wait

		ret
'
'
' SPI command
'
spi_cmd32	mov	x,#32
		jmp	#spi_cmd

spi_cmd8	mov	x,#8
		shl	cmd,#24

spi_cmd		outh	#spi_cs
		outl	#spi_cs
'
'
' SPI long/byte out (x=bits, cmd=msbdata)
'
spi_out		dirh	#spi_dq			'make data output

.out		shl	cmd,#1		wc	'get bit to send
		outc	#spi_dq			'set data to bit
		outh	#spi_ck			'clock high
		cmp	x,#2		wc	'last bit?
	if_c	dirl	#spi_dq			'if last bit, make data input
		outl	#spi_ck			'clock low
	_ret_	djnz	x,#.out			'loop to output bits
'
'
' SPI byte in (cmd)
'
spi_in		rep	@.in,#8			'ready to input a byte
		outh	#spi_ck			'clock high
		outl	#spi_ck			'clock low
		testp	#spi_dq		wc	'sample data bit ('testp' is from before 'outl')
		rcl	cmd,#1			'save data bit
.in
		ret
'
'
' Data
'
cmd_erase	long	$20_00_00_00
cmd_program	long	$02_00_00_00
cmd_read	long	$03_00_00_00
adr		long	0
'
'
' Variables
'
cmd		res	1
x		res	1
y		res	1
'
'
' Program Data
'
' first 20 bytes are blinker program:
'
'	not	dirb
'.lp	not	outb
'	waitx	##20_000_000/4
'	jmp	#.lp
'
' next 4 bytes are long checksum ("Prop" minus sum of other longs)
'
	orgh

pgmdata	byte	$FB,$F7,$23,$F6,$FD,$FB,$23,$F6,$25,$26,$80,$FF,$1F,$80,$66,$FD	'blinker program is 5 longs
	byte	$F0,$FF,$9F,$FD,$24,$D8,$A0,$89,$00,$00,$00,$00,$00,$00,$00,$00	'last 4 bytes are long checksum
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
