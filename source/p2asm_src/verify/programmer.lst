                   ' Program SPI flash with HMAC-signed OUTB blinker program
                   ' - Connect SPI flash with a pull-up on spi_cs (and on spi_ck if you want faster booting)
                   ' - Blinks OUTB on boot-up
                   
                   CON
                   
                     spi_cs = 61
                     spi_ck = 60
                     spi_dq = 59
                   
                   DAT
00000 000          		org
                   '
                   '
                   ' Init SPI pins
                   '
00000 000 fd647a49 		outh	#spi_cs
                   
00004 001 fd647a41 		dirh	#spi_cs
00008 002 fd647841 		dirh	#spi_ck
                   '
                   '
                   ' Erase first $1000 bytes
                   '
0000c 003 fdb00070 		call	#spi_wrena		'write enable
                   
00010 004 f600803c 		mov	cmd,cmd_erase		'sector erase
00014 005 fdb00088 		call	#spi_cmd32
                   
00018 006 fdb0006c 		call	#spi_wait		'wait for completion
                   '
                   '
                   ' Program first $400 bytes
                   '
0001c 007 fec00100 		loc	ptra,#\pgmdata		'point to program data
                   
00020 008 fdb0005c .program	call	#spi_wrena		'write enable
                   
00024 009 f600803d 		mov	cmd,cmd_program		'page program
00028 00a f540803f 		or	cmd,adr
0002c 00b fdb00070 		call	#spi_cmd32
                   
00030 00c fac48161 .byte		rdbyte	cmd,ptra++		'get byte
                   
00034 00d f6048208 		mov	x,#8			'send byte
00038 00e f0648018 		shl	cmd,#24
0003c 00f fdb00078 		call	#spi_out
                   
00040 010 f1047e01 		add	adr,#1			'page done?
00044 011 f7cc7eff 		test	adr,#$FF	wz
00048 012 5d9fffe4 	if_nz	jmp	#.byte
                   
0004c 013 fdb00038 		call	#spi_wait		'wait for completion
                   
00050 014 f42c7e0a 		testbn	adr,#10		wz	'another page?
00054 015 ad9fffc8 	if_z	jmp	#.program
                   '
                   '
                   ' Read data back to outa for viewing on logic analyzer (or reset to reboot new program)
                   '
00058 016 f607f5ff 		mov	dira,#$1FF
                   
0005c 017 f600803e .read1k		mov	cmd,cmd_read		'start read
00060 018 fdb0003c 		call	#spi_cmd32
                   
00064 019 fd641049 		outh	#8			'trigger signal
00068 01a fd641048 		outl	#8
                   
0006c 01b f9c4840a 		decod	y,#10			'read byte to outa
00070 01c fdb00064 .read		call	#spi_in
00074 01d f8c3f840 		setbyte	outa,cmd,#0
00078 01e fb6c85fd 		djnz	y,#.read
                   
0007c 01f fd9fffdc 		jmp	#.read1k		'loop
                   '
                   '
                   ' SPI write enable
                   '
00080 020 f6048006 spi_wrena	mov	cmd,#$06		'write enable
00084 021 fd900020 		jmp	#spi_cmd8
                   '
                   '
                   ' SPI wait while busy
                   '
00088 022 f6048005 spi_wait	mov	cmd,#$05
0008c 023 fdb00018 		call	#spi_cmd8
                   
00090 024 fdb00044 .wait		call	#spi_in
00094 025 f7d48001 		test	cmd,#$01	wc
00098 026 cd9ffff4 	if_c	jmp	#.wait
                   
0009c 027 fd64002d 		ret
                   '
                   '
                   ' SPI command
                   '
000a0 028 f6048220 spi_cmd32	mov	x,#32
000a4 029 fd900008 		jmp	#spi_cmd
                   
000a8 02a f6048208 spi_cmd8	mov	x,#8
000ac 02b f0648018 		shl	cmd,#24
                   
000b0 02c fd647a49 spi_cmd		outh	#spi_cs
000b4 02d fd647a48 		outl	#spi_cs
                   '
                   '
                   ' SPI long/byte out (x=bits, cmd=msbdata)
                   '
000b8 02e fd647641 spi_out		dirh	#spi_dq			'make data output
                   
000bc 02f f0748001 .out		shl	cmd,#1		wc	'get bit to send
000c0 030 fd64764a 		outc	#spi_dq			'set data to bit
000c4 031 fd647849 		outh	#spi_ck			'clock high
000c8 032 f2148202 		cmp	x,#2		wc	'last bit?
000cc 033 cd647640 	if_c	dirl	#spi_dq			'if last bit, make data input
000d0 034 fd647848 		outl	#spi_ck			'clock low
000d4 035 0b6c83f9 	_ret_	djnz	x,#.out			'loop to output bits
                   '
                   '
                   ' SPI byte in (cmd)
                   '
000d8 036 fcdc0808 spi_in		rep	@.in,#8			'ready to input a byte
000dc 037 fd647849 		outh	#spi_ck			'clock high
000e0 038 fd647848 		outl	#spi_ck			'clock low
000e4 039 fd747640 		testp	#spi_dq		wc	'sample data bit ('testp' is from before 'outl')
000e8 03a f0a48001 		rcl	cmd,#1			'save data bit
000ec 03b          .in
000ec 03b fd64002d 		ret
                   '
                   '
                   ' Data
                   '
000f0 03c 20000000 cmd_erase	long	$20_00_00_00
000f4 03d 02000000 cmd_program	long	$02_00_00_00
000f8 03e 03000000 cmd_read	long	$03_00_00_00
000fc 03f 00000000 adr		long	0
                   '
                   '
                   ' Variables
                   '
00100 040          cmd		res	1
00100 041          x		res	1
00100 042          y		res	1
                   '
                   '
                   ' Program Data
                   '
                   ' first 20 bytes are blinker program:
                   '
                   '	not	dirb
                   '.lp	not	outb
                   '	waitx	##20_000_000/4
                   '	jmp	#.lp
                   '
                   ' next 4 bytes are long checksum ("Prop" minus sum of other longs)
                   '
00100              	orgh
                   
00100     f623f7fb pgmdata	byte	$FB,$F7,$23,$F6,$FD,$FB,$23,$F6,$25,$26,$80,$FF,$1F,$80,$66,$FD	'blinker program is 5 longs
00110     fd9ffff0 	byte	$F0,$FF,$9F,$FD,$24,$D8,$A0,$89,$00,$00,$00,$00,$00,$00,$00,$00	'last 4 bytes are long checksum
00120     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00130     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00140     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00150     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00160     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00170     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00180     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00190     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
001a0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
001b0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
001c0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
001d0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
001e0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
001f0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00200     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00210     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00220     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00230     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00240     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00250     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00260     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00270     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00280     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00290     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
002a0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
002b0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
002c0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
002d0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
002e0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
002f0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00300     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00310     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00320     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00330     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00340     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00350     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00360     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00370     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00380     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00390     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003a0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003b0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003c0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003d0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003e0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003f0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00400     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00410     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00420     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00430     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00440     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00450     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00460     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00470     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00480     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00490     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
004a0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
004b0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
004c0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
004d0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
004e0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
004f0     00000000 	byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
