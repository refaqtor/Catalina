con
	rx_pin = 63
	tx_pin = 62
	clock_freq = 80_000_000
	baud_rate = 115_200
	lr = $1f6
	hub_ram_kb = 32

dat
	orgh	0

'*******************************************************************************
'  COG Code
'*******************************************************************************
	org

start	mov	sp, ##hub_ram_kb*1024 - 64
	drvh    #tx_pin
	mov	lr, #start1
	jmp	#_main
start1	cogid	r0
	cogstop	r0

r0	long	0
r1	long	0
r2	long	0
r3	long	0
r4	long	0
r5	long	0
r6	long	0
r7	long	0
r8	long	0
r9	long	0
r10	long	0
r11	long	0
r12	long	0
r13	long	0
r14	long	0
sp	long	0

getch	mov     temp, bitcycles
	shr     temp, #1
	mov     temp1, #10
	mov	parm, #0
getch0	testb   inb, ##1 << (rx_pin & 31) wc
 if_c   jmp     #getch0
	getct   temp2
	addct1  temp2, temp
	waitct1
getch1	mov     temp, inb
	and     temp, inbit
	ror     parm, #1
	or      parm, temp
	addct1  temp2, bitcycles
	waitct1
	djnz    temp1, #getch1
	ror     parm, #31 - 8
	and     parm, #255
	ret

inbit	long    1 << (rx_pin & 31)
bitcycles long    clock_freq / baud_rate

putch	or      parm, #$100
	shl     parm, #1
	mov     temp1, #10
	getct   temp2
putch1	shr     parm, #1               wc
	drvc    #tx_pin
	addct1  temp2, bitcycles
	waitct1
	djnz    temp1, #putch1
	ret

parm	long    0
temp	long    0
temp1	long    0
temp2	long    0

putnl
	mov	parm, #13
	call	#putch
'	mov	parm, #10
'	call	#putch
	ret

__MULSI	qmul	r0, r1
	getqx	r0
	getqy	r1
	ret

__DIVSI	mov	temp, #0
	abs	r0, r0 wc
 if_c	mov	temp, #1
	abs	r1, r1 wc
 if_c	xor	temp, #1
	call	#__UDIVSI
	cmp	temp, #0 wz
 if_nz	neg	r0, r0
	ret

__UDIVSI qdiv	r0, r1
	getqx	r0
	getqy	r1
	ret

'*******************************************************************************
'  HUB Code
'*******************************************************************************
	orgh	$400

__clkfreq long clock_freq

_clock	getct	r0
	jmp	lr

___muldi3
	call	#__MULSI
	jmp	lr

___divdi3
	call	#__DIVSI
	jmp	lr

_atol
_atoi
	mov	r7, r0
	mov	r0, #0
	jmp	#_atoi2
_atoi1
	mov	r1, #10
	add	r7, #1
	call	#__MULSI
	add	r0, r6
	sub	r0, #48
_atoi2
	rdbyte	r6, r7
	mov	r5, r6
	sub	r5, #48
	cmp	r5, #9 wcz
 IF_BE	jmp	#_atoi1
	jmp	lr

___ctype
	byte	1, 1, 1, 1, 1, 1, 1, 1, 1, -111, 17, 17, 17, 17, 1, 1, 1, 1, 1
	byte	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -112, 32, 32, 32, 32
	byte	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 66, 66, 66, 66
	byte	66, 66, 66, 66, 66, 32, 32, 32, 32, 32, 32, 32, 68, 68, 68, 68
	byte	68, 68, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
	byte	4, 32, 32, 32, 32, 32, 32, 72, 72, 72, 72, 72, 72, 8, 8, 8, 8, 8
	byte	8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 32, 32, 32, 32, 1, 0

_toupper
	mov	r7, r0
	sub	r7, #97
	cmp	r7, #25 wcz
 IF_BE	sub	r0, #32
	jmp	lr

_tolower
	mov	r7, r0
	sub	r7, #65
	cmp	r7, #25 wcz
 IF_BE	add	r0, #32
	jmp	lr

_rand	getct	r0
	jmp	lr

_srand	jmp	lr

_exit	jmp	#start1

_sleep	mov	r1, ##clock_freq
	call	#__MULSI
	waitx	r0
	jmp	lr

_memset
	add	r2, #1
	jmp	#_memset2
_memset1
	wrbyte	r1, r0
	add	r0, #1
_memset2
	djnz	r2,#_memset1
	jmp	lr

_memcpy	cmp	r2, #0 wz
 if_z	jmp	lr
	rdbyte	temp, r1
	wrbyte	temp, r0
	add	r1, #1
	add	r0, #1
	sub	r2, #1
	jmp	#_memcpy

_strcmp
	rdbyte	r6, r0
	cmps	r6, #0 wcz
	add	r0, #1
	rdbyte	r7, r1
	add	r1, #1
 if_ne	jmp	#_strcmp1
	neg	r0, r7
	jmp	lr
_strcmp1
	cmps	r6, r7 wcz
 if_e 	jmp	#_strcmp
	mov	r0, r6
	sub	r0, r7
	jmp	lr

_strncmp
	add	r2, #1
	jmp	#_strncmp2
_strncmp1
	rdbyte	r6, r0
	add	r0, #1
	rdbyte	r7, r1
	cmps	r6, r7 wcz
	add	r1, #1
 IF_E 	jmp	#_strncmp2
	mov	r0, r6
	sub	r0, r7
	jmp	lr
_strncmp2
	djnz	r2,#_strncmp1
	mov	r0, #0
	jmp	lr

_strcpy	rdbyte	r6, r1
	cmps	r6, #0 wz
	add	r1, #1
	wrbyte	r6, r0
	add	r0, #1
 if_nz	jmp	#_strcpy
	jmp	lr

_strlen	mov	r7, r0
	jmp	#_strle1
_strle0	add	r0, #1
_strle1	rdbyte	r6, r0
	cmps	r6, #0 wz
 if_nz	jmp	#_strle0
	sub	r0, r7
        jmp	lr

_getchar
	call	#getch
	mov	r0, parm
	jmp	lr

_gets	mov	r7, r0
_gets2	call	#getch
	mov	r6, parm
	cmp	r6, #8 wz
 if_nz	jmp	#_gets0
	cmp	r0, r7 wcz
 if_be	jmp	#_gets2
	mov	parm, #8
	call	#putch
	mov	parm, #" "
	call	#putch
	mov	parm, #8
	call	#putch
	sub	r0, #1
	jmp	#_gets2
_gets0	call	#putch
	cmp	r6, #13 wz
 if_nz	cmp	r6, #10 wz
 if_z	jmp	#_gets1
	wrbyte	r6, r0
	add	r0, #1
	jmp	#_gets2
_gets1	mov	r6, #0
	wrbyte	r6, r0
	mov	r0, r7
	jmp	lr

_putchar
	cmp	r0, #10 wz
 if_z	call	#putnl
 if_nz	mov	parm, r0
 if_nz	call	#putch
	jmp	lr

_puts	rdbyte  parm, r0  wz
 if_z	jmp	#_puts1
	add     r0, #1
	call    #putch
	jmp     #_puts
_puts1	call	#putnl
	jmp	lr

_PUTCW
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	mov	r13, r1
	mov	r14, r13
	calld	lr, #_putchar
	jmp	#_LPF2
_LPF3
	mov	r0, #32
	calld	lr, #_putchar
_LPF2
	sub	r14, #1
	cmps	r14, #0 wcz
	IF_A 	jmp	#_LPF3
	mov	r0, r13
	fges	r0, #1
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	jmp	lr
        alignl
_printf
	sub	sp, #4
	wrlong	r8, sp
	sub	sp, #4
	wrlong	r9, sp
	sub	sp, #4
	wrlong	r10, sp
	sub	sp, #4
	wrlong	r11, sp
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	sub	sp, #32
	mov	r7, sp
	add	r7, #64
	mov	r11, sp
	add	r11, #68
	mov	r13, #0
	mov	r8, ##_LPFC3
	rdlong	r12, r7
	jmp	#_LPF38
_LPF31
	mov	r7, r12
	cmps	r0, #37 wcz
	add	r7, #1
	IF_NE mov	r12, r7
	IF_NE mov	r1, #1
	IF_NE	jmp	#_LPF39
	rdbyte	r7, r7
	cmps	r7, #48 wcz
	mov	r6, #28
	IF_E  mov	r5,#48
	IF_NE mov	r5,#32
	add	r6, sp
	add	r12, #2
	mov	r14, #0
	wrlong	r5, r6
	jmp	#_LPF9
_LPF11
	mov	r0, r14
	mov	r1, #10
	sub	r7, #48
	call	#__MULSI
	mov	r14, r0
	add	r14, r7
	rdbyte	r7, r12
	add	r12, #1
_LPF9
	cmps	r7, #0 wcz
	IF_E 	jmp	#_LPF37
	mov	r6, r7
	cmps	r7, #"0" wcz
 IF_B   jmp	#_LPF37
	cmps	r7, #"9" wcz
 IF_A   jmp	#_LPF37
	jmp	#_LPF11
_LPF13
	rdbyte	r7, r12
	add	r12, #1
_LPF37
	cmps	r7, #76 wcz
	mov	r5, #0
	muxz	r5,#1
	mov	r6, #0
	cmps	r7, #108 wcz
	muxz	r6,#1
	mov	temp, r5
	or	temp, r6 wz
	IF_NE	jmp	#_LPF13
	cmps	r7, #0 wcz
	IF_E 	jmp	#_LPF14
	cmps	r7, #115 wcz
	IF_E 	jmp	#_LPF18
	cmp	r7, #115 wcz
	IF_A 	jmp	#_LPF19
	cmps	r7, #99 wcz
	IF_E 	jmp	#_LPF16
	cmps	r7, #100 wcz
	IF_E 	jmp	#_LPF17
	cmps	r7, #37 wcz
	IF_NE	jmp	#_LPF38
	jmp	#_LPF40
_LPF19
	cmps	r7, #117 wcz
	IF_E 	jmp	#_LPF17
	cmps	r7, #120 wcz
	IF_NE	jmp	#_LPF38
	jmp	#_LPF35
_LPF40
	mov	r0, #37
	mov	r1, r14
_LPF39
	calld	lr, #_PUTCW
	add	r13, r0
	jmp	#_LPF38
_LPF16
	mov	r10, r11
	mov	r1, r14
	add	r10, #4
	rdlong	r0, r11
	mov	r11, r10
	calld	lr, #_PUTCW
	add	r13, r0
	jmp	#_LPF38
_LPF18
	mov	r6, r11
	mov	r7, #24
	add	r6, #4
	add	r7, sp
	rdlong	r10, r11
	mov	r11, #0
	wrlong	r6, r7
	jmp	#_LPF20
_LPF21
	add	r10, #1
	add	r11, #1
	calld	lr, #_putchar
_LPF20
	mov	r9, r14
	sub	r9, r11
	rdbyte	r0, r10 wz
	IF_NE	jmp	#_LPF21
	mov	r14, r9
	jmp	#_LPF22
_LPF23
	mov	r0, #32
	sub	r14, #1
	calld	lr, #_putchar
_LPF22
	cmps	r14, #0 wcz
	IF_A 	jmp	#_LPF23
	mov	r7, r9
	fges	r7, #0
	mov	r5, #24
	add	r7, r11
	add	r5, sp
	add	r13, r7
	rdlong	r11, r5
	jmp	#_LPF38
_LPF17
	cmps	r7, #120 wcz
	IF_NE mov	r9, #10
	IF_NE	jmp	#_LPF24
_LPF35
	mov	r9, #16
_LPF24
	mov	r6, r11
	mov	r5, #24
	add	r6, #4
	add	r5, sp
	cmps	r7, #100 wcz
	wrlong	r6, r5
	rdlong	r11, r11
	IF_NE	jmp	#_LPF25
	cmps	r11, #0 wcz
	IF_AE	jmp	#_LPF25
	mov	r0, #45
	mov	r1, #1
	sub	r14, #1
	neg	r11, r11
	calld	lr, #_PUTCW
	add	r13, r0
_LPF25
	mov	r10, sp
_LPF26
	mov	r0, r11
	mov	r1, r9
	sub	r14, #1
	call	#__UDIVSI
	mov	r7, r1
	mov	r0, r11
	add	r7, r8
	mov	r1, r9
	call	#__UDIVSI
	rdbyte	r7, r7
	cmps	r0, #0 wcz
	mov	r11, r0
	wrbyte	r7, r10
	add	r10, #1
	IF_NE	jmp	#_LPF26
	mov	r11, r14
	jmp	#_LPF27
_LPF28
	mov	r6, #28
	add	r6, sp
	sub	r11, #1
	rdlong	r0, r6
	calld	lr, #_putchar
_LPF27
	cmps	r11, #0 wcz
	IF_A 	jmp	#_LPF28
	fges	r14, #0
	mov	r7, r10
	mov	r9, sp
	jmp	#_LPF29
_LPF30
	mov	r11, r7
	sub	r11, #1
	rdbyte	r0, r11
	calld	lr, #_putchar
	mov	r7, r11
_LPF29
	cmps	r7, r9 wcz
	IF_NE	jmp	#_LPF30
	sub	r10, r7
	mov	r7, #24
	add	r10, r14
	add	r7, sp
	add	r13, r10
	rdlong	r11, r7
_LPF38
	rdbyte	r0, r12 wz
	IF_NE	jmp	#_LPF31
_LPF14
	mov	r0, r13
	add	sp, #32
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	rdlong	r11, sp
	add	sp, #4
	rdlong	r10, sp
	add	sp, #4
	rdlong	r9, sp
	add	sp, #4
	rdlong	r8, sp
	add	sp, #4
	jmp	lr

_LPFC3	byte "0123456789ABCDEF", 0
        alignl

'*******************************************************************************
'  Program Code
'*******************************************************************************

	alignl
_LC0
	byte "Invalid piece", 0
	alignl
_Invalid
	sub	sp, #4
	wrlong	lr, sp
	rdlong	r0, ##_LC1
	calld	lr,#_puts
	mov	r0, #1
	calld	lr,#_exit
	alignl
_LC1
	long	_LC0
	alignl
_PositionToString
	mov	r1, #12
	mov	r5, r0
	rdlong	r7, ##_LC2
	mov	r4, r7
	call	#__DIVSI
	mov	r6, r1
	mov	r0, r5
	mov	r1, #12
	mov	r3, r7
	call	#__DIVSI
	mov	r5, #58
	sub	r5, r0
	add	r6, #95
	add	r4, #1
	add	r3, #2
	mov	r2, #0
	mov	r0, r7
	wrbyte	r2, r3
	wrbyte	r6, r7
	wrbyte	r5, r4
	jmp	lr
	alignl
_LC2
	long	_str_1918
	alignl
_StringToPostion
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	mov	r14, r0
	add	r14, #1
	rdbyte	r0, r0
	calld	lr,#_tolower
	mov	r5, r0
	sub	r5, #97
	cmp	r5, #7 wcz
	IF_A  mov	r4,#1
	IF_BE mov	r4,#0
	rdbyte	r6, r14
	sub	r6, #49
	cmp	r6, #7 wcz
	IF_A  mov	r7,#1
	IF_BE mov	r7,#0
	mov	temp, r4
	or	temp, r7 wz
	IF_E  mov	r7, r6
	IF_E  shl	r7, #2
	IF_E  shl	r6, #4
	IF_E  sub	r7, r6
	IF_E  add	r7, #110
	IF_E  add	r7, r5
	IF_NE neg	r7, #1
	mov	r0, r7
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	jmp	lr
	alignl
_LC7
	byte 10," ", 0
	alignl
_LC9
	byte "|%c ", 0
	alignl
_LC11
	byte 10,"-+--+--+--+--+--+--+--+--+", 0
	alignl
_LC13
	byte 10,"%c", 0
	alignl
_LC15
	byte "|%c", 0
	alignl
_LC18
	byte "|--", 0
	alignl
_LC20
	byte "|  ", 0
	alignl
_LC22
	byte 10, 0
	alignl
_PrintBoard
	sub	sp, #4
	wrlong	r8, sp
	sub	sp, #4
	wrlong	r9, sp
	sub	sp, #4
	wrlong	r10, sp
	sub	sp, #4
	wrlong	r11, sp
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	sub	sp, #8
	mov	r11, sp
	mov	r10, r0
	mov	r14, #97
	add	r11, #4
	rdlong	temp, ##_LC8
	wrlong	temp, sp
	calld	lr,#_printf
	rdlong	r13, ##_LC10
_L7
	wrlong	r13, sp
	wrlong	r14, r11
	add	r14, #1
	calld	lr,#_printf
	cmps	r14, #105 wcz
	IF_NE	jmp	#_L7
	mov	r0, #124
	add	r10, #26
	mov	r12, #0
	calld	lr,#_putchar
	rdlong	r8, ##_LC21
	rdlong	r9, ##_LC19
_L13
	rdlong	temp, ##_LC12
	wrlong	temp, sp
	mov	r13, r10
	mov	r14, #2
	calld	lr,#_printf
	mov	r7, #56
	sub	r7, r12
	rdlong	temp, ##_LC14
	wrlong	temp, sp
	wrlong	r7, r11
	calld	lr,#_printf
	jmp	#_L12
_L8
	test	r7,#$1 wz
	add	r14, #1
	add	r13, #1
	IF_NE wrlong	r9, sp
	IF_E  wrlong	r8, sp
	calld	lr,#_printf
	cmps	r14, #10 wcz
	IF_E 	jmp	#_L18
_L12
	mov	r7, r14
	xor	r7, r12
	rdbyte	r6, r13 wz
	IF_E 	jmp	#_L8
	rdlong	r5, ##_LC17
	and	r6, #7
	add	r14, #1
	rdlong	r7, r5
	add	r7, r6
	rdlong	r6, ##_LC16
	wrlong	r6, sp
	rdbyte	r7, r7
	wrlong	r7, r11
	calld	lr,#_printf
	rdbyte	r7, r13
	shl	r7, #24
	cmps	r7, #0 wcz
	IF_B  mov	r0, #87
	IF_AE mov	r0, #66
	add	r13, #1
	calld	lr,#_putchar
	cmps	r14, #10 wcz
	IF_NE	jmp	#_L12
_L18
	mov	r0, #124
	add	r12, #1
	add	r10, #12
	calld	lr,#_putchar
	cmps	r12, #8 wcz
	IF_NE	jmp	#_L13
	rdlong	temp, ##_LC12
	wrlong	temp, sp
	calld	lr,#_printf
	rdlong	r0, ##_LC23
	calld	lr,#_puts
	add	sp, #8
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	rdlong	r11, sp
	add	sp, #4
	rdlong	r10, sp
	add	sp, #4
	rdlong	r9, sp
	add	sp, #4
	rdlong	r8, sp
	add	sp, #4
	jmp	lr
	alignl
_LC8
	long	_LC7
	alignl
_LC10
	long	_LC9
	alignl
_LC12
	long	_LC11
	alignl
_LC14
	long	_LC13
	alignl
_LC16
	long	_LC15
	alignl
_LC17
	long	_symbols
	alignl
_LC19
	long	_LC18
	alignl
_LC21
	long	_LC20
	alignl
_LC23
	long	_LC22
	alignl
_IsMyPiece
	add	r1, r0
	rdbyte	r7, r1 wz
	IF_E 	jmp	#_L22
	cmps	r7, #255 wcz
	IF_E 	jmp	#_L23
	add	r0, #148
	and	r7, #128
	rdbyte	r6, r0
	cmps	r7, r6 wcz
	mov	r0, #0
	muxz	r0,#1
	jmp	lr
_L22
	mov	r0, #0
	jmp	lr
_L23
	mov	r0, #0
	jmp	lr
	alignl
_IsOtherPiece
	add	r1, r0
	rdbyte	r7, r1 wz
	IF_E 	jmp	#_L27
	cmps	r7, #255 wcz
	IF_E 	jmp	#_L28
	add	r0, #148
	and	r7, #128
	rdbyte	r6, r0
	cmps	r7, r6 wcz
	mov	r0, #0
	muxnz	r0,#1
	jmp	lr
_L27
	mov	r0, #0
	jmp	lr
_L28
	mov	r0, #0
	jmp	lr
	alignl
_IsMoveOK
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	mov	r13, r0
	mov	r14, r1
	calld	lr,#_IsMyPiece
	cmps	r0, #0 wcz
	IF_NE mov	r0, #0
	IF_NE	jmp	#_L30
	add	r14, r13
	mov	r0, #0
	rdbyte	r7, r14
	cmps	r7, #255 wcz
	muxnz	r0,#1
_L30
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	jmp	lr
	alignl
_Knight
	sub	sp, #4
	wrlong	r9, sp
	sub	sp, #4
	wrlong	r10, sp
	sub	sp, #4
	wrlong	r11, sp
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	rdlong	r14, ##_LC26
	mov	r10, r14
	mov	r12, r0
	mov	r11, r0
	mov	r13, r0
	add	r10, #32
	add	r12, #150
	add	r11, #151
	rdlong	r9, ##_LC27
_L34
	rdlong	r1, r14
	mov	r0, r13
	add	r14, #4
	rdbyte	r7, r12
	add	r1, r7
	mov	r7, r1
	and	r7,#255
	mov	r1, r7
	wrbyte	r7, r11
	calld	lr,#_IsMoveOK
	cmps	r0, #0 wcz
	mov	r7, r0
	IF_NE mov	r0, r13
	IF_NE rdlong	r7, r9
	IF_NE calld	lr,r7
	cmps	r14, r10 wcz
	IF_NE	jmp	#_L34
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	rdlong	r11, sp
	add	sp, #4
	rdlong	r10, sp
	add	sp, #4
	rdlong	r9, sp
	add	sp, #4
	jmp	lr
	alignl
_LC26
	long	_knight_moves
	alignl
_LC27
	long	_MoveFunction
	alignl
_Pawn
	sub	sp, #4
	wrlong	r9, sp
	sub	sp, #4
	wrlong	r10, sp
	sub	sp, #4
	wrlong	r11, sp
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	mov	r7, r0
	add	r7, #148
	mov	r10, r0
	add	r10, #150
	mov	r13, r0
	add	r13, #151
	mov	r14, r0
	rdbyte	r7, r7
	cmps	r7, #0 wcz
	IF_NE mov	r9,#244
	IF_E  mov	r9,#12
	rdbyte	r12, r10
	sub	r12, #1
	mov	r11, r9
	add	r11, r12
	and	r11,#255
	mov	r1, r11
	wrbyte	r11, r13
	calld	lr,#_IsOtherPiece
	cmps	r0, #0 wcz
	IF_NE	jmp	#_L38
	mov	r7, r14
	add	r7, #156
	rdbyte	r7, r7
	cmps	r7, r12 wcz
	IF_E 	jmp	#_L38
_L39
	mov	r12, r11
	add	r12, #2
	and	r12,#255
	mov	r0, r14
	mov	r1, r12
	wrbyte	r12, r13
	calld	lr,#_IsOtherPiece
	cmps	r0, #0 wcz
	IF_NE	jmp	#_L40
	mov	r6, r14
	add	r6, #156
	rdbyte	r7, r10
	add	r7, #1
	rdbyte	r6, r6
	cmps	r6, r7 wcz
	IF_E 	jmp	#_L40
_L41
	sub	r12, #1
	and	r12,#255
	mov	r0, r14
	mov	r1, r12
	wrbyte	r12, r13
	calld	lr,#_IsMoveOK
	cmps	r0, #0 wcz
	IF_E 	jmp	#_L36
	mov	r0, r14
	mov	r1, r12
	calld	lr,#_IsOtherPiece
	cmps	r0, #0 wcz
	IF_E 	jmp	#_L44
_L36
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	rdlong	r11, sp
	add	sp, #4
	rdlong	r10, sp
	add	sp, #4
	rdlong	r9, sp
	add	sp, #4
	jmp	lr
_L44
	rdlong	r12, ##_LC29
	mov	r0, r14
	rdlong	r7, r12
	calld	lr,r7
	rdbyte	r7, r10
	add	r7, r14
	rdbyte	r7, r7
	test	r7,#$40 wz
	IF_NE	jmp	#_L36
	rdbyte	r7, r13
	add	r9, r7
	and	r9,#255
	wrbyte	r9, r13
	mov	r0, r14
	mov	r1, r9
	calld	lr,#_IsMoveOK
	cmps	r0, #0 wcz
	IF_E 	jmp	#_L36
	mov	r0, r14
	mov	r1, r9
	calld	lr,#_IsOtherPiece
	cmps	r0, #0 wcz
	IF_E  mov	r0, r14
	IF_E  rdlong	r7, r12
	IF_E  calld	lr,r7
	jmp	#_L36
_L40
	mov	r0, r14
	rdlong	temp, ##_LC29
	rdlong	r7, temp
	calld	lr,r7
	rdbyte	r12, r13
	jmp	#_L41
_L38
	mov	r0, r14
	rdlong	temp, ##_LC29
	rdlong	r7, temp
	calld	lr,r7
	rdbyte	r11, r13
	jmp	#_L39
	alignl
_LC29
	long	_MoveFunction
	alignl
_AnalyzeDirectionalMoves
	sub	sp, #4
	wrlong	r10, sp
	sub	sp, #4
	wrlong	r11, sp
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	mov	r7, r0
	add	r7, #150
	mov	r10, r1
	mov	r12, r0
	mov	r14, r0
	and	r10,#255
	add	r12, #151
	rdlong	r11, ##_LC30
	rdbyte	r13, r7
	jmp	#_L47
_L49
	rdbyte	r7, r13
	cmps	r7, #255 wcz
	IF_E 	jmp	#_L45
	rdlong	r7, r11
	calld	lr,r7
	mov	r7, r14
	rdbyte	r13, r12
	add	r7, r13
	rdbyte	r7, r7
	cmps	r7, #0 wcz
	IF_NE	jmp	#_L45
_L47
	add	r13, r10
	and	r13,#255
	mov	r1, r13
	mov	r0, r14
	wrbyte	r13, r12
	add	r13, r14
	calld	lr,#_IsMyPiece
	mov	r7, r0
	cmps	r7, #0 wcz
	mov	r0, r14
	IF_E 	jmp	#_L49
_L45
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	rdlong	r11, sp
	add	sp, #4
	rdlong	r10, sp
	add	sp, #4
	jmp	lr
	alignl
_LC30
	long	_MoveFunction
	alignl
_Queen
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	rdlong	r14, ##_LC31
	mov	r13, r14
	mov	r12, r0
	add	r13, #32
_L51
	rdlong	r1, r14
	mov	r0, r12
	add	r14, #4
	calld	lr,#_AnalyzeDirectionalMoves
	cmps	r14, r13 wcz
	IF_NE	jmp	#_L51
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	jmp	lr
	alignl
_LC31
	long	_king_moves
	alignl
_Rook
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	rdlong	r14, ##_LC33
	mov	r13, r14
	mov	r12, r0
	add	r13, #16
_L54
	rdlong	r1, r14
	mov	r0, r12
	add	r14, #4
	calld	lr,#_AnalyzeDirectionalMoves
	cmps	r14, r13 wcz
	IF_NE	jmp	#_L54
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	jmp	lr
	alignl
_LC33
	long	_king_moves+16
	alignl
_Bishop
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	rdlong	r14, ##_LC36
	mov	r13, r14
	mov	r12, r0
	add	r13, #16
_L57
	rdlong	r1, r14
	mov	r0, r12
	add	r14, #4
	calld	lr,#_AnalyzeDirectionalMoves
	cmps	r14, r13 wcz
	IF_NE	jmp	#_L57
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	jmp	lr
	alignl
_LC36
	long	_king_moves
	alignl
_IsCheck
	sub	sp, #4
	wrlong	lr, sp
	mov	r7, r0
	add	r7, #148
	rdbyte	r1, r7 wz
	IF_E  mov	r7, r0
	IF_NE add	r7, #6
	IF_E  add	r7, #155
	IF_NE neg	r5, #11
	IF_E  mov	r5, #13
	xor	r1, #128
	mov	r6, r1
	or	r6, #1
	IF_NE neg	r3, #12
	IF_E  mov	r3, #12
	rdbyte	r4, r7
	add	r4, r0
	add	r5, r4
	rdbyte	r7, r5
	and	r7, #135
	cmps	r7, r6 wcz
	IF_E 	jmp	#_L75
	mov	r7, r4
	add	r7, r3
	sub	r7, #1
	rdbyte	r7, r7
	and	r7, #135
	cmps	r6, r7 wcz
	IF_E 	jmp	#_L75
	mov	r3, r1
	or	r3, #2
	rdlong	r6, ##_LC38
	mov	r5, #8
	'' loop_start register r5 level #1
_L63
	rdlong	r7, r6
	add	r7, r4
	add	r6, #4
	rdbyte	r7, r7
	and	r7, #135
	cmps	r7, r3 wcz
	IF_E 	jmp	#_L75
	djnz	r5,#_L63
	mov	lr, r1
	or	lr, #6
	rdlong	r2, ##_LC39
	mov	r3, #0
_L68
	rdlong	r6, r2
	mov	r7, r4
	add	r7, r6
	rdbyte	r7, r7
	mov	r0, r7
	and	r0, #135
	cmps	r0, lr wcz
	mov	r5, r7
	IF_E 	jmp	#_L75
	cmps	r7, #0 wcz
	IF_NE	jmp	#_L64
	mov	r7, r6
	shl	r7, #1
	add	r7, r4
_L65
	add	r7, r6
	mov	r5, r7
	sub	r5, r6
	rdbyte	r5, r5 wz
	IF_E 	jmp	#_L65
_L64
	mov	r7, r5
	and	r7, #128
	cmps	r7, r1 wcz
	IF_E 	jmp	#_L79
_L66
	add	r3, #1
	cmps	r3, #8 wcz
	add	r2, #4
	IF_NE	jmp	#_L68
	mov	r0, #0
	rdlong	lr, sp
	add	sp, #4
	jmp	lr
_L79
	and	r5, #7
	cmps	r5, #5 wcz
	IF_E 	jmp	#_L75
	cmps	r3, #3 wcz
	IF_A 	jmp	#_L67
	cmps	r5, #3 wcz
	IF_NE	jmp	#_L66
_L75
	mov	r0, #1
	rdlong	lr, sp
	add	sp, #4
	jmp	lr
_L67
	cmps	r5, #4 wcz
	IF_NE	jmp	#_L66
	jmp	#_L75
	alignl
_LC38
	long	_knight_moves
	alignl
_LC39
	long	_king_moves
	alignl
_IsSpaceUnderAttack
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	mov	r7, r0
	add	r7, #148
	rdbyte	r7, r7
	mov	r14, r0
	cmps	r7, #0 wcz
	IF_NE add	r14, #154
	IF_E  add	r14, #155
	rdbyte	r13, r14
	wrbyte	r1, r14
	calld	lr,#_IsCheck
	wrbyte	r13, r14
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	jmp	lr
	alignl
_CastleRight
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	mov	r12, r0
	add	r12, #150
	rdbyte	r13, r12
	mov	r7, r0
	add	r7, r13
	mov	r6, r7
	add	r6, #1
	mov	r14, r0
	rdbyte	r6, r6
	cmps	r6, #0 wcz
	IF_NE	jmp	#_L83
	mov	r6, r7
	add	r6, #2
	rdbyte	r6, r6
	cmps	r6, #0 wcz
	IF_NE	jmp	#_L83
	add	r7, #3
	rdbyte	r7, r7
	test	r7,#$40 wz
	IF_E 	jmp	#_L85
_L83
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	jmp	lr
_L85
	calld	lr,#_IsCheck
	cmps	r0, #0 wcz
	IF_NE	jmp	#_L83
	mov	r1, r13
	add	r1, #1
	mov	r0, r14
	calld	lr,#_IsSpaceUnderAttack
	cmps	r0, #0 wcz
	IF_NE	jmp	#_L83
	rdbyte	r6, r12
	mov	r7, r14
	add	r6, #2
	add	r7, #151
	mov	r0, r14
	wrbyte	r6, r7
	rdlong	temp, ##_LC40
	rdlong	r7, temp
	calld	lr,r7
	jmp	#_L83
	alignl
_LC40
	long	_MoveFunction
	alignl
_CastleLeft
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	mov	r12, r0
	add	r12, #150
	rdbyte	r13, r12
	mov	r7, r0
	add	r7, r13
	mov	r6, r7
	sub	r6, #1
	mov	r14, r0
	rdbyte	r6, r6
	cmps	r6, #0 wcz
	IF_NE	jmp	#_L86
	mov	r6, r7
	sub	r6, #2
	rdbyte	r6, r6
	cmps	r6, #0 wcz
	IF_NE	jmp	#_L86
	mov	r6, r7
	sub	r6, #3
	rdbyte	r6, r6
	cmps	r6, #0 wcz
	IF_NE	jmp	#_L86
	sub	r7, #4
	rdbyte	r7, r7
	test	r7,#$40 wz
	IF_E 	jmp	#_L88
_L86
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	jmp	lr
_L88
	calld	lr,#_IsCheck
	cmps	r0, #0 wcz
	IF_NE	jmp	#_L86
	mov	r1, r13
	sub	r1, #1
	mov	r0, r14
	calld	lr,#_IsSpaceUnderAttack
	cmps	r0, #0 wcz
	IF_NE	jmp	#_L86
	rdbyte	r6, r12
	mov	r7, r14
	sub	r6, #2
	add	r7, #151
	mov	r0, r14
	wrbyte	r6, r7
	rdlong	temp, ##_LC41
	rdlong	r7, temp
	calld	lr,r7
	jmp	#_L86
	alignl
_LC41
	long	_MoveFunction
	alignl
_King
	sub	sp, #4
	wrlong	r8, sp
	sub	sp, #4
	wrlong	r9, sp
	sub	sp, #4
	wrlong	r10, sp
	sub	sp, #4
	wrlong	r11, sp
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	rdlong	r14, ##_LC42
	mov	r8, r0
	add	r8, #150
	mov	r10, r14
	mov	r11, r0
	mov	r13, r0
	add	r10, #32
	add	r11, #151
	rdlong	r9, ##_LC43
	rdbyte	r12, r8
	jmp	#_L91
_L90
	cmps	r14, r10 wcz
	IF_E 	jmp	#_L94
_L91
	rdlong	r1, r14
	add	r1, r12
	mov	r7, r1
	and	r7,#255
	mov	r1, r7
	mov	r0, r13
	add	r14, #4
	wrbyte	r7, r11
	calld	lr,#_IsMoveOK
	cmps	r0, #0 wcz
	IF_E 	jmp	#_L90
	rdlong	r7, r9
	mov	r0, r13
	calld	lr,r7
	cmps	r14, r10 wcz
	rdbyte	r12, r8
	IF_NE	jmp	#_L91
_L94
	add	r12, r13
	rdbyte	r7, r12
	test	r7,#$40 wz
	IF_NE	jmp	#_L89
	mov	r0, r13
	calld	lr,#_CastleRight
	mov	r0, r13
	calld	lr,#_CastleLeft
_L89
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	rdlong	r11, sp
	add	sp, #4
	rdlong	r10, sp
	add	sp, #4
	rdlong	r9, sp
	add	sp, #4
	rdlong	r8, sp
	add	sp, #4
	jmp	lr
	alignl
_LC42
	long	_king_moves
	alignl
_LC43
	long	_MoveFunction
	alignl
_MoveIfMyPiece
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	mov	r7, r0
	add	r7, #150
	rdbyte	r13, r7
	mov	r1, r13
	mov	r14, r0
	calld	lr,#_IsMyPiece
	cmps	r0, #0 wcz
	IF_E 	jmp	#_L95
	add	r13, r14
	mov	r0, r14
	rdbyte	r7, r13
	and	r7, #7
	shl	r7, #2
	rdlong	temp, ##_LC45
	add	r7, temp
	rdlong	r7, r7
	calld	lr,r7
_L95
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	jmp	lr
	alignl
_LC45
	long	_PieceFunctions
	alignl
_AnalyzeAllMoves
	sub	sp, #4
	wrlong	r10, sp
	sub	sp, #4
	wrlong	r11, sp
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	mov	r7, r0
	add	r7, #148
	rdbyte	r7, r7 wz
	mov	r14, r0
	add	r14, #150
	IF_NE mov	r10,#236
	IF_E  mov	r10,#4
	cmps	r7, #0 wcz
	mov	r12, r0
	mov	r11, #8
	IF_NE mov	r7,#110
	IF_E  mov	r7,#26
	wrbyte	r7, r14
_L99
	mov	r13, #8
_L100
	mov	r0, r12
	calld	lr,#_MoveIfMyPiece
	rdbyte	r7, r14
	add	r7, #1
	and	r7,#255
	wrbyte	r7, r14
	djnz	r13,#_L100
	add	r7, r10
	sub	r11, #1 wz
	wrbyte	r7, r14
	IF_NE	jmp	#_L99
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	rdlong	r11, sp
	add	sp, #4
	rdlong	r10, sp
	add	sp, #4
	jmp	lr
	alignl
_LC47
	byte "RemovePiece: %d is out of bounds", 10, 0
	alignl
_RemovePiece
	sub	sp, #4
	wrlong	lr, sp
	sub	sp, #8
	mov	r5, r0
	add	r5, r1
	rdbyte	r6, r5
	mov	r7, r6
	and	r7, #7
	shl	r7, #2
	mov	r4, r7
	rdlong	temp, ##_LC46
	add	r4, temp
	cmps	r6, #0 wcz
	rdlong	r4, r4
	IF_E 	jmp	#_L104
	cmps	r6, #255 wcz
	IF_E 	jmp	#_L109
	test	r6,#$80 wz
	rdlong	temp, ##_LC49
	add	r7, temp
	IF_NE	jmp	#_L110
	mov	r6, #119
	sub	r6, r1
	add	r0, #144
	rdlong	r7, r7
	add	r7, r6
	rdbyte	r7, r7
	shl	r7, #24
	sar	r7, #24
	rdword	r6, r0
	add	r7, r4
	add	r7, r6
	wrword	r7, r0
_L108
	mov	r7, #0
	wrbyte	r7, r5
_L104
	add	sp, #8
	rdlong	lr, sp
	add	sp, #4
	jmp	lr
_L110
	rdlong	r7, r7
	add	r7, r1
	sub	r7, #24
	rdbyte	r7, r7
	add	r0, #144
	shl	r7, #24
	rdword	r6, r0
	sar	r7, #24
	add	r7, r4
	mov	r4, r6
	sub	r4, r7
	wrword	r4, r0
	jmp	#_L108
_L109
	mov	r7, sp
	add	r7, #4
	rdlong	temp, ##_LC48
	wrlong	temp, sp
	wrlong	r1, r7
	calld	lr,#_printf
	mov	r0, #1
	calld	lr,#_exit
	alignl
_LC46
	long	_values
	alignl
_LC48
	long	_LC47
	alignl
_LC49
	long	_pos_values
	alignl
_LC51
	byte "AddPiece: %d occupied", 10, 0
	alignl
_AddPiece
	sub	sp, #4
	wrlong	lr, sp
	sub	sp, #8
	mov	r7, r2
	and	r7, #7
	mov	r5, r0
	shl	r7, #2
	add	r5, r1
	mov	r4, r7
	rdlong	temp, ##_LC50
	add	r4, temp
	rdbyte	r6, r5
	cmps	r6, #0 wcz
	rdlong	r4, r4
	IF_NE	jmp	#_L115
	test	r2,#$80 wz
	rdlong	temp, ##_LC53
	add	r7, temp
	IF_NE	jmp	#_L116
	mov	r6, #119
	sub	r6, r1
	add	r0, #144
	or	r2, #64
	rdlong	r7, r7
	add	r7, r6
	rdbyte	r7, r7
	shl	r7, #24
	sar	r7, #24
	rdword	r6, r0
	add	r7, r4
	mov	r4, r6
	sub	r4, r7
	wrword	r4, r0
	wrbyte	r2, r5
	add	sp, #8
	rdlong	lr, sp
	add	sp, #4
	jmp	lr
_L116
	rdlong	r7, r7
	add	r7, r1
	sub	r7, #24
	rdbyte	r7, r7
	shl	r7, #24
	add	r0, #144
	sar	r7, #24
	add	r7, r4
	or	r2, #64
	rdword	r6, r0
	add	r7, r6
	wrword	r7, r0
	wrbyte	r2, r5
	add	sp, #8
	rdlong	lr, sp
	add	sp, #4
	jmp	lr
_L115
	mov	r7, sp
	add	r7, #4
	rdlong	temp, ##_LC52
	wrlong	temp, sp
	wrlong	r1, r7
	calld	lr,#_printf
	mov	r0, #1
	calld	lr,#_exit
	alignl
_LC50
	long	_values
	alignl
_LC52
	long	_LC51
	alignl
_LC53
	long	_pos_values
	alignl
_LC54
	byte "MovePiece: %d is out of bounds", 10, 0
	alignl
_MovePiece
	sub	sp, #4
	wrlong	r11, sp
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	sub	sp, #8
	mov	r7, r0
	mov	r6, r0
	add	r7, r1
	add	r6, r2
	mov	r14, r0
	mov	r13, r1
	mov	r12, r2
	rdbyte	r11, r7 wz
	rdbyte	r6, r6
	IF_E 	jmp	#_L117
	cmps	r11, #255 wcz
	IF_E 	jmp	#_L121
	cmps	r6, #0 wcz
	IF_NE mov	r1, r2
	IF_NE mov	r0, r0
	IF_NE calld	lr,#_RemovePiece
	mov	r0, r14
	mov	r1, r13
	calld	lr,#_RemovePiece
	mov	r0, r14
	mov	r1, r12
	mov	r2, r11
	calld	lr,#_AddPiece
_L117
	add	sp, #8
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	rdlong	r11, sp
	add	sp, #4
	jmp	lr
_L121
	mov	r7, sp
	add	r7, #4
	rdlong	temp, ##_LC55
	wrlong	temp, sp
	wrlong	r1, r7
	calld	lr,#_printf
	mov	r0, #1
	calld	lr,#_exit
	alignl
_LC55
	long	_LC54
	alignl
_LC56
	byte "CASTLE RIGHT", 10, 0
	alignl
_LC58
	byte "CASTLE LEFT", 10, 0
	alignl
_LC60
	byte "EN PASSANT", 10, 0
	alignl
_PerformMove
	sub	sp, #4
	wrlong	r9, sp
	sub	sp, #4
	wrlong	r10, sp
	sub	sp, #4
	wrlong	r11, sp
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	mov	r13, r0
	add	r13, #151
	mov	r12, r0
	mov	r7, r0
	add	r12, #150
	mov	r11, r0
	add	r11, #156
	mov	r4, r0
	mov	r3, #0
	mov	r14, r0
	rdbyte	r6, r13
	add	r7, r6
	rdbyte	r5, r12
	add	r4, r5
	rdbyte	r7, r7
	cmps	r7, #0 wcz
	rdbyte	r9, r11
	wrbyte	r3, r11
	rdbyte	r10, r4
	IF_NE	jmp	#_L145
	mov	r7, r10
	and	r7, #7
	cmps	r7, #6 wcz
	IF_E 	jmp	#_L146
_L124
	cmps	r7, #1 wcz
	mov	r2, r6
	mov	r7, r5
	IF_NE	jmp	#_L134
	test	r10,#$80 wz
	mov	r4, r5
	IF_E 	jmp	#_L132
	sub	r4, #24
	cmps	r6, r4 wcz
	IF_E 	jmp	#_L141
	mov	r4, r9
	sub	r4, #12
	cmps	r6, r4 wcz
	IF_E 	jmp	#_L144
	cmp	r6, #33 wcz
	IF_BE	jmp	#_L147
_L134
	mov	r0, r14
	mov	r1, r7
	calld	lr,#_MovePiece
_L122
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	rdlong	r11, sp
	add	sp, #4
	rdlong	r10, sp
	add	sp, #4
	rdlong	r9, sp
	add	sp, #4
	jmp	lr
_L145
	mov	r1, r6
	calld	lr,#_RemovePiece
	mov	r7, r10
	and	r7, #7
	cmps	r7, #6 wcz
	rdbyte	r6, r13
	rdbyte	r5, r12
	IF_NE	jmp	#_L124
_L146
	mov	r7, r14
	test	r10,#$80 wz
	IF_NE add	r7, #154
	IF_E  add	r7, #155
	mov	r2, r6
	wrbyte	r6, r7
	mov	r6, r5
	add	r6, #2
	cmps	r2, r6 wcz
	mov	r7, r5
	IF_E 	jmp	#_L148
_L127
	mov	r6, r7
	sub	r6, #2
	cmps	r6, r2 wcz
	IF_NE	jmp	#_L134
	mov	r6, r14
	add	r6, #149
	rdbyte	r6, r6
	cmps	r6, #0 wcz
	IF_E 	jmp	#_L149
_L130
	mov	r1, r7
	mov	r2, r7
	sub	r2, #1
	sub	r1, #4
	mov	r0, r14
	calld	lr,#_MovePiece
	rdbyte	r7, r12
	rdbyte	r2, r13
	jmp	#_L134
_L132
	add	r4, #24
	cmps	r6, r4 wcz
	IF_E 	jmp	#_L141
	mov	r4, r9
	add	r4, #12
	cmps	r6, r4 wcz
	IF_E 	jmp	#_L144
	cmp	r6, #109 wcz
	IF_BE	jmp	#_L134
	mov	r0, r14
	mov	r1, r5
	calld	lr,#_RemovePiece
	rdbyte	r1, r13
	mov	r0, r14
	mov	r2, #5
	calld	lr,#_AddPiece
	jmp	#_L122
_L141
	wrbyte	r2, r11
	jmp	#_L134
_L144
	mov	r7, r14
	add	r7, #149
	rdbyte	r7, r7
	cmps	r7, #0 wcz
	IF_E  rdlong	r0, ##_LC61
	IF_E  calld	lr,#_puts
	mov	r0, r14
	mov	r1, r9
	calld	lr,#_RemovePiece
	rdbyte	r7, r12
	rdbyte	r2, r13
	jmp	#_L134
_L148
	mov	r6, r14
	add	r6, #149
	rdbyte	r6, r6
	cmps	r6, #0 wcz
	IF_E 	jmp	#_L150
_L128
	mov	r1, r7
	mov	r2, r7
	add	r2, #1
	add	r1, #3
	mov	r0, r14
	calld	lr,#_MovePiece
	rdbyte	r2, r13
	rdbyte	r7, r12
	jmp	#_L127
_L147
	mov	r0, r14
	mov	r1, r5
	calld	lr,#_RemovePiece
	rdbyte	r1, r13
	mov	r0, r14
	mov	r2, #133
	calld	lr,#_AddPiece
	jmp	#_L122
_L150
	rdlong	r0, ##_LC57
	calld	lr,#_puts
	rdbyte	r7, r12
	jmp	#_L128
_L149
	rdlong	r0, ##_LC59
	calld	lr,#_puts
	rdbyte	r7, r12
	jmp	#_L130
	alignl
_LC57
	long	_LC56
	alignl
_LC59
	long	_LC58
	alignl
_LC61
	long	_LC60
	alignl
_CheckPersonMove
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	sub	sp, #160
	mov	r7, r0
	add	r7, #150
	mov	r14, r0
	rdbyte	r7, r7
	rdlong	temp, ##_LC62
	rdlong	r6, temp
	cmps	r7, r6 wcz
	IF_E 	jmp	#_L153
_L151
	add	sp, #160
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	jmp	lr
_L153
	mov	r7, r0
	add	r7, #151
	rdbyte	r7, r7
	rdlong	temp, ##_LC63
	rdlong	r6, temp
	cmps	r7, r6 wcz
	IF_NE	jmp	#_L151
	mov	r1, r0
	mov	r2, #158
	mov	r0, sp
	calld	lr,#_memcpy
	mov	r6, #149
	add	r6, sp
	mov	r0, sp
	rdbyte	r7, r6
	add	r7, #1
	wrbyte	r7, r6
	calld	lr,#_PerformMove
	mov	r0, sp
	calld	lr,#_IsCheck
	cmps	r0, #0 wcz
	IF_NE	jmp	#_L151
	mov	r7, #1
	mov	r0, r14
	mov	r1, sp
	mov	r2, #158
	rdlong	temp, ##_LC64
	wrlong	r7, temp
	calld	lr,#_memcpy
	jmp	#_L151
	alignl
_LC62
	long	_person_old
	alignl
_LC63
	long	_person_new
	alignl
_LC64
	long	_validmove
	alignl
_LC69
	byte "BAD MOVE: %2.2x-%2.2x", 10, 0
	alignl
_AnalyzeMove
	sub	sp, #4
	wrlong	r10, sp
	sub	sp, #4
	wrlong	r11, sp
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	sub	sp, #172
	mov	r12, r0
	add	r12, #150
	mov	r7, r0
	mov	r13, r0
	mov	r14, r0
	add	r13, #151
	rdbyte	r6, r12
	add	r7, r6
	rdbyte	r7, r7
	cmps	r7, #255 wcz
	IF_E 	jmp	#_L155
	rdbyte	r7, r13
	add	r7, r0
	rdbyte	r7, r7
	cmps	r7, #255 wcz
	IF_E 	jmp	#_L155
	mov	r1, r0
	mov	r0, sp
	mov	r2, #158
	add	r0, #12
	calld	lr,#_memcpy
	mov	r5, #161
	add	r5, sp
	mov	r0, sp
	add	r0, #12
	rdbyte	r7, r5
	add	r7, #1
	wrbyte	r7, r5
	calld	lr,#_PerformMove
	mov	r0, sp
	add	r0, #12
	calld	lr,#_IsCheck
	cmps	r0, #0 wcz
	IF_NE	jmp	#_L154
	mov	r7, sp
	add	r7, #156
	rdlong	r11, ##_LC68
	rdword	r7, r7
	shl	r7, #16
	sar	r7, #16
	mov	r6, r7
	rdlong	temp, ##_LC71
	add	r6, temp
	cmp	r6, r11 wcz
	IF_A 	jmp	#_L173
	mov	r5, #161
	add	r5, sp
	rdbyte	r6, r5
	rdlong	temp, ##_LC72
	rdlong	r5, temp
	cmps	r6, r5 wcz
	IF_E 	jmp	#_L174
	mov	r6, #160
	add	r6, sp
	mov	r5, #0
	mov	r0, sp
	add	r0, #12
	rdbyte	r7, r6
	xor	r7, #128
	cmps	r7, #0 wcz
	wrbyte	r7, r6
	mov	r6, #164
	add	r6, sp
	wrbyte	r5, r6
	add	r6, #1
	IF_E  rdlong	r7, ##_LC65
	wrbyte	r5, r6
	mov	r5, #158
	IF_NE rdlong	r7, ##_LC66
	add	r5, sp
	wrword	r7, r5
	calld	lr,#_AnalyzeAllMoves
	mov	r6, #164
	add	r6, sp
	rdbyte	r7, r6
	cmps	r7, #0 wcz
	IF_E 	jmp	#_L163
	mov	r7, #158
	add	r7, sp
	rdword	r10, r7
	shl	r10, #16
	sar	r10, #16
	mov	r6, r10
_L164
	mov	r11, r14
	add	r11, #146
	rdword	r7, r11
	shl	r7, #16
	sar	r7, #16
	cmps	r7, r6 wcz
	IF_E 	jmp	#_L175
	mov	r5, r14
	add	r5, #148
	rdbyte	r5, r5
	cmps	r5, #0 wcz
	IF_E 	jmp	#_L169
	cmps	r7, r6 wcz
	mov	r7, #0
	muxc	r7,#1
_L168
	cmps	r7, #0 wcz
	IF_E 	jmp	#_L154
	mov	r7, r14
	add	r7, #152
	add	r14, #153
	rdbyte	r12, r12
	rdbyte	r13, r13
	wrbyte	r12, r7
	wrbyte	r13, r14
	wrword	r10, r11
_L154
	add	sp, #172
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	rdlong	r11, sp
	add	sp, #4
	rdlong	r10, sp
	add	sp, #4
	jmp	lr
_L173
	mov	r6, r14
	mov	r5, r14
	add	r6, #146
	add	r5, #152
	add	r14, #153
	rdbyte	r12, r12
	rdbyte	r13, r13
	wrbyte	r12, r5
	wrbyte	r13, r14
	wrword	r7, r6
	jmp	#_L154
_L163
	mov	r0, sp
	add	r0, #12
	calld	lr,#_IsCheck
	cmps	r0, #0 wcz
	IF_E 	jmp	#_L165
	mov	r7, r14
	add	r7, #148
	rdbyte	r7, r7
	cmps	r7, #0 wcz
	IF_NE mov	r5, #158
	IF_E  mov	r7, #158
	IF_NE mov	r6, r11
	IF_NE add	r5, sp
	IF_E  rdlong	r6, ##_LC67
	IF_E  add	r7, sp
	IF_NE mov	r10, r6
	IF_E  mov	r10, r6
	IF_NE rdlong	temp, ##_LC73
	IF_NE wrword	temp, r5
	IF_E  rdlong	temp, ##_LC74
	IF_E  wrword	temp, r7
	jmp	#_L164
_L169
	cmps	r7, r6 wcz
	IF_A  mov	r7,#1
	IF_BE mov	r7,#0
	jmp	#_L168
_L174
	mov	r6, r14
	add	r6, #148
	mov	r11, r14
	add	r11, #146
	rdbyte	r6, r6
	cmps	r6, #0 wcz
	rdword	r6, r11
	shl	r6, #16
	sar	r6, #16
	IF_E 	jmp	#_L160
	cmps	r6, r7 wcz
	mov	r6, #0
	muxc	r6,#1
_L161
	cmps	r6, #0 wcz
	IF_E 	jmp	#_L154
	mov	r6, r14
	add	r6, #152
	add	r14, #153
	rdbyte	r12, r12
	rdbyte	r13, r13
	wrbyte	r12, r6
	wrbyte	r13, r14
	wrword	r7, r11
	jmp	#_L154
_L160
	cmps	r6, r7 wcz
	IF_A  mov	r6,#1
	IF_BE mov	r6,#0
	jmp	#_L161
_L165
	mov	r6, #158
	add	r6, sp
	mov	r5, #0
	mov	r10, #0
	wrword	r5, r6
	mov	r6, #0
	jmp	#_L164
_L175
	calld	lr,#_rand
	test	r0,#$3 wz
	mov	r7, #0
	muxz	r7,#1
	jmp	#_L168
_L155
	mov	r5, sp
	add	r5, #4
	mov	r7, sp
	add	r7, #8
	rdlong	temp, ##_LC70
	wrlong	temp, sp
	wrlong	r6, r5
	rdbyte	r6, r13
	wrlong	r6, r7
	calld	lr,#_printf
	mov	r0, #0
	calld	lr,#_exit
	alignl
_LC65
	long	32767
	alignl
_LC66
	long	-32767
	alignl
_LC67
	long	-10000
	alignl
_LC68
	long	10000
	alignl
_LC70
	long	_LC69
	alignl
_LC71
	long	5000
	alignl
_LC72
	long	_playdepth
	alignw
_LC73
	word	10000
	alignw
_LC74
	word	-10000
	alignl
_LC81
	byte "CHECKMATE", 0
	alignl
_IsCheckMate
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	mov	r7, r0
	add	r7, #148
	rdbyte	r7, r7
	rdlong	r14, ##_LC77
	mov	r5, #2
	cmps	r7, #0 wcz
	mov	r13, r0
	mov	r6, r0
	mov	r4, ##_AnalyzeMove
	IF_E  rdlong	r7, ##_LC75
	IF_NE rdlong	r7, ##_LC76
	add	r13, #146
	add	r6, #153
	rdlong	r12, r14
	wrlong	r5, r14
	mov	r5, r0
	add	r5, #152
	rdlong	temp, ##_LC78
	wrlong	r4, temp
	mov	r4, #0
	wrword	r7, r13
	wrbyte	r4, r5
	wrbyte	r4, r6
	calld	lr,#_AnalyzeAllMoves
	rdword	r7, r13
	rdlong	temp, ##_LC79
	add	r7, temp
	and	r7,##$0000FFFF
	rdlong	temp, ##_LC80
	cmp	temp, r7 wcz
	IF_AE mov	r0, #0
	IF_AE	jmp	#_L178
	rdlong	r0, ##_LC82
	calld	lr,#_puts
	mov	r0, #1
_L178
	wrlong	r12, r14
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	jmp	lr
	alignl
_LC75
	long	32767
	alignl
_LC76
	long	-32767
	alignl
_LC77
	long	_playdepth
	alignl
_LC78
	long	_MoveFunction
	alignl
_LC79
	long	5000
	alignl
_LC80
	long	10000
	alignl
_LC82
	long	_LC81
	alignl
_LC86
	byte "STALEMATE", 0
	alignl
_LC88
	byte "Couldn't find a move", 0
	alignl
_LC94
	byte "White's Move %d: ", 0
	alignl
_LC96
	byte "Blacks's Move %d: ", 0
	alignl
_LC99
	byte " %s", 0
	alignl
_LC101
	byte "-%s", 10, 0
	alignl
_PerformComputerMove
	sub	sp, #4
	wrlong	r9, sp
	sub	sp, #4
	wrlong	r10, sp
	sub	sp, #4
	wrlong	r11, sp
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	sub	sp, #8
	mov	r11, r0
	add	r11, #148
	mov	r5, ##_AnalyzeMove
	mov	r13, r0
	mov	r12, r0
	add	r13, #152
	add	r12, #153
	mov	r14, r0
	rdbyte	r7, r11
	cmps	r7, #0 wcz
	mov	r7, r0
	IF_E  rdlong	r6, ##_LC83
	IF_NE rdlong	r6, ##_LC84
	add	r7, #146
	rdlong	temp, ##_LC85
	wrlong	r5, temp
	mov	r5, #0
	wrword	r6, r7
	wrbyte	r5, r13
	wrbyte	r5, r12
	calld	lr,#_AnalyzeAllMoves
	rdbyte	r7, r13 wz
	IF_E 	jmp	#_L183
	rdbyte	r6, r12
	cmps	r7, r6 wcz
	IF_E 	jmp	#_L192
_L184
	mov	r4, r14
	mov	r5, r14
	add	r4, #150
	add	r5, #151
	mov	r0, r14
	add	r14, #144
	wrbyte	r7, r4
	wrbyte	r6, r5
	calld	lr,#_PerformMove
	rdword	r7, r14
	shl	r7, #16
	sar	r7, #16
	rdlong	temp, ##_LC90
	add	r7, temp
	rdlong	temp, ##_LC91
	cmp	temp, r7 wcz
	IF_B 	jmp	#_L193
_L186
	rdlong	r6, ##_LC93
	rdlong	r7, r6
	cmps	r7, #200 wcz
	IF_A 	jmp	#_L194
	rdbyte	r5, r11
	cmps	r5, #0 wcz
	IF_NE mov	r11, sp
	IF_E  mov	r11, sp
	IF_NE add	r7, #1
	IF_NE add	r11, #4
	IF_E  add	r11, #4
	mov	r9, #58
	IF_NE rdlong	temp, ##_LC95
	IF_NE wrlong	temp, sp
	IF_NE wrlong	r7, r6
	IF_E  rdlong	temp, ##_LC97
	IF_E  wrlong	temp, sp
	wrlong	r7, r11
	calld	lr,#_printf
	rdbyte	r6, r13
	rdlong	r14, ##_LC98
	mov	r0, r6
	mov	r1, #12
	mov	r10, r14
	mov	r5, #0
	add	r10, #2
	call	#__DIVSI
	mov	r7, r1
	mov	r0, r6
	mov	r1, #12
	mov	r6, r9
	call	#__DIVSI
	wrbyte	r5, r10
	mov	r13, r14
	add	r7, #95
	rdlong	temp, ##_LC100
	wrlong	temp, sp
	sub	r6, r0
	add	r13, #1
	wrbyte	r7, r14
	wrbyte	r6, r13
	wrlong	r14, r11
	calld	lr,#_printf
	rdbyte	r6, r12
	mov	r0, r6
	mov	r1, #12
	call	#__DIVSI
	mov	r7, r1
	mov	r0, r6
	mov	r1, #12
	mov	r6, #0
	call	#__DIVSI
	wrbyte	r6, r10
	add	r7, #95
	sub	r9, r0
	rdlong	temp, ##_LC102
	wrlong	temp, sp
	wrbyte	r7, r14
	wrbyte	r9, r13
	wrlong	r14, r11
	calld	lr,#_printf
	mov	r0, #1
_L187
	add	sp, #8
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	rdlong	r11, sp
	add	sp, #4
	rdlong	r10, sp
	add	sp, #4
	rdlong	r9, sp
	add	sp, #4
	jmp	lr
_L183
	rdlong	r0, ##_LC89
	add	r14, #144
	calld	lr,#_puts
	rdlong	r0, ##_LC87
	calld	lr,#_puts
	rdword	r7, r14
	shl	r7, #16
	sar	r7, #16
	rdlong	temp, ##_LC90
	add	r7, temp
	rdlong	temp, ##_LC91
	cmp	temp, r7 wcz
	IF_AE	jmp	#_L186
_L193
	rdlong	r0, ##_LC92
	calld	lr,#_puts
	mov	r0, #0
	jmp	#_L187
_L194
	rdlong	r0, ##_LC87
	calld	lr,#_puts
	mov	r0, #0
	jmp	#_L187
_L192
	rdlong	r0, ##_LC87
	calld	lr,#_puts
	rdbyte	r7, r13
	rdbyte	r6, r12
	jmp	#_L184
	alignl
_LC83
	long	32767
	alignl
_LC84
	long	-32767
	alignl
_LC85
	long	_MoveFunction
	alignl
_LC87
	long	_LC86
	alignl
_LC89
	long	_LC88
	alignl
_LC90
	long	5000
	alignl
_LC91
	long	10000
	alignl
_LC92
	long	_LC81
	alignl
_LC93
	long	_movenum
	alignl
_LC95
	long	_LC94
	alignl
_LC97
	long	_LC96
	alignl
_LC98
	long	_str_1918
	alignl
_LC100
	long	_LC99
	alignl
_LC102
	long	_LC101
	alignl
_PerformPersonMove
	sub	sp, #4
	wrlong	r8, sp
	sub	sp, #4
	wrlong	r9, sp
	sub	sp, #4
	wrlong	r10, sp
	sub	sp, #4
	wrlong	r11, sp
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	sub	sp, #172
	mov	r9, r0
	add	r9, #148
	rdlong	r11, ##_LC106
	mov	r5, #168
	add	r5, sp
	rdlong	r12, ##_LC105
	mov	r6, #0
	mov	r10, sp
	add	r10, #4
	rdlong	r14, ##_LC109
	rdlong	r8, ##_LC112
	rdbyte	r7, r9
	cmps	r7, #0 wcz
	IF_NE rdlong	r7, r11
	IF_NE add	r7, #1
	wrlong	r0, r5
	wrlong	r6, r12
	IF_NE wrlong	r7, r11
	jmp	#_L204
_L200
	rdlong	r7, r12
	cmps	r7, #0 wcz
	IF_NE	jmp	#_L207
_L204
	rdbyte	r7, r9
	cmps	r7, #0 wcz
	IF_NE rdlong	r7, ##_LC107
	IF_E  rdlong	r6, ##_LC108
	IF_NE wrlong	r7, sp
	IF_E  wrlong	r6, sp
	IF_E  rdlong	r7, r11
	IF_NE rdlong	r5, r11
	IF_E  wrlong	r7, r10
	IF_NE wrlong	r5, r10
	calld	lr,#_printf
	mov	r0, r14
	calld	lr,#_gets
	rdbyte	r7, r14
	mov	r0, r7
	calld	lr,#_toupper
	mov	r7, r0
	cmps	r7, #81 wcz
	mov	r0, r14
	IF_E 	jmp	#_L202
	calld	lr,#_StringToPostion
	mov	r7, r14
	mov	r13, r0
	add	r7, #3
	rdlong	r5, ##_LC110
	mov	r0, r7
	wrlong	r13, r5
	calld	lr,#_StringToPostion
	mov	r6, r14
	cmps	r13, #0 wcz
	add	r6, #2
	wrlong	r0, r8
	IF_B 	jmp	#_L200
	cmps	r0, #0 wcz
	IF_B 	jmp	#_L200
	rdbyte	r7, r6
	cmps	r7, #45 wcz
	IF_NE	jmp	#_L200
	mov	r6, #168
	add	r6, sp
	mov	r5, ##_CheckPersonMove
	mov	r0, sp
	mov	r2, #158
	add	r0, #8
	rdlong	r7, r6
	add	r7, #150
	rdlong	r1, r6
	rdlong	r6, ##_LC113
	wrbyte	r13, r7
	wrlong	r5, r6
	calld	lr,#_memcpy
	mov	r0, sp
	add	r0, #8
	calld	lr,#_MoveIfMyPiece
	rdlong	r7, r12
	cmps	r7, #0 wcz
	IF_E 	jmp	#_L204
_L207
	mov	r7, #168
	add	r7, sp
	mov	r5, #0
	mov	r1, sp
	add	r1, #8
	mov	r2, #158
	rdlong	r0, r7
	mov	r7, sp
	add	r7, #157
	wrbyte	r5, r7
	calld	lr,#_memcpy
	mov	r0, #1
_L199
	add	sp, #172
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	rdlong	r11, sp
	add	sp, #4
	rdlong	r10, sp
	add	sp, #4
	rdlong	r9, sp
	add	sp, #4
	rdlong	r8, sp
	add	sp, #4
	jmp	lr
_L202
	mov	r0, #0
	jmp	#_L199
	alignl
_LC105
	long	_validmove
	alignl
_LC106
	long	_movenum
	alignl
_LC107
	long	_LC94
	alignl
_LC108
	long	_LC96
	alignl
_LC109
	long	_inbuf
	alignl
_LC110
	long	_person_old
	alignl
_LC112
	long	_person_new
	alignl
_LC113
	long	_MoveFunction
	alignl
_Initialize
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	mov	r1, #255
	mov	r2, #144
	mov	r14, r0
	calld	lr,#_memset
	rdlong	r7, ##_LC115
	mov	r6, r14
	mov	r5, r7
	add	r6, #26
	add	r5, #1
	mov	r3, #1
	mov	r4, #0
	rdbyte	r2, r7
	wrbyte	r2, r6
	add	r6, #1
	rdbyte	r5, r5
	wrbyte	r5, r6
	mov	r5, r7
	add	r5, #2
	rdbyte	r5, r5
	add	r6, #1
	wrbyte	r5, r6
	mov	r5, r7
	add	r5, #3
	rdbyte	r5, r5
	add	r6, #1
	wrbyte	r5, r6
	mov	r5, r7
	add	r5, #4
	rdbyte	r5, r5
	add	r6, #1
	wrbyte	r5, r6
	mov	r5, r7
	add	r5, #5
	rdbyte	r5, r5
	add	r6, #1
	wrbyte	r5, r6
	mov	r5, r7
	add	r5, #6
	rdbyte	r5, r5
	add	r6, #1
	add	r7, #7
	wrbyte	r5, r6
	add	r6, #1
	neg	r5, #127
	rdbyte	r7, r7
	wrbyte	r7, r6
	mov	r7, r14
	add	r7, #38
	wrbyte	r3, r7
	add	r7, #1
	add	r6, #30
	wrbyte	r3, r7
	add	r7, #1
	wrbyte	r3, r7
	add	r7, #1
	wrbyte	r3, r7
	add	r7, #1
	wrbyte	r3, r7
	add	r7, #1
	wrbyte	r3, r7
	add	r7, #1
	wrbyte	r3, r7
	add	r7, #1
	wrbyte	r3, r7
	add	r7, #5
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #5
	wrbyte	r4, r7
	add	r7, #2
	wrbyte	r4, r6
	add	r6, #42
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #5
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #5
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #1
	wrbyte	r4, r7
	add	r7, #5
	wrbyte	r5, r7
	add	r7, #1
	wrbyte	r5, r7
	add	r7, #1
	wrbyte	r5, r7
	add	r7, #1
	wrbyte	r5, r7
	add	r7, #1
	wrbyte	r5, r7
	add	r7, #1
	wrbyte	r5, r7
	add	r7, #1
	wrbyte	r5, r7
	rdlong	r7, ##_LC116
	mov	r3, r7
	wrbyte	r5, r6
	mov	r4, r7
	add	r6, #5
	rdbyte	r2, r7
	add	r3, #1
	mov	r5, r14
	wrbyte	r2, r6
	add	r4, #2
	add	r6, #1
	rdbyte	r3, r3
	add	r5, #112
	mov	r2, #0
	wrbyte	r3, r6
	add	r6, #2
	mov	r3, r14
	rdbyte	r4, r4
	add	r3, #149
	wrbyte	r4, r5
	mov	r5, r7
	add	r5, #3
	rdbyte	r5, r5
	mov	r4, r14
	add	r4, #148
	wrbyte	r5, r6
	mov	r5, r7
	add	r5, #4
	rdbyte	r5, r5
	add	r6, #1
	wrbyte	r5, r6
	mov	r5, r7
	add	r5, #5
	rdbyte	r5, r5
	add	r6, #1
	wrbyte	r5, r6
	mov	r5, r7
	add	r5, #6
	rdbyte	r5, r5
	add	r6, #1
	add	r7, #7
	wrbyte	r5, r6
	add	r6, #1
	mov	r5, r14
	rdbyte	r7, r7
	add	r5, #144
	wrbyte	r7, r6
	add	r6, #37
	mov	r7, r14
	wrbyte	r2, r3
	neg	r3, #128
	add	r7, #155
	wrbyte	r3, r4
	mov	r4, #0
	add	r14, #156
	wrword	r4, r5
	mov	r5, #114
	wrbyte	r5, r6
	mov	r6, #30
	wrbyte	r6, r7
	mov	r7, #0
	rdlong	temp, ##_LC117
	wrlong	r2, temp
	wrbyte	r7, r14
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	jmp	lr
	alignl
_LC115
	long	_black_rank
	alignl
_LC116
	long	_white_rank
	alignl
_LC117
	long	_movenum
	alignl
_LC133
	byte "Enter Play Level (1-%d): ", 0
	alignl
_LC136
	byte "Do you want to play against the computer? (Y/N): ", 0
	alignl
_LC139
	byte "Do you want White (Y/N): ", 0
	alignl
_LC142
	byte "Illegal move into check %d", 10, 0
	alignl
_LC144
	byte "CHECK", 10, 0
	alignl
_PlayChess
	sub	sp, #4
	wrlong	r9, sp
	sub	sp, #4
	wrlong	r10, sp
	sub	sp, #4
	wrlong	r11, sp
	sub	sp, #4
	wrlong	r12, sp
	sub	sp, #4
	wrlong	r13, sp
	sub	sp, #4
	wrlong	r14, sp
	sub	sp, #4
	wrlong	lr, sp
	sub	sp, #168
	rdlong	r13, ##_LC132
	mov	r6, #0
	mov	r11, sp
	add	r11, #4
	rdlong	r14, ##_LC135
	rdlong	r12, ##_LC134
	wrlong	r6, r13
_L210
	mov	r7, #4
	wrlong	r12, sp
	wrlong	r7, r11
	calld	lr,#_printf
	mov	r0, r14
	calld	lr,#_gets
	mov	r0, r14
	calld	lr,#_atoi
	mov	r6, r0
	sub	r6, #1
	cmp	r6, #3 wcz
	wrlong	r0, r13
	IF_A 	jmp	#_L210
	rdlong	temp, ##_LC137
	wrlong	temp, sp
	calld	lr,#_printf
	mov	r0, r14
	calld	lr,#_gets
	rdbyte	r0, r14
	calld	lr,#_toupper
	cmps	r0, #89 wcz
	mov	r7, #0
	muxz	r7,#1
	rdlong	r12, ##_LC138
	cmps	r7, #0 wcz
	wrlong	r7, r12
	IF_NE	jmp	#_L225
	rdlong	r13, ##_LC141
	mov	r6, #128
	wrlong	r6, r13
_L213
	mov	r0, sp
	add	r0, #8
	calld	lr,#_Initialize
	mov	r0, sp
	add	r0, #8
	calld	lr,#_PrintBoard
	mov	r6, #156
	add	r6, sp
	rdlong	r10, ##_LC143
	rdlong	r9, ##_LC145
	rdlong	r7, r13
	rdbyte	r14, r6
	jmp	#_L224
_L217
	mov	r7, #156
	add	r7, sp
	mov	r0, sp
	add	r0, #8
	rdbyte	r14, r7
	xor	r14, #128
	wrbyte	r14, r7
	calld	lr,#_IsCheck
	cmps	r0, #0 wcz
	IF_NE	jmp	#_L226
_L218
	rdlong	r7, r12
	cmps	r7, #0 wcz
	rdlong	r7, r13
	IF_E  xor	r7, #128
	IF_E  wrlong	r7, r13
_L224
	mov	r0, sp
	cmps	r14, r7 wcz
	add	r0, #8
	IF_E 	jmp	#_L227
	calld	lr,#_PerformPersonMove
	cmps	r0, #0 wcz
	IF_E 	jmp	#_L209
_L228
	mov	r0, sp
	add	r0, #8
	calld	lr,#_PrintBoard
	mov	r0, sp
	add	r0, #8
	calld	lr,#_IsCheck
	cmps	r0, #0 wcz
	IF_E 	jmp	#_L217
	mov	r6, #156
	add	r6, sp
	wrlong	r10, sp
	rdbyte	r7, r6
	wrlong	r7, r11
	calld	lr,#_printf
	jmp	#_L217
_L226
	mov	r0, sp
	add	r0, #8
	calld	lr,#_IsCheckMate
	cmps	r0, #0 wcz
	IF_NE	jmp	#_L209
	mov	r0, r9
	calld	lr,#_puts
	mov	r6, #156
	add	r6, sp
	rdbyte	r14, r6
	jmp	#_L218
_L227
	calld	lr,#_PerformComputerMove
	cmps	r0, #0 wcz
	IF_NE	jmp	#_L228
_L209
	add	sp, #168
	rdlong	lr, sp
	add	sp, #4
	rdlong	r14, sp
	add	sp, #4
	rdlong	r13, sp
	add	sp, #4
	rdlong	r12, sp
	add	sp, #4
	rdlong	r11, sp
	add	sp, #4
	rdlong	r10, sp
	add	sp, #4
	rdlong	r9, sp
	add	sp, #4
	jmp	lr
_L225
	rdlong	temp, ##_LC140
	wrlong	temp, sp
	calld	lr,#_printf
	mov	r0, r14
	calld	lr,#_gets
	rdbyte	r0, r14
	calld	lr,#_toupper
	cmps	r0, #89 wcz
	mov	r7, #0
	muxnz	r7,#128
	rdlong	r13, ##_LC141
	wrlong	r7, r13
	jmp	#_L213
	alignl
_LC132
	long	_playdepth
	alignl
_LC134
	long	_LC133
	alignl
_LC135
	long	_inbuf
	alignl
_LC137
	long	_LC136
	alignl
_LC138
	long	_human_playing
	alignl
_LC140
	long	_LC139
	alignl
_LC141
	long	_compcolor
	alignl
_LC143
	long	_LC142
	alignl
_LC145
	long	_LC144
	alignl
_LC146
	byte "Threaded Chess", 0
	alignl
_main
	sub	sp, #4
	wrlong	lr, sp
	mov	r0, #1
	calld	lr,#_sleep
	rdlong	r0, ##_LC147
	calld	lr,#_puts
	mov	r0, #1
	calld	lr,#_srand
_L230
	calld	lr,#_PlayChess
	calld	lr,#_PlayChess
	jmp	#_L230
	alignl
_LC147
	long	_LC146
	alignl
_PieceFunctions
	long	_Invalid
	long	_Pawn
	long	_Knight
	long	_Bishop
	long	_Rook
	long	_Queen
	long	_King
	long	_Invalid
_inbuf
	long	0[20]
_human_playing
	long	0
_compcolor
	long	0
_validmove
	long	0
_playdepth
	long	0
_person_new
	long	0
_person_old
	long	0
_movenum
	long	0
_MoveFunction
	long	0
	alignl
_white_rank
	byte	-124
	byte	-126
	byte	-125
	byte	-123
	byte	-122
	byte	-125
	byte	-126
	byte	-124
	alignl
_black_rank
	byte	4
	byte	2
	byte	3
	byte	5
	byte	6
	byte	3
	byte	2
	byte	4
	alignl
_pos_values
	long	_null_values
	long	_pawn_values
	long	_knight_values
	long	_bishop_values
	long	_null_values
	long	_null_values
	long	_king_values
	long	_null_values
	alignl
_null_values
	long	0[24]
	alignl
_king_values
	byte	0
	byte	0
	byte	-6
	byte	-8
	byte	-8
	byte	-10
	byte	-10
	byte	-8
	byte	-8
	byte	-6
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-6
	byte	-8
	byte	-8
	byte	-10
	byte	-10
	byte	-8
	byte	-8
	byte	-6
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-6
	byte	-8
	byte	-8
	byte	-10
	byte	-10
	byte	-8
	byte	-8
	byte	-6
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-6
	byte	-8
	byte	-8
	byte	-10
	byte	-10
	byte	-8
	byte	-8
	byte	-6
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-4
	byte	-6
	byte	-6
	byte	-8
	byte	-8
	byte	-6
	byte	-6
	byte	-4
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-2
	byte	-4
	byte	-4
	byte	-4
	byte	-4
	byte	-4
	byte	-4
	byte	-2
	byte	0
	byte	0
	byte	0
	byte	0
	byte	4
	byte	4
	byte	0
	byte	0
	byte	0
	byte	0
	byte	4
	byte	4
	byte	0
	byte	0
	byte	0
	byte	0
	byte	4
	byte	6
	byte	2
	byte	0
	byte	0
	byte	2
	byte	6
	byte	4
	byte	0
	byte	0
	alignl
_bishop_values
	byte	0
	byte	0
	byte	-4
	byte	-2
	byte	-2
	byte	-2
	byte	-2
	byte	-2
	byte	-2
	byte	-4
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-2
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-2
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-2
	byte	0
	byte	1
	byte	2
	byte	2
	byte	1
	byte	0
	byte	-2
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-2
	byte	1
	byte	1
	byte	2
	byte	2
	byte	1
	byte	1
	byte	-2
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-2
	byte	0
	byte	2
	byte	2
	byte	2
	byte	2
	byte	0
	byte	-2
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-2
	byte	2
	byte	2
	byte	2
	byte	2
	byte	2
	byte	2
	byte	-2
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-2
	byte	1
	byte	0
	byte	0
	byte	0
	byte	0
	byte	1
	byte	-2
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-4
	byte	-2
	byte	-8
	byte	-2
	byte	-2
	byte	-8
	byte	-2
	byte	-4
	byte	0
	byte	0
	alignl
_knight_values
	byte	0
	byte	0
	byte	-10
	byte	-14
	byte	-6
	byte	-6
	byte	-6
	byte	-8
	byte	-10
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-8
	byte	-4
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-4
	byte	-8
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-6
	byte	0
	byte	2
	byte	3
	byte	3
	byte	2
	byte	0
	byte	-6
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-6
	byte	1
	byte	3
	byte	4
	byte	4
	byte	3
	byte	1
	byte	-6
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-6
	byte	0
	byte	3
	byte	4
	byte	4
	byte	3
	byte	0
	byte	-6
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-6
	byte	1
	byte	2
	byte	3
	byte	3
	byte	2
	byte	1
	byte	-6
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-8
	byte	-4
	byte	0
	byte	1
	byte	1
	byte	0
	byte	-4
	byte	-8
	byte	0
	byte	0
	byte	0
	byte	0
	byte	-10
	byte	-12
	byte	-6
	byte	-6
	byte	-4
	byte	-8
	byte	-10
	byte	0
	byte	0
	alignl
_pawn_values
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	10
	byte	10
	byte	10
	byte	10
	byte	10
	byte	10
	byte	10
	byte	10
	byte	0
	byte	0
	byte	0
	byte	0
	byte	2
	byte	2
	byte	4
	byte	6
	byte	6
	byte	4
	byte	2
	byte	2
	byte	0
	byte	0
	byte	0
	byte	0
	byte	1
	byte	1
	byte	2
	byte	6
	byte	6
	byte	2
	byte	1
	byte	1
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	5
	byte	5
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	1
	byte	-1
	byte	-2
	byte	0
	byte	0
	byte	-2
	byte	-1
	byte	1
	byte	0
	byte	0
	byte	0
	byte	0
	byte	1
	byte	2
	byte	2
	byte	-5
	byte	-5
	byte	2
	byte	2
	byte	1
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	byte	0
	alignl
_values
	long	0
	long	20
	long	64
	long	65
	long	100
	long	195
	long	10000
	long	0
	alignl
_knight_moves
	long	-23
	long	-10
	long	14
	long	25
	long	23
	long	10
	long	-14
	long	-25
	alignl
_king_moves
	long	11
	long	13
	long	-13
	long	-11
	long	-1
	long	12
	long	1
	long	-12
	alignl
_LC148
	byte "xPNBRQKx", 0
	alignl
_symbols
	long	_LC148
_str_1918
	long	0
