'#line 1 "/target/p2/nmmdef.t"
{{
'-------------------------------------------------------------------------------
'
' NMM_default - NMM target for Catalina programs.
'
' This target uses the NMM Kernel.
'
' This target can be used for programs to be loaded serially, from EEPROM, or
' from SDCARD.
'
' Version 3.15 - Initial version.
'
' Version 7.1 - Added Quick Build support.
'             - Common code moved to include files.
'
'-------------------------------------------------------------------------------
'
'    Copyright 2011 Ross Higson
'
'    This file is part of the Catalina Target Package.
'
'    The Catalina Target Package is free software: you can redistribute
'    it and/or modify it under the terms of the GNU Lesser General Public
'    License as published by the Free Software Foundation, either version
'    3 of the License, or (at your option) any later version.
'
'    The Catalina Target Package is distributed in the hope that it will
'    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
'    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
'    See the GNU Lesser General Public License for more details.
'
'    You should have received a copy of the GNU Lesser General Public
'    License along with the Catalina Target Package.  If not, see
'    <http://www.gnu.org/licenses/>.
'
'------------------------------------------------------------------------------
}}

' this symbol tells the optimizer we are compiling the top level target



' the following file contains common #defines:

'#line 1 "/target/p2/define.inc"
'--------------------------- START OF DEFINES -------------------------------



' stop multiple inclusions of #defines ...
































'--------------------------- END OF DEFINES ---------------------------------



'#line 46 "/target/p2/nmmdef.t"





























































































































'------------------------------------------------------------------------------

' NOT a Quick Build - plugins go AFTER program code

' The following file is generated during the compilation process

'#line 1 "//catalina.s"
CON
'#line 1 "/target/p2/define.inc"
'--------------------------- START OF DEFINES -------------------------------








































'#line 3 "//catalina.s"
'#line 1 "/target/p2/constant.inc"
'--------------------------- START OF CONSTANTS -------------------------------



' stop multiple inclusions of constants ...



'#line 1 "/target/p2/platform.inc"


' stop multiple inclusions of platform constants ...




'--------------------------- START OF PLATFORM CONSTANTS ---------------------
'
CON




'#line 1 "/target/p2/P2EDGE.inc"
'----------------------------- 1 constants -----------------------------

' clock configuration constants
' =============================




_XTALFREQ = 20_000_000  ' default crystal frequency


' NOTE: _CLOCK_XDIV, _CLOCK_MULT and _CLOCK_DIVP must all be defined,
'       otherwise the default values will be used - this is normally
'       accomplished using the -f, -F & -E command-line options. The
'       final clock frequency will be _XTALFREQ / _XDIV * _XMUL / _XDIVP






_XDIV     = 4           '\ crystal divider             to give 5.0MHz
_XMUL     = 72          '| crystal / div * mul         to give 360MHz
_XDIVP    = 2           '/ crystal / div * mul / divp  to give 180MHz





_XOSC     = %01         ' %00=OFF, %01=OSC, %10=15pF, %11=30pF




_XSEL     = %11         ' %00=rcfast, %01=rcslow, %10=XI, %11=PLL





_XPLL     = 1           ' 0= PLL off, 1=PLL on


' RTC constants
' =============

_RTC_BASE   = 24

' serial constants
' ================

_RX_PIN    = 63
_TX_PIN    = 62


_BAUDRATE  = 230400


' BlackCat/BlackBox Debugger I/O constants
' ========================================




_BLACKCAT_MODE    = %0000
_BLACKCAT_BAUD    = 115200
_BLACKCAT_SIZE    = 5*4   ' 5 longs

' SD Card constants
' =================

_SD_CK     = 61         'pin SD Card clock
_SD_CS     = 60         'pin SD Card select
_SD_DI     = 59         'pin SD Card MOSI
_SD_DO     = 58         'pin SD Card MISO

' 2 Port Serial constants
' =======================

_RX1_PIN   = _RX_PIN
_TX1_PIN   = _TX_PIN
_RX1_MODE  = %0000_0000_000_0000000000000_00_11111_0 ' async rx mode, true input, input  enabled for smart input
_TX1_MODE  = %0000_0000_000_0000000000000_01_11110_0 ' async tx mode, true output, output enabled for smart output
_BAUDRATE1 = _BAUDRATE
_RX2_PIN   = 50
_TX2_PIN   = 52
_RX2_MODE  = %0000_0000_000_0000000000000_00_11111_0 ' async rx mode, true input, input  enabled for smart input
_TX2_MODE  = %0000_0000_000_0000000000000_01_11110_0 ' async tx mode, true output, output enabled for smart output
_BAUDRATE2 = _BAUDRATE

' Multi Port Serial (aka 8 Port Serial) constants
' ===============================================

' NOTE Multi Port 1 and 2 use the 2 Port Serial constants defined above for pins and baud rate (but not mode) -
' This is done so that by default the Multi Port Serial plugin behaves the same way as the 2 Port Serial plugin.
' To disable thiis "auto-configuration" behaviour, set the pins to -1 (or anything outside the range 0 .. 63).
' All such ports will have to be manually configured in the C program (see the s8_openport() function).

'    rxmode = %0xx1 = invert rx              (same for txmode)
'             %0x1x = invert tx
'             %01xx = open-drain/open-source tx

_RX1_MULTI_PIN  = _RX1_PIN
_TX1_MULTI_PIN  = _TX1_PIN
_RX1_MULTI_BAUD = _BAUDRATE
_TX1_MULTI_BAUD = _BAUDRATE
_RX1_MULTI_MODE = %0000
_TX1_MULTI_MODE = %0000
_RX2_MULTI_PIN  = _RX2_PIN
_TX2_MULTI_PIN  = _TX2_PIN
_RX2_MULTI_BAUD = _BAUDRATE
_TX2_MULTI_BAUD = _BAUDRATE
_RX2_MULTI_MODE = %0000
_TX2_MULTI_MODE = %0000
_RX3_MULTI_PIN  = -1
_TX3_MULTI_PIN  = -1
_RX3_MULTI_BAUD = _BAUDRATE
_TX3_MULTI_BAUD = _BAUDRATE
_RX3_MULTI_MODE = %0000
_TX3_MULTI_MODE = %0000
_RX4_MULTI_PIN  = -1
_TX4_MULTI_PIN  = -1
_RX4_MULTI_BAUD = _BAUDRATE
_TX4_MULTI_BAUD = _BAUDRATE
_RX4_MULTI_MODE = %0000
_TX4_MULTI_MODE = %0000
_RX5_MULTI_PIN  = -1
_TX5_MULTI_PIN  = -1
_RX5_MULTI_BAUD = _BAUDRATE
_TX5_MULTI_BAUD = _BAUDRATE
_RX5_MULTI_MODE = %0000
_TX5_MULTI_MODE = %0000
_RX6_MULTI_PIN  = -1
_TX6_MULTI_PIN  = -1
_RX6_MULTI_BAUD = _BAUDRATE
_TX6_MULTI_BAUD = _BAUDRATE
_RX6_MULTI_MODE = %0000
_TX6_MULTI_MODE = %0000
_RX7_MULTI_PIN  = -1
_TX7_MULTI_PIN  = -1
_RX7_MULTI_BAUD = _BAUDRATE
_TX7_MULTI_BAUD = _BAUDRATE
_RX7_MULTI_MODE = %0000
_TX7_MULTI_MODE = %0000
_RX8_MULTI_PIN  = -1
_TX8_MULTI_PIN  = -1
_RX8_MULTI_BAUD = _BAUDRATE
_TX8_MULTI_BAUD = _BAUDRATE
_RX8_MULTI_MODE = %0000
_TX8_MULTI_MODE = %0000

' VGA constants
' =============

_VGA_BASE_PIN = 0

' USB constants
' =============

_USB_BASE_PIN = 8

' Hyper Flash / Hyper RAM constants
' =================================

' Base pin and reset pin mask
HYPER_BASE_PIN   = 16 ' If you change this, it may be required to change these:
HYPER_RST_A_MASK = 1<<(HYPER_BASE_PIN+15)           ' if HYPER_BASE_PIN < 32
HYPER_RST_B_MASK = 0' 1 <<(HYPER_BASE_PIN+15-32)    ' if HYPER_BASE_PIN >= 32

' RAM size (number of address bits)
HYPER_RAM_SIZE   = 24 ' 16Mb Hyper RAM
HYPER_FLASH_SIZE = 25 ' 32Mb Hyper Flash

' RAM addresses
HYPER_RAM_ADDR   = $0000_0000 ' 16Mb starting at 0
HYPER_FLASH_ADDR = $0200_0000 ' 32Mb starting on 32Mb boundary

' RAM options
HYPER_FASTREAD   = 1 ' 0 disables, 1 enables
HYPER_FASTWRITE  = 0 ' 0 disables, 1 enables
HYPER_UNREGCLK   = 0 ' 0 disables, 1 enables

' RAM latency, burst size and delay
HYPER_LATENCY_RAM   = 6
HYPER_BURST_RAM     = $0280
HYPER_DELAY_RAM     = 9

HYPER_LATENCY_FLASH = 16
HYPER_BURST_FLASH   = $FFF0
HYPER_DELAY_FLASH   = 8

' PSRAM constants
' ===============

' 1 EDGE with PSRAM pin mappings (1 -EC32MB)
PSRAM_DATABUS  = 40
PSRAM_CLK_PIN  = 56
PSRAM_CE_PIN   = 57

' number of address bits used in 32MB of PSRAM
PSRAM_ADDRSIZE = 25

' 8 microsecond CS low time
PSRAM_MAX_CS_LOW_USEC = 8

' burst size and delay
PSRAM_MAXBURST = 512
PSRAM_DELAY = 8

' optional FLAGS for driver
PSRAM_OPTIONS = 0

' miscellaneous constants
' =======================

_DEBUG_PIN = 38

' sanity checks and defaults
' ==========================
























































'#line 16 "/target/p2/platform.inc"









'--------------------------- END OF PLATFORM CONSTANTS -----------------------



'#line 10 "/target/p2/constant.inc"

CON
'
' Platform-independent clock configuration constants
'
_XPPPP    = ((_XDIVP>>1) + 15) & $F  ' 1->15, 2->0, 4->1, 6->2...30->14

' %0000_000e_dddddd_mmmmmmmmmm_pppp_cc_ss  ' set clock oscillator mode

' initial clock mode => enable crystal+PLL, stay in 20MHz+

_CLOCKINIT  = _XPLL<<24 + (_XDIV-1)<<18 + (_XMUL-1)<<8 + _XPPPP<<4 + _XOSC<<2 + %00

' wait time => 10ms (@ 20Mhz) for crystal+PLL to stabilize

_CLOCKWAIT  = 20000000/100

' final clock mode => switch to PLL

_CLOCKMODE  = _XPLL<<24 + (_XDIV-1)<<18 + (_XMUL-1)<<8 + _XPPPP<<4 + _XOSC<<2 +_XSEL

' final clock frequency

_CLOCKFREQ  = _XTALFREQ / _XDIV * _XMUL / _XDIVP

'
' Plugin types - the Catalina Kernel generally attempts to locate plugins
' by type, not by the cog they happen to be running on. Values up to 127
' and the value 255 are reserved.
'
' User plugin types should be in the range 128 .. 254. Note that the LMM
' prefix is historical - the same definitions are used for all program
' types (LMM, EMM, SMM, XMM etc).
'
LMM_VMM = 0       ' main LMM (single threaded)
LMM_HMI = 1       ' HMI Drivers (Kbd/Mouse/Screen)
LMM_LIB = 2       ' Utility library
LMM_FLA = 3       ' Floating Point Library A
LMM_FLB = 4       ' Floating Point Library B
LMM_RTC = 5       ' Real-Time Clock
LMM_FIL = 6       ' File System
LMM_SIO = 7       ' Serial I/O
LMM_DUM = 8       ' Dummy Plugin
LMM_CGI = 9       ' Graphics Plugin
LMM_KBD = 10      ' Keyboard Driver
LMM_SCR = 11      ' Screen Driver
LMM_MOU = 12      ' Mouse Driver
LMM_PRX = 13      ' Proxy Driver
LMM_GAM = 14      ' Gamepad Driver
LMM_SND = 15      ' Sound Driver
LMM_ADC = 16      ' ADC Driver
LMM_S4  = 17      ' 4 Port Serial Driver (Propeller 1 only)
LMM_TTY = 18      ' Full Duplex Serial Driver
LMM_VGI = 19      ' Virtual Graphics Plugin
LMM_VDB = 20      ' Virtual Double Buffer Support Driver
LMM_SPI = 21      ' SPI Support Driver
LMM_FLC = 22      ' Floating Point Library C (Propeller 2 only)
LMM_S2A = 23      ' 2 Port Serial Driver A (Propeller 2 only)
LMM_S2B = 24      ' 2 Port Serial Driver B (Propeller 2 only)
LMM_S8A = 25      ' 8 Port Serial Driver A (Propeler 2 only)
LMM_HYP = 26      ' HyperRam/HyperFlash Driver (Propeller 2 only)
LMM_SM1 = 27      ' SRAM Memory (8 Bit) Driver (Propeller 2 only)
LMM_PM1 = 28      ' PSRAM Memory (16 Bit) Driver (Propeller 2 only)
LMM_XCH = 29      ' XMM Cache
LMM_STO = 30      ' CogStore
LMM_P2P = 31      ' P2P Bus
LMM_NUL = 255     ' No plugin

'
' XMM Addressing (currently only PSRAM and Hyper RAM supported):
'
XMM_BASE_ADDRESS = $0008_0000   ' XMM adddressing from $8_0000
'
' XMM RW & RO Base Addresses - Note that these are the addresses used
' by the Catalina XMM Kernel - they typically start AFTER the last
' Hub address (note: only used for modes 3 and 4):
'
XMM_RW_BASE_ADDRESS = $0008_0000 ' Read-Write Base address
XMM_RO_BASE_ADDRESS = $0008_0000 ' Read-Only Base address
'
' XMM RW & RO Sizes (in bytes):
'
XMM_RW_SIZE = $0200_0000         ' Read-Write Size
XMM_RO_SIZE = $0200_0000         ' Read-Only Size

'
' Definitions for XMM CACHE (compatible with jazzed's spisram_cache):
'














































































'
' Notes on the Registry definitions.
'
' The Catalina registry provides a place where all plugins can be found,
' and a request block for sending requests to each plugin. The registry
' location must be known to all plugins. To use the registry, each plugin
' finds its own cog number, and then registers by putting its plugin type
' in the top 8 bits of the long at
'    long[REGISTRY][cog]
' The bottom 24 bits of that long point to the request block the plugin
' must use to receive requests and return results. A request block of
' two longs is automatically created for each plugin, but plugins that
' need more are free to allocate their own. However, all request blocks
' must be at least two longs - the first long is the request, which may
' be a 'short' request (if the request and all its parameters can fit
' into a single long, or the address of a 'long' parameter block that
' is allocated elsewhere in Hub RAM. Note that all requests are plugin
' specific, and each plugin only typically knows how to interpret its
' own requests. When complete, the plugin zeroes the first long of the
' request block, and may either return the result in the second long
' of the request block (typical for ' short' requests, but also used
' for some 'long' requests), or in the 'long' parameter block.
' Below the cog-oriented registry is a service-oriented registry. Each
' Service is allocated a word, and services go from 1 to SVC_MAX (i.e.
' there is no service 0). The details of the service can be found in
' the word at
'    word[REGISTRY][-service]
' The top 4 bits of the word are the cog number (top bit of the 4 bits
' set if not used), the next lower 4 bits are a lock number (top bit of
' the 4 set if not required) and the lower 8 bits are the request number
' to send to the cog to request the service.
'
' Predefined Service Numbers (and the internal plugin types and requests):
'
SVC_FLOAT_ADD    = 1  ' LMM_FLA 1
SVC_FLOAT_SUB    = 2  ' LMM_FLA 2
SVC_FLOAT_MUL    = 3  ' LMM_FLA 3
SVC_FLOAT_DIV    = 4  ' LMM_FLA 4
SVC_FLOAT_FLOAT  = 5  ' LMM_FLA 5
SVC_FLOAT_TRUNC  = 6  ' LMM_FLA 6
SVC_FLOAT_RND    = 7  ' LMM_FLA 7
SVC_FLOAT_SQR    = 8  ' LMM_FLA 8
SVC_FLOAT_CMP    = 9  ' LMM_FLA 9
SVC_K_PRESENT    = 10 ' LMM_HMI 1
SVC_K_GET        = 11 ' LMM_HMI 2
SVC_K_WAIT       = 12 ' LMM_HMI 3
SVC_K_NEW        = 13 ' LMM_HMI 4
SVC_K_READY      = 14 ' LMM_HMI 5
SVC_K_CLEAR      = 15 ' LMM_HMI 6
SVC_K_STATE      = 16 ' LMM_HMI 7
SVC_M_PRESENT    = 17 ' LMM_HMI 11
SVC_M_BUTTON     = 18 ' LMM_HMI 12
SVC_M_BUTTONS    = 19 ' LMM_HMI 13
SVC_M_ABS_X      = 20 ' LMM_HMI 14
SVC_M_ABS_Y      = 21 ' LMM_HMI 15
SVC_M_ABS_Z      = 22 ' LMM_HMI 16
SVC_M_DELTA_X    = 23 ' LMM_HMI 17
SVC_M_DELTA_Y    = 24 ' LMM_HMI 18
SVC_M_DELTA_Z    = 25 ' LMM_HMI 19
SVC_M_RESET      = 26 ' LMM_HMI 20
SVC_T_GEOMETRY   = 27 ' LMM_HMI 21
SVC_T_CHAR       = 28 ' LMM_HMI 22
SVC_T_STRING     = 29 ' LMM_HMI 23
SVC_T_INT        = 30 ' LMM_HMI 24
SVC_T_UNSIGNED   = 31 ' LMM_HMI 25
SVC_T_HEX        = 32 ' LMM_HMI 26
SVC_T_BIN        = 33 ' LMM_HMI 27
SVC_T_SETPOS     = 34 ' LMM_HMI 28
SVC_T_GETPOS     = 35 ' LMM_HMI 29
SVC_T_MODE       = 36 ' LMM_HMI 30
SVC_T_SCROLL     = 37 ' LMM_HMI 31
SVC_T_COLOR      = 38 ' LMM_HMI 32
SVC_SD_INIT      = 39 ' LMM_FIL 1
SVC_SD_READ      = 40 ' LMM_FIL 2
SVC_SD_WRITE     = 41 ' LMM_FIL 3
SVC_SD_BYTEIO    = 42 ' LMM_FIL 4
SVC_SD_STOPIO    = 43 ' LMM_FIL 5
SVC_RTC_DEBUG    = 44 ' LMM_RTC 10 or LMM_FIL 10
SVC_RTC_SETFREQ  = 45 ' LMM_RTC 6 or LMM_FIL 6
SVC_RTC_GETCLOCK = 46 ' LMM_RTC 7 or LMM_FIL 7
SVC_SETTIME      = 47 ' LMM_RTC 8 or LMM_FIL 8
SVC_RTC_GETTIME  = 48 ' LMM_RTC 9 or LMM_FIL 9
SVC_FLOAT_SIN    = 49 ' LMM_FLA 10
SVC_FLOAT_COS    = 50 ' LMM_FLA 11
SVC_FLOAT_TAN    = 51 ' LMM_FLA 12
SVC_FLOAT_LOG    = 52 ' LMM_FLA 13
SVC_FLOAT_LOG10  = 53 ' LMM_FLA 14
SVC_FLOAT_EXP    = 54 ' LMM_FLA 15
SVC_FLOAT_EXP10  = 55 ' LMM_FLA 16
SVC_FLOAT_POW    = 56 ' LMM_FLA 17
SVC_FLOAT_FRAC   = 57 ' LMM_FLA 18
SVC_FLOAT_FMOD   = 58 ' LMM_FLB 19
SVC_FLOAT_ASIN   = 59 ' LMM_FLB 20
SVC_FLOAT_ACOS   = 60 ' LMM_FLB 21
SVC_FLOAT_ATAN   = 61 ' LMM_FLB 22
SVC_FLOAT_ATAN2  = 62 ' LMM_FLB 23
SVC_FLOAT_FLOOR  = 63 ' LMM_FLB 24
SVC_FLOAT_CEIL   = 64 ' LMM_FLB 25
SVC_T_COLOR_FG   = 65 ' LMM_HMI 33
SVC_T_COLOR_BG   = 66 ' LMM_HMI 34
SVC_GETTICKS     = 67 ' LMM_RTC_11 or LMM_FIL_11
'
SVC_RESERVED     = 80 ' Services 1..80 reserved for Catalina

' Floating point constants

pi = 3.141592654

FAddCmd       = 1 << 24       ' Implemented in Float32_A and Float32_B
FSubCmd       = 2 << 24       ' Implemented in Float32_A and Float32_B
FMulCmd       = 3 << 24       ' Implemented in Float32_A and Float32_B
FDivCmd       = 4 << 24       ' Implemented in Float32_A and Float32_B
FFloatCmd     = 5 << 24       ' Implemented in Float32_A and Float32_B
FTruncCmd     = 6 << 24       ' Implemented in Float32_A and Float32_B
FRoundCmd     = 7 << 24       ' Implemented in Float32_A and Float32_B
FSqrCmd       = 8 << 24       ' Implemented in Float32_A and Float32_B
FCmpCmd       = 9 << 24       ' Implemented in Float32_A and Float32_B

SinCmd        = 10 << 24      ' Implemented in Float32_A
CosCmd        = 11 << 24      ' Implemented in Float32_A
TanCmd        = 12 << 24      ' Implemented in Float32_A
LogCmd        = 13 << 24      ' Implemented in Float32_A
Log10Cmd      = 14 << 24      ' Implemented in Float32_A
ExpCmd        = 15 << 24      ' Implemented in Float32_A
Exp10Cmd      = 16 << 24      ' Implemented in Float32_A
PowCmd        = 17 << 24      ' Implemented in Float32_A
FracCmd       = 18 << 24      ' Implemented in Float32_A

FModCmd       = 19 << 24      ' Implemented in Float32_B
ASinCmd       = 20 << 24      ' Implemented in Float32_B
ACosCmd       = 21 << 24      ' Implemented in Float32_B
ATanCmd       = 22 << 24      ' Implemented in Float32_B
ATan2Cmd      = 23 << 24      ' Implemented in Float32_B
FloorCmd      = 24 << 24      ' Implemented in Float32_B
CeilCmd       = 25 << 24      ' Implemented in Float32_B

SignFlag      = $1
ZeroFlag      = $2
NaNFlag       = $8

' CogStore constants

MAX_LONGS  = 300                ' store up to 300 LONGS in HUB (1200 chars)

LUT_LONGS  = 512                ' store up to 512 LONGS in LUT (2048 chars)

CMD_READ   = $1000_0000         ' copy Hub to Cog (address in lower 24 bits)
                                ' COGSTORE set to zero when complete

CMD_WRITE  = $2000_0000         ' copy Cog to Hub (address in lower 24 bits)
                                ' COGSTORE set to zero when complete

CMD_SIZE   = $3000_0000         ' return size of stored data (in LONGs) - set
                                ' lower 24 bits to $FFFFFF on call - lower 24
                                ' bits (set to size when complete)

CMD_SETUP  = $4000_0000         ' setup argc and argv array with the stored
                                ' data (set to zero when complete)

CMD_STOP   = $5000_0000         ' stop the CogStore cog.

LUT_READ   = $6000_0000         ' copy Hub to LUT (address in lower 24 bits)
                                ' COGSTORE set to zero when complete

LUT_WRITE  = $7000_0000         ' copy LUT to Hub (address in lower 24 bits)
                                ' COGSTORE set to zero when complete

LUT_SIZE   = $8000_0000         ' return size of LUT data (in LONGs) - set
                                ' lower 24 bits to $FFFFFF on call - lower 24
                                ' bits (set to size when complete)

CMD_RESPONSE = $FEED_FACE       ' COGSTORE set to this on any other command



















STORE_COG    = 7                ' Catalina CogStore will use this cog
LAST_COG     = 6                ' Last cog to be restarted is 6




QUOTE_CHAR = $22

'------------------------------- HUB CONSTANTS -------------------------------
'
CON
'
' Maximum number of cogs (note that this 1 may not have them all!)
'
MAX_COGS   = 16

'
' Maximum number of locks
'
MAX_LOCKS  = 16

' HUB RAM Definitions
'
'   (make sure these are the same in all targets)
'
' Size of Service array (if this changes, the Hub Layout below must change
' as well):
'
SVC_MAX    = 96                ' must be a multiple of 2
'
' Size of ARGV array (if this changes, the Hub Layout below must change
'  as well):
'
ARGV_MAX   = 24                ' maximum size (LONGs) of argv array
'
' Base Address for all hub programs (on the 1 this is genrally zero)
'
BASE_ADDR  = $00000
'
' Useable Hub RAM (The 1 has 512Kb but the top 16Kb hold a copy of the boot ROM)
'
' NOTE: The definitions from here to the end of this file must match those
'       in catalyst.h
'
HUB_SIZE   = $7C000            ' the last 16K contain a copy of the boot ROM.
'
FREE_MEM   = HUB_SIZE-4                               ' $7BFFC the FREE_MEM pointer
'
' <<< ALLOCATE OTHER RESERVED HUB LOCATIONS DOWN FROM HERE >>>
'
COGSTORE        = FREE_MEM - 4                        ' $7BFF8 CHECK Catalyst_Arguments.spin
XMM_CACHE_RSP   = COGSTORE - 4                        ' $7BFF4
XMM_CACHE_CMD   = XMM_CACHE_RSP - 4                   ' $7BFF0
REGISTRY        = XMM_CACHE_CMD - MAX_COGS*4          ' $7BFB0 CHECK registry.e
REQUESTS        = REGISTRY - 2*SVC_MAX - MAX_COGS*4*2 ' $7BE70 CHECK request_status.e
ARGV_0          = REQUESTS - ARGV_MAX*4               ' $7BE10 CHECK Catalyst_Arguments.spin2
ARGV_ADDR       = ARGV_0 - 4                          ' $7BE0C CHECK Catalyst_Arguments.spin2
ARGC_ADDR       = ARGV_ADDR - 4                       ' $7BE08 CHECK Catalyst_Arguments.spin2, blackbox_comms.c, default.s, blackcat.s (all targets)
DEBUG_FLAG      = ARGC_ADDR - 16                      ' $7BDF8 CHECK blackbox_comms.c, debugcog.s & blackcat.s (all targets)
DEBUG_IN        = DEBUG_FLAG - 4                      ' $7BDF4 CHECK blackbox_comms.c, debugcog.s & blackcat.s (all targets)
DEBUG_OUT       = DEBUG_IN - 4                        ' $7BDF0 CHECK blackbox_comms.c, debugcog.s & blackcat.s (all targets)
DEBUG_ADDR      = DEBUG_OUT - 4                       ' $7BDEC CHECK blackbox_comms.c, debugcog.s & blackcat.s (all targets)
DEBUG_BREAK     = DEBUG_ADDR - 4                      ' $7BDE8 CHECK blackbox_comms.c, debugcog.s & blackcat.s (all targets)
PROXY_XFER      = DEBUG_BREAK - 4                     ' $7BDE4
MEM_LOCK        = PROXY_XFER - 4                      ' $7BDE0 CHECK memory_lock.e & memory_lock_compact.e
CGI_DATA        = MEM_LOCK - 4                        ' $7BDDC CHECK cgi_data.e & cgi_data_compact.e
'
' For loading programs from SD card, the key decision is how large a program
' we want to be able to load, because the larger the program, the more Hub RAM
' space it takes to store the cluster list for it. The following calculations
' determine how much Hub RAM space to allocate for a particular load size,
' assuming FAT32 is in use and we have a cluster size of 32768 (note that
' smaller clusters will result in correspondingly smaller load sizes):
'
MAX_LOAD_SIZE  = 4194304                       ' we want 4MB loads (2^22 bytes)
                                               ' (if this is changed, check catalyst.h
                                               ' and Catalina_SD_Loader.spin)
MAX_CLUS_SIZE  = 32768                         ' assumed cluster size (2^15 bytes)
MAX_FLIST_SIZE = MAX_LOAD_SIZE/MAX_CLUS_SIZE   ' number of entries in cluster list (2^7)
'
FLIST_LOG2     = 9                             ' LOG (Base 2) of sector size
FLIST_SSIZ     = 1<<FLIST_LOG2                 ' size of sector
'
' Resume defining Loadtime Hub Layout (note overlap with debug locations!!!):
'
FLIST_ADDRESS  = ARGC_ADDR - (4*MAX_FLIST_SIZE)     ' $7BC08 check catalyst.h
FLIST_BUFF     = FLIST_ADDRESS - FLIST_SSIZ         ' $7BA08 check catalyst.h
FLIST_SIOB     = FLIST_BUFF - 68                    ' $7B9C4 check catalyst.h
FLIST_XFER     = FLIST_SIOB - 12                    ' $7B9B8 check catalyst.h
FLIST_SECT     = FLIST_XFER - 4                     ' $7B9B4 check catalyst.h
FLIST_SHFT     = FLIST_SECT - 4                     ' $7B9B0 check catalyst.h
FLIST_FSIZ     = FLIST_SHFT - 4                     ' $7B9AC check catalyst.h
FLIST_PSTK     = FLIST_FSIZ - 4                     ' $7B9A8 check catalyst.h
FLIST_PREG     = FLIST_PSTK - 4                     ' $7B9A4 check catalyst.h






























'
' Other equates (without CACHED XMM driver):
'





ENV_MAX  = 2048
ENVIRON  = FLIST_PREG - ENV_MAX
HUB_TOP  = ENVIRON




'
' size of 1 Loader (for XMM programs):
'
P2_LOAD_SIZE      = $10000     ' max size of loader (64kb)  - must match
                               ' catalina_cog.h, payload.c and catbind.c
'
' Size of thread block and offsets (for multithreading):
'
THREAD_BLOCK_SIZE = 35         ' size (LONGs) of thread_block
THREAD_REG_OFF    = 1          ' offset (LONGs) of register save area
THREAD_AFF_OFF    = 33         ' offset (LONGs) of affinity and status data
THREAD_EXT_OFF    = 34         ' offset (LONGs) of extended information
'
'--------------------------- END OF CONSTANTS ---------------------------------



'#line 4 "//catalina.s"




















































































'#line 1 "/target/p2/nmm.t"
{{
'------------------------------------------------------------------------------
' Catalina_NMM - Implements a Native Memory Model Kernel intended
'                for use by the Catalina Code Generator backend
'                for LCC
'
' Version 3.15 - Initial version.
'
'
' This file incorporates software derived from:
'    Float_32A by Cam Thompson, Micromega Corporation,
'              Copyright (c) 2006-2007 Parallax, Inc.
'
'------------------------------------------------------------------------------
'
'    Copyright 2009 Ross Higson
'
'    The portion of this file identified as the LMM Kernel is part of the
'    Catalina Target Package.
'
'    The Catalina Target Package is free software: you can redistribute
'    it and/or modify it under the terms of the GNU Lesser General Public
'    License as published by the Free Software Foundation, either version
'    3 of the License, or (at your option) any later version.
'
'    The Catalina Target Package is distributed in the hope that it will
'    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
'    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
'    See the GNU Lesser General Public License for more details.
'
'    You should have received a copy of the GNU Lesser General Public
'    License along with the Catalina Target Package.  If not, see
'    <http://www.gnu.org/licenses/>.
'
'------------------------------------------------------------------------------
}}

'#line 1 "/target/p2/constant.inc"
'--------------------------- START OF CONSTANTS -------------------------------









































































































































































































































































































































































































































































































































'#line 39 "/target/p2/nmm.t"

' NO_INTERRUPTS - if defined, we can the use SKIPF because this code will not
'                 be used in an interrupt service routine. Can be defined here
'                 or on the command-line (i.e. -C NO_INTERRUPTS)

'#ifndef NO_INTERRUPTS
'#define NO_INTERRUPTS
'#endif

' FAST_SAVE_RESTORE - if defined, we use fast block moves to save and restore
'                     multiple registers. This improves speed, but uses more
'                     stack space. Can be defined here or on the command-line
'                     (i.e. -C FAST_SAVE_RESTORE) for single kernel programs,
'                     but for multi-kernel programs it must be defined both
'                     here and in the dynamic kernel, and then recompile the
'                     library. This option can't be used with NO_INTERRUPTS,
'                     which uses SKIPF.
'
'#ifndef FAST_SAVE_RESTORE
'#define FAST_SAVE_RESTORE
'#endif

'--------------------- Start of NMM Kernel ------------------------------------

DAT

        org 0
KERNEL_START

' the first $54 longs must be in the same place in all NMM kernels, to
' allow for the separate compilation of code that uses these locations

INIT    jmp #nmm_init          '$00 ' CAN ONLY BE CALLED ONCE !!!
PSHB    jmp #push_b            '$01
CPYB    jmp #copy_b            '$02
NEWF    jmp #new_fp            '$03
RETF    jmp #fp_ret            '$04
CALA    jmp #f_call            '$05
RETN    jmp #f_ret             '$06
CALI    jmp #f_cali            '$07
DIVS    jmp #f_d32s            '$08
SYSP    jmp #plugin            '$09
FADD    jmp #flt_add           '$0a
FSUB    jmp #flt_sub           '$0b
FMUL    jmp #flt_mul           '$0c
FDIV    jmp #flt_div           '$0d
FCMP    jmp #flt_cmp           '$0e
FLIN    jmp #flt_int           '$0f
INFL    jmp #int_flt           '$10
PSHM    jmp #push_m            '$11
POPM    jmp #pop_m             '$12
PSHF    jmp #push_i            '$13

RI      long 0                 '$14
BC      long 0                 '$15

r0      long 0                 '$16
r1      long 0                 '$17
r2      long 0                 '$18
r3      long 0                 '$19
r4      long 0                 '$1a
r5      long 0                 '$1b
r6      long 0                 '$1c
r7      long 0                 '$1d
r8      long 0                 '$2e
r9      long 0                 '$2f
r10     long 0                 '$20
r11     long 0                 '$21
r12     long 0                 '$22
r13     long 0                 '$23
r14     long 0                 '$24
r15     long 0                 '$25
r16     long 0                 '$26
r17     long 0                 '$27
r18     long 0                 '$28
r19     long 0                 '$29
r20     long 0                 '$2a
r21     long 0                 '$2b
r22     long 0                 '$2c
r23     long 0                 '$2d




Save_PC long @C_main           '$2e set here only for creating blobs!

Save_FP long 0                 '$2f
Save_SP long 0                 '$30
Save_PA long 0                 '$31

Bit31   long  $80000000        '$32
all_1s  long  $ffffffff        '$33
cviu_m1 long  $000000ff        '$34
cviu_m2 long  $0000ffff        '$35
top8    long  $ff000000        '$36 top 8 bits bitmask
low24   long  $00ffffff        '$37 low 24 bits bitmask

req     long  0                '$38 request block address
reg     long  0                '$39 registry address

' NOTE - the initial values below are used only during kernel initialization

t1      long  HUB_TOP          '$3a
t2      long  FREE_MEM         '$3b
t3      long  REQUESTS         '$3c
t4      long  REGISTRY         '$3d

ct1     long  0                '$3e
ct2     long  0                '$3f
ct3     long  0                '$40

DBG1    long  0                '$41 ' debugger opAddr
DBG2    long  0                '$42 ' debugger temp

' nmm_init : initialize VM - note that this code may be overlaid by
'            19 longs of debug code once initialization is complete

DEBUG_OVERLAY
nmm_init




















        wrlong  t1,t2           '$43  1 set up free memory pointer
        mov     reg,t4          '$44  2 point to registry
        cogid   t2              '$45  3 get our cog id
        shl     t2,#2           '$46  4 point to ...
        add     t4,t2           '$47  5 ... our registry entry
        rdlong  t2,t4           '$48  6 get our request block
        and     t2,low24        '$49  7 register ...
        wrlong  t2,t4           '$4a  8 ... our kernel
        setq2   #(LUT_LIBRARY_END - LUT_STARTUP - 1) '$4b 9 load start/library code ...
        rdlong  0, ##@LUT_STARTUP '$4c&4d 10&11 ... to LUT RAM
        neg     t1,#1           '$4e 12 set ... MEM_LOCK ...
        wrlong  t1,##MEM_LOCK   '$4f&50 13&14 ... to unused
        call    #_C_init        '$51 15 execute startup code
        jmp     #C_main         '$52 16 start executing C code
        long    0               '$53 17
        long    0               '$54 18

        long    0               '$55 19
        long    0               '$56 20
        long    0               '$57 21
        long    0               '$58 22
        long    0               '$59 23
        long    0               '$5a 24
        long    0               '$5a 25
        long    0               '$5b 26
        long    0               '$5c 27
        long    0               '$5d 28
        long    0               '$5e 29
'
' push_i - push a value whose address is specified indirectly in a
'          frame variable onto the stack
'
push_i

       stalli               ' disable interrupts

       rdlong RI,PA         ' load the long value
       adds   RI,PTRB       ' add the frame pointer
push_x

       stalli               ' disable interrupts

       rdlong RI,RI         ' read the value at that address
       wrlong RI,--PTRA     ' save value on stack
       add    PA,#4         ' increment PC ...
returni

       allowi               ' ... enable interrupts ...

       jmp    PA            ' ... and return

'
' push_m - push many registers (specified by long at PC) onto the stack,
' decrementing the SP (PTRA) before each one
'
push_m

       stalli               ' disable interrupts







       rdlong RI,PA         ' load the long value specifying registers to push

       mov    t1,RI         ' save register specification for later
       shr    RI,#6         ' ignore registers r0 - r5 (never saved)
       mov    t3,#r6        ' start with r6
push_nxt
       shr    RI,#1 wcz     ' save rX?
 if_c  altd   t3            ' yes - decrement SP ...
 if_c  wrlong 0-0,--PTRA    ' ... and save the register
       add    t3,#1         ' point to next register
 if_nz jmp    #push_nxt     ' continue till all registers saved

























       wrlong t1,--PTRA     ' save register specification

       add    PA,#4         ' increment PC ...
       jmp    #returni      ' ... and return

Bits18 long   %0000_0000_0000_0011_1111_1111_1111_1111

'
' pop_m - pop many registers (specified by the long on top of stack)
' from the stack, incremening the SP after each one
'
pop_m

       stalli               ' disable interrupts







       rdlong RI,PTRA++     ' pop the long value specifying registers to pop

       mov    t2,#r23       ' start with ...
       shl    RI,#(32-24)   ' ... r23
pop_nxt
       shl    RI,#1 wcz     ' load rX?
 if_c  altd   t2            ' yes - load the register ...
 if_c  rdlong 0-0,PTRA++    ' ... and increment the stack pointer
 if_nz sub    t2,#1         ' if more to do, point to previous register ...
 if_nz jmp    #pop_nxt      ' ... and continue till all registers popped
























       jmp    #returni

'
' push_b - push a structure (size in bytes at the PC) pointed to by R0
'          onto the stack, decrementing the SP (PTRA).
'
push_b

       stalli               ' disable interrupts

       rdlong BC,PA         ' load the byte count
       add    PA,#4         ' increment the PC
       mov    t3,BC         ' round up the count ...
       add    t3,#3         ' ... to be ...
       andn   t3,#3         ' ... a multiple of 4
       sub    PTRA,t3       ' decrement SP (PTRA) by rounded up size
       mov    t1,R0         ' source is in R0
       mov    t2,PTRA       ' destination is SP (PTRA)
       jmp    #copy_bytes   ' do the copy
'
' copy_b - copy a structure (size in bytes at the PC)
'          from the address in R1 to the address in R0
'
copy_b

       stalli               ' disable interrupts

       rdlong BC,PA         ' load the byte count
       add    PA,#4         ' increment the PC
       mov    t1,R1         ' source is in R1
       mov    t2,R0         ' destination is in R0
'
copy_bytes
       rep    #4,BC         ' repeat the next 4 instructions BC times
       rdbyte t3,t1         ' read from src to t3
       wrbyte t3,t2         ' write t3 to dst
       add    t1,#1         ' increment source
       add    t2,#1         ' increment destination
       jmp    #returni
'
' new_fp - save current frame pointer and set up a new frame pointer
' also calculate what SP (PTRA) was before data was pushed and save it in BC
'
new_fp

       stalli               ' disable interrupts

       wrlong PTRB,--PTRA   ' save FP (PTRB) to stack
       mov    PTRB,PTRA     ' set up new FP (PTRB)
       add    BC,#8         ' calculate what SP (PTRA) was ...
       add    BC,PTRB       ' ... before arguments were pushed
       sub    PTRA,#4       ' allow for alloca
       wrlong Bit31,PTRA    ' initialize pre-alloca SP (to a known value)
       jmp    #returni
'
' fp_ret - pop current frame, restore previous frame and stack pointers,
'          then restore the previous program counter
'
' f_ret -  just restore the previous program counter
'
fp_ret

       stalli               ' disable interrupts

       add    PTRA,#4       ' allow for alloca
       rdlong PTRB,PTRA++   ' restore previous FP (PTRB)
f_ret

       stalli               ' disable interrupts

       rdlong PA,PTRA       ' read the PC
       add    PTRA,#8       ' increment the SP (PTRA)
       jmp    #returni
'
' f_call - call the routine at the address pointed to by the PC
' f_cali - call the routine whose address is in RI
'
f_call

       stalli               ' disable interrupts

       rdlong RI,PA         ' get the address to call
       add    PA,#4         ' increment the PC (this is the return address)
f_cali

       stalli               ' disable interrupts

       sub    PTRA,#8       ' decrement the SP (PTRA)
       wrlong PA,PTRA       ' save current PC to stack

       allowi               ' enable interrupts

       jmp    RI            ' execute next instruction

'fd_32s - Signed 32 bit division
'         Divisor --> r1
'         Dividend--> r0
'         Result --> Quotient in r0
'                    Remainder in r1

f_d32s

       stalli               ' disable interrupts

       call   #\signed_d32  ' perform signed division
       jmp    #returni

' plugin - call a plugin
' On entry:
'       R3 = code:
'            - cog id if >= 128 (i.e. $80 + cog id)
'            - plugin type if < 128 (i.e. 0 .. 127)
'            - service id if < 0
'       R2 = data (optional pointer)
'
' NOTES: Locks are currently only supported when invoking via a service id.
'        When using service id, the data should only use the lower 24 bits.
'
' On exit:
'       R0 = result

plugin

       stalli               ' disable interrupts

       call   #\do_plugin   ' do_plugin does all the work
       jmp    #returni

'--------------------- Start of Float32 Components ----------------------------

{{
                            TERMS OF USE: MIT License
              (Float32 Components only - i.e. excludes LMM Kernel)

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
}}













DAT

'------------------------------------------------------------------------------
' Float32 Assembly language routines
'------------------------------------------------------------------------------
' flt_add   r0 = r0 + r1
' flt_sub   r0 = r0 - r1
' changes: r0, flagA, expA, manA, r1, flagB, expB, manB, t1
'------------------------------------------------------------------------------

flt_sub                 xor     r1, Bit31               ' negate B
flt_add

                        stalli               ' disable interrupts

                        call    #_Unpack2               ' unpack two variables
          if_c_or_z     jmp     #returni                ' check for NaN or B = 0

                        test    flagA, #SignFlag wz     ' negate A mantissa if negative
          if_nz         neg     manA, manA
                        test    flagB, #SignFlag wz     ' negate B mantissa if negative
          if_nz         neg     manB, manB

                        mov     t1, expA                ' align mantissas
                        sub     t1, expB
                        abs     t1, t1
                        fle     t1, #31
                        cmps    expA, expB wcz
          if_nz_and_nc  sar     manB, t1
          if_nz_and_c   sar     manA, t1
          if_nz_and_c   mov     expA, expB

                        add     manA, manB              ' add the two mantissas
                        cmps    manA, #0 wc             ' set sign of result
          if_c          or      flagA, #SignFlag
          if_nc         andn    flagA, #SignFlag
                        abs     manA, manA              ' pack result and exit
pack_rtni               call    #_Pack
                        jmp     #returni

'------------------------------------------------------------------------------
' flt_mul  r0 = r0 * r1
' changes: r0, flagA, expA, manA, r1, flagB, expB, manB, t1, t2
'------------------------------------------------------------------------------

flt_mul

                        stalli               ' disable interrupts

                        call    #_Unpack2               ' unpack two variables
          if_nc         jmp     #flt_mul2               ' multiply if neither is NaN
                        cmp     expA, #255 wz           ' NaN, so check for r0 = Inf
          if_z          jmp     #flt_mul1               ' yes - return Inf
                        cmp     expB, #255 wz           ' no - check for r1 = Inf
          if_nz         jmp     #returni                ' no - return NaN
flt_mul1                mov     r0, Inf                 ' yes, r0 or r1 is Inf, so return Inf
                        xor     flagA, flagB            '
                        test    flagA, #SignFlag wz
          if_nz         or      r0, Bit31
                        jmp     #returni
flt_mul2                xor     flagA, flagB            ' get sign of result
                        add     expA, expB              ' add exponents
                        qmul    manA, manB
                        getqy   t1
                        shl     t1, #3                  ' justify result and exit
                        mov     manA, t1
                        jmp     #pack_rtni

'------------------------------------------------------------------------------
' flt_div  r0 = r0 / r1
' changes: r0, flagA, expA, manA, r1, flagB, expB, manB, t1, t2
'------------------------------------------------------------------------------

flt_div

                        stalli               ' disable interrupts

                        call    #_Unpack2               ' unpack two variables
          if_c_or_z     mov     r0, NaN                 ' check for NaN or divide by 0
          if_c_or_z     jmp     #returni

                        xor     flagA, flagB            ' get sign of result
                        sub     expA, expB              ' subtract exponents

                        shr     manA, #1
                        setq    manA
                        qdiv    #0, manB
                        getqx   manA
                        shr     manA, #2
                        jmp     #pack_rtni

'------------------------------------------------------------------------------
' flt_int  r0 = float(r0)
' changes: r0, flagA, expA, manA
'------------------------------------------------------------------------------

flt_int

                        stalli               ' disable interrupts

                        mov     flagA, r0               ' get integer value
                        mov     r0, #0                  ' set initial result to zero
                        abs     manA, flagA wz          ' get absolute value of integer
          if_z          jmp     #returni                ' if zero, exit
                        shr     flagA, #31              ' set sign flag
                        mov     expA, #31               ' set initial value for exponent
normalize_1             shl     manA, #1 wc             ' normalize the mantissa
          if_nc         sub     expA, #1                ' adjust exponent
          if_nc         jmp     #normalize_1
                        rcr     manA, #1                ' justify mantissa
                        shr     manA, #2
                        jmp     #pack_rtni

'------------------------------------------------------------------------------
' int_flt  r0 = fix(r0)
' changes: r0, flagA, expA, manA, t1
'------------------------------------------------------------------------------

int_flt

                        stalli               ' disable interrupts

fix                     call    #_Unpack                ' unpack floating point value
          if_c          jmp     #returni                ' check for NaN
                        shl     manA, #2                ' left justify mantissa
                        mov     r0, #0                  ' initialize result to zero
                        neg     expA, expA              ' adjust for exponent value
                        add     expA, #31 wz
                        cmps    expA, #33 wc
          if_nc_or_z    jmp     #returni
                        sub     expA, #1
                        shr     manA, expA
                        shr     manA, #1
                        test    flagA, #signFlag wz     ' check sign and exit
                        sumnz   r0, manA
                        jmp     #returni

'------------------------------------------------------------------------------
' flt_cmp   set Z and C flags for r0 - r1
' changes: status, t1
'------------------------------------------------------------------------------

flt_cmp

                        stalli               ' disable interrupts

                        mov     t1, r0               ' compare signs
                        xor     t1, r1
                        and     t1, Bit31 wz
          if_z          jmp     #cmp1                  ' same, then compare magnitude

                        mov     t1, r0               ' check for +0 or -0
                        or      t1, r1
                        andn    t1, Bit31 wcz
          if_z          jmp     #returni

                        test    r0, Bit31 wc         ' compare signs
                        jmp     #returni

cmp1                    test    r0, Bit31 wz         ' check signs
          if_nz         jmp     #cmp2
                        cmp     r0, r1 wcz
                        jmp     #returni
cmp2                    cmp     r1, r0 wcz           ' reverse test if negative
                        jmp     #returni

'------------------------------------------------------------------------------
' input:   r0        32-bit floating point value
'          r1        32-bit floating point value
' output:  flagA        r0 flag bits (Nan, Infinity, Zero, Sign)
'          expA         r0 exponent (no bias)
'          manA         r0 mantissa (aligned to bit 29)
'          flagB        r1 flag bits (Nan, Infinity, Zero, Sign)
'          expB         r1 exponent (no bias)
'          manB         r1 mantissa (aligned to bit 29)
'          C flag       set if r0 or r1 is NaN
'          Z flag       set if r1 is zero
' changes: r0, flagA, expA, manA, r1, flagB, expB, manB, t1
'------------------------------------------------------------------------------

_Unpack2                mov     t1, r0               ' save A
                        mov     r0, r1               ' unpack B to A
                        call    #_Unpack

                        mov     r1, r0               ' save B variables
                        mov     flagB, flagA
                        mov     expB, expA
                        mov     manB, manA

                        mov     r0, t1               ' unpack A
                        call    #_Unpack
          if_nc         test    flagB, #NanFlag wz
          if_nc_and_nz  modc    _set wc
          _ret_         cmp     manB, #0 wz          ' set Z flag

'------------------------------------------------------------------------------
' input:   r0        32-bit floating point value
' output:  flagA        r0 flag bits (Nan, Infinity, Zero, Sign)
'          expA         r0 exponent (no bias)
'          manA         r0 mantissa (aligned to bit 29)
'          C flag       set if r0 is NaN
'          Z flag       set if r0 is zero
' changes: r0, flagA, expA, manA
'------------------------------------------------------------------------------

_Unpack                 mov     flagA, r0            ' get sign
                        shr     flagA, #31
                        mov     manA, r0             ' get mantissa
                        and     manA, Mask23
                        mov     expA, r0             ' get exponent
                        shl     expA, #1
                        shr     expA, #24 wz
          if_z          jmp     #zeroSubnormal         ' check for zero or subnormal
                        cmp     expA, #255 wz           ' check if finite
          if_nz         jmp     #finite
                        mov     r0, NaN              ' no, then return NaN
                        or      flagA, #NaNFlag
                        jmp     #U_exit2

zeroSubnormal           mov     t4, manA
                        or      t4, expA wz             ' check for zero
          if_nz         jmp     #subnorm
                        or      flagA, #ZeroFlag        ' yes, then set zero flag
                        neg     expA, #150              ' set exponent and exit
                        jmp     #U_exit2

subnorm                 shl     manA, #7                ' fix justification for subnormals
subnorm2                test    manA, Bit29 wz
          if_nz         jmp     #U_exit1
                        shl     manA, #1
                        sub     expA, #1
                        jmp     #subnorm2

finite                  shl     manA, #6                ' justify mantissa to bit 29
                        or      manA, Bit29             ' add leading one bit

U_exit1                 sub     expA, #127              ' remove bias from exponent
U_exit2                 test    flagA, #NaNFlag wc      ' set C flag
          _ret_         cmp     manA, #0 wz             ' set Z flag

'------------------------------------------------------------------------------
' input:   flagA        r0 flag bits (Nan, Infinity, Zero, Sign)
'          expA         r0 exponent (no bias)
'          manA         r0 mantissa (aligned to bit 29)
' output:  r0        32-bit floating point value
' changes: r0, flagA, expA, manA
'------------------------------------------------------------------------------

_Pack                   cmp     manA, #0 wz             ' check for zero
          if_z          mov     expA, #0
          if_z          jmp     #P_exit3

normalize_2             shl     manA, #1 wc             ' normalize the mantissa
          if_nc         sub     expA, #1                ' adjust exponent
          if_nc         jmp     #normalize_2

                        add     expA, #2                ' adjust exponent
                        add     manA, #$100 wc          ' round up by 1/2 lsb
          if_c          add     expA, #1

                        add     expA, #127              ' add bias to exponent
                        fges    expA, Minus23
                        fles    expA, #255

                        cmps    expA, #1 wc             ' check for subnormals
          if_nc         jmp     #P_exit3

subnormal               or      manA, #1                ' adjust mantissa
                        ror     manA, #1

                        neg     expA, expA
                        shr     manA, expA
                        mov     expA, #0                ' biased exponent = 0

P_exit3                 mov     r0, manA             ' bits 22:0 mantissa
                        shr     r0, #9
                        shl     expA, #23
                        or      r0, expA
                        shl     flagA, #31
          _ret_          or      r0, flagA            ' bit 31 sign

NaN                     long    $7FFF_FFFF
Inf                     long    $7F80_0000
Minus23                 long    -23
Mask23                  long    $007F_FFFF
Bit29                   long    $2000_0000

flagA                   long    0
expA                    long    0
manA                    long    0

flagB                   long    0
expB                    long    0
manB                    long    0

'-------------------- End of Float32 Components -------------------------------

' lockbits must be in the same place in all NMM kernels

         fit    $1ea
         orgf   $1ea

lockbits long   0               ' lockbits used to simulate P1-style locks

' last 5 longs are reserved for debug overlay vectors (or debug LED)

         fit    $1eb
         orgf   $1eb

DEBUG_VECTORS











         long   DEBUG_BREAK
         long   DEBUG_ADDR
         long   DEBUG_OUT
         long   DEBUG_IN
         long   DEBUG_FLAG

         fit    $1f0

         fit    $1f8
         orgf   $1f8
SP       long   $0    ' SP is PTRA
FP       long   $0    ' FP is PTRB

'------------------------- END OF KERNEL --------------------------------------

'#line 89 "//catalina.s"

'#line 1 "/target/p2/reserve.inc"
'------------------------- START OF RESERVED HUB ------------------------------

' this definition of the reserved Hub locations is for inclusion in cases
' where the values are defined during normal program compilation.
' Otherwise it should be identical to "reserven.inc"

DAT
         orgh  $1000

RESERVED jmp  #\NON_RESERVED  ' $1000 Lower 20 bits = addr of non-reserved hub
CLKFREQ  long _CLOCKFREQ      ' $1004 initial clock frequency (not updated)
CLKMODE  long _CLOCKMODE      ' $1008 initial clock mode (not updated)
BAUDRATE long _BAUDRATE       ' $100c initial baud rate (not updated)

' seglayout specifies the layout of the segments

seglayout                     ' $1010 - if this changes, change catbind.c
        long  SEGMENT_LAYOUT

' segtable contains the start address of each of the segments

segtable
        long  @Catalina_Code
        long  @Catalina_Cnst
        long  @Catalina_Init
        long  @Catalina_Data
        long  @Catalina_Ends
        long  @Catalina_RO_Base
        long  @Catalina_RW_Base
        long  @Catalina_RO_Ends
        long  @Catalina_RW_Ends
init_PC long  @C_main                    ' should be filled in with @C_main





NON_RESERVED

'--------------------------- END OF RESERVED HUB ------------------------------
'#line 91 "//catalina.s"



 orgh
 alignl
DAT
 org $200
LUT_STARTUP
'#line 1 "/target/p2/c_init.inc"
{{
'-------------------------------------------------------------------------------
'
' c_init.inc - Common C initialization code. This code is normally loaded
'              and executed from the LUT.
'
' Version 7.1  - Now common across all kernels and memory models
'
'-------------------------------------------------------------------------------
'
'    Copyright 2024 Ross Higson
'
'    This file is part of the Catalina Target Package.
'
'    The Catalina Target Package is free software: you can redistribute
'    it and/or modify it under the terms of the GNU Lesser General Public
'    License as published by the Free Software Foundation, either version
'    3 of the License, or (at your option) any later version.
'
'    The Catalina Target Package is distributed in the hope that it will
'    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
'    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
'    See the GNU Lesser General Public License for more details.
'
'    You should have received a copy of the GNU Lesser General Public
'    License along with the Catalina Target Package.  If not, see
'    <http://www.gnu.org/licenses/>.
'
'------------------------------------------------------------------------------
}}

DAT

_C_init
 hubset  #$F0
 hubset  ##_CLOCKINIT
 waitx   ##_CLOCKWAIT
 mov     r0,##_CLOCKFREQ
 wrlong  r0,#$14
 mov     r0,##_CLOCKMODE
 wrlong  r0,#$18
 hubset  r0
 wrlong  #0,##ENVIRON

 call    #INITIALIZE_REGISTRY

 call    #INITIALIZE_ARGUMENTS


 call    #INITIALIZE_ENVIRON

 call    #TERMINATE_PLUGINS
 call    #INITIALIZE_PLUGINS





' <<< INSERT COMMON INITIAL PASM HERE (if any - must fit in LUT RAM) >>>

' Note that the following code works only for static kernels that are not
' loaded by a separate loader. For XMM, EMM, SMM, Quick Build or dynamically
' loaded kernels, code to set up these registers must be executed by the
' kernel AFTER it is loaded ...

 rdlong  SP,##FREE_MEM      ' set up default SP (may be overridden later)
 rdlong  r3,##ARGC_ADDR     ' load argc
 rdlong  r2,##ARGV_ADDR     ' load argv

 ret

'#line 100 "//catalina.s"

'#line 1 "/target/p2/plugsup.inc"
{{
'-------------------------------------------------------------------------------
'
' plugsup.inc -  include the plugin support code.
'                The actual plugin code is included by 'plugins.inc'
'
' Version 7.1  - Initial version
'
'-------------------------------------------------------------------------------
'
'    Copyright 2011 Ross Higson
'
'    This file is part of the Catalina Target Package.
'
'    The Catalina Target Package is free software: you can redistribute
'    it and/or modify it under the terms of the GNU Lesser General Public
'    License as published by the Free Software Foundation, either version
'    3 of the License, or (at your option) any later version.
'
'    The Catalina Target Package is distributed in the hope that it will
'    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
'    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
'    See the GNU Lesser General Public License for more details.
'
'    You should have received a copy of the GNU Lesser General Public
'    License along with the Catalina Target Package.  If not, see
'    <http://www.gnu.org/licenses/>.
'
'------------------------------------------------------------------------------
}}

' All plugin selection logic and constants should go here ...

CON

' INITIALIZATION_DELAY must be long enough for all plugins to initialize
' themselves - this value is currently set by trial and error, but should
' include a large margin in case we change some plugin code and forget to
' change it here - this can lead to some very confusing behaviour!

INITIALIZATION_DELAY = _CLOCKFREQ/1000

' plugin protection logic ...







' Floating point plugin selection logic ...





























' SD Card selection logic ...







DAT

' Registry initialization code ...

INITIALIZE_REGISTRY

' initialize registry entries, but don't overwrite the type of THIS cog,
' which must be set up by the kernel executing this code.

 mov r1, #0
 mov r2, ##REQUESTS
 mov r6, ##REGISTRY
 cogid r3
.init_reg1
 mov r0, r2
 cmp r1, r3 wz
 if_nz or r0, ##$FF000000
 wrlong r0, r6
 add r6, #4
 add r2, #8
 add r1, #1
 cmp r1, #MAX_COGS wz
 if_nz jmp #.init_reg1

' initialize service entries

 mov r6, ##REGISTRY
 mov r1, #SVC_MAX
 mov r0, ##$FF80
.init_reg2
 sub r6, #2
 wrword r0, r6
 djnz r1, #.init_reg2

' initialize cogstore and argc/argv entries

 mov r0, #0
 wrlong r0, ##COGSTORE
 wrlong r0, ##ARGC_ADDR
 mov r6, ##ARGV_0
 wrlong r6, ##ARGV_ADDR
 mov r1, #ARGV_MAX
.init_reg3
 wrlong r0, r6
 add r6, #4
 djnz r1, #.init_reg3
 ret


' terminate any plugins (up to LAST_COG)

TERMINATE_PLUGINS
         cogid   r1
         mov     r0, #0
.stop_another
 cmp     r0, r1 wz
 if_nz   cogstop r0
         add r0, #1
         cmp r0, #LAST_COG wcz
 if_be   jmp #.stop_another
         ret

' All plugin initialization code should go in here ...

' NOTE: It may seem unnecessary to send the plugins the address of the
'       registry, or to allocate their required data blocks here, since
'       they are compiled in the same source file and could currently
'       get/do this for themselves ... but in future we may want to have
'       a library of dynamically loadable plugins, so plugins should not
'       assume anything about the size or layout of hub RAM. They should
'       also not assume their image will remain available after they are
'       loaded.

INITIALIZE_PLUGINS

' mov dira, #0                   ' !!!TBD!!! Is this really necessary?
' mov dirb, #0                   ' !!!TBD!!! Is this really necessary?










 call    #HMI_Setup



























 mov     r6, #%10000
 setq    ##REGISTRY              ' start ...
 coginit r6, ##@SD_START wc      ' ... plugin (which may also be CLOCK)
 call    #SD_Setup



































































































' wait for all plugins to initialize (exactly how long?)

 waitx   ##INITIALIZATION_DELAY















 ret













































' plugin initialization support code ...
'
' Register_Services - register a table full of services
' on entry : r6 = cog id to use
'          : r0 = service table (2 bytes each entry, zero terminated)
'

Register_Services
        mov     r7,##REGISTRY ' point to registry





        neg     r3,#1          ' no lock required

        and     r3, #$1f       ' use 5 bits for lock (0 .. 15 are valid locks)

.reg_loop
        rdword  r1,r0 wcz      ' get service table entry

 if_z   ret                    ' return if done all entries
        mov     r2,r1
        shr     r1,#8          ' r1 is ...
        and     r1,#$7F        ' ... plugin-specific request code (7 bits)
        and     r2,#$FF        ' r2 is global service id (SVC_X_XXXXX)
        call    #.register_1_service
        add     r0,#2
        jmp     #.reg_loop
'
' register_1_service
' On entry:
'       r1 = cog specific request id (7 bits)
'       r2 = global service id
'       r3 = lock to use (5 bits)
'       r6 = cog number (4 bits)
'       r7 = address of registry
'
.register_1_service
        mov     r5, r6         ' combine ...
        shl     r5, #5         ' ... cog number ...
        or      r5, r3         ' ... and ...
        shl     r5, #7         ' ... lock ...
        or      r5, r1         ' ... and plugin-specific request code
        mov     r4, r7         ' write it to ...
        sub     r4, r2         ' ... the word ...
        sub     r4, r2         ' ... at ...
_ret_   wrword  r5, r4         ' ... REGISTRY[-service id]

'#line 102 "//catalina.s"


'#line 1 "/target/p2/argument.inc"
' Catalina argument and environment set up ...



DAT

' Argument initialization code ...

INITIALIZE_ENVIRON

         call    #.cogstore_valid
         cmp     r0, #0 wz
  if_z   ret
         mov     r1, ##(LUT_READ|ENVIRON)
         wrlong  r1, ##COGSTORE
         mov r2, ##10000
.lut_loop
         rdlong  r0, ##COGSTORE wz
  if_nz  djnz    r2, #.lut_loop
         call    #.cogstore_stop
         ret




DAT

' Argument initialization code ...

INITIALIZE_ARGUMENTS

         call    #.cogstore_size
         rdlong  r1, ##FREE_MEM
         cmps    r0, #0 wcz
 if_be   jmp     #.no_buffer ' no buffer required
         shl     r0, #2 ' convert size in long to bytes
         sub     r1, r0
         wrlong  r1, ##FREE_MEM
.no_buffer
         call    #.cogstore_setup



         ret





' CogStore support routines ...

.cogstore_valid
         neg r0, #1
         wrlong r0, ##COGSTORE
         mov r3, ##10000
.valid_loop
         rdlong r0, ##COGSTORE
         cmp r0, ##CMD_RESPONSE wz
  if_z   neg r0, #1
  if_z   ret
         djnz r3, #.valid_loop
  _ret_  mov r0, #0

.cogstore_stop
         call #.cogstore_valid
         cmp r0, #0 wz
  if_z   ret
         mov r0, ##CMD_STOP
         wrlong r0, ##COGSTORE
         mov r1, ##10000
.stop_loop
         rdlong r0, ##COGSTORE wz
  if_z   neg r0, #1
  if_z   ret
         djnz r1, #.stop_loop
  _ret_  mov r0, #0





.cogstore_size
         call #.cogstore_valid
         cmp r0, #0 wz
  if_z   ret
         mov r1, ##CMD_SIZE
         or  r1, ##$FFFFFF
         wrlong r1, ##COGSTORE
         mov r2, ##10000
.size_loop
         rdlong r0, ##COGSTORE
         cmp r0, r1 wz
  if_nz  and r0, ##$FFFFFF
  if_nz  ret
         djnz r2, #.size_loop
  _ret_  neg r0, #2

.cogstore_setup
         mov r0, #0
         wrlong r0, ##ARGC_ADDR
         mov r3, ##ARGV_0
         wrlong r3, ##ARGV_ADDR
         mov r3, #ARGV_MAX
         mov r2, ##ARGV_0
.setup_loop1
         wrlong r0, r2
         add r2, #4
         djnz r3, #.setup_loop1
         call #.cogstore_valid
         cmp r0, #0 wz
  if_nz  jmp #.setup_valid
         mov r0, #1
         wrlong r0, ##ARGC_ADDR
         mov r2, ##(ARGV_0 + 4 * (ARGV_MAX-2))
         wrlong r2, ##ARGV_0
         mov r3, ##$6C6C756E ' null
         wrlong r3, r2
         add r2, #4
         mov r0, #0
         wrlong r0, r2
  _ret_  neg r0, #1
.setup_valid
         mov r0, ##CMD_SETUP
         or  r0, r1
         wrlong r0, ##COGSTORE
         mov r1, ##10000
.setup_loop2
         rdlong r0, ##COGSTORE wz
  if_z   neg r0, #1
  if_z   ret
         djnz r1, #.setup_loop2
  _ret_  mov r0, #0




'#line 105 "//catalina.s"




LUT_STARTUP_END
 fit $300
 orgf $300
LUT_LIBRARY
'#line 1 "/target/p2/klib.inc"
' Catalina kernel library functions ...

' avoid including the kernel library functions twice ...




DAT

' unsigned_d32 - 32 bit unsigned division

unsigned_d32
         qdiv   r0,r1
         getqx  r0
  _ret_  getqy  r1

' signed_d32 - 32 bit signed division

signed_d32
         mov    t3,r1           ' save sign for later
         mov    t4,r0
         abs    r1,r1
         abs    r0,r0
         xor    t3,t4
         call   #\unsigned_d32  ' perform unsigned division
         mov    t4,t4 WC        ' get bit #31 into carry
         negc   r1,r1           ' adjust the sign of the remainder
         mov    t3,t3 WC        ' get bit #31 into carry
  _ret_  negc   r0,r0           ' adjust the sign of the result


' find_ptype - find plugin by type
'
' On entry:
'      r0 = plugin type
'
' On exit:
'      t2 = cog id if found, -1 if not found
'      t1 = registry entry if found
'      Z set if found, Z clr if not found
'      t3 lost

find_ptype
        mov     t1,reg          ' point to registry
        mov     t2,#0           ' start at cog id 0
plgt1
        cmp     t2,#MAX_COGS wcz ' run out of cogs?
 if_ae  jmp     #plgt2          ' yes - no such plugin
        rdlong  t3,t1           ' no - check cog's plugin type
        shr     t3,#24          ' is it ...
        cmp     t3,r0 wz        ' ... the plugin type what we wanted?
 if_z   ret                     ' yes - return cog id in r0, Z set
        add     t2,#1           ' no - try ...
        add     t1,#4           ' ... next ...
        jmp     #plgt1          ' ... cog id
plgt2
 _ret_  neg     t2,#1 wz        ' plugin type not found

' do_plugin - call a plugin
'
' On entry:
'       r3 = code:
'            - cog id if >= 128 (i.e. $80 + cog id)
'            - plugin type if < 128 (i.e. 0 .. 127)
'            - service id if < 0 (i.r. -1 .. -127)
'       r2 = data (optional pointer)
'
' NOTES: Locks are currently only supported when invoking via a service id.
'        When using service id, the data should only use the lower 24 bits.
'
' On exit:
'       R0 = result

do_plugin
        mov     t4,#MAX_LOCKS   ' t4 stores lock - default to none required
        mov     r0,r3 wc        ' get plugin type or cog id or service id
 if_b   jmp     #psvc           ' if < 0, code is a service id
        test    r0,#$80 wz      ' if bit 7 set ...
 if_nz  jmp     #pcog           ' code is a cog id ...
        mov     r0,r3           ' otherwise ...
        call    #\find_ptype    ' ... find plugin by type
 if_nz  jmp     #plugerr        ' if Z clr, no such plugin
        mov     r0,t2           ' use the cog where we found the plugin
        jmp     #pcog           ' invoke plugin (via the cog id)
psvc
        shl     r0,#1           ' read entry ...
        add     r0,reg          ' ... from ...
        rdword  r0,r0           ' ... the service registry
        mov     t1,r0           ' save in t1 and extract ...
        shr     r0,#12          ' ... cog number to r0
        and     r0,#$f          ' cog number is 4 bits
        mov     t2,t1           ' save in t2 and extract ...
        and     t1,#$7f         ' ... 7 bit plugin-specific code ...
        shl     t1,#24 wz       ' ... to t1 (top 8 bits) ...
 if_z   jmp     #plugerr        ' ... or throw error if request code is zero
        mov     t4,t2           ' extract ...
        shr     t4,#7           ' ... lock number to t4
        and     t4,#$1f         ' lock is 5 bits
        test    t4,#$10 wz      ' are we required to use a lock?
 if_nz  jmp     #no_lock        ' no - just make the request
set_lock
        bith    lockbits, t4 wcz ' have we acquired ...
 if_nz  locktry t4 wc            ' ... both intra-cog and inter-cog locks?
 if_nc_and_nz bitl  lockbits, t4 ' true = if_c_and_nz, false = if_nc_or_z
 if_nc_or_z jmp  #set_lock       ' keep trying until we have set the lock
no_lock
        andn    r2,top8         ' combine data ...
        or      r2,t1           ' ... with request code
pcog
        and     r0,#$f          ' mask off cog id to 0 .. 15
        shl     r0,#2           ' point to ...
        add     r0,reg          ' ... registry entry for the cog
        rdlong  r0,r0           ' get request block from registry
        test    r0,top8 wz      ' is a plugin registered in this cog?
 if_z   jmp     #plugerr        ' no - throw error
        andn    r0,top8         ' yes - write ...
        wrlong  r2,r0           ' ... request
ploop
        rdlong  r3,r0   wz      ' wait till ...
 if_nz  jmp     #ploop          ' ... request completed
        add     r0,#4           ' get ...
        rdlong  r0,r0           ' ... result
clr_lock
        cmp     t4,#MAX_LOCKS wcz ' did we set a lock?
 if_b   lockrel t4              ' yes - release the lock we set
 if_b   bitl lockbits, t4
        ret
plugerr
        neg     r0,#1           ' plugin error (e.g. not registered)
        jmp     #clr_lock       ' done - clear lock if required

' do_register - register a plugin
'
' On entry:
'
'        r0 - initial value to write to request block
'        r1 - cog to register (lost)
'        r2 - lost
'        r3 - plugin type to register (lost)

do_register
        shl     r1, #2          ' register ...
        add     r1, ##REGISTRY  ' ... plugin ...
        rdlong  r2, r1          ' ...
        and     r2, ##$00FFFFFF ' ... as ...
        shl     r3, #24         ' ...
        or      r2, r3          ' ...
        wrlong  r2, r1          ' ... plugin type
  _ret_ wrlong  r0, r2          ' save in request block

'
' do_copy
'
' On entry:
'
'       r0 - dst addr
'       r1 - number of bytes to copy (must not be zero!)
'       r2 - src addr
'
' On exit:
'
'       r0 incremented by r1 (i.e. number of bytes)
'       r1 lost
'       r2 incremented by r1 (i.e. number of bytes)
'       r3 lost

do_copy
       rdbyte  r3, r2           '
       wrbyte  r3, r0
       add     r0, #1
       add     r2, #1
       djnz    r1, #do_copy     '
       ret



'#line 114 "//catalina.s"
'#line 1 "/target/p2/nmmklib.inc"
' Catalina kernel functions that are specific to the NMM kernels ...

' avoid including the kernel library functions twice ...




DAT

' NOTE: There are currently no NMM-specific kernel library functions.
'       This file exists as a place to put them if any are required.



'#line 115 "//catalina.s"



LUT_LIBRARY_END
 fit $400
 orgh

CON
SEGMENT_LAYOUT=11
DAT
Catalina_RO_Base
' Catalina Code
DAT
 alignl
Catalina_Code
DAT

' Catalina Export _exit
 alignl
C__exit




 rdlong r0,##CLKFREQ
 shr r0,#6
 waitx r0

 mov r0,#1
 shl r0,#28
 hubset r0


DAT
' Catalina Export _sys_plugin
 alignl
C__sys_plugin
 calld PA,#SYSP
 calld PA,#RETN



' Catalina Import main
DAT
DAT
 alignl
C_tmp157001_00000006_file_char_L000003
 calld PA,#PSHM
 long $d00000
 mov r22, r2
 and r22, cviu_m1
 mov r20, ##@C___ctype+1
 adds r22, r20
 rdbyte r22, r22
 and r22, #7
 cmps r22,  #0 wz
 if_z jmp #\C_tmp157001_00000006_file_char_L000003_5
 mov r0, #1
 jmp #\@C_tmp157001_00000006_file_char_L000003_4
C_tmp157001_00000006_file_char_L000003_5
 mov r23, r2
 and r23, cviu_m1
 mov r22, #64
 cmps r23, r22 wz
 if_z jmp #\C_tmp157001_00000006_file_char_L000003_11
 cmps r23, r22 wcz
 if_a jmp #\C_tmp157001_00000006_file_char_L000003_13
 cmps r23,  #33 wcz
 if_b jmp #\C_tmp157001_00000006_file_char_L000003_9
 cmps r23,  #46 wcz
 if_a jmp #\C_tmp157001_00000006_file_char_L000003_9
 mov r22, r23
 shl r22, #2
 mov r20, ##@C_tmp157001_00000006_file_char_L000003_14_L000016-132
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp157001_00000006_file_char_L000003_13
 mov r22, #95
 cmps r23, r22 wz
 if_z jmp #\C_tmp157001_00000006_file_char_L000003_11
 cmps r23,  #96 wz
 if_z jmp #\C_tmp157001_00000006_file_char_L000003_11
 cmps r23, r22 wcz
 if_b jmp #\C_tmp157001_00000006_file_char_L000003_9
 cmps r23,  #123 wz
 if_z jmp #\C_tmp157001_00000006_file_char_L000003_11
 cmps r23,  #125 wz
 if_z jmp #\C_tmp157001_00000006_file_char_L000003_11
 cmps r23,  #126 wz
 if_z jmp #\C_tmp157001_00000006_file_char_L000003_11
 jmp #\@C_tmp157001_00000006_file_char_L000003_9
C_tmp157001_00000006_file_char_L000003_11
 mov r0, #1
 jmp #\@C_tmp157001_00000006_file_char_L000003_4
C_tmp157001_00000006_file_char_L000003_9
 mov r0, #0
C_tmp157001_00000006_file_char_L000003_4
 calld PA,#POPM
 calld PA,#RETN
' Catalina Export loadfile
 alignl
C_loadfile
 calld PA,#NEWF
 calld PA,#PSHM
 long $faa000
 mov r23, r2
 mov r15, #0
 mov r13, #0
 mov r2, ##@C_loadfile_20_L000021
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r19, r0
 mov r22, r19
 cmp r22,  #0 wz
 if_nz jmp #\C_loadfile_22
 mov r2, r23
 mov r3, ##@C_loadfile_24_L000025
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_printf
 add SP, #4
 mov r0, ##0
 jmp #\@C_loadfile_19
C_loadfile_22
 mov r2, r23
 mov r3, ##@C_loadfile_26_L000027
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_printf
 add SP, #4
 mov r2, #2
 mov r3, #0
 mov r4, r19
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fseek
 add SP, #8
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_ftell
 mov r13, r0
 mov r2, #0
 mov r3, #0
 mov r4, r19
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fseek
 add SP, #8
 mov r22, r13
 adds r22, #100
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_malloc
 mov r17, r0
 mov r22, r17
 cmp r22,  #0 wz
 if_nz jmp #\C_loadfile_33
 mov r2, ##@C_loadfile_30_L000031
 mov BC, #4
 calld PA,#CALA
 long @C_printf
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_fclose
 mov r0, ##0
 jmp #\@C_loadfile_19
C_loadfile_32
 cmps r21,  #13 wz
 if_z jmp #\C_loadfile_35
 mov r22, r15
 mov r15, r22
 adds r15, #1
 adds r22, r17
 mov r20, r21
 wrbyte r20, r22
C_loadfile_35
C_loadfile_33
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_fgetc
 mov r21, r0
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C_loadfile_32
 mov r22, r15
 mov r15, r22
 adds r15, #1
 adds r22, r17
 mov r20, #0
 wrbyte r20, r22
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_fclose
 mov r0, r17
C_loadfile_19
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export execute
 alignl
C_execute
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r2
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_loadfile
 mov r21, r0
 mov r22, r21
 cmp r22,  #0 wz
 if_z jmp #\C_execute_38
 mov r2, ##@C___stderr
 mov r3, ##@C___stdout
 mov r4, ##@C___stdin
 mov r5, r21
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_basic
 add SP, #12
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_free
 jmp #\@C_execute_39
C_execute_38
 mov r2, ##@C_execute_40_L000041
 mov BC, #4
 calld PA,#CALA
 long @C_printf
 mov r2, ##@C___stdin
 mov BC, #4
 calld PA,#CALA
 long @C_getc
C_execute_39
 mov r0, #0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export main
 alignl
C_main
 sub SP, #8
 mov BC, #8
 calld PA,#NEWF
 sub SP, #84
 mov r23, r3
 mov r21, r2
 mov r2, ##@C_main_45_L000046
 mov r3, ##@C_main_43_L000044
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_printf
 add SP, #4
 cmps r23,  #2 wcz
 if_ae jmp #\C_main_47
 mov r2, ##@C_main_49_L000050
 mov BC, #4
 calld PA,#CALA
 long @C_printf
 mov r2, ##@C_main_51_L000052
 mov BC, #4
 calld PA,#CALA
 long @C_printf
C_main_53
 mov r2, ##@C_main_56_L000057
 mov BC, #4
 calld PA,#CALA
 long @C_printf
 mov r2, ##@C___stdin
 mov r3, #81
 mov r4, FP
 sub r4, #-(-88)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fgets
 add SP, #8
 mov r2, ##@C_main_58_L000059
 mov BC, #4
 calld PA,#CALA
 long @C_printf
 mov r19, #0
 jmp #\@C_main_61
C_main_60
 adds r19, #1
C_main_61
 mov r22, FP
 sub r22, #-(-88)
 adds r22, r19
 rdbyte r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp157001_00000006_file_char_L000003
 cmps r0,  #0 wz
 if_nz jmp #\C_main_60
 cmps r19,  #0 wz
 if_nz jmp #\C_main_63
 mov r2, ##-1
 mov BC, #4
 calld PA,#CALA
 long @C_exit
C_main_63
 mov r22, FP
 sub r22, #-(-88)
 adds r22, r19
 mov r20, #0
 wrbyte r20, r22
 mov r2, ##@C_loadfile_20_L000021
 mov r3, FP
 sub r3, #-(-88)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r17, r0
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_main_65
 mov r2, #46
 mov r3, FP
 sub r3, #-(-88)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strchr
 add SP, #4
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_main_67
 mov r2, ##@C_main_69_L000070
 mov r3, FP
 sub r3, #-(-88)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcat
 add SP, #4
 mov r2, ##@C_loadfile_20_L000021
 mov r3, FP
 sub r3, #-(-88)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r17, r0
C_main_67
 mov r22, r17
 cmp r22,  #0 wz
 if_nz jmp #\C_main_71
 mov r2, FP
 sub r2, #-(-88)
 mov r3, ##@C_main_73_L000074
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_printf
 add SP, #4
C_main_71
C_main_65
 mov r22, r17
 cmp r22,  #0 wz
 if_z jmp #\C_main_53
 mov r2, r17
 mov BC, #4
 calld PA,#CALA
 long @C_fclose
 mov r2, ##@C_main_58_L000059
 mov BC, #4
 calld PA,#CALA
 long @C_printf
 mov r2, FP
 sub r2, #-(-88)
 mov BC, #4
 calld PA,#CALA
 long @C_execute
 jmp #\@C_main_48
C_main_47
 mov r22, r21
 adds r22, #4
 rdlong r2, r22
 mov r3, FP
 sub r3, #-(-88)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
 mov r2, ##@C_loadfile_20_L000021
 mov r3, FP
 sub r3, #-(-88)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r17, r0
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_main_75
 mov r2, #46
 mov r3, FP
 sub r3, #-(-88)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strchr
 add SP, #4
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_main_77
 mov r2, ##@C_main_69_L000070
 mov r3, FP
 sub r3, #-(-88)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcat
 add SP, #4
 mov r2, ##@C_loadfile_20_L000021
 mov r3, FP
 sub r3, #-(-88)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r17, r0
C_main_77
 mov r22, r17
 cmp r22,  #0 wz
 if_nz jmp #\C_main_79
 mov r2, FP
 sub r2, #-(-88)
 mov r3, ##@C_main_81_L000082
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_printf
 add SP, #4
 mov r0, ##-1
 jmp #\@C_main_42
C_main_79
C_main_75
 mov r2, r17
 mov BC, #4
 calld PA,#CALA
 long @C_fclose
 mov r2, FP
 sub r2, #-(-88)
 mov BC, #4
 calld PA,#CALA
 long @C_execute
C_main_48
 mov r2, #100
 mov BC, #4
 calld PA,#CALA
 long @C__waitms
 mov r0, #0
C_main_42

 jmp #\@C__exit

' Catalina Import _waitms
' Catalina Import basic
' Catalina Import strchr
' Catalina Import strcat
' Catalina Import strcpy
' Catalina Import __ctype
' Catalina Import exit
' Catalina Import malloc
' Catalina Import free
' Catalina Import ftell
' Catalina Import fseek
' Catalina Import getc
' Catalina Import fgets
' Catalina Import fgetc
' Catalina Import printf
' Catalina Import fopen
' Catalina Import fclose
' Catalina Import __stderr
' Catalina Import __stdout
' Catalina Import __stdin
DAT
DAT
DAT
 alignl
C_basic
 calld PA,#NEWF
 calld PA,#PSHM
 long $faa800
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r15, #1
 mov r11, #0
 wrlong r21, ##@C_tmp098027_0000000a_fpin_L000047
 wrlong r19, ##@C_tmp098028_0000000a_fpout_L000048
 wrlong r17, ##@C_tmp098029_0000000a_fperr_L000049
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098041_0000000b_setup_L000061
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C_basic_201
 mov r0, #1
 jmp #\@C_basic_200
C_basic_201
 mov r22, #0
 wrlong r22, ##@C_tmp098038_0000000b_data_indx_L000058
 wrlong r22, ##@C_tmp098039_0000000b_data_offs_L000059
 jmp #\@C_basic_204
C_basic_203
 mov r22, #0
 wrlong r22, ##@C_tmp098034_0000000a_errorflag_L000054
 wrlong r15, ##@C_tmp098030_0000000a_current_indx_L000050
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098048_0000000b_execute_line_L000068
 mov r13, r0
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_basic_206
 mov r22, ##@C_tmp098037_0000000b_resume_indx_L000057
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_be jmp #\C_basic_208
 mov r13, ##@C_tmp098037_0000000b_resume_indx_L000057
 rdlong r13, r13
 jmp #\@C_basic_207
C_basic_208
 mov r2, r15
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098047_0000000b_lineno_L000067
 mov r22, r0
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098043_0000000b_reporterror_L000063
 mov r11, #1
 jmp #\@C_basic_205
C_basic_206
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098156_0000000d_match_eol_L000176
C_basic_207
 cmps r13,  #0 wz
 if_nz jmp #\C_basic_210
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_basic_212
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_nz jmp #\C_basic_212
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #167 wz
 if_z jmp #\C_basic_212
 cmps r22,  #39 wz
 if_z jmp #\C_basic_212
 mov r22, #22
 wrlong r22, ##@C_tmp098034_0000000a_errorflag_L000054
 mov r2, r15
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098047_0000000b_lineno_L000067
 mov r22, r0
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098043_0000000b_reporterror_L000063
 mov r11, ##-1
 jmp #\@C_basic_205
C_basic_212
 adds r15, #1
 mov r22, ##@C_tmp098020_00000009_nlines_L000040
 rdlong r22, r22
 subs r22, #1
 cmps r15, r22 wcz
 if_b jmp #\C_basic_211
 jmp #\@C_basic_205
C_basic_210
 cmps r13,  #0 wcz
 if_be jmp #\C_basic_216
 mov r15, r13
 mov r22, ##@C_tmp098020_00000009_nlines_L000040
 rdlong r22, r22
 subs r22, #1
 cmps r15, r22 wcz
 if_b jmp #\C_basic_217
 jmp #\@C_basic_205
C_basic_216
 mov r11, ##-1
 jmp #\@C_basic_205
C_basic_217
C_basic_211
C_basic_204
 mov r22, ##-1
 cmps r15, r22 wz
 if_nz jmp #\C_basic_203
C_basic_205
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098042_0000000b_cleanup_L000062
 mov r22, r21
 mov r20, ##@C___stdin
 cmp r22, r20 wz
 if_nz jmp #\C_basic_220
 mov r2, ##@C_basic_222_L000223
 mov BC, #4
 calld PA,#CALA
 long @C_printf
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_fgetc
C_basic_220
 mov r0, r11
C_basic_200
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098181_00000013_space_or_tab_L000224
 calld PA,#PSHM
 long $c00000
 mov r22, r2
 and r22, cviu_m1
 cmps r22,  #32 wz
 if_z jmp #\C_tmp098181_00000013_space_or_tab_L000224_229
 cmps r22,  #9 wz
 if_nz jmp #\C_tmp098181_00000013_space_or_tab_L000224_227
C_tmp098181_00000013_space_or_tab_L000224_229
 mov r23, #1
 jmp #\@C_tmp098181_00000013_space_or_tab_L000224_228
C_tmp098181_00000013_space_or_tab_L000224_227
 mov r23, #0
C_tmp098181_00000013_space_or_tab_L000224_228
 mov r0, r23
 calld PA,#POPM
 calld PA,#RETN
 alignl
C_tmp098182_00000014_print_tokenized_line_L000230
 calld PA,#NEWF
 calld PA,#PSHM
 long $f80000
 mov r23, r2
 mov r22, r23
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #12
 rdlong r22, r22
 mov r20, r22
 cmp r20,  #0 wz
 if_z jmp #\C_tmp098182_00000014_print_tokenized_line_L000230_232
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098182_00000014_print_tokenized_line_L000230_232
 mov r22, r23
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_b jmp #\C_tmp098182_00000014_print_tokenized_line_L000230_234
 mov r22, r23
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r2, r22
 mov r3, ##@C_tmp098182_00000014_print_tokenized_line_L000230_236_L000237
 mov r4, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r4, r4
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fprintf
 add SP, #8
 jmp #\@C_tmp098182_00000014_print_tokenized_line_L000230_235
C_tmp098182_00000014_print_tokenized_line_L000230_234
 mov r2, ##@C_tmp098182_00000014_print_tokenized_line_L000230_238_L000239
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
C_tmp098182_00000014_print_tokenized_line_L000230_235
 mov r22, r23
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #12
 rdlong r19, r22
 mov r21, #0
 jmp #\@C_tmp098182_00000014_print_tokenized_line_L000230_243
C_tmp098182_00000014_print_tokenized_line_L000230_240
 mov r22, r21
 adds r22, r19
 rdbyte r2, r22
 mov r3, ##@C_tmp098182_00000014_print_tokenized_line_L000230_244_L000245
 mov r4, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r4, r4
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fprintf
 add SP, #8
 adds r21, #1
C_tmp098182_00000014_print_tokenized_line_L000230_243
 mov r22, r23
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #8
 rdlong r22, r22
 cmps r21, r22 wcz
 if_b jmp #\C_tmp098182_00000014_print_tokenized_line_L000230_240
 mov r2, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r2, r2
 mov r3, #10
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fputc
 add SP, #4
C_tmp098182_00000014_print_tokenized_line_L000230_232
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098186_00000018_print_untokenized_line_L000246
 calld PA,#NEWF
 calld PA,#PSHM
 long $f80000
 mov r23, r2
 mov r22, r23
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #4
 rdlong r22, r22
 mov r20, r22
 cmp r20,  #0 wz
 if_z jmp #\C_tmp098186_00000018_print_untokenized_line_L000246_248
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098186_00000018_print_untokenized_line_L000246_248
 mov r22, r23
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_b jmp #\C_tmp098186_00000018_print_untokenized_line_L000246_250
 mov r22, r23
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r2, r22
 mov r3, ##@C_tmp098182_00000014_print_tokenized_line_L000230_236_L000237
 mov r4, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r4, r4
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fprintf
 add SP, #8
 jmp #\@C_tmp098186_00000018_print_untokenized_line_L000246_251
C_tmp098186_00000018_print_untokenized_line_L000246_250
 mov r2, ##@C_tmp098182_00000014_print_tokenized_line_L000230_238_L000239
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
C_tmp098186_00000018_print_untokenized_line_L000246_251
 mov r22, r23
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #4
 rdlong r21, r22
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098158_0000000d_untokenized_eol_L000178
 mov r19, r0
 jmp #\@C_tmp098186_00000018_print_untokenized_line_L000246_253
C_tmp098186_00000018_print_untokenized_line_L000246_252
 mov r2, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r2, r2
 rdbyte r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fputc
 add SP, #4
 adds r21, #1
C_tmp098186_00000018_print_untokenized_line_L000246_253
 mov r22, r21
 mov r20, r19
 cmp r22, r20 wcz
 if_b jmp #\C_tmp098186_00000018_print_untokenized_line_L000246_252
 mov r2, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r2, r2
 mov r3, #10
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fputc
 add SP, #4
C_tmp098186_00000018_print_untokenized_line_L000246_248
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098187_0000001b_tokenize_line_L000255
 calld PA,#NEWF
 sub SP, ##1096
 calld PA,#PSHM
 long $feaa00
 mov r23, r2
 mov r22, ##0
 mov RI, ##-1096
 adds RI, FP
 wrlong r22, RI
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 wrlong r23, ##@C_tmp098030_0000000a_current_indx_L000050
 mov r20, #0
 wrlong r20, ##@C_tmp098031_0000000a_current_offs_L000051
 mov r19, r20
 mov r13, r20
 wrlong r20, ##@C_tmp098040_0000000b_in_call_L000060
 rdlong r22, r22
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #12
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098187_0000001b_tokenize_line_L000255_257
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #12
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #12
 mov r20, ##0
 wrlong r20, r22
C_tmp098187_0000001b_tokenize_line_L000255_257
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #4
 rdlong r22, r22
 mov r20, r22
 cmp r20,  #0 wz
 if_z jmp #\C_tmp098187_0000001b_tokenize_line_L000255_259
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098187_0000001b_tokenize_line_L000255_259
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_262
C_tmp098187_0000001b_tokenize_line_L000255_261
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r21, r0
 mov r22, #58
 cmps r21, r22 wz
 if_z jmp #\C_tmp098187_0000001b_tokenize_line_L000255_342
 cmps r21, r22 wcz
 if_a jmp #\C_tmp098187_0000001b_tokenize_line_L000255_346
 mov r22, #34
 cmps r21, r22 wz
 if_z jmp #\C_tmp098187_0000001b_tokenize_line_L000255_287
 cmps r21, r22 wcz
 if_a jmp #\C_tmp098187_0000001b_tokenize_line_L000255_348
 cmps r21,  #0 wz
 if_z jmp #\C_tmp098187_0000001b_tokenize_line_L000255_340
 cmps r21,  #1 wz
 if_z jmp #\C_tmp098187_0000001b_tokenize_line_L000255_340
 cmps r21,  #2 wz
 if_z jmp #\C_tmp098187_0000001b_tokenize_line_L000255_334
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_264
C_tmp098187_0000001b_tokenize_line_L000255_348
 cmps r21,  #39 wz
 if_z jmp #\C_tmp098187_0000001b_tokenize_line_L000255_339
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_264
C_tmp098187_0000001b_tokenize_line_L000255_346
 cmps r21,  #159 wz
 if_z jmp #\C_tmp098187_0000001b_tokenize_line_L000255_341
 mov r22, #160
 cmps r21, r22 wz
 if_z jmp #\C_tmp098187_0000001b_tokenize_line_L000255_274
 cmps r21, r22 wcz
 if_a jmp #\C_tmp098187_0000001b_tokenize_line_L000255_350
 cmps r21,  #128 wcz
 if_b jmp #\C_tmp098187_0000001b_tokenize_line_L000255_264
 cmps r21,  #134 wcz
 if_a jmp #\C_tmp098187_0000001b_tokenize_line_L000255_264
 mov r22, r21
 shl r22, #2
 mov r20, ##@C_tmp098187_0000001b_tokenize_line_L000255_351_L000353-512
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098187_0000001b_tokenize_line_L000255_350
 mov r22, #167
 cmps r21, r22 wz
 if_z jmp #\C_tmp098187_0000001b_tokenize_line_L000255_339
 cmps r21, r22 wcz
 if_b jmp #\C_tmp098187_0000001b_tokenize_line_L000255_264
 cmps r21,  #181 wcz
 if_b jmp #\C_tmp098187_0000001b_tokenize_line_L000255_264
 cmps r21,  #190 wcz
 if_a jmp #\C_tmp098187_0000001b_tokenize_line_L000255_264
 mov r22, r21
 shl r22, #2
 mov r20, ##@C_tmp098187_0000001b_tokenize_line_L000255_356_L000358-724
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098187_0000001b_tokenize_line_L000255_266
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098092_0000000c_do_option_L000112
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_265
C_tmp098187_0000001b_tokenize_line_L000255_267
 mov r2, #186
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #28 wz
 if_nz jmp #\C_tmp098187_0000001b_tokenize_line_L000255_268
 mov r2, #28
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, ##-1032
 adds r20, FP
 adds r22, r20
 mov r20, #186
 wrbyte r20, r22
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, ##-1032
 adds r20, FP
 adds r22, r20
 mov r20, #28
 wrbyte r20, r22
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_265
C_tmp098187_0000001b_tokenize_line_L000255_268
 mov r13, #1
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098077_0000000c_do_deffn_L000097
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_265
C_tmp098187_0000001b_tokenize_line_L000255_270
 mov r13, #1
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098081_0000000c_do_defint_L000101
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_265
C_tmp098187_0000001b_tokenize_line_L000255_271
 mov r13, #1
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098082_0000000c_do_defsng_L000102
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_265
C_tmp098187_0000001b_tokenize_line_L000255_272
 mov r13, #1
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098083_0000000c_do_defdbl_L000103
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_265
C_tmp098187_0000001b_tokenize_line_L000255_273
 mov r13, #1
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098084_0000000c_do_defstr_L000104
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_265
C_tmp098187_0000001b_tokenize_line_L000255_274
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098054_0000000b_do_dim_L000074
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_265
C_tmp098187_0000001b_tokenize_line_L000255_275
 mov r2, FP
 adds r2, ##(-1084)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098163_0000000d_getvalue_L000183
 mov r15, r0
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, ##-1032
 adds r20, FP
 adds r22, r20
 mov r20, #128
 wrbyte r20, r22
 mov r22, ##-1084
 adds r22, FP
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098187_0000001b_tokenize_line_L000255_276
 mov r22, ##-1080
 adds r22, FP
 rdlong r22, r22
 mov r20, ##-63
 cmps r22, r20 wcz
 if_be jmp #\C_tmp098187_0000001b_tokenize_line_L000255_276
 mov r22, ##-1080
 adds r22, FP
 rdlong r22, r22
 cmps r22,  #63 wcz
 if_ae jmp #\C_tmp098187_0000001b_tokenize_line_L000255_276
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, ##-1032
 adds r20, FP
 adds r22, r20
 mov r20, ##-1080
 adds r20, FP
 rdlong r20, r20
 adds r20, #64
 wrbyte r20, r22
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_277
C_tmp098187_0000001b_tokenize_line_L000255_276
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, ##-1032
 adds r20, FP
 adds r22, r20
 mov r20, ##-1084
 adds r20, FP
 rdbyte r20, r20
 wrbyte r20, r22
 mov r22, r19
 adds r22, #3
 mov r20, ##-4
 and r22, r20
 mov RI, ##-1092
 adds RI, FP
 wrlong r22, RI
 mov r22, ##-1092
 adds r22, FP
 rdlong r22, r22
 add r22, #4
 mov r20, ##1024
 cmp r22, r20 wcz
 if_ae jmp #\C_tmp098187_0000001b_tokenize_line_L000255_281
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_284
C_tmp098187_0000001b_tokenize_line_L000255_283
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, ##-1032
 adds r20, FP
 adds r22, r20
 mov r20, #0
 wrbyte r20, r22
C_tmp098187_0000001b_tokenize_line_L000255_284
 mov r22, ##-1092
 adds r22, FP
 rdlong r22, r22
 cmps r19, r22 wcz
 if_b jmp #\C_tmp098187_0000001b_tokenize_line_L000255_283
 mov r22, ##-1032
 adds r22, FP
 mov r0, r19
 adds r0, r22
 mov r1, ##-1080
 adds r1, FP
 calld PA,#CPYB
 long 4
 mov r22, r19
 add r22, #4
 mov r19, r22
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_282
C_tmp098187_0000001b_tokenize_line_L000255_281
 mov r19, ##1025
 mov r15, #0
C_tmp098187_0000001b_tokenize_line_L000255_282
C_tmp098187_0000001b_tokenize_line_L000255_277
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, r15
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_265
C_tmp098187_0000001b_tokenize_line_L000255_287
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #4
 rdlong r20, r20
 mov r11, r22
 adds r11, r20
 mov r2, #34
 mov r3, r11
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098173_0000000d_mystrend_L000193
 add SP, #4
 mov RI, ##-1088
 adds RI, FP
 wrlong r0, RI
 mov r22, ##-1088
 adds r22, FP
 rdlong r22, r22
 mov r20, r11
 cmp r22, r20 wcz
 if_be jmp #\C_tmp098187_0000001b_tokenize_line_L000255_265
 mov r22, ##-1088
 adds r22, FP
 rdlong r22, r22
 mov r20, r11
 sub r22, r20
 mov r15, r22
 adds r15, #1
 mov r22, r19
 adds r22, r15
 mov r20, ##1024
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098187_0000001b_tokenize_line_L000255_290
 mov r17, #0
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_295
C_tmp098187_0000001b_tokenize_line_L000255_292
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, ##-1032
 adds r20, FP
 adds r22, r20
 rdbyte r20, r11
 wrbyte r20, r22
 adds r11, #1
 adds r17, #1
C_tmp098187_0000001b_tokenize_line_L000255_295
 cmps r17, r15 wcz
 if_b jmp #\C_tmp098187_0000001b_tokenize_line_L000255_292
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_291
C_tmp098187_0000001b_tokenize_line_L000255_290
 mov r19, ##1025
C_tmp098187_0000001b_tokenize_line_L000255_291
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, r15
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_265
C_tmp098187_0000001b_tokenize_line_L000255_296
 mov r2, FP
 adds r2, ##(-1076)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov r15, r0
 mov r2, FP
 adds r2, ##(-1076)
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r17, r0
 cmps r17,  #0 wcz
 if_be jmp #\C_tmp098187_0000001b_tokenize_line_L000255_297
 mov r22, ##-1077
 adds r22, FP
 adds r22, r17
 rdbyte r22, r22
 cmps r22,  #40 wz
 if_nz jmp #\C_tmp098187_0000001b_tokenize_line_L000255_297
 mov r22, ##-1077
 adds r22, FP
 adds r22, r17
 mov r20, #0
 wrbyte r20, r22
C_tmp098187_0000001b_tokenize_line_L000255_297
 mov r2, FP
 adds r2, ##(-1076)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098120_0000000d_findvarindx_L000140
 mov r9, r0
 mov r22, #0
 cmps r13, r22 wz
 if_nz jmp #\C_tmp098187_0000001b_tokenize_line_L000255_301
 cmps r9, r22 wcz
 if_ae jmp #\C_tmp098187_0000001b_tokenize_line_L000255_301
 cmps r21,  #130 wz
 if_nz jmp #\C_tmp098187_0000001b_tokenize_line_L000255_303
 mov r2, FP
 adds r2, ##(-1076)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098127_0000000d_addfloat_L000147
 mov RI, ##-1100
 adds RI, FP
 wrlong r0, RI
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_304
C_tmp098187_0000001b_tokenize_line_L000255_303
 cmps r21,  #129 wz
 if_nz jmp #\C_tmp098187_0000001b_tokenize_line_L000255_305
 mov r2, FP
 adds r2, ##(-1076)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098126_0000000d_addinteger_L000146
 mov RI, ##-1100
 adds RI, FP
 wrlong r0, RI
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_306
C_tmp098187_0000001b_tokenize_line_L000255_305
 mov r2, FP
 adds r2, ##(-1076)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098128_0000000d_addstring_L000148
 mov RI, ##-1100
 adds RI, FP
 wrlong r0, RI
C_tmp098187_0000001b_tokenize_line_L000255_306
C_tmp098187_0000001b_tokenize_line_L000255_304
 mov r2, FP
 adds r2, ##(-1076)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098120_0000000d_findvarindx_L000140
 mov r9, r0
C_tmp098187_0000001b_tokenize_line_L000255_301
 mov r22, #0
 cmps r13, r22 wz
 if_nz jmp #\C_tmp098187_0000001b_tokenize_line_L000255_307
 cmps r9, r22 wcz
 if_b jmp #\C_tmp098187_0000001b_tokenize_line_L000255_307
 cmps r9,  #255 wcz
 if_a jmp #\C_tmp098187_0000001b_tokenize_line_L000255_307
 mov r22, r19
 adds r22, #2
 mov r20, ##1024
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098187_0000001b_tokenize_line_L000255_307
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, ##-1032
 adds r20, FP
 adds r22, r20
 mov r20, r21
 adds r20, #3
 subs r20, #129
 wrbyte r20, r22
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, ##-1032
 adds r20, FP
 adds r22, r20
 mov r20, r9
 wrbyte r20, r22
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_308
C_tmp098187_0000001b_tokenize_line_L000255_307
 mov r22, r19
 adds r22, r15
 mov r20, ##1024
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098187_0000001b_tokenize_line_L000255_309
 mov r17, #0
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_314
C_tmp098187_0000001b_tokenize_line_L000255_311
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, ##-1032
 adds r20, FP
 adds r22, r20
 mov r20, ##-1076
 adds r20, FP
 adds r20, r17
 rdbyte r20, r20
 wrbyte r20, r22
 adds r17, #1
C_tmp098187_0000001b_tokenize_line_L000255_314
 cmps r17, r15 wcz
 if_b jmp #\C_tmp098187_0000001b_tokenize_line_L000255_311
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_310
C_tmp098187_0000001b_tokenize_line_L000255_309
 mov r19, ##1025
C_tmp098187_0000001b_tokenize_line_L000255_310
C_tmp098187_0000001b_tokenize_line_L000255_308
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, r15
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_265
C_tmp098187_0000001b_tokenize_line_L000255_315
 mov r2, FP
 adds r2, ##(-1076)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov r15, r0
 mov r2, r15
 mov r3, FP
 adds r3, ##(-1076)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098118_0000000d_findfunction_L000138
 add SP, #4
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098187_0000001b_tokenize_line_L000255_316
 mov r2, FP
 adds r2, ##(-1076)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098122_0000000d_finddimvarindx_L000142
 mov r9, r0
 mov r22, #0
 mov r20, ##@C_tmp098040_0000000b_in_call_L000060
 rdlong r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098187_0000001b_tokenize_line_L000255_318
 cmps r13, r22 wz
 if_nz jmp #\C_tmp098187_0000001b_tokenize_line_L000255_318
 cmps r9, r22 wcz
 if_ae jmp #\C_tmp098187_0000001b_tokenize_line_L000255_318
 mov r2, FP
 adds r2, ##(-1076)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098130_0000000d_autodimvar_L000150
 mov RI, ##-1096
 adds RI, FP
 wrlong r0, RI
 mov r2, FP
 adds r2, ##(-1076)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098122_0000000d_finddimvarindx_L000142
 mov r9, r0
C_tmp098187_0000001b_tokenize_line_L000255_318
 mov r22, #0
 cmps r13, r22 wz
 if_nz jmp #\C_tmp098187_0000001b_tokenize_line_L000255_320
 cmps r9, r22 wcz
 if_b jmp #\C_tmp098187_0000001b_tokenize_line_L000255_320
 cmps r9,  #255 wcz
 if_a jmp #\C_tmp098187_0000001b_tokenize_line_L000255_320
 mov r22, r19
 adds r22, #2
 mov r20, ##1024
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098187_0000001b_tokenize_line_L000255_320
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, ##-1032
 adds r20, FP
 adds r22, r20
 mov r20, r21
 adds r20, #6
 subs r20, #132
 wrbyte r20, r22
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, ##-1032
 adds r20, FP
 adds r22, r20
 mov r20, r9
 wrbyte r20, r22
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_317
C_tmp098187_0000001b_tokenize_line_L000255_320
 mov r22, r19
 adds r22, r15
 mov r20, ##1024
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098187_0000001b_tokenize_line_L000255_322
 mov r17, #0
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_327
C_tmp098187_0000001b_tokenize_line_L000255_324
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, ##-1032
 adds r20, FP
 adds r22, r20
 mov r20, ##-1076
 adds r20, FP
 adds r20, r17
 rdbyte r20, r20
 wrbyte r20, r22
 adds r17, #1
C_tmp098187_0000001b_tokenize_line_L000255_327
 cmps r17, r15 wcz
 if_b jmp #\C_tmp098187_0000001b_tokenize_line_L000255_324
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_317
C_tmp098187_0000001b_tokenize_line_L000255_322
 mov r19, ##1025
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_317
C_tmp098187_0000001b_tokenize_line_L000255_316
 mov r22, r19
 adds r22, r15
 mov r20, ##1024
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098187_0000001b_tokenize_line_L000255_328
 mov r17, #0
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_333
C_tmp098187_0000001b_tokenize_line_L000255_330
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, ##-1032
 adds r20, FP
 adds r22, r20
 mov r20, ##-1076
 adds r20, FP
 adds r20, r17
 rdbyte r20, r20
 wrbyte r20, r22
 adds r17, #1
C_tmp098187_0000001b_tokenize_line_L000255_333
 cmps r17, r15 wcz
 if_b jmp #\C_tmp098187_0000001b_tokenize_line_L000255_330
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_329
C_tmp098187_0000001b_tokenize_line_L000255_328
 mov r19, ##1025
C_tmp098187_0000001b_tokenize_line_L000255_329
C_tmp098187_0000001b_tokenize_line_L000255_317
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, r15
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_265
C_tmp098187_0000001b_tokenize_line_L000255_334
 mov r22, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098187_0000001b_tokenize_line_L000255_335
 mov r2, r19
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r3, r22
 mov r4, ##@C_tmp098187_0000001b_tokenize_line_L000255_337_L000338
 mov r5, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r5, r5
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_fprintf
 add SP, #12
C_tmp098187_0000001b_tokenize_line_L000255_335
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_265
C_tmp098187_0000001b_tokenize_line_L000255_339
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, ##-1032
 adds r20, FP
 adds r22, r20
 mov r20, r21
 wrbyte r20, r22
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #4
 rdlong r20, r20
 mov r11, r22
 adds r11, r20
 mov r2, r11
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098158_0000000d_untokenized_eol_L000178
 mov RI, ##-1088
 adds RI, FP
 wrlong r0, RI
 mov r21, #0
 mov r22, ##-1088
 adds r22, FP
 rdlong r22, r22
 mov r20, r11
 sub r22, r20
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_265
C_tmp098187_0000001b_tokenize_line_L000255_340
 mov r21, #0
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_265
C_tmp098187_0000001b_tokenize_line_L000255_341
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_265
C_tmp098187_0000001b_tokenize_line_L000255_342
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, ##-1032
 adds r20, FP
 adds r22, r20
 mov r20, r21
 wrbyte r20, r22
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_265
C_tmp098187_0000001b_tokenize_line_L000255_264
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #29 wz
 if_nz jmp #\C_tmp098187_0000001b_tokenize_line_L000255_343
 mov r22, #1
 wrlong r22, ##@C_tmp098040_0000000b_in_call_L000060
C_tmp098187_0000001b_tokenize_line_L000255_343
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, ##-1032
 adds r20, FP
 adds r22, r20
 mov r20, r21
 wrbyte r20, r22
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098187_0000001b_tokenize_line_L000255_265
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098187_0000001b_tokenize_line_L000255_360
 mov r22, #0
 mov r13, r22
 wrlong r22, ##@C_tmp098040_0000000b_in_call_L000060
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_263
C_tmp098187_0000001b_tokenize_line_L000255_360
 mov r22, ##1024
 cmps r19, r22 wcz
 if_be jmp #\C_tmp098187_0000001b_tokenize_line_L000255_362
 mov r19, #0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098187_0000001b_tokenize_line_L000255_263
C_tmp098187_0000001b_tokenize_line_L000255_362
C_tmp098187_0000001b_tokenize_line_L000255_262
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098187_0000001b_tokenize_line_L000255_261
C_tmp098187_0000001b_tokenize_line_L000255_263
C_tmp098187_0000001b_tokenize_line_L000255_259
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098187_0000001b_tokenize_line_L000255_364
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098047_0000000b_lineno_L000067
 mov r22, r0
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098043_0000000b_reporterror_L000063
C_tmp098187_0000001b_tokenize_line_L000255_364
 mov r22, ##-1032
 adds r22, FP
 adds r22, r19
 mov r20, #0
 wrbyte r20, r22
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #8
 wrlong r19, r22
 mov r2, r19
 adds r2, #1
 mov r3, FP
 adds r3, ##(-1032)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098176_0000000e_mystrndup_L000196
 add SP, #4
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #12
 wrlong r0, r20
 calld PA,#POPM
 add SP, ##1096
 calld PA,#RETF
 alignl
C_tmp098041_0000000b_setup_L000061
 calld PA,#NEWF
 sub SP, #20
 calld PA,#PSHM
 long $fea800
 mov r23, r2
 mov r22, #0
 wrlong r22, ##@C_tmp098016_00000009_nvariables_L000036
 mov r20, ##0
 wrlong r20, ##@C_tmp098015_00000009_variables_L000035
 mov r20, ##0
 wrlong r20, ##@C_tmp098017_00000009_dimvariables_L000037
 wrlong r22, ##@C_tmp098018_00000009_ndimvariables_L000038
 wrlong r22, ##@C_tmp098032_0000000a_tokenized_L000052
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r21, #0
C_tmp098041_0000000b_setup_L000061_367
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 mov r20, ##0
 wrlong r20, r22
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+136
 adds r22, r0
 mov r20, #0
 wrlong r20, r22
 adds r21, #1
 cmps r21,  #3 wcz
 if_b jmp #\C_tmp098041_0000000b_setup_L000061_367
 mov r21, #0
C_tmp098041_0000000b_setup_L000061_372
 mov r22, r21
 shl r22, #2
 mov r20, ##@C_tmp098003_00000009_deftype_L000023
 adds r22, r20
 mov r20, #130
 wrlong r20, r22
 adds r21, #1
 cmps r21,  #26 wcz
 if_b jmp #\C_tmp098041_0000000b_setup_L000061_372
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098174_0000000e_linecount_L000194
 mov r22, r0
 adds r22, #1
 wrlong r22, ##@C_tmp098020_00000009_nlines_L000040
 mov r22, ##@C_tmp098020_00000009_nlines_L000040
 rdlong r22, r22
 adds r22, #1
 mov r2, r22
 shl r2, #4
 mov BC, #4
 calld PA,#CALA
 long @C_malloc
 wrlong r0, ##@C_tmp098019_00000009_lines_L000039
 mov r22, ##@C_tmp098019_00000009_lines_L000039
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098041_0000000b_setup_L000061_376
 mov r22, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098041_0000000b_setup_L000061_378
 mov r2, ##@C_tmp098041_0000000b_setup_L000061_380_L000381
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
C_tmp098041_0000000b_setup_L000061_378
 mov r0, ##-1
 jmp #\@C_tmp098041_0000000b_setup_L000061_366
C_tmp098041_0000000b_setup_L000061_376
 mov r13, #1
 mov r21, #0
 jmp #\@C_tmp098041_0000000b_setup_L000061_385
C_tmp098041_0000000b_setup_L000061_382
 mov r22, r21
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 mov r20, ##-1
 wrlong r20, r22
 mov r22, r21
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #4
 mov r20, ##0
 wrlong r20, r22
 mov r22, r21
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #12
 mov r20, ##0
 wrlong r20, r22
 mov r22, r21
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #8
 mov r20, #0
 wrlong r20, r22
 adds r21, #1
C_tmp098041_0000000b_setup_L000061_385
 mov r22, ##@C_tmp098020_00000009_nlines_L000040
 rdlong r22, r22
 cmps r21, r22 wcz
 if_b jmp #\C_tmp098041_0000000b_setup_L000061_382
 mov r21, #1
 jmp #\@C_tmp098041_0000000b_setup_L000061_389
C_tmp098041_0000000b_setup_L000061_390
 adds r23, #1
C_tmp098041_0000000b_setup_L000061_391
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098181_00000013_space_or_tab_L000224
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098041_0000000b_setup_L000061_390
 rdbyte r22, r23
 subs r22, #48
 cmp r22,  #10 wcz
 if_ae jmp #\C_tmp098041_0000000b_setup_L000061_393
 mov r2, #10
 mov r3, FP
 sub r3, #-(-16)
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_strtol
 add SP, #8
 mov r13, r0
 mov r22, r21
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 wrlong r13, r22
 mov r22, FP
 sub r22, #-(-16)
 rdlong r23, r22
 jmp #\@C_tmp098041_0000000b_setup_L000061_396
C_tmp098041_0000000b_setup_L000061_395
 adds r23, #1
C_tmp098041_0000000b_setup_L000061_396
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098181_00000013_space_or_tab_L000224
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098041_0000000b_setup_L000061_395
 jmp #\@C_tmp098041_0000000b_setup_L000061_394
C_tmp098041_0000000b_setup_L000061_393
 mov r22, r21
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 neg r20, r13
 wrlong r20, r22
C_tmp098041_0000000b_setup_L000061_394
 mov r22, r21
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #4
 wrlong r23, r22
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098187_0000001b_tokenize_line_L000255
 rdbyte r22, r23
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098041_0000000b_setup_L000061_398
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098158_0000000d_untokenized_eol_L000178
 mov r23, r0
 adds r23, #1
C_tmp098041_0000000b_setup_L000061_398
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098041_0000000b_setup_L000061_400
 jmp #\@C_tmp098041_0000000b_setup_L000061_388
C_tmp098041_0000000b_setup_L000061_400
 adds r21, #1
C_tmp098041_0000000b_setup_L000061_389
 mov r22, ##@C_tmp098020_00000009_nlines_L000040
 rdlong r22, r22
 cmps r21, r22 wcz
 if_b jmp #\C_tmp098041_0000000b_setup_L000061_391
C_tmp098041_0000000b_setup_L000061_388
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098041_0000000b_setup_L000061_402
 mov r22, #1
 wrlong r22, ##@C_tmp098032_0000000a_tokenized_L000052
C_tmp098041_0000000b_setup_L000061_402
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098041_0000000b_setup_L000061_404
 mov r0, ##-1
 jmp #\@C_tmp098041_0000000b_setup_L000061_366
C_tmp098041_0000000b_setup_L000061_404
 mov r22, ##@C_tmp098020_00000009_nlines_L000040
 rdlong r22, r22
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #4
 wrlong r23, r22
 mov r22, ##@C_tmp098020_00000009_nlines_L000040
 rdlong r22, r22
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #12
 wrlong r23, r22
 mov r22, ##@C_tmp098020_00000009_nlines_L000040
 rdlong r22, r22
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 mov r20, ##-1
 wrlong r20, r22
 mov r22, ##@C_tmp098020_00000009_nlines_L000040
 rdlong r20, r22
 adds r20, #1
 wrlong r20, ##@C_tmp098020_00000009_nlines_L000040
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098041_0000000b_setup_L000061_406
 mov r22, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098041_0000000b_setup_L000061_408
 mov r2, ##@C_tmp098041_0000000b_setup_L000061_410_L000411
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
C_tmp098041_0000000b_setup_L000061_408
 mov r2, ##@C_tmp098019_00000009_lines_L000039
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r0, ##-1
 jmp #\@C_tmp098041_0000000b_setup_L000061_366
C_tmp098041_0000000b_setup_L000061_406
 mov r13, ##-1
 mov r21, #0
 jmp #\@C_tmp098041_0000000b_setup_L000061_415
C_tmp098041_0000000b_setup_L000061_412
 mov r22, r21
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_be jmp #\C_tmp098041_0000000b_setup_L000061_416
 cmps r13,  #0 wcz
 if_be jmp #\C_tmp098041_0000000b_setup_L000061_418
 mov r22, r21
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmps r22, r13 wz
 if_nz jmp #\C_tmp098041_0000000b_setup_L000061_420
 mov r22, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098041_0000000b_setup_L000061_422
 mov r2, r13
 mov r3, ##@C_tmp098041_0000000b_setup_L000061_424_L000425
 mov r4, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r4, r4
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fprintf
 add SP, #8
C_tmp098041_0000000b_setup_L000061_422
 mov r2, ##@C_tmp098019_00000009_lines_L000039
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r0, ##-1
 jmp #\@C_tmp098041_0000000b_setup_L000061_366
C_tmp098041_0000000b_setup_L000061_420
 mov r22, r21
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmps r22, r13 wcz
 if_ae jmp #\C_tmp098041_0000000b_setup_L000061_426
 mov r22, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098041_0000000b_setup_L000061_428
 mov r22, r21
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r2, r22
 mov r3, r13
 mov r4, ##@C_tmp098041_0000000b_setup_L000061_430_L000431
 mov r5, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r5, r5
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_fprintf
 add SP, #12
C_tmp098041_0000000b_setup_L000061_428
 mov r2, ##@C_tmp098019_00000009_lines_L000039
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r0, ##-1
 jmp #\@C_tmp098041_0000000b_setup_L000061_366
C_tmp098041_0000000b_setup_L000061_426
C_tmp098041_0000000b_setup_L000061_418
 mov r22, r21
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r13, r22
C_tmp098041_0000000b_setup_L000061_416
 adds r21, #1
C_tmp098041_0000000b_setup_L000061_415
 mov r22, ##@C_tmp098020_00000009_nlines_L000040
 rdlong r22, r22
 cmps r21, r22 wcz
 if_b jmp #\C_tmp098041_0000000b_setup_L000061_412
 mov r21, #0
 jmp #\@C_tmp098041_0000000b_setup_L000061_435
C_tmp098041_0000000b_setup_L000061_432
 mov r22, r21
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r20, r22
 cmps r20,  #0 wcz
 if_be jmp #\C_tmp098041_0000000b_setup_L000061_436
 adds r22, #12
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098041_0000000b_setup_L000061_436
 wrlong r21, ##@C_tmp098030_0000000a_current_indx_L000050
 mov r22, #0
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 jmp #\@C_tmp098041_0000000b_setup_L000061_439
C_tmp098041_0000000b_setup_L000061_438
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #165 wz
 if_z jmp #\C_tmp098041_0000000b_setup_L000061_443
 cmps r22,  #177 wz
 if_nz jmp #\C_tmp098041_0000000b_setup_L000061_441
C_tmp098041_0000000b_setup_L000061_443
C_tmp098041_0000000b_setup_L000061_444
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098171_0000000d_tokenlen_L000191
 mov r20, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r20, r20
 mov r22, r20
 adds r22, r0
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #128 wz
 if_nz jmp #\C_tmp098041_0000000b_setup_L000061_447
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098163_0000000d_getvalue_L000183
 mov r19, r0
 mov r22, r19
 cmp r22,  #4 wcz
 if_b jmp #\C_tmp098041_0000000b_setup_L000061_449
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098041_0000000b_setup_L000061_449
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098044_0000000b_findline_L000064
 mov r17, r0
 cmp r17,  #0 wz
 if_z jmp #\C_tmp098041_0000000b_setup_L000061_452
 mov r22, #198
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, r17
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r0, FP
 sub r0, #-(-24)
 mov r1, FP
 sub r1, #-(-12)
 calld PA,#CPYB
 long 8
 mov r2, FP
 sub r2, #-(-24)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098164_0000000d_putvalue_L000184
C_tmp098041_0000000b_setup_L000061_452
C_tmp098041_0000000b_setup_L000061_449
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098171_0000000d_tokenlen_L000191
 mov r20, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r20, r20
 mov r22, r20
 adds r22, r0
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
C_tmp098041_0000000b_setup_L000061_447
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_z jmp #\C_tmp098041_0000000b_setup_L000061_444
 jmp #\@C_tmp098041_0000000b_setup_L000061_442
C_tmp098041_0000000b_setup_L000061_441
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #34 wz
 if_nz jmp #\C_tmp098041_0000000b_setup_L000061_455
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #12
 rdlong r20, r20
 mov r15, r22
 adds r15, r20
 mov r2, #34
 mov r3, r15
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098173_0000000d_mystrend_L000193
 add SP, #4
 mov r11, r0
 mov r22, r11
 mov r20, r15
 cmp r22, r20 wcz
 if_be jmp #\C_tmp098041_0000000b_setup_L000061_440
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, r11
 mov r18, r15
 sub r20, r18
 adds r20, #1
 adds r22, r20
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 jmp #\@C_tmp098041_0000000b_setup_L000061_456
C_tmp098041_0000000b_setup_L000061_455
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098171_0000000d_tokenlen_L000191
 mov r20, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r20, r20
 mov r22, r20
 adds r22, r0
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
C_tmp098041_0000000b_setup_L000061_456
C_tmp098041_0000000b_setup_L000061_442
C_tmp098041_0000000b_setup_L000061_439
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098041_0000000b_setup_L000061_438
C_tmp098041_0000000b_setup_L000061_440
C_tmp098041_0000000b_setup_L000061_436
 adds r21, #1
C_tmp098041_0000000b_setup_L000061_435
 mov r22, ##@C_tmp098020_00000009_nlines_L000040
 rdlong r22, r22
 cmps r21, r22 wcz
 if_b jmp #\C_tmp098041_0000000b_setup_L000061_432
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098041_0000000b_setup_L000061_459
 mov r0, ##-1
 jmp #\@C_tmp098041_0000000b_setup_L000061_366
C_tmp098041_0000000b_setup_L000061_459
 mov r0, #0
C_tmp098041_0000000b_setup_L000061_366
 calld PA,#POPM
 add SP, #20
 calld PA,#RETF
 alignl
C_tmp098042_0000000b_cleanup_L000062
 calld PA,#NEWF
 calld PA,#PSHM
 long $fc0000
 mov r23, #0
C_tmp098042_0000000b_cleanup_L000062_462
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098042_0000000b_cleanup_L000062_466
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_fclose
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 mov r20, ##0
 wrlong r20, r22
C_tmp098042_0000000b_cleanup_L000062_466
 adds r23, #1
 cmps r23,  #3 wcz
 if_b jmp #\C_tmp098042_0000000b_cleanup_L000062_462
 mov r23, #0
 jmp #\@C_tmp098042_0000000b_cleanup_L000062_471
C_tmp098042_0000000b_cleanup_L000062_468
 mov r22, #52

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 mov r20, r22
 adds r20, #41
 rdbyte r20, r20
 cmps r20,  #131 wz
 if_nz jmp #\C_tmp098042_0000000b_cleanup_L000062_472
 mov r20, #0
 mov r18, r22
 adds r18, #48
 rdlong r18, r18
 cmp r18, r20 wz
 if_z jmp #\C_tmp098042_0000000b_cleanup_L000062_472
 adds r22, #44
 rdlong r22, r22
 cmp r22, r20 wz
 if_nz jmp #\C_tmp098042_0000000b_cleanup_L000062_472
 mov r22, #52

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #48
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_tmp098042_0000000b_cleanup_L000062_472
 adds r23, #1
C_tmp098042_0000000b_cleanup_L000062_471
 mov r22, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r22, r22
 cmps r23, r22 wcz
 if_b jmp #\C_tmp098042_0000000b_cleanup_L000062_468
 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098042_0000000b_cleanup_L000062_474
 mov r2, ##@C_tmp098015_00000009_variables_L000035
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_tmp098042_0000000b_cleanup_L000062_474
 mov r22, ##0
 wrlong r22, ##@C_tmp098015_00000009_variables_L000035
 mov r22, #0
 wrlong r22, ##@C_tmp098016_00000009_nvariables_L000036
 mov r23, r22
 jmp #\@C_tmp098042_0000000b_cleanup_L000062_479
C_tmp098042_0000000b_cleanup_L000062_476
 mov r22, #76

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r22, r0
 adds r22, #41
 rdbyte r22, r22
 cmps r22,  #131 wz
 if_nz jmp #\C_tmp098042_0000000b_cleanup_L000062_480
 mov r22, #76

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r22, r0
 adds r22, #72
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098042_0000000b_cleanup_L000062_481
 mov r19, #1
 mov r21, #0
 jmp #\@C_tmp098042_0000000b_cleanup_L000062_487
C_tmp098042_0000000b_cleanup_L000062_484
 mov r22, r21
 shl r22, #2
 mov r20, #76

  stalli

 qmul r20, r23
 getqx r0

  allowi

 mov r20, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r20, r20
 adds r20, r0
 adds r20, #52
 adds r22, r20
 rdlong r22, r22

  stalli

 qmul r19, r22
 getqx r0

  allowi

 mov r19, r0
 adds r21, #1
C_tmp098042_0000000b_cleanup_L000062_487
 mov r22, #76

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r22, r0
 adds r22, #48
 rdlong r22, r22
 cmps r21, r22 wcz
 if_b jmp #\C_tmp098042_0000000b_cleanup_L000062_484
 mov r21, #0
 jmp #\@C_tmp098042_0000000b_cleanup_L000062_491
C_tmp098042_0000000b_cleanup_L000062_488
 mov r22, r21
 shl r22, #2
 mov r20, #76

  stalli

 qmul r20, r23
 getqx r0

  allowi

 mov r20, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r20, r20
 adds r20, r0
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098042_0000000b_cleanup_L000062_492
 mov r22, r21
 shl r22, #2
 mov r20, #76

  stalli

 qmul r20, r23
 getqx r0

  allowi

 mov r20, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r20, r20
 adds r20, r0
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_tmp098042_0000000b_cleanup_L000062_492
 adds r21, #1
C_tmp098042_0000000b_cleanup_L000062_491
 cmps r21, r19 wcz
 if_b jmp #\C_tmp098042_0000000b_cleanup_L000062_488
 mov r22, #76

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r22, r0
 adds r22, #72
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
 jmp #\@C_tmp098042_0000000b_cleanup_L000062_481
C_tmp098042_0000000b_cleanup_L000062_480
 mov r22, #76

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r22, r0
 adds r22, #72
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098042_0000000b_cleanup_L000062_494
 mov r22, #76

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r22, r0
 adds r22, #72
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_tmp098042_0000000b_cleanup_L000062_494
C_tmp098042_0000000b_cleanup_L000062_481
 adds r23, #1
C_tmp098042_0000000b_cleanup_L000062_479
 mov r22, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r22, r22
 cmps r23, r22 wcz
 if_b jmp #\C_tmp098042_0000000b_cleanup_L000062_476
 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098042_0000000b_cleanup_L000062_496
 mov r2, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_tmp098042_0000000b_cleanup_L000062_496
 mov r22, ##0
 wrlong r22, ##@C_tmp098017_00000009_dimvariables_L000037
 mov r22, #0
 wrlong r22, ##@C_tmp098018_00000009_ndimvariables_L000038
 mov r22, ##@C_tmp098019_00000009_lines_L000039
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098042_0000000b_cleanup_L000062_498
 mov r2, ##@C_tmp098019_00000009_lines_L000039
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_tmp098042_0000000b_cleanup_L000062_498
 mov r22, ##0
 wrlong r22, ##@C_tmp098019_00000009_lines_L000039
 mov r22, #0
 wrlong r22, ##@C_tmp098020_00000009_nlines_L000040
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098043_0000000b_reporterror_L000063
 calld PA,#NEWF
 calld PA,#PSHM
 long $f00000
 mov r23, r2
 mov r22, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098043_0000000b_reporterror_L000063_501
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_500
C_tmp098043_0000000b_reporterror_L000063_501
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_b jmp #\C_tmp098043_0000000b_reporterror_L000063_503
 cmps r22,  #99 wcz
 if_a jmp #\C_tmp098043_0000000b_reporterror_L000063_503
 shl r22, #2
 mov r20, ##@C_tmp098043_0000000b_reporterror_L000063_669_L000671
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098043_0000000b_reporterror_L000063_505
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_506_L000507
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_508
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_509_L000510
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_511
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_512_L000513
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_514
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_515_L000516
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_517
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_518_L000519
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_520
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_521_L000522
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_523
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_524_L000525
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_526
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_527_L000528
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_529
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_530_L000531
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_532
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_533_L000534
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_535
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_536_L000537
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_538
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_539_L000540
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_541
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_542_L000543
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_544
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_545_L000546
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_547
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_548_L000549
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_550
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_551_L000552
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_553
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_554_L000555
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_556
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_557_L000558
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_559
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_560_L000561
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_562
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_563_L000564
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_565
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_566_L000567
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_568
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_569_L000570
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_571
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_572_L000573
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_574
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_575_L000576
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_577
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_578_L000579
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_580
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_581_L000582
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_583
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_584_L000585
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_586
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_587_L000588
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_589
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_590_L000591
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_592
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_593_L000594
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_595
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_596_L000597
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_598
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_599_L000600
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_601
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_602_L000603
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_604
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_605_L000606
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_607
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_608_L000609
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_610
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_611_L000612
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_613
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_614_L000615
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_616
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_617_L000618
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_619
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_620_L000621
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_622
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_623_L000624
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_625
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_626_L000627
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_628
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_629_L000630
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_631
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_632_L000633
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_634
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_635_L000636
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_637
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_638_L000639
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_640
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_641_L000642
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_643
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_644_L000645
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_646
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_647_L000648
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_649
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_650_L000651
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_652
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_653_L000654
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_655
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_656_L000657
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_658
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_659_L000660
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_661
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_662_L000663
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_664
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_665_L000666
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_504
C_tmp098043_0000000b_reporterror_L000063_503
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_667_L000668
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
C_tmp098043_0000000b_reporterror_L000063_504
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098044_0000000b_findline_L000064
 mov r21, r0
 cmps r21,  #0 wcz
 if_be jmp #\C_tmp098043_0000000b_reporterror_L000063_674
 mov r2, ##@C_tmp098043_0000000b_reporterror_L000063_676_L000677
 mov r3, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fprintf
 add SP, #4
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098186_00000018_print_untokenized_line_L000246
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_679
C_tmp098043_0000000b_reporterror_L000063_678
 adds r21, #1
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098186_00000018_print_untokenized_line_L000246
C_tmp098043_0000000b_reporterror_L000063_679
 mov r22, ##@C_tmp098020_00000009_nlines_L000040
 rdlong r22, r22
 subs r22, #1
 cmps r21, r22 wcz
 if_ae jmp #\C_tmp098043_0000000b_reporterror_L000063_681
 mov r22, r21
 shl r22, #4
 adds r22, #16
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_b jmp #\C_tmp098043_0000000b_reporterror_L000063_678
C_tmp098043_0000000b_reporterror_L000063_681
 jmp #\@C_tmp098043_0000000b_reporterror_L000063_675
C_tmp098043_0000000b_reporterror_L000063_674
 mov r2, r23
 mov r3, ##@C_tmp098043_0000000b_reporterror_L000063_682_L000683
 mov r4, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r4, r4
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fprintf
 add SP, #8
C_tmp098043_0000000b_reporterror_L000063_675
C_tmp098043_0000000b_reporterror_L000063_500
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098044_0000000b_findline_L000064
 calld PA,#NEWF
 calld PA,#PSHM
 long $fe0000
 mov r23, r2
 mov r19, #0
 mov r17, #0
 mov r21, #0
 mov r17, #1
 mov r22, ##@C_tmp098020_00000009_nlines_L000040
 rdlong r22, r22
 mov r19, r22
 subs r19, #2
 jmp #\@C_tmp098044_0000000b_findline_L000064_686
C_tmp098044_0000000b_findline_L000064_685
 subs r19, #1
C_tmp098044_0000000b_findline_L000064_686
 cmps r19,  #1 wcz
 if_b jmp #\C_tmp098044_0000000b_findline_L000064_688
 mov r22, r19
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_b jmp #\C_tmp098044_0000000b_findline_L000064_685
C_tmp098044_0000000b_findline_L000064_688
 jmp #\@C_tmp098044_0000000b_findline_L000064_690
C_tmp098044_0000000b_findline_L000064_689
 mov r22, r19
 adds r22, r17
 mov r20, #2
 mov r0, r22
 mov r1, r20
 calld PA,#DIVS
 mov r21, r0
 jmp #\@C_tmp098044_0000000b_findline_L000064_693
C_tmp098044_0000000b_findline_L000064_692
 subs r21, #1
C_tmp098044_0000000b_findline_L000064_693
 cmps r21,  #1 wcz
 if_b jmp #\C_tmp098044_0000000b_findline_L000064_695
 mov r22, r21
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_b jmp #\C_tmp098044_0000000b_findline_L000064_692
C_tmp098044_0000000b_findline_L000064_695
 cmps r17, r21 wz
 if_nz jmp #\C_tmp098044_0000000b_findline_L000064_696
 mov r22, r19
 adds r22, r17
 mov r20, #2
 mov r0, r22
 mov r1, r20
 calld PA,#DIVS
 mov r21, r0
 jmp #\@C_tmp098044_0000000b_findline_L000064_699
C_tmp098044_0000000b_findline_L000064_698
 adds r21, #1
C_tmp098044_0000000b_findline_L000064_699
 cmps r21, r19 wcz
 if_ae jmp #\C_tmp098044_0000000b_findline_L000064_701
 mov r22, r21
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_b jmp #\C_tmp098044_0000000b_findline_L000064_698
C_tmp098044_0000000b_findline_L000064_701
C_tmp098044_0000000b_findline_L000064_696
 mov r22, r21
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmps r22, r23 wz
 if_nz jmp #\C_tmp098044_0000000b_findline_L000064_702
 mov r0, r21
 jmp #\@C_tmp098044_0000000b_findline_L000064_684
C_tmp098044_0000000b_findline_L000064_702
 cmps r21, r19 wz
 if_z jmp #\C_tmp098044_0000000b_findline_L000064_706
 cmps r21, r17 wz
 if_nz jmp #\C_tmp098044_0000000b_findline_L000064_704
C_tmp098044_0000000b_findline_L000064_706
 jmp #\@C_tmp098044_0000000b_findline_L000064_710
C_tmp098044_0000000b_findline_L000064_704
 mov r22, r21
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmps r22, r23 wcz
 if_be jmp #\C_tmp098044_0000000b_findline_L000064_707
 mov r19, r21
 jmp #\@C_tmp098044_0000000b_findline_L000064_708
C_tmp098044_0000000b_findline_L000064_707
 mov r17, r21
C_tmp098044_0000000b_findline_L000064_708
C_tmp098044_0000000b_findline_L000064_690
 mov r22, r17
 adds r22, #1
 cmps r19, r22 wcz
 if_a jmp #\C_tmp098044_0000000b_findline_L000064_689
 jmp #\@C_tmp098044_0000000b_findline_L000064_710
C_tmp098044_0000000b_findline_L000064_709
 subs r21, #1
C_tmp098044_0000000b_findline_L000064_710
 mov r22, #0
 cmps r21, r22 wcz
 if_b jmp #\C_tmp098044_0000000b_findline_L000064_712
 mov r20, r21
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 rdlong r20, r20
 cmps r20, r22 wcz
 if_b jmp #\C_tmp098044_0000000b_findline_L000064_709
C_tmp098044_0000000b_findline_L000064_712
 mov r22, r17
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmps r22, r23 wz
 if_nz jmp #\C_tmp098044_0000000b_findline_L000064_713
 mov r21, r17
 jmp #\@C_tmp098044_0000000b_findline_L000064_714
C_tmp098044_0000000b_findline_L000064_713
 mov r22, r19
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmps r22, r23 wz
 if_nz jmp #\C_tmp098044_0000000b_findline_L000064_715
 mov r21, r19
 jmp #\@C_tmp098044_0000000b_findline_L000064_716
C_tmp098044_0000000b_findline_L000064_715
 mov r21, ##-1
C_tmp098044_0000000b_findline_L000064_716
C_tmp098044_0000000b_findline_L000064_714
 cmps r21,  #0 wcz
 if_ae jmp #\C_tmp098044_0000000b_findline_L000064_717
 mov r22, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098044_0000000b_findline_L000064_719
 mov r2, r23
 mov r3, ##@C_tmp098044_0000000b_findline_L000064_721_L000722
 mov r4, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r4, r4
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fprintf
 add SP, #8
C_tmp098044_0000000b_findline_L000064_719
C_tmp098044_0000000b_findline_L000064_717
 mov r0, r21
C_tmp098044_0000000b_findline_L000064_684
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098047_0000000b_lineno_L000067
 calld PA,#NEWF
 calld PA,#PSHM
 long $d00000
 mov r23, r2
 mov r22, r23
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_abs
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098048_0000000b_execute_line_L000068
 calld PA,#NEWF
 calld PA,#PSHM
 long $d00000
 mov r23, #0
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #128 wz
 if_nz jmp #\C_tmp098048_0000000b_execute_line_L000068_725
 mov r2, #128
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098048_0000000b_execute_line_L000068_725
 mov r22, ##@C_tmp098021_00000009_tron_L000041
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098048_0000000b_execute_line_L000068_727
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 mov r20, ##-1
 cmps r22, r20 wz
 if_z jmp #\C_tmp098048_0000000b_execute_line_L000068_729
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r2, r22
 mov r3, ##@C_tmp098048_0000000b_execute_line_L000068_731_L000732
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_printf
 add SP, #4
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_730
C_tmp098048_0000000b_execute_line_L000068_729
 mov r2, ##@C_tmp098048_0000000b_execute_line_L000068_733_L000734
 mov BC, #4
 calld PA,#CALA
 long @C_printf
C_tmp098048_0000000b_execute_line_L000068_730
C_tmp098048_0000000b_execute_line_L000068_727
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 mov r20, #58
 cmps r22, r20 wz
 if_z jmp #\C_tmp098048_0000000b_execute_line_L000068_736
 cmps r22, r20 wcz
 if_a jmp #\C_tmp098048_0000000b_execute_line_L000068_789
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 mov r20, #29
 cmps r22, r20 wz
 if_z jmp #\C_tmp098048_0000000b_execute_line_L000068_787
 cmps r22, r20 wcz
 if_a jmp #\C_tmp098048_0000000b_execute_line_L000068_791
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_b jmp #\C_tmp098048_0000000b_execute_line_L000068_735
 cmps r22,  #8 wcz
 if_a jmp #\C_tmp098048_0000000b_execute_line_L000068_735
 shl r22, #2
 mov r20, ##@C_tmp098048_0000000b_execute_line_L000068_792_L000794
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098048_0000000b_execute_line_L000068_791
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #39 wz
 if_z jmp #\C_tmp098048_0000000b_execute_line_L000068_749
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_735
C_tmp098048_0000000b_execute_line_L000068_789
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #129 wcz
 if_b jmp #\C_tmp098048_0000000b_execute_line_L000068_795
 cmps r22,  #210 wcz
 if_a jmp #\C_tmp098048_0000000b_execute_line_L000068_796
 shl r22, #2
 mov r20, ##@C_tmp098048_0000000b_execute_line_L000068_797_L000799-516
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098048_0000000b_execute_line_L000068_795
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #63 wz
 if_z jmp #\C_tmp098048_0000000b_execute_line_L000068_739
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_735
C_tmp098048_0000000b_execute_line_L000068_796
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 mov r20, #235
 cmps r22, r20 wz
 if_z jmp #\C_tmp098048_0000000b_execute_line_L000068_773
 cmps r22, r20 wcz
 if_b jmp #\C_tmp098048_0000000b_execute_line_L000068_735
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #248 wz
 if_z jmp #\C_tmp098048_0000000b_execute_line_L000068_771
 cmps r22,  #249 wz
 if_z jmp #\C_tmp098048_0000000b_execute_line_L000068_772
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_735
C_tmp098048_0000000b_execute_line_L000068_738
 mov r0, ##-1
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_724
C_tmp098048_0000000b_execute_line_L000068_739
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098049_0000000b_do_print_L000069
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_740
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098050_0000000b_do_write_L000070
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_741
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098053_0000000b_do_let_or_usr_L000073
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_743
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098055_0000000c_do_if_L000075
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_744
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098056_0000000c_do_goto_L000076
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_745
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098057_0000000c_do_error_L000077
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_746
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098059_0000000c_do_input_L000079
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_747
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098060_0000000c_do_lineinput_L000080
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_748
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098058_0000000c_do_restore_L000078
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_749
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098063_0000000c_do_rem_L000083
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_750
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098064_0000000c_do_tron_L000084
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_751
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098065_0000000c_do_troff_L000085
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_752
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098066_0000000c_do_for_L000086
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_753
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098067_0000000c_do_next_L000087
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_754
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098068_0000000c_do_while_L000088
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_755
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098069_0000000c_do_wend_L000089
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_756
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098070_0000000c_do_gosub_L000090
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_757
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098071_0000000c_do_return_L000091
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_758
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098073_0000000c_do_stop_L000093
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_759
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098072_0000000c_do_end_L000092
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_760
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098074_0000000c_do_on_L000094
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_761
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098076_0000000c_do_read_L000096
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_762
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098075_0000000c_do_data_L000095
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_763
 mov r2, #186
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #28 wz
 if_nz jmp #\C_tmp098048_0000000b_execute_line_L000068_736
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098078_0000000c_do_defusr_L000098
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_766
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098081_0000000c_do_defint_L000101
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_767
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098082_0000000c_do_defsng_L000102
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_768
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098083_0000000c_do_defdbl_L000103
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_769
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098084_0000000c_do_defstr_L000104
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_770
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098079_0000000c_do_clear_L000099
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_771
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098087_0000000c_do_datestring_L000107
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_772
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098088_0000000c_do_timestring_L000108
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_773
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098089_0000000c_do_swap_L000109
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_774
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098090_0000000c_do_randomize_L000110
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_775
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098080_0000000c_do_width_L000100
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_776
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098091_0000000c_do_cls_L000111
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_778
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098093_0000000c_do_open_L000113
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_779
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098094_0000000c_do_close_L000114
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_780
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098096_0000000c_do_get_L000116
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_781
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098095_0000000c_do_put_L000115
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_782
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098097_0000000c_do_field_L000117
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_783
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098098_0000000c_do_lset_L000118
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_784
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098099_0000000c_do_rset_L000119
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_785
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098102_0000000c_do_resume_L000122
 mov r23, r0
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_786
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098100_0000000c_do_poke_L000120
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_787
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098101_0000000c_do_call_L000121
 jmp #\@C_tmp098048_0000000b_execute_line_L000068_736
C_tmp098048_0000000b_execute_line_L000068_735
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098048_0000000b_execute_line_L000068_736
 mov r0, r23
C_tmp098048_0000000b_execute_line_L000068_724
 calld PA,#POPM
 calld PA,#RETF
DAT
 alignl
C_tmp098263_00000095_decode_using_L000802
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $fea800
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r13, #0
 mov r11, #0
 mov r15, #0
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 add r22, #20
 rdlong r22, r22
 mov r20, #0
 wrlong r20, r22
 mov r22, FP
 add r22, #24
 rdlong r22, r22
 mov r20, #0
 wrlong r20, r22
 mov r22, #0
 wrlong r22, r19
 mov r22, #0
 wrlong r22, r17
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 mov r20, #0
 wrlong r20, r22
 jmp #\@C_tmp098263_00000095_decode_using_L000802_809
C_tmp098263_00000095_decode_using_L000802_808
 mov r2, #3
 mov r3, ##@C_tmp098263_00000095_decode_using_L000802_813_L000814
 mov RI, FP
 add RI, #8
 rdlong r4, RI
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_strncmp
 add SP, #8
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098263_00000095_decode_using_L000802_811
 mov r22, #1
 wrlong r22, r17
 mov r22, #1
 wrlong r22, r19
 mov r22, FP
 add r22, #20
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #3
 wrlong r20, r22
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #3
 mov RI, FP
 add RI,#8
 wrlong r22, RI
 jmp #\@C_tmp098263_00000095_decode_using_L000802_812
C_tmp098263_00000095_decode_using_L000802_811
 mov r2, #2
 mov r3, ##@C_tmp098263_00000095_decode_using_L000802_817_L000818
 mov RI, FP
 add RI, #8
 rdlong r4, RI
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_strncmp
 add SP, #8
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098263_00000095_decode_using_L000802_815
 mov r22, #1
 wrlong r22, r17
 mov r22, FP
 add r22, #20
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #2
 wrlong r20, r22
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #2
 mov RI, FP
 add RI,#8
 wrlong r22, RI
 jmp #\@C_tmp098263_00000095_decode_using_L000802_816
C_tmp098263_00000095_decode_using_L000802_815
 mov r2, #2
 mov r3, ##@C_tmp098263_00000095_decode_using_L000802_821_L000822
 mov RI, FP
 add RI, #8
 rdlong r4, RI
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_strncmp
 add SP, #8
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098263_00000095_decode_using_L000802_819
 mov r22, #1
 wrlong r22, r19
 mov r22, FP
 add r22, #20
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #2
 wrlong r20, r22
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #2
 mov RI, FP
 add RI,#8
 wrlong r22, RI
C_tmp098263_00000095_decode_using_L000802_819
C_tmp098263_00000095_decode_using_L000802_816
C_tmp098263_00000095_decode_using_L000802_812
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdbyte r22, r22
 cmps r22,  #35 wz
 if_nz jmp #\C_tmp098263_00000095_decode_using_L000802_823
 mov r15, #1
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098263_00000095_decode_using_L000802_825
 mov r22, FP
 add r22, #24
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #1
 wrlong r20, r22
 jmp #\@C_tmp098263_00000095_decode_using_L000802_826
C_tmp098263_00000095_decode_using_L000802_825
 mov r22, FP
 add r22, #20
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #1
 wrlong r20, r22
C_tmp098263_00000095_decode_using_L000802_826
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 add RI,#8
 wrlong r22, RI
 jmp #\@C_tmp098263_00000095_decode_using_L000802_824
C_tmp098263_00000095_decode_using_L000802_823
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdbyte r22, r22
 cmps r22,  #46 wz
 if_nz jmp #\C_tmp098263_00000095_decode_using_L000802_827
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 mov r20, #1
 wrlong r20, r22
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 add RI,#8
 wrlong r22, RI
 jmp #\@C_tmp098263_00000095_decode_using_L000802_828
C_tmp098263_00000095_decode_using_L000802_827
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdbyte r20, r22
 cmps r20,  #95 wz
 if_nz jmp #\C_tmp098263_00000095_decode_using_L000802_829
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098263_00000095_decode_using_L000802_829
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 add RI,#8
 wrlong r22, RI
 cmps r15,  #0 wz
 if_z jmp #\C_tmp098263_00000095_decode_using_L000802_831
 cmps r11,  #24 wcz
 if_ae jmp #\C_tmp098263_00000095_decode_using_L000802_830
 mov r22, r11
 mov r11, r22
 adds r11, #1
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 mov r18, r20
 adds r18, #1
 mov RI, FP
 add RI,#8
 wrlong r18, RI
 mov r18, ##@C_tmp098263_00000095_decode_using_L000802_using_suffix_L000807
 adds r22, r18
 rdbyte r20, r20
 wrbyte r20, r22
 jmp #\@C_tmp098263_00000095_decode_using_L000802_830
C_tmp098263_00000095_decode_using_L000802_831
 cmps r13,  #24 wcz
 if_ae jmp #\C_tmp098263_00000095_decode_using_L000802_830
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 mov r18, r20
 adds r18, #1
 mov RI, FP
 add RI,#8
 wrlong r18, RI
 mov r18, ##@C_tmp098263_00000095_decode_using_L000802_using_prefix_L000805
 adds r22, r18
 rdbyte r20, r20
 wrbyte r20, r22
 jmp #\@C_tmp098263_00000095_decode_using_L000802_830
C_tmp098263_00000095_decode_using_L000802_829
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdbyte r22, r22
 cmps r22,  #33 wz
 if_nz jmp #\C_tmp098263_00000095_decode_using_L000802_837
 mov r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r20, FP
 add r20, #16
 rdlong r20, r20
 wrlong r22, r20
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 add RI,#8
 wrlong r22, RI
 jmp #\@C_tmp098263_00000095_decode_using_L000802_838
C_tmp098263_00000095_decode_using_L000802_837
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdbyte r22, r22
 cmps r22,  #38 wz
 if_nz jmp #\C_tmp098263_00000095_decode_using_L000802_839
 mov r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 add r22, #16
 rdlong r22, r22
 mov r20, #0
 wrlong r20, r22
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 add RI,#8
 wrlong r22, RI
 jmp #\@C_tmp098263_00000095_decode_using_L000802_840
C_tmp098263_00000095_decode_using_L000802_839
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdbyte r22, r22
 cmps r22,  #92 wz
 if_nz jmp #\C_tmp098263_00000095_decode_using_L000802_841
 mov r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 add RI,#8
 wrlong r22, RI
 mov r22, FP
 add r22, #16
 rdlong r22, r22
 mov r20, #2
 wrlong r20, r22
 jmp #\@C_tmp098263_00000095_decode_using_L000802_844
C_tmp098263_00000095_decode_using_L000802_843
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 add RI,#8
 wrlong r22, RI
 mov r22, FP
 add r22, #16
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #1
 wrlong r20, r22
C_tmp098263_00000095_decode_using_L000802_844
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdbyte r22, r22
 cmps r22,  #92 wz
 if_z jmp #\C_tmp098263_00000095_decode_using_L000802_846
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098263_00000095_decode_using_L000802_843
C_tmp098263_00000095_decode_using_L000802_846
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdbyte r22, r22
 cmps r22,  #92 wz
 if_nz jmp #\C_tmp098263_00000095_decode_using_L000802_842
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 add RI,#8
 wrlong r22, RI
 jmp #\@C_tmp098263_00000095_decode_using_L000802_842
C_tmp098263_00000095_decode_using_L000802_841
 mov r22, #0
 cmps r15, r22 wz
 if_nz jmp #\C_tmp098263_00000095_decode_using_L000802_851
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_tmp098263_00000095_decode_using_L000802_849
C_tmp098263_00000095_decode_using_L000802_851
 cmps r11,  #255 wcz
 if_ae jmp #\C_tmp098263_00000095_decode_using_L000802_850
 mov r22, r11
 mov r11, r22
 adds r11, #1
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 mov r18, r20
 adds r18, #1
 mov RI, FP
 add RI,#8
 wrlong r18, RI
 mov r18, ##@C_tmp098263_00000095_decode_using_L000802_using_suffix_L000807
 adds r22, r18
 rdbyte r20, r20
 wrbyte r20, r22
 jmp #\@C_tmp098263_00000095_decode_using_L000802_850
C_tmp098263_00000095_decode_using_L000802_849
 cmps r13,  #255 wcz
 if_ae jmp #\C_tmp098263_00000095_decode_using_L000802_854
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 mov r18, r20
 adds r18, #1
 mov RI, FP
 add RI,#8
 wrlong r18, RI
 mov r18, ##@C_tmp098263_00000095_decode_using_L000802_using_prefix_L000805
 adds r22, r18
 rdbyte r20, r20
 wrbyte r20, r22
C_tmp098263_00000095_decode_using_L000802_854
C_tmp098263_00000095_decode_using_L000802_850
C_tmp098263_00000095_decode_using_L000802_842
C_tmp098263_00000095_decode_using_L000802_840
C_tmp098263_00000095_decode_using_L000802_838
C_tmp098263_00000095_decode_using_L000802_830
C_tmp098263_00000095_decode_using_L000802_828
C_tmp098263_00000095_decode_using_L000802_824
C_tmp098263_00000095_decode_using_L000802_809
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098263_00000095_decode_using_L000802_808
 mov r22, ##@C_tmp098263_00000095_decode_using_L000802_using_prefix_L000805
 adds r22, r13
 mov r20, #0
 wrbyte r20, r22
 mov r22, ##@C_tmp098263_00000095_decode_using_L000802_using_prefix_L000805
 wrlong r22, r23
 mov r22, ##@C_tmp098263_00000095_decode_using_L000802_using_suffix_L000807
 adds r22, r11
 mov r20, #0
 wrbyte r20, r22
 mov r22, ##@C_tmp098263_00000095_decode_using_L000802_using_suffix_L000807
 wrlong r22, r21
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
 alignl
C_tmp098269_000000a3_print_char_L000856
 calld PA,#NEWF
 calld PA,#PSHM
 long $d00000
 mov r23, r2
 mov r22, r23
 and r22, cviu_m1
 cmps r22,  #10 wz
 if_nz jmp #\C_tmp098269_000000a3_print_char_L000856_858
 mov r22, #1
 wrlong r22, ##@C_tmp098022_00000009_pos_L000042
 mov r2, ##@C_tmp098028_0000000a_fpout_L000048
 rdlong r2, r2
 mov r3, r23
 and r3, cviu_m1
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fputc
 add SP, #4
 jmp #\@C_tmp098269_000000a3_print_char_L000856_859
C_tmp098269_000000a3_print_char_L000856_858
 mov r22, ##@C_tmp098022_00000009_pos_L000042
 rdlong r22, r22
 mov r20, ##@C_tmp098024_00000009_width_L000044
 rdlong r20, r20
 cmps r22, r20 wz
 if_nz jmp #\C_tmp098269_000000a3_print_char_L000856_860
 mov r2, ##@C_tmp098028_0000000a_fpout_L000048
 rdlong r2, r2
 mov r3, r23
 and r3, cviu_m1
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fputc
 add SP, #4
 mov r22, #1
 wrlong r22, ##@C_tmp098022_00000009_pos_L000042
 jmp #\@C_tmp098269_000000a3_print_char_L000856_861
C_tmp098269_000000a3_print_char_L000856_860
 mov r2, ##@C_tmp098028_0000000a_fpout_L000048
 rdlong r2, r2
 mov r3, r23
 and r3, cviu_m1
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fputc
 add SP, #4
 mov r22, ##@C_tmp098022_00000009_pos_L000042
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098022_00000009_pos_L000042
C_tmp098269_000000a3_print_char_L000856_861
C_tmp098269_000000a3_print_char_L000856_859
 mov r2, ##@C___stdout
 mov BC, #4
 calld PA,#CALA
 long @C_fflush
 wrbyte r23, ##@C_tmp098023_00000009_last_char_L000043
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098270_000000a6_print_str_L000862
 calld PA,#NEWF
 calld PA,#PSHM
 long $d40000
 mov r23, r2
 jmp #\@C_tmp098270_000000a6_print_str_L000862_865
C_tmp098270_000000a6_print_str_L000862_864
 rdbyte r22, r23
 cmps r22,  #9 wz
 if_nz jmp #\C_tmp098270_000000a6_print_str_L000862_867
C_tmp098270_000000a6_print_str_L000862_869
 mov r22, ##@C_tmp098022_00000009_pos_L000042
 rdlong r22, r22
 mov r20, ##@C_tmp098024_00000009_width_L000044
 rdlong r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098270_000000a6_print_str_L000862_872
 mov r2, ##@C_tmp098028_0000000a_fpout_L000048
 rdlong r2, r2
 mov r3, #32
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fputc
 add SP, #4
 mov r22, #32
 wrbyte r22, ##@C_tmp098023_00000009_last_char_L000043
 mov r22, ##@C_tmp098022_00000009_pos_L000042
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098022_00000009_pos_L000042
C_tmp098270_000000a6_print_str_L000862_872
 mov r22, ##@C_tmp098022_00000009_pos_L000042
 rdlong r22, r22
 mov r20, #7
 mov r18, r22
 subs r18, #1
 and r18, #7
 cmps r18, r20 wz
 if_z jmp #\C_tmp098270_000000a6_print_str_L000862_874
 mov r20, ##@C_tmp098024_00000009_width_L000044
 rdlong r20, r20
 cmps r22, r20 wcz
 if_be jmp #\C_tmp098270_000000a6_print_str_L000862_869
C_tmp098270_000000a6_print_str_L000862_874
 jmp #\@C_tmp098270_000000a6_print_str_L000862_868
C_tmp098270_000000a6_print_str_L000862_867
 rdbyte r22, r23
 cmps r22,  #10 wz
 if_nz jmp #\C_tmp098270_000000a6_print_str_L000862_875
 mov r2, ##@C_tmp098028_0000000a_fpout_L000048
 rdlong r2, r2
 rdbyte r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fputc
 add SP, #4
 rdbyte r22, r23
 wrbyte r22, ##@C_tmp098023_00000009_last_char_L000043
 mov r22, #1
 wrlong r22, ##@C_tmp098022_00000009_pos_L000042
 jmp #\@C_tmp098270_000000a6_print_str_L000862_876
C_tmp098270_000000a6_print_str_L000862_875
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098269_000000a3_print_char_L000856
C_tmp098270_000000a6_print_str_L000862_876
C_tmp098270_000000a6_print_str_L000862_868
 adds r23, #1
C_tmp098270_000000a6_print_str_L000862_865
 rdbyte r22, r23
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098270_000000a6_print_str_L000862_864
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098050_0000000b_do_write_L000070
 calld PA,#NEWF
 sub SP, #264
 calld PA,#PSHM
 long $c00000
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #35 wz
 if_nz jmp #\C_tmp098050_0000000b_do_write_L000070_881
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098052_0000000b_do_filewrite_L000072
 jmp #\@C_tmp098050_0000000b_do_write_L000070_877
C_tmp098050_0000000b_do_write_L000070_880
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098162_0000000d_is_string_L000182
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098050_0000000b_do_write_L000070_883
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r23, r0
 mov r22, r23
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098050_0000000b_do_write_L000070_884
 mov r2, r23
 mov r3, ##@C_tmp098050_0000000b_do_write_L000070_887_L000888
 mov r4, FP
 sub r4, #-(-260)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sprintf
 add SP, #8
 mov r2, FP
 sub r2, #-(-260)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098270_000000a6_print_str_L000862
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_free
 jmp #\@C_tmp098050_0000000b_do_write_L000070_884
C_tmp098050_0000000b_do_write_L000070_883
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #230 wz
 if_nz jmp #\C_tmp098050_0000000b_do_write_L000070_889
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098050_0000000b_do_write_L000070_890
C_tmp098050_0000000b_do_write_L000070_889
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #229 wz
 if_nz jmp #\C_tmp098050_0000000b_do_write_L000070_891
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098050_0000000b_do_write_L000070_892
C_tmp098050_0000000b_do_write_L000070_891
 mov r2, #1
 mov r3, FP
 sub r3, #-(-268)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r22, FP
 sub r22, #-(-268)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098050_0000000b_do_write_L000070_893
 mov RI, FP
 sub RI, #-(-264)
 rdlong r2, RI
 mov r3, ##@C_tmp098050_0000000b_do_write_L000070_895_L000896
 mov r4, FP
 sub r4, #-(-260)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sprintf
 add SP, #8
 jmp #\@C_tmp098050_0000000b_do_write_L000070_894
C_tmp098050_0000000b_do_write_L000070_893
 mov RI, FP
 sub RI, #-(-264)
 rdlong r2, RI
 mov r3, ##@C_tmp098050_0000000b_do_write_L000070_898_L000899
 mov r4, FP
 sub r4, #-(-260)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sprintf
 add SP, #8
C_tmp098050_0000000b_do_write_L000070_894
 mov r23, FP
 sub r23, #-(-260)
 jmp #\@C_tmp098050_0000000b_do_write_L000070_902
C_tmp098050_0000000b_do_write_L000070_901
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098269_000000a3_print_char_L000856
 adds r23, #1
C_tmp098050_0000000b_do_write_L000070_902
 rdbyte r22, r23
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098050_0000000b_do_write_L000070_901
C_tmp098050_0000000b_do_write_L000070_892
C_tmp098050_0000000b_do_write_L000070_890
C_tmp098050_0000000b_do_write_L000070_884
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_z jmp #\C_tmp098050_0000000b_do_write_L000070_906
 cmps r22,  #59 wz
 if_nz jmp #\C_tmp098050_0000000b_do_write_L000070_904
C_tmp098050_0000000b_do_write_L000070_906
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098269_000000a3_print_char_L000856
C_tmp098050_0000000b_do_write_L000070_904
C_tmp098050_0000000b_do_write_L000070_881
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098050_0000000b_do_write_L000070_908
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #175 wz
 if_z jmp #\C_tmp098050_0000000b_do_write_L000070_908
 cmps r22,  #179 wz
 if_nz jmp #\C_tmp098050_0000000b_do_write_L000070_880
C_tmp098050_0000000b_do_write_L000070_908
 mov r2, #10
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098269_000000a3_print_char_L000856
C_tmp098050_0000000b_do_write_L000070_877
 calld PA,#POPM
 add SP, #264
 calld PA,#RETF
' Catalina Export print_to_buff
 alignl
C_print_to_buff
 calld PA,#NEWF
 sub SP, #64
 calld PA,#PSHM
 long $faaa00
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_print_to_buff_910
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #4
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_abs
 mov r22, r0
 mov r2, r22
 mov r3, ##@C_tmp098050_0000000b_do_write_L000070_895_L000896
 mov r4, FP
 sub r4, #-(-60)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sprintf
 add SP, #8
 mov r2, FP
 sub r2, #-(-60)
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r11, r0
 mov r13, r21
 cmps r13,  #0 wz
 if_nz jmp #\C_print_to_buff_912
 mov r13, r11
C_print_to_buff_912
 mov r15, r13
 mov r22, FP
 add r22, #24
 rdlong r22, r22
 adds r22, r11
 cmps r13, r22 wcz
 if_b jmp #\C_print_to_buff_914
 subs r15, r11
 mov r22, #0
 mov RI, FP
 sub RI, #-(-64)
 wrlong r22, RI
 jmp #\@C_print_to_buff_915
C_print_to_buff_914
 mov r22, FP
 add r22, #24
 rdlong r22, r22
 mov r15, r22
 adds r15, #1
 mov r22, FP
 add r22, #20
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_print_to_buff_916
 mov r22, #1
 mov RI, FP
 sub RI, #-(-64)
 wrlong r22, RI
C_print_to_buff_916
C_print_to_buff_915
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #4
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_print_to_buff_919
 mov r9, #1
 jmp #\@C_print_to_buff_920
C_print_to_buff_919
 mov r9, #0
C_print_to_buff_920
 mov RI, FP
 sub RI, #-(-68)
 wrlong r9, RI
 mov r22, FP
 sub r22, #-(-64)
 rdlong r22, r22
 mov r20, FP
 add r20, #24
 rdlong r20, r20
 adds r22, r20
 adds r22, #1
 cmps r15, r22 wcz
 if_ae jmp #\C_print_to_buff_911
 mov r22, FP
 sub r22, #-(-68)
 rdlong r22, r22
 adds r15, r22
 jmp #\@C_print_to_buff_911
C_print_to_buff_910
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #4
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_fabs
 mov r22, r0
 mov r2, r22
 mov r3, r19
 mov r4, ##@C_print_to_buff_923_L000924
 mov r5, FP
 sub r5, #-(-60)
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_sprintf
 add SP, #12
 mov r2, FP
 sub r2, #-(-60)
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r11, r0
 mov r13, r21
 cmps r19,  #0 wz
 if_z jmp #\C_print_to_buff_925
 mov r22, r19
 adds r22, #1
 adds r13, r22
C_print_to_buff_925
 cmps r13,  #0 wz
 if_nz jmp #\C_print_to_buff_927
 mov r13, r11
C_print_to_buff_927
 mov r15, r13
 mov r22, FP
 add r22, #24
 rdlong r22, r22
 adds r22, r11
 cmps r13, r22 wcz
 if_b jmp #\C_print_to_buff_929
 subs r15, r11
 mov r22, #0
 mov RI, FP
 sub RI, #-(-64)
 wrlong r22, RI
 jmp #\@C_print_to_buff_930
C_print_to_buff_929
 mov r22, FP
 add r22, #24
 rdlong r22, r22
 mov r15, r22
 adds r15, #1
 mov r22, FP
 add r22, #20
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_print_to_buff_931
 mov r22, #1
 mov RI, FP
 sub RI, #-(-64)
 wrlong r22, RI
C_print_to_buff_931
C_print_to_buff_930
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #4
 rdlong r22, r22
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_ae jmp #\C_print_to_buff_934
 mov r9, #1
 jmp #\@C_print_to_buff_935
C_print_to_buff_934
 mov r9, #0
C_print_to_buff_935
 mov RI, FP
 sub RI, #-(-68)
 wrlong r9, RI
 mov r22, FP
 sub r22, #-(-64)
 rdlong r22, r22
 mov r20, FP
 add r20, #24
 rdlong r20, r20
 adds r22, r20
 adds r22, #1
 cmps r15, r22 wcz
 if_ae jmp #\C_print_to_buff_938
 mov r22, FP
 sub r22, #-(-68)
 rdlong r22, r22
 adds r15, r22
C_print_to_buff_938
C_print_to_buff_911
 cmps r13,  #24 wcz
 if_be jmp #\C_print_to_buff_940
 mov r2, #51
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r13, #24
C_print_to_buff_940
 cmps r15,  #24 wcz
 if_be jmp #\C_print_to_buff_942
 mov r2, #51
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r15, #24
C_print_to_buff_942
 cmps r23,  #0 wz
 if_z jmp #\C_print_to_buff_944
 mov r2, r15
 mov r3, #42
 mov r4, FP
 sub r4, #-(-32)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memset
 add SP, #8
 jmp #\@C_print_to_buff_945
C_print_to_buff_944
 mov r2, r15
 mov r3, #32
 mov r4, FP
 sub r4, #-(-32)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memset
 add SP, #8
C_print_to_buff_945
 mov r22, FP
 sub r22, #-(-32)
 adds r22, r15
 mov r20, #0
 wrbyte r20, r22
 mov r22, #0
 mov r20, FP
 add r20, #24
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_print_to_buff_946
 cmps r15, r22 wcz
 if_b jmp #\C_print_to_buff_946
 mov r22, r15
 subs r22, #1
 mov r15, r22
 mov r20, FP
 sub r20, #-(-32)
 adds r22, r20
 mov r20, #36
 wrbyte r20, r22
C_print_to_buff_946
 mov r22, #0
 mov r20, FP
 sub r20, #-(-68)
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_print_to_buff_948
 cmps r15, r22 wcz
 if_b jmp #\C_print_to_buff_948
 mov r22, r15
 subs r22, #1
 mov r15, r22
 mov r20, FP
 sub r20, #-(-32)
 adds r22, r20
 mov r20, #45
 wrbyte r20, r22
C_print_to_buff_948
 mov r22, #0
 mov r20, FP
 sub r20, #-(-64)
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_print_to_buff_950
 cmps r15, r22 wcz
 if_b jmp #\C_print_to_buff_950
 mov r22, r15
 subs r22, #1
 mov r15, r22
 mov r20, FP
 sub r20, #-(-32)
 adds r22, r20
 mov r20, #37
 wrbyte r20, r22
C_print_to_buff_950
 mov r2, r17
 mov r3, FP
 sub r3, #-(-60)
 mov r4, FP
 sub r4, #-(-32)
 mov RI, FP
 add RI, #16
 rdlong r5, RI
 sub SP, #16
 mov RI, ##@C_print_to_buff_952_L000953
 wrlong RI, --PTRA
 calld PA,#PSHF
 long 12
 mov BC, #24
 add SP, #4
 calld PA,#CALA
 long @C_sprintf
 add SP, #20
 calld PA,#POPM
 add SP, #64
 calld PA,#RETF
 alignl
C_tmp098049_0000000b_do_print_L000069
 calld PA,#NEWF
 sub SP, #308
 calld PA,#PSHM
 long $faaa80
 mov r17, ##0
 mov r9, ##0
 mov r22, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-264)
 wrlong r22, RI
 mov r22, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-268)
 wrlong r22, RI
 mov r13, #0
 mov r22, #0
 mov RI, FP
 sub RI, #-(-304)
 wrlong r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-284)
 wrlong r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-288)
 wrlong r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-292)
 wrlong r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-296)
 wrlong r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-300)
 wrlong r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-280)
 wrlong r22, RI
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #35 wz
 if_nz jmp #\C_tmp098049_0000000b_do_print_L000069_955
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098051_0000000b_do_fileprint_L000071
 jmp #\@C_tmp098049_0000000b_do_print_L000069_954
C_tmp098049_0000000b_do_print_L000069_955
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #197 wz
 if_nz jmp #\C_tmp098049_0000000b_do_print_L000069_962
 mov r2, #197
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #1
 mov RI, FP
 sub RI, #-(-284)
 wrlong r22, RI
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r9, r0
 mov r22, r9
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098049_0000000b_do_print_L000069_959
 mov r2, FP
 sub r2, #-(-300)
 mov r3, FP
 sub r3, #-(-296)
 mov r4, FP
 sub r4, #-(-268)
 mov r5, FP
 sub r5, #-(-264)
 sub SP, #16
 mov RI, FP
 sub RI, #-(-292)
 wrlong RI, --PTRA
 mov RI, FP
 sub RI, #-(-288)
 wrlong RI, --PTRA
 mov RI, FP
 sub RI, #-(-280)
 wrlong RI, --PTRA
 mov RI, FP
 sub RI, #-(-304)
 wrlong RI, --PTRA
 mov RI, r9
 wrlong RI, --PTRA
 mov BC, #36
 add SP, #4
 calld PA,#CALA
 long @C_tmp098263_00000095_decode_using_L000802
 add SP, #32
C_tmp098049_0000000b_do_print_L000069_959
 mov r2, #59
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098049_0000000b_do_print_L000069_962
C_tmp098049_0000000b_do_print_L000069_961
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098162_0000000d_is_string_L000182
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098049_0000000b_do_print_L000069_964
 mov r19, #0
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #5 wz
 if_nz jmp #\C_tmp098049_0000000b_do_print_L000069_966
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov r11, r0
 cmps r11,  #0 wcz
 if_b jmp #\C_tmp098049_0000000b_do_print_L000069_972
 mov r7, #1
 jmp #\@C_tmp098049_0000000b_do_print_L000069_973
C_tmp098049_0000000b_do_print_L000069_972
 mov r7, #0
C_tmp098049_0000000b_do_print_L000069_973
 mov r22, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r22, r22
 cmps r11, r22 wcz
 if_ae jmp #\C_tmp098049_0000000b_do_print_L000069_974
 mov r22, #1
 mov RI, FP
 sub RI, #-(-308)
 wrlong r22, RI
 jmp #\@C_tmp098049_0000000b_do_print_L000069_975
C_tmp098049_0000000b_do_print_L000069_974
 mov r22, #0
 mov RI, FP
 sub RI, #-(-308)
 wrlong r22, RI
C_tmp098049_0000000b_do_print_L000069_975
 mov r22, FP
 sub r22, #-(-308)
 rdlong r22, r22
 and r22, r7
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098049_0000000b_do_print_L000069_968
 mov r22, #52

  stalli

 qmul r22, r11
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #44
 rdlong r22, r22
 mov r19, r22
 jmp #\@C_tmp098049_0000000b_do_print_L000069_969
C_tmp098049_0000000b_do_print_L000069_968
 mov r19, #0
C_tmp098049_0000000b_do_print_L000069_969
C_tmp098049_0000000b_do_print_L000069_966
 cmps r19,  #0 wz
 if_nz jmp #\C_tmp098049_0000000b_do_print_L000069_976
 mov r22, FP
 sub r22, #-(-280)
 rdlong r19, r22
C_tmp098049_0000000b_do_print_L000069_976
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r17, r0
 mov r15, #0
 mov r22, r17
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098049_0000000b_do_print_L000069_978
 mov r2, r17
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r15, r0
 cmps r19,  #0 wz
 if_nz jmp #\C_tmp098049_0000000b_do_print_L000069_980
 mov r19, r15
C_tmp098049_0000000b_do_print_L000069_980
 cmps r19,  #255 wcz
 if_be jmp #\C_tmp098049_0000000b_do_print_L000069_982
 mov r19, #255
C_tmp098049_0000000b_do_print_L000069_982
 cmps r15, r19 wcz
 if_be jmp #\C_tmp098049_0000000b_do_print_L000069_984
 mov r15, r19
C_tmp098049_0000000b_do_print_L000069_984
 mov r23, #0
 jmp #\@C_tmp098049_0000000b_do_print_L000069_989
C_tmp098049_0000000b_do_print_L000069_986
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r23
 mov r20, r23
 adds r20, r17
 rdbyte r20, r20
 wrbyte r20, r22
 adds r23, #1
C_tmp098049_0000000b_do_print_L000069_989
 cmps r23, r15 wcz
 if_b jmp #\C_tmp098049_0000000b_do_print_L000069_986
 mov r23, r15
 jmp #\@C_tmp098049_0000000b_do_print_L000069_993
C_tmp098049_0000000b_do_print_L000069_990
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r23
 mov r20, #32
 wrbyte r20, r22
 adds r23, #1
C_tmp098049_0000000b_do_print_L000069_993
 cmps r23, r19 wcz
 if_b jmp #\C_tmp098049_0000000b_do_print_L000069_990
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r23
 mov r20, #0
 wrbyte r20, r22
 mov RI, FP
 sub RI, #-(-264)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098270_000000a6_print_str_L000862
 mov r2, FP
 sub r2, #-(-260)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098270_000000a6_print_str_L000862
 mov RI, FP
 sub RI, #-(-268)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098270_000000a6_print_str_L000862
 mov r2, r17
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_tmp098049_0000000b_do_print_L000069_978
 mov r13, #0
 jmp #\@C_tmp098049_0000000b_do_print_L000069_965
C_tmp098049_0000000b_do_print_L000069_964
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #230 wz
 if_nz jmp #\C_tmp098049_0000000b_do_print_L000069_994
 mov r2, #230
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-312)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-312)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r23, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 cmps r23,  #1 wcz
 if_b jmp #\C_tmp098049_0000000b_do_print_L000069_998
 mov r22, ##@C_tmp098024_00000009_width_L000044
 rdlong r22, r22
 cmps r23, r22 wcz
 if_be jmp #\C_tmp098049_0000000b_do_print_L000069_996
C_tmp098049_0000000b_do_print_L000069_998
 mov r2, #20
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098049_0000000b_do_print_L000069_997
C_tmp098049_0000000b_do_print_L000069_996
 mov r22, ##@C_tmp098022_00000009_pos_L000042
 rdlong r22, r22
 cmps r23, r22 wcz
 if_ae jmp #\C_tmp098049_0000000b_do_print_L000069_999
 mov r2, #10
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098269_000000a3_print_char_L000856
C_tmp098049_0000000b_do_print_L000069_999
 mov r21, #0
 jmp #\@C_tmp098049_0000000b_do_print_L000069_1004
C_tmp098049_0000000b_do_print_L000069_1001
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r21
 mov r20, #32
 wrbyte r20, r22
 adds r21, #1
C_tmp098049_0000000b_do_print_L000069_1004
 mov r22, ##@C_tmp098022_00000009_pos_L000042
 rdlong r22, r22
 subs r22, r23
 neg r22, r22
 cmps r21, r22 wcz
 if_b jmp #\C_tmp098049_0000000b_do_print_L000069_1001
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r21
 mov r20, #0
 wrbyte r20, r22
 mov r2, FP
 sub r2, #-(-260)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098270_000000a6_print_str_L000862
C_tmp098049_0000000b_do_print_L000069_997
 mov r13, #1
 jmp #\@C_tmp098049_0000000b_do_print_L000069_995
C_tmp098049_0000000b_do_print_L000069_994
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #229 wz
 if_nz jmp #\C_tmp098049_0000000b_do_print_L000069_1005
 mov r2, #229
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-312)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-312)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r23, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 cmps r23,  #0 wcz
 if_b jmp #\C_tmp098049_0000000b_do_print_L000069_1009
 cmps r23,  #255 wcz
 if_be jmp #\C_tmp098049_0000000b_do_print_L000069_1007
C_tmp098049_0000000b_do_print_L000069_1009
 mov r2, #20
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098049_0000000b_do_print_L000069_1008
C_tmp098049_0000000b_do_print_L000069_1007
 mov r21, #0
 jmp #\@C_tmp098049_0000000b_do_print_L000069_1013
C_tmp098049_0000000b_do_print_L000069_1010
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r23
 mov r20, #32
 wrbyte r20, r22
 adds r21, #1
C_tmp098049_0000000b_do_print_L000069_1013
 cmps r21, r23 wcz
 if_b jmp #\C_tmp098049_0000000b_do_print_L000069_1010
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r21
 mov r20, #0
 wrbyte r20, r22
 mov r2, FP
 sub r2, #-(-260)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098270_000000a6_print_str_L000862
C_tmp098049_0000000b_do_print_L000069_1008
 mov r13, #1
 jmp #\@C_tmp098049_0000000b_do_print_L000069_1006
C_tmp098049_0000000b_do_print_L000069_1005
 mov r2, #1
 mov r3, FP
 sub r3, #-(-276)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov RI, FP
 sub RI, #-(-268)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-292)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-288)
 rdlong r4, RI
 mov RI, FP
 sub RI, #-(-296)
 rdlong r5, RI
 sub SP, #16
 calld PA,#PSHF
 long -300
 calld PA,#PSHF
 long -284
 calld PA,#PSHF
 long -264
 mov RI, FP
 sub RI, #-(-260)
 wrlong RI, --PTRA
 mov r0, FP
 sub r0, #-(-312)
 mov r1, FP
 sub r1, #-(-276)
 calld PA,#CPYB
 long 8
 mov RI, FP
 sub RI, #-(-312)
 wrlong RI, --PTRA
 mov BC, #36
 add SP, #4
 calld PA,#CALA
 long @C_print_to_buff
 add SP, #32
 mov r13, #0
 mov r22, r9
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098049_0000000b_do_print_L000069_1014
 mov r23, #0
 jmp #\@C_tmp098049_0000000b_do_print_L000069_1017
C_tmp098049_0000000b_do_print_L000069_1016
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, FP
 sub r20, #-(-260)
 adds r22, r20
 rdbyte r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098269_000000a3_print_char_L000856
C_tmp098049_0000000b_do_print_L000069_1017
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r23
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098049_0000000b_do_print_L000069_1016
 jmp #\@C_tmp098049_0000000b_do_print_L000069_1015
C_tmp098049_0000000b_do_print_L000069_1014
 mov r2, #32
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098269_000000a3_print_char_L000856
 mov r23, #0
 jmp #\@C_tmp098049_0000000b_do_print_L000069_1020
C_tmp098049_0000000b_do_print_L000069_1019
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, FP
 sub r20, #-(-260)
 adds r22, r20
 rdbyte r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098269_000000a3_print_char_L000856
C_tmp098049_0000000b_do_print_L000069_1020
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r23
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098049_0000000b_do_print_L000069_1019
 mov r2, #32
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098269_000000a3_print_char_L000856
C_tmp098049_0000000b_do_print_L000069_1015
C_tmp098049_0000000b_do_print_L000069_1006
C_tmp098049_0000000b_do_print_L000069_995
C_tmp098049_0000000b_do_print_L000069_965
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098049_0000000b_do_print_L000069_1022
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #14
 mov r20, ##@C_tmp098022_00000009_pos_L000042
 rdlong r20, r20
 subs r20, #1
 mov r0, r20
 mov r1, r22
 calld PA,#DIVS

  stalli

 qmul r22, r0
 getqx r0

  allowi

 mov r23, r0
 adds r23, #15
 mov r22, ##@C_tmp098024_00000009_width_L000044
 rdlong r22, r22
 cmps r23, r22 wcz
 if_be jmp #\C_tmp098049_0000000b_do_print_L000069_1027
 mov r23, #1
 jmp #\@C_tmp098049_0000000b_do_print_L000069_1027
C_tmp098049_0000000b_do_print_L000069_1026
 mov r2, #32
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098269_000000a3_print_char_L000856
C_tmp098049_0000000b_do_print_L000069_1027
 mov r22, ##@C_tmp098022_00000009_pos_L000042
 rdlong r22, r22
 cmps r22, r23 wcz
 if_b jmp #\C_tmp098049_0000000b_do_print_L000069_1026
 mov r13, #1
 jmp #\@C_tmp098049_0000000b_do_print_L000069_1023
C_tmp098049_0000000b_do_print_L000069_1022
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #59 wz
 if_nz jmp #\C_tmp098049_0000000b_do_print_L000069_1029
 mov r2, #59
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r13, #1
C_tmp098049_0000000b_do_print_L000069_1029
C_tmp098049_0000000b_do_print_L000069_1023
C_tmp098049_0000000b_do_print_L000069_962
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098049_0000000b_do_print_L000069_1033
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098049_0000000b_do_print_L000069_1033
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #175 wz
 if_z jmp #\C_tmp098049_0000000b_do_print_L000069_1033
 cmps r22,  #179 wz
 if_nz jmp #\C_tmp098049_0000000b_do_print_L000069_961
C_tmp098049_0000000b_do_print_L000069_1033
 cmps r13,  #0 wz
 if_z jmp #\C_tmp098049_0000000b_do_print_L000069_1034
 mov r2, ##@C_tmp098028_0000000a_fpout_L000048
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_fflush
 jmp #\@C_tmp098049_0000000b_do_print_L000069_1035
C_tmp098049_0000000b_do_print_L000069_1034
 mov r2, #10
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098269_000000a3_print_char_L000856
C_tmp098049_0000000b_do_print_L000069_1035
 mov r2, r9
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_tmp098049_0000000b_do_print_L000069_954
 calld PA,#POPM
 add SP, #308
 calld PA,#RETF
 alignl
C_tmp098053_0000000b_do_let_or_usr_L000073
 calld PA,#NEWF
 sub SP, #48
 calld PA,#PSHM
 long $d40000
 mov r22, ##0
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #159 wz
 if_nz jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1037
 mov r2, #159
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098053_0000000b_do_let_or_usr_L000073_1037
 mov r2, FP
 sub r2, #-(-16)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098103_0000000c_lvalue_L000123
 mov r2, #61
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #28 wz
 if_nz jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1039
 mov r2, #28
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #40 wz
 if_nz jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1041
 mov r22, #0
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 jmp #\@C_tmp098053_0000000b_do_let_or_usr_L000073_1042
C_tmp098053_0000000b_do_let_or_usr_L000073_1041
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #128 wz
 if_nz jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1043
 mov r2, FP
 sub r2, #-(-32)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098163_0000000d_getvalue_L000183
 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r2, #128
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-32)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_z jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1045
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098053_0000000b_do_let_or_usr_L000073_1045
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_b jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1050
 cmps r22,  #9 wcz
 if_be jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1048
C_tmp098053_0000000b_do_let_or_usr_L000073_1050
 mov r2, #50
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098053_0000000b_do_let_or_usr_L000073_1048
C_tmp098053_0000000b_do_let_or_usr_L000073_1043
C_tmp098053_0000000b_do_let_or_usr_L000073_1042
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-16)
 rdbyte r23, r22
 cmps r23,  #129 wz
 if_z jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1054
 cmps r23,  #130 wz
 if_z jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1056
 cmps r23,  #131 wz
 if_z jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1058
 jmp #\@C_tmp098053_0000000b_do_let_or_usr_L000073_1051
C_tmp098053_0000000b_do_let_or_usr_L000073_1054
 mov r2, #1
 mov r3, FP
 sub r3, #-(-44)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-44)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov r22, r0
 mov r2, r22
 mov RI, FP
 sub RI, #-(-20)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098112_0000000c_int_usr_L000132
 add SP, #4
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 wrlong r0, r20
 jmp #\@C_tmp098053_0000000b_do_let_or_usr_L000073_1052
C_tmp098053_0000000b_do_let_or_usr_L000073_1056
 mov r2, #1
 mov r3, FP
 sub r3, #-(-52)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-52)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098154_0000000d_real_L000174
 mov r22, r0
 mov r2, r22
 mov RI, FP
 sub RI, #-(-20)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098113_0000000c_real_usr_L000133
 add SP, #4
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 wrlong r0, r20
 jmp #\@C_tmp098053_0000000b_do_let_or_usr_L000073_1052
C_tmp098053_0000000b_do_let_or_usr_L000073_1058
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1059
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r22, r0
 mov r2, r22
 mov RI, FP
 sub RI, #-(-20)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098114_0000000c_str_usr_L000134
 add SP, #4
 mov RI, FP
 sub RI, #-(-24)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1060
 mov r22, #0
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 jmp #\@C_tmp098053_0000000b_do_let_or_usr_L000073_1067
C_tmp098053_0000000b_do_let_or_usr_L000073_1064
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 rdlong r20, r20
 adds r20, r22
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18
 adds r22, r18
 rdbyte r22, r22
 wrbyte r22, r20
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
C_tmp098053_0000000b_do_let_or_usr_L000073_1067
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-12)
 rdlong r20, r20
 cmp r22, r20 wcz
 if_b jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1064
 jmp #\@C_tmp098053_0000000b_do_let_or_usr_L000073_1060
C_tmp098053_0000000b_do_let_or_usr_L000073_1059
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r22, r0
 mov r2, r22
 mov RI, FP
 sub RI, #-(-20)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098114_0000000c_str_usr_L000134
 add SP, #4
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 wrlong r0, r20
C_tmp098053_0000000b_do_let_or_usr_L000073_1060
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1052
 mov RI, FP
 sub RI, #-(-24)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_tmp098053_0000000b_do_let_or_usr_L000073_1051
C_tmp098053_0000000b_do_let_or_usr_L000073_1052
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098053_0000000b_do_let_or_usr_L000073_1040
C_tmp098053_0000000b_do_let_or_usr_L000073_1039
 mov r22, FP
 sub r22, #-(-16)
 rdbyte r23, r22
 cmps r23,  #129 wz
 if_z jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1077
 cmps r23,  #130 wz
 if_z jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1079
 cmps r23,  #131 wz
 if_z jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1081
 jmp #\@C_tmp098053_0000000b_do_let_or_usr_L000073_1075
C_tmp098053_0000000b_do_let_or_usr_L000073_1077
 mov r2, #1
 mov r3, FP
 sub r3, #-(-44)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-44)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 wrlong r0, r20
 jmp #\@C_tmp098053_0000000b_do_let_or_usr_L000073_1075
C_tmp098053_0000000b_do_let_or_usr_L000073_1079
 mov r2, #1
 mov r3, FP
 sub r3, #-(-52)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-52)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098154_0000000d_real_L000174
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 wrlong r0, r20
 jmp #\@C_tmp098053_0000000b_do_let_or_usr_L000073_1075
C_tmp098053_0000000b_do_let_or_usr_L000073_1081
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1082
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov RI, FP
 sub RI, #-(-24)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1083
 mov r22, #0
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 jmp #\@C_tmp098053_0000000b_do_let_or_usr_L000073_1090
C_tmp098053_0000000b_do_let_or_usr_L000073_1087
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 rdlong r20, r20
 adds r20, r22
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18
 adds r22, r18
 rdbyte r22, r22
 wrbyte r22, r20
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
C_tmp098053_0000000b_do_let_or_usr_L000073_1090
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-12)
 rdlong r20, r20
 cmp r22, r20 wcz
 if_b jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1087
 jmp #\@C_tmp098053_0000000b_do_let_or_usr_L000073_1083
C_tmp098053_0000000b_do_let_or_usr_L000073_1082
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 wrlong r0, r20
C_tmp098053_0000000b_do_let_or_usr_L000073_1083
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098053_0000000b_do_let_or_usr_L000073_1075
 mov RI, FP
 sub RI, #-(-24)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_tmp098053_0000000b_do_let_or_usr_L000073_1075
C_tmp098053_0000000b_do_let_or_usr_L000073_1040
 calld PA,#POPM
 add SP, #48
 calld PA,#RETF
 alignl
C_tmp098054_0000000b_do_dim_L000074
 calld PA,#NEWF
 sub SP, #96
 calld PA,#PSHM
 long $fe8000
 mov r19, #0
 mov r21, ##0
 mov r2, #160
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1099
C_tmp098054_0000000b_do_dim_L000074_1098
 mov r19, #0
 mov r17, #1
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 mov r20, #6
 cmps r22, r20 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1109
 cmps r22,  #7 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1109
 cmps r22,  #8 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1109
 cmps r22, r20 wcz
 if_b jmp #\C_tmp098054_0000000b_do_dim_L000074_1101
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #132 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1103
 cmps r22,  #133 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1103
 cmps r22,  #134 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1103
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1101
C_tmp098054_0000000b_do_dim_L000074_1103
 mov r2, FP
 sub r2, #-(-68)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov RI, FP
 sub RI, #-(-76)
 wrlong r0, RI
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r19
 mov r20, #1
 mov r19, r22
 adds r19, #1
 mov r2, r20
 mov r3, FP
 sub r3, #-(-84)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-84)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 shl r22, #2
 mov r18, FP
 sub r18, #-(-24)
 adds r22, r18
 wrlong r0, r22
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1105
C_tmp098054_0000000b_do_dim_L000074_1104
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r19
 mov r20, #1
 mov r19, r22
 adds r19, #1
 mov r2, r20
 mov r3, FP
 sub r3, #-(-92)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-92)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 shl r22, #2
 mov r18, FP
 sub r18, #-(-24)
 adds r22, r18
 wrlong r0, r22
 cmps r19,  #5 wcz
 if_be jmp #\C_tmp098054_0000000b_do_dim_L000074_1107
 mov r2, #6
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1097
C_tmp098054_0000000b_do_dim_L000074_1107
C_tmp098054_0000000b_do_dim_L000074_1105
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1104
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1102
C_tmp098054_0000000b_do_dim_L000074_1109
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov RI, FP
 sub RI, #-(-72)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-72)
 rdlong r22, r22
 mov r20, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098054_0000000b_do_dim_L000074_1110
 mov r22, #52
 mov r20, FP
 sub r20, #-(-72)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 mov r2, r0
 adds r2, r22
 mov r3, FP
 sub r3, #-(-68)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
C_tmp098054_0000000b_do_dim_L000074_1110
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r19
 mov r20, #1
 mov r19, r22
 adds r19, #1
 mov r2, r20
 mov r3, FP
 sub r3, #-(-92)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-92)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 shl r22, #2
 mov r18, FP
 sub r18, #-(-24)
 adds r22, r18
 wrlong r0, r22
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1113
C_tmp098054_0000000b_do_dim_L000074_1112
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r19
 mov r20, #1
 mov r19, r22
 adds r19, #1
 mov r2, r20
 mov r3, FP
 sub r3, #-(-100)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-100)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 shl r22, #2
 mov r18, FP
 sub r18, #-(-24)
 adds r22, r18
 wrlong r0, r22
 cmps r19,  #5 wcz
 if_be jmp #\C_tmp098054_0000000b_do_dim_L000074_1115
 mov r2, #6
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1097
C_tmp098054_0000000b_do_dim_L000074_1115
C_tmp098054_0000000b_do_dim_L000074_1113
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1112
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1102
C_tmp098054_0000000b_do_dim_L000074_1101
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1097
C_tmp098054_0000000b_do_dim_L000074_1102
 mov r23, #0
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1121
C_tmp098054_0000000b_do_dim_L000074_1118
 mov r22, r23
 shl r22, #2
 mov r20, FP
 sub r20, #-(-24)
 adds r22, r20
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_tmp098054_0000000b_do_dim_L000074_1122
 mov r2, #5
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1097
C_tmp098054_0000000b_do_dim_L000074_1122
 adds r23, #1
C_tmp098054_0000000b_do_dim_L000074_1121
 cmps r23, r19 wcz
 if_b jmp #\C_tmp098054_0000000b_do_dim_L000074_1118
 cmps r19,  #1 wcz
 if_b jmp #\C_tmp098054_0000000b_do_dim_L000074_1124
 cmps r19,  #5 wcz
 if_a jmp #\C_tmp098054_0000000b_do_dim_L000074_1124
 mov r22, r19
 shl r22, #2
 mov r20, ##@C_tmp098054_0000000b_do_dim_L000074_1141_L001143-4
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098054_0000000b_do_dim_L000074_1126
 mov RI, FP
 sub RI, #-(-24)
 rdlong r2, RI
 mov r3, #1
 mov r4, FP
 sub r4, #-(-68)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_tmp098123_0000000d_dimension_L000143
 add SP, #8
 mov r21, r0
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1125
C_tmp098054_0000000b_do_dim_L000074_1127
 mov RI, FP
 sub RI, #-(-20)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-24)
 rdlong r3, RI
 mov r4, #2
 mov r5, FP
 sub r5, #-(-68)
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_tmp098123_0000000d_dimension_L000143
 add SP, #12
 mov r21, r0
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1125
C_tmp098054_0000000b_do_dim_L000074_1129
 mov RI, FP
 sub RI, #-(-16)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-20)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-24)
 rdlong r4, RI
 mov r5, #3
 sub SP, #16
 mov RI, FP
 sub RI, #-(-68)
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_tmp098123_0000000d_dimension_L000143
 add SP, #16
 mov r21, r0
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1125
C_tmp098054_0000000b_do_dim_L000074_1132
 mov RI, FP
 sub RI, #-(-12)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-16)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-20)
 rdlong r4, RI
 mov RI, FP
 sub RI, #-(-24)
 rdlong r5, RI
 sub SP, #16
 mov RI, #4
 wrlong RI, --PTRA
 mov RI, FP
 sub RI, #-(-68)
 wrlong RI, --PTRA
 mov BC, #24
 add SP, #4
 calld PA,#CALA
 long @C_tmp098123_0000000d_dimension_L000143
 add SP, #20
 mov r21, r0
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1125
C_tmp098054_0000000b_do_dim_L000074_1136
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-12)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-16)
 rdlong r4, RI
 mov RI, FP
 sub RI, #-(-20)
 rdlong r5, RI
 sub SP, #16
 calld PA,#PSHF
 long -24
 mov RI, #5
 wrlong RI, --PTRA
 mov RI, FP
 sub RI, #-(-68)
 wrlong RI, --PTRA
 mov BC, #28
 add SP, #4
 calld PA,#CALA
 long @C_tmp098123_0000000d_dimension_L000143
 add SP, #24
 mov r21, r0
C_tmp098054_0000000b_do_dim_L000074_1124
C_tmp098054_0000000b_do_dim_L000074_1125
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098054_0000000b_do_dim_L000074_1145
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1097
C_tmp098054_0000000b_do_dim_L000074_1145
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #61 wz
 if_nz jmp #\C_tmp098054_0000000b_do_dim_L000074_1147
 mov r2, #61
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r23, #0
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1152
C_tmp098054_0000000b_do_dim_L000074_1149
 mov r22, r23
 shl r22, #2
 mov r20, r21
 adds r20, #52
 adds r22, r20
 rdlong r22, r22

  stalli

 qmul r17, r22
 getqx r0

  allowi

 mov r17, r0
 adds r23, #1
C_tmp098054_0000000b_do_dim_L000074_1152
 mov r22, r21
 adds r22, #48
 rdlong r22, r22
 cmps r23, r22 wcz
 if_b jmp #\C_tmp098054_0000000b_do_dim_L000074_1149
 mov r22, r21
 adds r22, #41
 rdbyte r15, r22
 cmps r15,  #129 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1156
 cmps r15,  #130 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1163
 cmps r15,  #131 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1170
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1153
C_tmp098054_0000000b_do_dim_L000074_1156
 mov r23, #0
 mov r22, r23
 mov r20, #1
 mov r23, r22
 adds r23, #1
 mov r2, r20
 mov r3, FP
 sub r3, #-(-84)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-84)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 shl r22, #2
 mov r18, r21
 adds r18, #72
 rdlong r18, r18
 adds r22, r18
 wrlong r0, r22
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1158
C_tmp098054_0000000b_do_dim_L000074_1157
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r23
 mov r20, #1
 mov r23, r22
 adds r23, #1
 mov r2, r20
 mov r3, FP
 sub r3, #-(-92)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-92)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 shl r22, #2
 mov r18, r21
 adds r18, #72
 rdlong r18, r18
 adds r22, r18
 wrlong r0, r22
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1160
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1154
C_tmp098054_0000000b_do_dim_L000074_1160
C_tmp098054_0000000b_do_dim_L000074_1158
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098054_0000000b_do_dim_L000074_1162
 cmps r23, r17 wcz
 if_b jmp #\C_tmp098054_0000000b_do_dim_L000074_1157
C_tmp098054_0000000b_do_dim_L000074_1162
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1154
C_tmp098054_0000000b_do_dim_L000074_1163
 mov r23, #0
 mov r22, r23
 mov r20, #1
 mov r23, r22
 adds r23, #1
 mov r2, r20
 mov r3, FP
 sub r3, #-(-92)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-92)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098154_0000000d_real_L000174
 shl r22, #2
 mov r18, r21
 adds r18, #72
 rdlong r18, r18
 adds r22, r18
 wrlong r0, r22
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1165
C_tmp098054_0000000b_do_dim_L000074_1164
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r23
 mov r20, #1
 mov r23, r22
 adds r23, #1
 mov r2, r20
 mov r3, FP
 sub r3, #-(-100)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-100)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098154_0000000d_real_L000174
 shl r22, #2
 mov r18, r21
 adds r18, #72
 rdlong r18, r18
 adds r22, r18
 wrlong r0, r22
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1167
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1154
C_tmp098054_0000000b_do_dim_L000074_1167
C_tmp098054_0000000b_do_dim_L000074_1165
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098054_0000000b_do_dim_L000074_1169
 cmps r23, r17 wcz
 if_b jmp #\C_tmp098054_0000000b_do_dim_L000074_1164
C_tmp098054_0000000b_do_dim_L000074_1169
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1154
C_tmp098054_0000000b_do_dim_L000074_1170
 mov r23, #0
 mov r22, r23
 shl r22, #2
 mov r20, r21
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1171
 mov r22, r23
 shl r22, #2
 mov r20, r21
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_tmp098054_0000000b_do_dim_L000074_1171
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 shl r22, #2
 mov r18, r21
 adds r18, #72
 rdlong r18, r18
 adds r22, r18
 wrlong r0, r22
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1174
C_tmp098054_0000000b_do_dim_L000074_1173
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r23
 shl r22, #2
 mov r20, r21
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1176
 mov r22, r23
 shl r22, #2
 mov r20, r21
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_tmp098054_0000000b_do_dim_L000074_1176
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 shl r22, #2
 mov r18, r21
 adds r18, #72
 rdlong r18, r18
 adds r22, r18
 wrlong r0, r22
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1178
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1154
C_tmp098054_0000000b_do_dim_L000074_1178
C_tmp098054_0000000b_do_dim_L000074_1174
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098054_0000000b_do_dim_L000074_1180
 cmps r23, r17 wcz
 if_b jmp #\C_tmp098054_0000000b_do_dim_L000074_1173
C_tmp098054_0000000b_do_dim_L000074_1180
C_tmp098054_0000000b_do_dim_L000074_1153
C_tmp098054_0000000b_do_dim_L000074_1154
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098054_0000000b_do_dim_L000074_1148
 mov r2, #7
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1148
C_tmp098054_0000000b_do_dim_L000074_1147
 mov r23, #0
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1186
C_tmp098054_0000000b_do_dim_L000074_1183
 mov r22, r23
 shl r22, #2
 mov r20, r21
 adds r20, #52
 adds r22, r20
 rdlong r22, r22

  stalli

 qmul r17, r22
 getqx r0

  allowi

 mov r17, r0
 adds r23, #1
C_tmp098054_0000000b_do_dim_L000074_1186
 mov r22, r21
 adds r22, #48
 rdlong r22, r22
 cmps r23, r22 wcz
 if_b jmp #\C_tmp098054_0000000b_do_dim_L000074_1183
 mov r22, r21
 adds r22, #41
 rdbyte r15, r22
 cmps r15,  #129 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1190
 cmps r15,  #130 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1197
 cmps r15,  #131 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1206
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1187
C_tmp098054_0000000b_do_dim_L000074_1190
 mov r22, #0
 mov r23, r22
 mov r20, r23
 mov r23, r20
 adds r23, #1
 shl r20, #2
 mov r18, r21
 adds r18, #72
 rdlong r18, r18
 adds r20, r18
 wrlong r22, r20
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1192
C_tmp098054_0000000b_do_dim_L000074_1191
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r23
 mov r23, r22
 adds r23, #1
 shl r22, #2
 mov r20, r21
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 mov r20, #0
 wrlong r20, r22
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1194
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1188
C_tmp098054_0000000b_do_dim_L000074_1194
C_tmp098054_0000000b_do_dim_L000074_1192
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098054_0000000b_do_dim_L000074_1196
 cmps r23, r17 wcz
 if_b jmp #\C_tmp098054_0000000b_do_dim_L000074_1191
C_tmp098054_0000000b_do_dim_L000074_1196
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1188
C_tmp098054_0000000b_do_dim_L000074_1197
 mov r23, #0
 mov r22, r23
 mov r23, r22
 adds r23, #1
 shl r22, #2
 mov r20, r21
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 mov r20, ##@C_tmp098054_0000000b_do_dim_L000074_1198_L001199
 rdlong r20, r20
 wrlong r20, r22
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1201
C_tmp098054_0000000b_do_dim_L000074_1200
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r23
 mov r23, r22
 adds r23, #1
 shl r22, #2
 mov r20, r21
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 mov r20, ##@C_tmp098054_0000000b_do_dim_L000074_1198_L001199
 rdlong r20, r20
 wrlong r20, r22
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1203
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1188
C_tmp098054_0000000b_do_dim_L000074_1203
C_tmp098054_0000000b_do_dim_L000074_1201
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098054_0000000b_do_dim_L000074_1205
 cmps r23, r17 wcz
 if_b jmp #\C_tmp098054_0000000b_do_dim_L000074_1200
C_tmp098054_0000000b_do_dim_L000074_1205
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1188
C_tmp098054_0000000b_do_dim_L000074_1206
 mov r23, #0
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 shl r22, #2
 mov r18, r21
 adds r18, #72
 rdlong r18, r18
 adds r22, r18
 wrlong r0, r22
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1208
C_tmp098054_0000000b_do_dim_L000074_1207
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 shl r22, #2
 mov r18, r21
 adds r18, #72
 rdlong r18, r18
 adds r22, r18
 wrlong r0, r22
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1210
 jmp #\@C_tmp098054_0000000b_do_dim_L000074_1188
C_tmp098054_0000000b_do_dim_L000074_1210
C_tmp098054_0000000b_do_dim_L000074_1208
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098054_0000000b_do_dim_L000074_1212
 cmps r23, r17 wcz
 if_b jmp #\C_tmp098054_0000000b_do_dim_L000074_1207
C_tmp098054_0000000b_do_dim_L000074_1212
C_tmp098054_0000000b_do_dim_L000074_1187
C_tmp098054_0000000b_do_dim_L000074_1188
C_tmp098054_0000000b_do_dim_L000074_1148
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098054_0000000b_do_dim_L000074_1213
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098054_0000000b_do_dim_L000074_1213
C_tmp098054_0000000b_do_dim_L000074_1099
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098054_0000000b_do_dim_L000074_1098
C_tmp098054_0000000b_do_dim_L000074_1097
 calld PA,#POPM
 add SP, #96
 calld PA,#RETF
' Catalina Export nextline
 alignl
C_nextline
 calld PA,#PSHM
 long $500000
 jmp #\@C_nextline_1217
C_nextline_1216
 mov r22, r2
 shl r22, #4
 adds r22, #16
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 mov r20, ##-1
 cmps r22, r20 wz
 if_z jmp #\C_nextline_1219
 mov r22, r2
 shl r22, #4
 adds r22, #16
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r0, r22
 jmp #\@C_nextline_1215
C_nextline_1219
 adds r2, #1
C_nextline_1217
 mov r22, ##@C_tmp098020_00000009_nlines_L000040
 rdlong r22, r22
 subs r22, #1
 cmps r2, r22 wcz
 if_b jmp #\C_nextline_1216
 mov r0, #0
C_nextline_1215
 calld PA,#POPM
 calld PA,#RETN
 alignl
C_tmp098157_0000000d_match_literal_L000177
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $f40000
 mov r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, #0
 mov r20, ##@C_tmp098007_00000009_context_L000027
 rdlong r20, r20
 cmp r20, r22 wz
 if_nz jmp #\C_tmp098157_0000000d_match_literal_L000177_1222
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #12
 rdlong r20, r20
 mov r23, r20
 cmp r20, r22 wz
 if_z jmp #\C_tmp098157_0000000d_match_literal_L000177_1222
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r23, r22
 jmp #\@C_tmp098157_0000000d_match_literal_L000177_1228
C_tmp098157_0000000d_match_literal_L000177_1222
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #4
 rdlong r20, r20
 mov r23, r22
 adds r23, r20
 jmp #\@C_tmp098157_0000000d_match_literal_L000177_1225
C_tmp098157_0000000d_match_literal_L000177_1224
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r23, #1
C_tmp098157_0000000d_match_literal_L000177_1225
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098181_00000013_space_or_tab_L000224
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098157_0000000d_match_literal_L000177_1224
 jmp #\@C_tmp098157_0000000d_match_literal_L000177_1228
C_tmp098157_0000000d_match_literal_L000177_1227
 mov r2, #34
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098173_0000000d_mystrend_L000193
 add SP, #4
 mov r21, r0
 mov r22, r21
 mov r20, r23
 cmp r22, r20 wcz
 if_be jmp #\C_tmp098157_0000000d_match_literal_L000177_1230
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, r21
 mov r18, r23
 sub r20, r18
 adds r22, r20
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 jmp #\@C_tmp098157_0000000d_match_literal_L000177_1231
C_tmp098157_0000000d_match_literal_L000177_1230
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098157_0000000d_match_literal_L000177_1231
 mov r2, #34
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098157_0000000d_match_literal_L000177_1228
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #34 wz
 if_z jmp #\C_tmp098157_0000000d_match_literal_L000177_1227
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
 alignl
C_tmp098055_0000000c_do_if_L000075
 calld PA,#NEWF
 sub SP, #28
 calld PA,#PSHM
 long $f80000
 mov r21, #1
 mov r19, #0
 mov r23, #0
 mov r2, #161
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1233
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1233
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #165 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1235
 mov r2, #165
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r19, #165
 mov r2, FP
 sub r2, #-(-20)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098165_0000000d_getlineindex_L000185
 mov RI, FP
 sub RI, #-(-24)
 wrlong r0, RI
 cmps r0,  #0 wcz
 if_be jmp #\C_tmp098055_0000000c_do_if_L000075_1237
 mov r22, FP
 sub r22, #-(-16)
 rdlong r23, r22
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20
 adds r20, #1
 adds r22, r20
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1238
C_tmp098055_0000000c_do_if_L000075_1237
 mov r2, #1
 mov r3, FP
 sub r3, #-(-32)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-32)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r22, r0
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098044_0000000b_findline_L000064
 mov r23, r0
C_tmp098055_0000000c_do_if_L000075_1238
 mov r22, #0
 cmps r23, r22 wcz
 if_be jmp #\C_tmp098055_0000000c_do_if_L000075_1242
 mov r20, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1236
C_tmp098055_0000000c_do_if_L000075_1242
 mov r0, ##-1
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1235
 mov r2, #162
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r19, #162
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1243
 mov r0, ##-1
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1243
 mov r2, FP
 sub r2, #-(-20)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098165_0000000d_getlineindex_L000185
 mov RI, FP
 sub RI, #-(-24)
 wrlong r0, RI
 cmps r0,  #0 wcz
 if_be jmp #\C_tmp098055_0000000c_do_if_L000075_1245
 mov r22, FP
 sub r22, #-(-16)
 rdlong r23, r22
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20
 adds r20, #1
 adds r22, r20
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
C_tmp098055_0000000c_do_if_L000075_1245
C_tmp098055_0000000c_do_if_L000075_1236
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1248
 cmps r23,  #0 wcz
 if_be jmp #\C_tmp098055_0000000c_do_if_L000075_1251
 mov r0, r23
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1251
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #128 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1253
 mov r2, #1
 mov r3, FP
 sub r3, #-(-32)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-32)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r22, r0
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098044_0000000b_findline_L000064
 mov r23, r0
 mov r22, #0
 cmps r23, r22 wcz
 if_be jmp #\C_tmp098055_0000000c_do_if_L000075_1257
 mov r20, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1255
C_tmp098055_0000000c_do_if_L000075_1257
 mov r0, ##-1
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1255
 mov r0, r23
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1253
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #175 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1261
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098072_0000000c_do_end_L000092
 mov r0, #0
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1260
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #58 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1263
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098156_0000000d_match_eol_L000176
C_tmp098055_0000000c_do_if_L000075_1263
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098048_0000000b_execute_line_L000068
 mov r23, r0
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1265
 mov r0, ##-1
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1265
 cmps r23,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1267
 mov r0, r23
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1267
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
C_tmp098055_0000000c_do_if_L000075_1261
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1272
 cmps r22,  #10 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1272
 cmps r22,  #1 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1272
 cmps r22,  #179 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1272
 cmps r22,  #175 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1260
C_tmp098055_0000000c_do_if_L000075_1272
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1276
 cmps r22,  #10 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1276
 cmps r22,  #1 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1273
C_tmp098055_0000000c_do_if_L000075_1276
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098156_0000000d_match_eol_L000176
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1249
C_tmp098055_0000000c_do_if_L000075_1273
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #175 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1277
 mov r2, #175
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #161
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1249
C_tmp098055_0000000c_do_if_L000075_1277
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #179 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1249
 mov r2, #179
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r23, #0
 mov r2, FP
 sub r2, #-(-20)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098165_0000000d_getlineindex_L000185
 mov RI, FP
 sub RI, #-(-24)
 wrlong r0, RI
 cmps r0,  #0 wcz
 if_be jmp #\C_tmp098055_0000000c_do_if_L000075_1281
 mov r22, FP
 sub r22, #-(-16)
 rdlong r23, r22
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20
 adds r20, #1
 adds r22, r20
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
C_tmp098055_0000000c_do_if_L000075_1281
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #128 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1284
 mov r2, #1
 mov r3, FP
 sub r3, #-(-32)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-32)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r22, r0
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098044_0000000b_findline_L000064
 mov r23, r0
 mov r22, #0
 cmps r23, r22 wcz
 if_be jmp #\C_tmp098055_0000000c_do_if_L000075_1288
 mov r20, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1286
C_tmp098055_0000000c_do_if_L000075_1288
 mov r0, ##-1
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1286
C_tmp098055_0000000c_do_if_L000075_1284
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 cmps r23,  #0 wcz
 if_be jmp #\C_tmp098055_0000000c_do_if_L000075_1296
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #175 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1291
 mov r2, #175
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #161
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098055_0000000c_do_if_L000075_1291
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1290
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098156_0000000d_match_eol_L000176
 mov r0, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r0, r0
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1295
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #58 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1298
 cmps r21,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1297
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1299
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098156_0000000d_match_eol_L000176
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1299
C_tmp098055_0000000c_do_if_L000075_1298
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #34 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1304
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098157_0000000d_match_literal_L000177
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1305
C_tmp098055_0000000c_do_if_L000075_1304
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #167 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1308
 cmps r22,  #39 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1306
C_tmp098055_0000000c_do_if_L000075_1308
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098159_0000000d_find_eol_L000179
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1307
C_tmp098055_0000000c_do_if_L000075_1306
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #161 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1309
 mov r2, #161
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 adds r21, #1
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1310
C_tmp098055_0000000c_do_if_L000075_1309
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #175 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1311
 mov r2, #175
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #161
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 cmps r21,  #0 wcz
 if_be jmp #\C_tmp098055_0000000c_do_if_L000075_1313
 subs r21, #1
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1312
C_tmp098055_0000000c_do_if_L000075_1313
 mov r2, #26
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1311
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098055_0000000c_do_if_L000075_1312
C_tmp098055_0000000c_do_if_L000075_1310
C_tmp098055_0000000c_do_if_L000075_1307
C_tmp098055_0000000c_do_if_L000075_1305
C_tmp098055_0000000c_do_if_L000075_1299
C_tmp098055_0000000c_do_if_L000075_1296
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 mov r20, #0
 cmps r22, r20 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1317
 cmps r22,  #1 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1317
 cmps r22,  #10 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1317
 cmps r22,  #175 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1295
 cmps r21, r20 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1295
C_tmp098055_0000000c_do_if_L000075_1317
C_tmp098055_0000000c_do_if_L000075_1297
C_tmp098055_0000000c_do_if_L000075_1290
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1318
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098156_0000000d_match_eol_L000176
 mov r0, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r0, r0
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1318
 mov r0, #0
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1248
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #128 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1320
 mov r2, #1
 mov r3, FP
 sub r3, #-(-32)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-32)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r22, r0
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098044_0000000b_findline_L000064
 mov r23, r0
 mov r22, #0
 cmps r23, r22 wcz
 if_be jmp #\C_tmp098055_0000000c_do_if_L000075_1324
 mov r20, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1328
C_tmp098055_0000000c_do_if_L000075_1324
 mov r0, ##-1
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1320
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #175 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1328
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1328
C_tmp098055_0000000c_do_if_L000075_1327
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #58 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1330
 cmps r21,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1334
 cmps r19,  #165 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1332
C_tmp098055_0000000c_do_if_L000075_1334
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1329
C_tmp098055_0000000c_do_if_L000075_1332
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1331
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098156_0000000d_match_eol_L000176
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1331
C_tmp098055_0000000c_do_if_L000075_1330
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #34 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1337
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098157_0000000d_match_literal_L000177
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1338
C_tmp098055_0000000c_do_if_L000075_1337
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #167 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1341
 cmps r22,  #39 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1339
C_tmp098055_0000000c_do_if_L000075_1341
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098159_0000000d_find_eol_L000179
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1340
C_tmp098055_0000000c_do_if_L000075_1339
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #161 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1342
 mov r2, #161
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 adds r21, #1
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1343
C_tmp098055_0000000c_do_if_L000075_1342
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #175 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1344
 mov r2, #175
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #161
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 cmps r21,  #0 wcz
 if_be jmp #\C_tmp098055_0000000c_do_if_L000075_1346
 subs r21, #1
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1345
C_tmp098055_0000000c_do_if_L000075_1346
 mov r2, #26
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1344
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098055_0000000c_do_if_L000075_1345
C_tmp098055_0000000c_do_if_L000075_1343
C_tmp098055_0000000c_do_if_L000075_1340
C_tmp098055_0000000c_do_if_L000075_1338
C_tmp098055_0000000c_do_if_L000075_1331
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
C_tmp098055_0000000c_do_if_L000075_1328
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1350
 cmps r22,  #10 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1350
 mov r20, #1
 cmps r22, r20 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1350
 cmps r22,  #179 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1327
 cmps r21, r20 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1327
C_tmp098055_0000000c_do_if_L000075_1350
C_tmp098055_0000000c_do_if_L000075_1329
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #179 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1351
 mov r2, #179
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r23, #0
 mov r2, FP
 sub r2, #-(-20)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098165_0000000d_getlineindex_L000185
 mov RI, FP
 sub RI, #-(-24)
 wrlong r0, RI
 cmps r0,  #0 wcz
 if_be jmp #\C_tmp098055_0000000c_do_if_L000075_1353
 mov r22, FP
 sub r22, #-(-16)
 rdlong r23, r22
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20
 adds r20, #1
 adds r22, r20
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
C_tmp098055_0000000c_do_if_L000075_1353
 cmps r23,  #0 wcz
 if_be jmp #\C_tmp098055_0000000c_do_if_L000075_1356
 mov r0, r23
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1356
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #128 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1358
 mov r2, #1
 mov r3, FP
 sub r3, #-(-32)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-32)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r22, r0
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098044_0000000b_findline_L000064
 mov r23, r0
 mov r22, #0
 cmps r23, r22 wcz
 if_be jmp #\C_tmp098055_0000000c_do_if_L000075_1362
 mov r20, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1360
C_tmp098055_0000000c_do_if_L000075_1362
 mov r0, ##-1
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1360
 mov r0, r23
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1358
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1364
C_tmp098055_0000000c_do_if_L000075_1363
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #58 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1366
 cmps r21,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1365
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1369
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098156_0000000d_match_eol_L000176
C_tmp098055_0000000c_do_if_L000075_1369
C_tmp098055_0000000c_do_if_L000075_1366
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098048_0000000b_execute_line_L000068
 mov r23, r0
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1372
 mov r0, ##-1
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1372
 cmps r23,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1374
 mov r0, r23
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1374
C_tmp098055_0000000c_do_if_L000075_1364
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1379
 cmps r22,  #10 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1379
 cmps r22,  #1 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1379
 cmps r22,  #179 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1379
 cmps r22,  #175 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1363
C_tmp098055_0000000c_do_if_L000075_1379
C_tmp098055_0000000c_do_if_L000075_1365
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1383
 cmps r22,  #10 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1383
 cmps r22,  #1 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1380
C_tmp098055_0000000c_do_if_L000075_1383
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098156_0000000d_match_eol_L000176
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1381
C_tmp098055_0000000c_do_if_L000075_1380
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #175 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1384
 mov r2, #175
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #161
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1385
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098156_0000000d_match_eol_L000176
 mov r0, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r0, r0
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1384
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #179 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1388
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1391
C_tmp098055_0000000c_do_if_L000075_1390
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1393
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098156_0000000d_match_eol_L000176
 mov r0, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r0, r0
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1393
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #34 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1395
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098157_0000000d_match_literal_L000177
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1396
C_tmp098055_0000000c_do_if_L000075_1395
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #167 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1399
 cmps r22,  #39 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1397
C_tmp098055_0000000c_do_if_L000075_1399
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098159_0000000d_find_eol_L000179
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1398
C_tmp098055_0000000c_do_if_L000075_1397
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098055_0000000c_do_if_L000075_1398
C_tmp098055_0000000c_do_if_L000075_1396
C_tmp098055_0000000c_do_if_L000075_1391
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1402
 cmps r22,  #1 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1402
 cmps r22,  #10 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1402
 cmps r22,  #175 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1390
C_tmp098055_0000000c_do_if_L000075_1402
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #175 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1403
 mov r2, #175
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #161
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098055_0000000c_do_if_L000075_1403
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1405
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098156_0000000d_match_eol_L000176
 mov r0, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r0, r0
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1405
C_tmp098055_0000000c_do_if_L000075_1388
C_tmp098055_0000000c_do_if_L000075_1385
C_tmp098055_0000000c_do_if_L000075_1381
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1410
 cmps r22,  #10 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1410
 cmps r22,  #1 wz
 if_nz jmp #\C_tmp098055_0000000c_do_if_L000075_1352
C_tmp098055_0000000c_do_if_L000075_1410
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098156_0000000d_match_eol_L000176
 mov r0, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r0, r0
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1351
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1411
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098156_0000000d_match_eol_L000176
 mov r0, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r0, r0
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1411
 mov r0, #0
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1352
C_tmp098055_0000000c_do_if_L000075_1249
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098055_0000000c_do_if_L000075_1413
 mov r0, ##-1
 jmp #\@C_tmp098055_0000000c_do_if_L000075_1232
C_tmp098055_0000000c_do_if_L000075_1413
 mov r0, #0
C_tmp098055_0000000c_do_if_L000075_1232
 calld PA,#POPM
 add SP, #28
 calld PA,#RETF
 alignl
C_tmp098056_0000000c_do_goto_L000076
 calld PA,#NEWF
 sub SP, #16
 calld PA,#PSHM
 long $400000
 mov r2, #165
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098165_0000000d_getlineindex_L000185
 cmps r0,  #0 wcz
 if_be jmp #\C_tmp098056_0000000c_do_goto_L000076_1416
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 jmp #\@C_tmp098056_0000000c_do_goto_L000076_1415
C_tmp098056_0000000c_do_goto_L000076_1416
 mov r2, #1
 mov r3, FP
 sub r3, #-(-20)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-20)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r22, r0
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098044_0000000b_findline_L000064
 mov r22, r0
C_tmp098056_0000000c_do_goto_L000076_1415
 calld PA,#POPM
 add SP, #16
 calld PA,#RETF
 alignl
C_tmp098057_0000000c_do_error_L000077
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $c00000
 mov r2, #210
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r23, r0
 cmps r23,  #0 wcz
 if_be jmp #\C_tmp098057_0000000c_do_error_L000077_1420
 cmps r23,  #255 wcz
 if_ae jmp #\C_tmp098057_0000000c_do_error_L000077_1420
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098057_0000000c_do_error_L000077_1420
 mov r0, #0
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
 alignl
C_tmp098092_0000000c_do_option_L000112
 calld PA,#NEWF
 sub SP, #12
 calld PA,#PSHM
 long $500000
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #182 wz
 if_nz jmp #\C_tmp098092_0000000c_do_option_L000112_1423
 mov r2, #182
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-16)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-16)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098092_0000000c_do_option_L000112_1424
 mov r22, #0
 mov r20, ##@C_tmp098026_0000000a_base_set_L000046
 rdlong r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098092_0000000c_do_option_L000112_1429
 mov r20, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r20, r20
 cmps r20, r22 wcz
 if_be jmp #\C_tmp098092_0000000c_do_option_L000112_1427
C_tmp098092_0000000c_do_option_L000112_1429
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_tmp098025_0000000a_base_L000045
 rdlong r20, r20
 cmps r22, r20 wz
 if_z jmp #\C_tmp098092_0000000c_do_option_L000112_1427
 mov r2, #20
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098092_0000000c_do_option_L000112_1427
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 wrlong r22, ##@C_tmp098025_0000000a_base_L000045
 mov r22, #1
 wrlong r22, ##@C_tmp098026_0000000a_base_set_L000046
 jmp #\@C_tmp098092_0000000c_do_option_L000112_1424
C_tmp098092_0000000c_do_option_L000112_1423
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098092_0000000c_do_option_L000112_1424
 mov r0, #0
 calld PA,#POPM
 add SP, #12
 calld PA,#RETF
 alignl
C_tmp098093_0000000c_do_open_L000113
 calld PA,#NEWF
 sub SP, #36
 calld PA,#PSHM
 long $540000
 mov r22, ##0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, ##0
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 mov r22, #128
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 mov r2, #142
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098162_0000000d_is_string_L000182
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098093_0000000c_do_open_L000113_1431
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098093_0000000c_do_open_L000113_1433
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1435
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 cmp r0,  #1 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1437
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdbyte r22, r22
 cmps r22,  #73 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1439
 mov r22, #0
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1438
C_tmp098093_0000000c_do_open_L000113_1439
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdbyte r22, r22
 cmps r22,  #79 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1441
 mov r22, #1
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1438
C_tmp098093_0000000c_do_open_L000113_1441
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdbyte r22, r22
 cmps r22,  #82 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1443
 mov r22, #2
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1438
C_tmp098093_0000000c_do_open_L000113_1443
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdbyte r22, r22
 cmps r22,  #65 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1445
 mov r22, #3
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1438
C_tmp098093_0000000c_do_open_L000113_1445
 mov r2, #43
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1438
C_tmp098093_0000000c_do_open_L000113_1437
 mov r2, #43
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098093_0000000c_do_open_L000113_1438
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #35 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1447
 mov r2, #35
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098093_0000000c_do_open_L000113_1447
 mov r2, #1
 mov r3, FP
 sub r3, #-(-32)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-32)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-24)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 cmps r22,  #1 wcz
 if_b jmp #\C_tmp098093_0000000c_do_open_L000113_1449
 cmps r22,  #3 wcz
 if_a jmp #\C_tmp098093_0000000c_do_open_L000113_1449
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 subs r22, #1
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1436
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098162_0000000d_is_string_L000182
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098093_0000000c_do_open_L000113_1453
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1436
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1457
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-40)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-40)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-20)
 wrlong r0, RI
C_tmp098093_0000000c_do_open_L000113_1457
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r22,  #1 wcz
 if_b jmp #\C_tmp098093_0000000c_do_open_L000113_1459
 cmps r22,  #128 wcz
 if_a jmp #\C_tmp098093_0000000c_do_open_L000113_1459
 mov r22, #140
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1461
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1463
 mov r2, ##@C_tmp098093_0000000c_do_open_L000113_1465_L001466
 mov RI, FP
 sub RI, #-(-12)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r22, r0
 mov r20, #140
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r20, r0
 wrlong r22, r20
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1464
C_tmp098093_0000000c_do_open_L000113_1463
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #1 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1467
 mov r2, ##@C_tmp098093_0000000c_do_open_L000113_1469_L001470
 mov RI, FP
 sub RI, #-(-12)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r22, r0
 mov r20, #140
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r20, r0
 wrlong r22, r20
 mov r22, #140
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1468
 mov r2, ##@C_tmp098093_0000000c_do_open_L000113_1469_L001470
 mov RI, FP
 sub RI, #-(-12)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r22, r0
 mov r20, #140
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r20, r0
 wrlong r22, r20
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1468
C_tmp098093_0000000c_do_open_L000113_1467
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #2 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1473
 mov r2, ##@C_tmp098093_0000000c_do_open_L000113_1475_L001476
 mov RI, FP
 sub RI, #-(-12)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r22, r0
 mov r20, #140
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r20, r0
 wrlong r22, r20
 mov r22, #140
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1474
 mov r2, ##@C_tmp098093_0000000c_do_open_L000113_1469_L001470
 mov RI, FP
 sub RI, #-(-12)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r22, r0
 mov r20, #140
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r20, r0
 wrlong r22, r20
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1474
C_tmp098093_0000000c_do_open_L000113_1473
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #3 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1479
 mov r2, ##@C_tmp098093_0000000c_do_open_L000113_1481_L001482
 mov RI, FP
 sub RI, #-(-12)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r22, r0
 mov r20, #140
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r20, r0
 wrlong r22, r20
 mov r22, #140
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1483
 mov r2, ##@C_tmp098093_0000000c_do_open_L000113_1469_L001470
 mov RI, FP
 sub RI, #-(-12)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r22, r0
 mov r20, #140
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r20, r0
 wrlong r22, r20
C_tmp098093_0000000c_do_open_L000113_1483
 mov r2, #2
 mov r3, #0
 mov r22, #140
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fseek
 add SP, #8
C_tmp098093_0000000c_do_open_L000113_1479
C_tmp098093_0000000c_do_open_L000113_1474
C_tmp098093_0000000c_do_open_L000113_1468
C_tmp098093_0000000c_do_open_L000113_1464
 mov r22, #140
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1485
 mov r2, #47
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1436
C_tmp098093_0000000c_do_open_L000113_1485
 mov r22, #140
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+4
 adds r22, r0
 mov r20, FP
 sub r20, #-(-16)
 rdlong r20, r20
 wrlong r20, r22
 mov r22, #140
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+136
 adds r22, r0
 mov r20, FP
 sub r20, #-(-20)
 rdlong r20, r20
 wrlong r20, r22
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1436
C_tmp098093_0000000c_do_open_L000113_1461
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1436
C_tmp098093_0000000c_do_open_L000113_1459
 mov r2, #46
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1436
C_tmp098093_0000000c_do_open_L000113_1453
 mov r2, #45
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1436
C_tmp098093_0000000c_do_open_L000113_1449
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1436
C_tmp098093_0000000c_do_open_L000113_1435
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #168 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1489
 mov r2, #168
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #166 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1491
 mov r2, #166
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #0
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1492
C_tmp098093_0000000c_do_open_L000113_1491
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #144 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1493
 mov r2, #144
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #1
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1494
C_tmp098093_0000000c_do_open_L000113_1493
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #146 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1495
 mov r2, #146
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #2
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1496
C_tmp098093_0000000c_do_open_L000113_1495
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #145 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1497
 mov r2, #145
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #3
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
C_tmp098093_0000000c_do_open_L000113_1497
C_tmp098093_0000000c_do_open_L000113_1496
C_tmp098093_0000000c_do_open_L000113_1494
C_tmp098093_0000000c_do_open_L000113_1492
C_tmp098093_0000000c_do_open_L000113_1489
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #23 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1499
 mov r2, #23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1502
C_tmp098093_0000000c_do_open_L000113_1501
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098093_0000000c_do_open_L000113_1502
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #172 wz
 if_z jmp #\C_tmp098093_0000000c_do_open_L000113_1501
 cmps r22,  #141 wz
 if_z jmp #\C_tmp098093_0000000c_do_open_L000113_1501
C_tmp098093_0000000c_do_open_L000113_1499
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #22 wz
 if_z jmp #\C_tmp098093_0000000c_do_open_L000113_1506
 cmps r22,  #20 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1504
C_tmp098093_0000000c_do_open_L000113_1506
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1508
C_tmp098093_0000000c_do_open_L000113_1507
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098093_0000000c_do_open_L000113_1508
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #172 wz
 if_z jmp #\C_tmp098093_0000000c_do_open_L000113_1507
 cmps r22,  #141 wz
 if_z jmp #\C_tmp098093_0000000c_do_open_L000113_1507
C_tmp098093_0000000c_do_open_L000113_1504
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #24 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1510
 mov r2, #24
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #35 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1512
 mov r2, #35
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098093_0000000c_do_open_L000113_1512
 mov r2, #1
 mov r3, FP
 sub r3, #-(-32)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-32)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-24)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 cmps r22,  #1 wcz
 if_b jmp #\C_tmp098093_0000000c_do_open_L000113_1514
 cmps r22,  #3 wcz
 if_a jmp #\C_tmp098093_0000000c_do_open_L000113_1514
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 subs r22, #1
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #219 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1516
 mov r2, #219
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #61 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1518
 mov r2, #61
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-40)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-40)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-20)
 wrlong r0, RI
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1519
C_tmp098093_0000000c_do_open_L000113_1518
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098093_0000000c_do_open_L000113_1519
C_tmp098093_0000000c_do_open_L000113_1516
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r22,  #1 wcz
 if_b jmp #\C_tmp098093_0000000c_do_open_L000113_1520
 cmps r22,  #128 wcz
 if_a jmp #\C_tmp098093_0000000c_do_open_L000113_1520
 mov r22, #140
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1522
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1524
 mov r2, ##@C_tmp098093_0000000c_do_open_L000113_1465_L001466
 mov RI, FP
 sub RI, #-(-8)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r22, r0
 mov r20, #140
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r20, r0
 wrlong r22, r20
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1525
C_tmp098093_0000000c_do_open_L000113_1524
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #1 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1526
 mov r2, ##@C_tmp098093_0000000c_do_open_L000113_1469_L001470
 mov RI, FP
 sub RI, #-(-8)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r22, r0
 mov r20, #140
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r20, r0
 wrlong r22, r20
 mov r22, #140
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1527
 mov r2, ##@C_tmp098093_0000000c_do_open_L000113_1469_L001470
 mov RI, FP
 sub RI, #-(-12)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r22, r0
 mov r20, #140
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r20, r0
 wrlong r22, r20
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1527
C_tmp098093_0000000c_do_open_L000113_1526
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #2 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1530
 mov r2, ##@C_tmp098093_0000000c_do_open_L000113_1475_L001476
 mov RI, FP
 sub RI, #-(-8)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r22, r0
 mov r20, #140
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r20, r0
 wrlong r22, r20
 mov r22, #140
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1531
 mov r2, ##@C_tmp098093_0000000c_do_open_L000113_1469_L001470
 mov RI, FP
 sub RI, #-(-12)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r22, r0
 mov r20, #140
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r20, r0
 wrlong r22, r20
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1531
C_tmp098093_0000000c_do_open_L000113_1530
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #3 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1534
 mov r2, ##@C_tmp098093_0000000c_do_open_L000113_1481_L001482
 mov RI, FP
 sub RI, #-(-8)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r22, r0
 mov r20, #140
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r20, r0
 wrlong r22, r20
 mov r22, #140
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1536
 mov r2, ##@C_tmp098093_0000000c_do_open_L000113_1469_L001470
 mov RI, FP
 sub RI, #-(-12)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fopen
 add SP, #4
 mov r22, r0
 mov r20, #140
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r20, r0
 wrlong r22, r20
C_tmp098093_0000000c_do_open_L000113_1536
 mov r2, #2
 mov r3, #0
 mov r22, #140
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fseek
 add SP, #8
C_tmp098093_0000000c_do_open_L000113_1534
C_tmp098093_0000000c_do_open_L000113_1531
C_tmp098093_0000000c_do_open_L000113_1527
C_tmp098093_0000000c_do_open_L000113_1525
 mov r22, #140
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098093_0000000c_do_open_L000113_1538
 mov r2, #47
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1511
C_tmp098093_0000000c_do_open_L000113_1538
 mov r22, #140
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+4
 adds r22, r0
 mov r20, FP
 sub r20, #-(-16)
 rdlong r20, r20
 wrlong r20, r22
 mov r22, #140
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+136
 adds r22, r0
 mov r20, FP
 sub r20, #-(-20)
 rdlong r20, r20
 wrlong r20, r22
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1511
C_tmp098093_0000000c_do_open_L000113_1522
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1511
C_tmp098093_0000000c_do_open_L000113_1520
 mov r2, #46
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1511
C_tmp098093_0000000c_do_open_L000113_1514
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098093_0000000c_do_open_L000113_1511
C_tmp098093_0000000c_do_open_L000113_1510
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098093_0000000c_do_open_L000113_1511
C_tmp098093_0000000c_do_open_L000113_1436
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov RI, FP
 sub RI, #-(-12)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_tmp098093_0000000c_do_open_L000113_1433
C_tmp098093_0000000c_do_open_L000113_1431
 calld PA,#POPM
 add SP, #36
 calld PA,#RETF
 alignl
C_tmp098094_0000000c_do_close_L000114
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $d00000
 mov r2, #143
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098094_0000000c_do_close_L000114_1553
 mov r23, #0
C_tmp098094_0000000c_do_close_L000114_1545
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098094_0000000c_do_close_L000114_1549
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_fclose
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 mov r20, ##0
 wrlong r20, r22
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+136
 adds r22, r0
 mov r20, #0
 wrlong r20, r22
C_tmp098094_0000000c_do_close_L000114_1549
 adds r23, #1
 cmps r23,  #3 wcz
 if_b jmp #\C_tmp098094_0000000c_do_close_L000114_1545
 jmp #\@C_tmp098094_0000000c_do_close_L000114_1542
C_tmp098094_0000000c_do_close_L000114_1552
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #35 wz
 if_nz jmp #\C_tmp098094_0000000c_do_close_L000114_1555
 mov r2, #35
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098094_0000000c_do_close_L000114_1555
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r23, r0
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098094_0000000c_do_close_L000114_1557
 cmps r23,  #1 wcz
 if_b jmp #\C_tmp098094_0000000c_do_close_L000114_1559
 cmps r23,  #3 wcz
 if_a jmp #\C_tmp098094_0000000c_do_close_L000114_1559
 subs r23, #1
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098094_0000000c_do_close_L000114_1560
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_fclose
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 mov r20, ##0
 wrlong r20, r22
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+136
 adds r22, r0
 mov r20, #0
 wrlong r20, r22
 jmp #\@C_tmp098094_0000000c_do_close_L000114_1560
C_tmp098094_0000000c_do_close_L000114_1559
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098094_0000000c_do_close_L000114_1560
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098094_0000000c_do_close_L000114_1564
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098094_0000000c_do_close_L000114_1564
C_tmp098094_0000000c_do_close_L000114_1557
C_tmp098094_0000000c_do_close_L000114_1553
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 mov r20, #0
 cmps r0, r20 wz
 if_nz jmp #\C_tmp098094_0000000c_do_close_L000114_1566
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22, r20 wz
 if_z jmp #\C_tmp098094_0000000c_do_close_L000114_1552
C_tmp098094_0000000c_do_close_L000114_1566
C_tmp098094_0000000c_do_close_L000114_1542
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
 alignl
C_tmp098095_0000000c_do_put_L000115
 calld PA,#NEWF
 sub SP, #36
 calld PA,#PSHM
 long $d40000
 mov r2, #148
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #35 wz
 if_nz jmp #\C_tmp098095_0000000c_do_put_L000115_1568
 mov r2, #35
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098095_0000000c_do_put_L000115_1568
 mov r2, #1
 mov r3, FP
 sub r3, #-(-20)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-20)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r23, r0
 cmps r23,  #1 wcz
 if_b jmp #\C_tmp098095_0000000c_do_put_L000115_1570
 cmps r23,  #3 wcz
 if_a jmp #\C_tmp098095_0000000c_do_put_L000115_1570
 subs r23, #1
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098095_0000000c_do_put_L000115_1572
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098095_0000000c_do_put_L000115_1572
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+4
 adds r22, r0
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098095_0000000c_do_put_L000115_1574
 mov r2, #43
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098095_0000000c_do_put_L000115_1573
C_tmp098095_0000000c_do_put_L000115_1574
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098095_0000000c_do_put_L000115_1577
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-28)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-28)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_be jmp #\C_tmp098095_0000000c_do_put_L000115_1579
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 subs r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, r0
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 mov r18, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+136
 adds r18, r22
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r2, #2
 mov r3, #0
 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r20
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fseek
 add SP, #8
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_ftell
 mov RI, FP
 sub RI, #-(-32)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-32)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-36)
 rdlong r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098095_0000000c_do_put_L000115_1582
 mov r22, #0
 mov RI, FP
 sub RI, #-(-40)
 wrbyte r22, RI
 jmp #\@C_tmp098095_0000000c_do_put_L000115_1585
C_tmp098095_0000000c_do_put_L000115_1584
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov r22, #1
 mov r3, r22
 mov r4, r22
 mov r5, FP
 sub r5, #-(-40)
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_fwrite
 add SP, #12
 cmp r0,  #1 wz
 if_z jmp #\C_tmp098095_0000000c_do_put_L000115_1587
 mov r2, #61
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098095_0000000c_do_put_L000115_1580
C_tmp098095_0000000c_do_put_L000115_1587
 mov r22, FP
 sub r22, #-(-32)
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 sub RI, #-(-32)
 wrlong r22, RI
C_tmp098095_0000000c_do_put_L000115_1585
 mov r22, FP
 sub r22, #-(-32)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-36)
 rdlong r20, r20
 cmps r22, r20 wcz
 if_b jmp #\C_tmp098095_0000000c_do_put_L000115_1584
 jmp #\@C_tmp098095_0000000c_do_put_L000115_1580
C_tmp098095_0000000c_do_put_L000115_1582
 mov r2, #0
 mov RI, FP
 sub RI, #-(-36)
 rdlong r3, RI
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fseek
 add SP, #8
 jmp #\@C_tmp098095_0000000c_do_put_L000115_1580
C_tmp098095_0000000c_do_put_L000115_1579
 mov r2, #49
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098095_0000000c_do_put_L000115_1580
C_tmp098095_0000000c_do_put_L000115_1577
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098095_0000000c_do_put_L000115_1573
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, r0
 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r20, r22
 rdlong r2, r20
 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+136
 adds r20, r22
 rdlong r20, r20
 mov r3, r20
 mov r4, #1
 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+8
 mov r5, r22
 adds r5, r20
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_fwrite
 add SP, #12
 mov r22, r0
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, #140

  stalli

 qmul r20, r23
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+136
 adds r20, r0
 rdlong r20, r20
 cmps r22, r20 wz
 if_z jmp #\C_tmp098095_0000000c_do_put_L000115_1573
 mov r2, #49
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098095_0000000c_do_put_L000115_1573
C_tmp098095_0000000c_do_put_L000115_1572
 mov r2, #47
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098095_0000000c_do_put_L000115_1573
C_tmp098095_0000000c_do_put_L000115_1570
 calld PA,#POPM
 add SP, #36
 calld PA,#RETF
 alignl
C_tmp098096_0000000c_do_get_L000116
 calld PA,#NEWF
 sub SP, #24
 calld PA,#PSHM
 long $d40000
 mov r2, #147
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #35 wz
 if_nz jmp #\C_tmp098096_0000000c_do_get_L000116_1597
 mov r2, #35
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098096_0000000c_do_get_L000116_1597
 mov r2, #1
 mov r3, FP
 sub r3, #-(-20)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-20)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r23, r0
 cmps r23,  #1 wcz
 if_b jmp #\C_tmp098096_0000000c_do_get_L000116_1599
 cmps r23,  #3 wcz
 if_a jmp #\C_tmp098096_0000000c_do_get_L000116_1599
 subs r23, #1
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098096_0000000c_do_get_L000116_1601
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098096_0000000c_do_get_L000116_1601
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+4
 adds r20, r0
 rdlong r20, r20
 cmps r20,  #1 wz
 if_z jmp #\C_tmp098096_0000000c_do_get_L000116_1607
 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+4
 mov r22, r0
 adds r22, r20
 rdlong r22, r22
 cmps r22,  #3 wz
 if_nz jmp #\C_tmp098096_0000000c_do_get_L000116_1603
C_tmp098096_0000000c_do_get_L000116_1607
 mov r2, #43
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098096_0000000c_do_get_L000116_1602
C_tmp098096_0000000c_do_get_L000116_1603
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098096_0000000c_do_get_L000116_1608
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-28)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-28)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_be jmp #\C_tmp098096_0000000c_do_get_L000116_1610
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 subs r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r2, #0
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, r0
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 mov r18, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+136
 adds r18, r22
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r3, r0
 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r20
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fseek
 add SP, #8
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_ftell
 mov r22, r0
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 mov r18, #140

  stalli

 qmul r18, r23
 getqx r0

  allowi

 mov r18, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+136
 adds r18, r0
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 cmps r22, r0 wz
 if_z jmp #\C_tmp098096_0000000c_do_get_L000116_1611
 mov r2, #49
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098096_0000000c_do_get_L000116_1611
C_tmp098096_0000000c_do_get_L000116_1610
 mov r2, #49
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098096_0000000c_do_get_L000116_1611
C_tmp098096_0000000c_do_get_L000116_1608
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098096_0000000c_do_get_L000116_1602
 mov r22, #140

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, r0
 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r20, r22
 rdlong r2, r20
 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+136
 adds r20, r22
 rdlong r20, r20
 mov r3, r20
 mov r4, #1
 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+8
 mov r5, r22
 adds r5, r20
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_fread
 add SP, #12
 mov r22, r0
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, #140

  stalli

 qmul r20, r23
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+136
 adds r20, r0
 rdlong r20, r20
 cmps r22, r20 wz
 if_z jmp #\C_tmp098096_0000000c_do_get_L000116_1602
 mov r2, #49
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098096_0000000c_do_get_L000116_1602
C_tmp098096_0000000c_do_get_L000116_1601
 mov r2, #47
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098096_0000000c_do_get_L000116_1602
C_tmp098096_0000000c_do_get_L000116_1599
 calld PA,#POPM
 add SP, #24
 calld PA,#RETF
 alignl
C_tmp098097_0000000c_do_field_L000117
 calld PA,#NEWF
 sub SP, #68
 calld PA,#PSHM
 long $faa000
 mov r21, #0
 mov r17, #0
 mov r22, #128
 mov RI, FP
 sub RI, #-(-56)
 wrlong r22, RI
 mov r2, #152
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #35 wz
 if_nz jmp #\C_tmp098097_0000000c_do_field_L000117_1624
 mov r2, #35
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098097_0000000c_do_field_L000117_1624
 mov r2, #1
 mov r3, FP
 sub r3, #-(-64)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-64)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r19, r0
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098097_0000000c_do_field_L000117_1626
 jmp #\@C_tmp098097_0000000c_do_field_L000117_1623
C_tmp098097_0000000c_do_field_L000117_1626
 cmps r19,  #1 wcz
 if_b jmp #\C_tmp098097_0000000c_do_field_L000117_1628
 cmps r19,  #3 wcz
 if_a jmp #\C_tmp098097_0000000c_do_field_L000117_1628
 subs r19, #1
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098097_0000000c_do_field_L000117_1630
 jmp #\@C_tmp098097_0000000c_do_field_L000117_1623
C_tmp098097_0000000c_do_field_L000117_1630
 mov r22, #140

  stalli

 qmul r22, r19
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098097_0000000c_do_field_L000117_1632
 jmp #\@C_tmp098097_0000000c_do_field_L000117_1635
C_tmp098097_0000000c_do_field_L000117_1634
 mov r2, #1
 mov r3, FP
 sub r3, #-(-72)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-72)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r21, r0
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098097_0000000c_do_field_L000117_1637
 jmp #\@C_tmp098097_0000000c_do_field_L000117_1623
C_tmp098097_0000000c_do_field_L000117_1637
 cmps r21,  #1 wcz
 if_b jmp #\C_tmp098097_0000000c_do_field_L000117_1642
 mov r22, #140

  stalli

 qmul r22, r19
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+136
 adds r22, r0
 rdlong r22, r22
 cmps r21, r22 wcz
 if_be jmp #\C_tmp098097_0000000c_do_field_L000117_1639
C_tmp098097_0000000c_do_field_L000117_1642
 mov r2, #48
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098097_0000000c_do_field_L000117_1623
C_tmp098097_0000000c_do_field_L000117_1639
 mov r2, #24
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098097_0000000c_do_field_L000117_1643
 jmp #\@C_tmp098097_0000000c_do_field_L000117_1623
C_tmp098097_0000000c_do_field_L000117_1643
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #5 wz
 if_nz jmp #\C_tmp098097_0000000c_do_field_L000117_1645
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov r23, r0
 jmp #\@C_tmp098097_0000000c_do_field_L000117_1646
C_tmp098097_0000000c_do_field_L000117_1645
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov RI, FP
 sub RI, #-(-52)
 wrlong r0, RI
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098120_0000000d_findvarindx_L000140
 mov r23, r0
C_tmp098097_0000000c_do_field_L000117_1646
 cmps r23,  #0 wcz
 if_b jmp #\C_tmp098097_0000000c_do_field_L000117_1651
 mov r15, #1
 jmp #\@C_tmp098097_0000000c_do_field_L000117_1652
C_tmp098097_0000000c_do_field_L000117_1651
 mov r15, #0
C_tmp098097_0000000c_do_field_L000117_1652
 mov r22, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r22, r22
 cmps r23, r22 wcz
 if_ae jmp #\C_tmp098097_0000000c_do_field_L000117_1653
 mov r13, #1
 jmp #\@C_tmp098097_0000000c_do_field_L000117_1654
C_tmp098097_0000000c_do_field_L000117_1653
 mov r13, #0
C_tmp098097_0000000c_do_field_L000117_1654
 mov r22, r15
 and r22, r13
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098097_0000000c_do_field_L000117_1647
 mov r22, #52

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #44
 mov r20, r21
 wrlong r20, r22
 mov r22, #52

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #48
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r22, #52

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #48
 mov r20, #140

  stalli

 qmul r20, r19
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+8
 adds r20, r0
 adds r20, r17
 wrlong r20, r22
 adds r17, r21
 jmp #\@C_tmp098097_0000000c_do_field_L000117_1648
C_tmp098097_0000000c_do_field_L000117_1647
 mov r2, #4
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098097_0000000c_do_field_L000117_1623
C_tmp098097_0000000c_do_field_L000117_1648
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098097_0000000c_do_field_L000117_1656
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098097_0000000c_do_field_L000117_1656
C_tmp098097_0000000c_do_field_L000117_1635
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098097_0000000c_do_field_L000117_1634
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098097_0000000c_do_field_L000117_1658
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098097_0000000c_do_field_L000117_1623
C_tmp098097_0000000c_do_field_L000117_1658
 mov r22, #140

  stalli

 qmul r22, r19
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+136
 adds r22, r0
 rdlong r22, r22
 cmps r17, r22 wcz
 if_be jmp #\C_tmp098097_0000000c_do_field_L000117_1633
 mov r2, #48
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098097_0000000c_do_field_L000117_1623
C_tmp098097_0000000c_do_field_L000117_1632
 mov r2, #47
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098097_0000000c_do_field_L000117_1633
C_tmp098097_0000000c_do_field_L000117_1628
C_tmp098097_0000000c_do_field_L000117_1623
 calld PA,#POPM
 add SP, #68
 calld PA,#RETF
 alignl
C_tmp098061_0000000c_do_fileinput_L000081
 calld PA,#NEWF
 sub SP, #276
 calld PA,#PSHM
 long $fa8000
 mov r2, #35
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-280)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-280)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r21, r0
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1664
 jmp #\@C_tmp098061_0000000c_do_fileinput_L000081_1663
C_tmp098061_0000000c_do_fileinput_L000081_1664
 cmps r21,  #1 wcz
 if_b jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1666
 cmps r21,  #3 wcz
 if_a jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1666
 subs r21, #1
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1668
 jmp #\@C_tmp098061_0000000c_do_fileinput_L000081_1663
C_tmp098061_0000000c_do_fileinput_L000081_1668
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1670
 jmp #\@C_tmp098061_0000000c_do_fileinput_L000081_1673
C_tmp098061_0000000c_do_fileinput_L000081_1672
 mov r2, FP
 sub r2, #-(-16)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098103_0000000c_lvalue_L000123
C_tmp098061_0000000c_do_fileinput_L000081_1675
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_fgetc
 mov r22, r0
 mov r23, r22
 mov r22, r23
 and r22, cviu_m1
 mov r20, ##-1
 cmps r22, r20 wz
 if_z jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1678
 cmps r22,  #32 wz
 if_z jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1675
 cmps r22,  #10 wz
 if_z jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1675
C_tmp098061_0000000c_do_fileinput_L000081_1678
 mov r22, r23
 and r22, cviu_m1
 mov r20, ##-1
 cmps r22, r20 wz
 if_nz jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1679
 mov r2, #16
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098061_0000000c_do_fileinput_L000081_1663
C_tmp098061_0000000c_do_fileinput_L000081_1679
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov r3, r23
 and r3, cviu_m1
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_ungetc
 add SP, #4
 mov r22, FP
 sub r22, #-(-16)
 rdbyte r15, r22
 cmps r15,  #129 wz
 if_z jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1684
 cmps r15,  #130 wz
 if_z jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1688
 cmps r15,  #131 wz
 if_z jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1694
 jmp #\@C_tmp098061_0000000c_do_fileinput_L000081_1682
C_tmp098061_0000000c_do_fileinput_L000081_1684
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov r3, ##@C_tmp098050_0000000b_do_write_L000070_895_L000896
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fscanf
 add SP, #8
 cmps r0,  #1 wz
 if_z jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1682
 mov r2, #20
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098061_0000000c_do_fileinput_L000081_1663
C_tmp098061_0000000c_do_fileinput_L000081_1688
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov r3, ##@C_tmp098061_0000000c_do_fileinput_L000081_1691_L001692
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fscanf
 add SP, #8
 cmps r0,  #1 wz
 if_z jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1682
 mov r2, #20
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098061_0000000c_do_fileinput_L000081_1663
C_tmp098061_0000000c_do_fileinput_L000081_1694
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1695
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##0
 wrlong r20, r22
C_tmp098061_0000000c_do_fileinput_L000081_1695
 mov r22, #0
 mov r19, r22
 mov r17, r22
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_fgetc
 mov r22, r0
 mov r23, r22
 jmp #\@C_tmp098061_0000000c_do_fileinput_L000081_1701
C_tmp098061_0000000c_do_fileinput_L000081_1700
 cmps r19,  #0 wz
 if_nz jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1703
 mov r22, r23
 and r22, cviu_m1
 cmps r22,  #34 wz
 if_nz jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1703
 mov r17, #1
 jmp #\@C_tmp098061_0000000c_do_fileinput_L000081_1704
C_tmp098061_0000000c_do_fileinput_L000081_1703
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, FP
 sub r20, #-(-272)
 adds r22, r20
 wrbyte r23, r22
C_tmp098061_0000000c_do_fileinput_L000081_1704
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_fgetc
 mov r22, r0
 mov r23, r22
C_tmp098061_0000000c_do_fileinput_L000081_1701
 cmps r19,  #255 wcz
 if_ae jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1710
 mov r22, r23
 and r22, cviu_m1
 mov r20, ##-1
 cmps r22, r20 wz
 if_z jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1710
 cmps r17,  #0 wz
 if_z jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1707
 cmps r22,  #34 wz
 if_nz jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1700
C_tmp098061_0000000c_do_fileinput_L000081_1707
 cmps r17,  #0 wz
 if_nz jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1710
 mov r22, r23
 and r22, cviu_m1
 cmps r22,  #44 wz
 if_z jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1710
 cmps r22,  #13 wz
 if_z jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1710
 cmps r22,  #10 wz
 if_nz jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1700
C_tmp098061_0000000c_do_fileinput_L000081_1710
 mov r22, FP
 sub r22, #-(-272)
 adds r22, r19
 mov r20, #0
 wrbyte r20, r22
 mov r2, FP
 sub r2, #-(-272)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 wrlong r0, r20
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1682
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098061_0000000c_do_fileinput_L000081_1663
C_tmp098061_0000000c_do_fileinput_L000081_1682
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1715
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098061_0000000c_do_fileinput_L000081_1715
C_tmp098061_0000000c_do_fileinput_L000081_1673
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1718
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #175 wz
 if_z jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1718
 cmps r22,  #179 wz
 if_nz jmp #\C_tmp098061_0000000c_do_fileinput_L000081_1672
C_tmp098061_0000000c_do_fileinput_L000081_1718
 jmp #\@C_tmp098061_0000000c_do_fileinput_L000081_1667
C_tmp098061_0000000c_do_fileinput_L000081_1670
 mov r2, #47
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098061_0000000c_do_fileinput_L000081_1663
C_tmp098061_0000000c_do_fileinput_L000081_1666
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098061_0000000c_do_fileinput_L000081_1667
C_tmp098061_0000000c_do_fileinput_L000081_1663
 calld PA,#POPM
 add SP, #276
 calld PA,#RETF
 alignl
C_tmp098062_0000000c_do_filelineinput_L000082
 calld PA,#NEWF
 sub SP, #276
 calld PA,#PSHM
 long $f80000
 mov r19, #0
 mov r2, #35
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-280)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-280)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r21, r0
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098062_0000000c_do_filelineinput_L000082_1720
 jmp #\@C_tmp098062_0000000c_do_filelineinput_L000082_1719
C_tmp098062_0000000c_do_filelineinput_L000082_1720
 cmps r21,  #1 wcz
 if_b jmp #\C_tmp098062_0000000c_do_filelineinput_L000082_1722
 cmps r21,  #3 wcz
 if_a jmp #\C_tmp098062_0000000c_do_filelineinput_L000082_1722
 subs r21, #1
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098062_0000000c_do_filelineinput_L000082_1724
 mov r22, #140

  stalli

 qmul r22, r19
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+4
 adds r20, r0
 rdlong r20, r20
 cmps r20,  #1 wz
 if_z jmp #\C_tmp098062_0000000c_do_filelineinput_L000082_1730
 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+4
 mov r22, r0
 adds r22, r20
 rdlong r22, r22
 cmps r22,  #3 wz
 if_nz jmp #\C_tmp098062_0000000c_do_filelineinput_L000082_1726
C_tmp098062_0000000c_do_filelineinput_L000082_1730
 mov r2, #43
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098062_0000000c_do_filelineinput_L000082_1719
C_tmp098062_0000000c_do_filelineinput_L000082_1726
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098062_0000000c_do_filelineinput_L000082_1731
 jmp #\@C_tmp098062_0000000c_do_filelineinput_L000082_1719
C_tmp098062_0000000c_do_filelineinput_L000082_1731
 mov r2, FP
 sub r2, #-(-272)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098103_0000000c_lvalue_L000123
 mov r22, FP
 sub r22, #-(-272)
 rdbyte r22, r22
 cmps r22,  #131 wz
 if_z jmp #\C_tmp098062_0000000c_do_filelineinput_L000082_1733
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098062_0000000c_do_filelineinput_L000082_1719
C_tmp098062_0000000c_do_filelineinput_L000082_1733
 mov r22, FP
 sub r22, #-(-264)
 rdlong r22, r22
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098062_0000000c_do_filelineinput_L000082_1741
 mov r22, FP
 sub r22, #-(-264)
 rdlong r22, r22
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r22, FP
 sub r22, #-(-264)
 rdlong r22, r22
 mov r20, ##0
 wrlong r20, r22
 jmp #\@C_tmp098062_0000000c_do_filelineinput_L000082_1741
C_tmp098062_0000000c_do_filelineinput_L000082_1740
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_fgetc
 mov r22, r0
 mov r23, r22
 mov r22, r23
 and r22, cviu_m1
 mov r20, ##-1
 cmps r22, r20 wz
 if_z jmp #\C_tmp098062_0000000c_do_filelineinput_L000082_1746
 cmps r22,  #13 wz
 if_z jmp #\C_tmp098062_0000000c_do_filelineinput_L000082_1746
 cmps r22,  #10 wz
 if_nz jmp #\C_tmp098062_0000000c_do_filelineinput_L000082_1743
C_tmp098062_0000000c_do_filelineinput_L000082_1746
 jmp #\@C_tmp098062_0000000c_do_filelineinput_L000082_1742
C_tmp098062_0000000c_do_filelineinput_L000082_1743
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, FP
 sub r20, #-(-260)
 adds r22, r20
 wrbyte r23, r22
C_tmp098062_0000000c_do_filelineinput_L000082_1741
 cmps r19,  #255 wcz
 if_b jmp #\C_tmp098062_0000000c_do_filelineinput_L000082_1740
C_tmp098062_0000000c_do_filelineinput_L000082_1742
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, FP
 sub r20, #-(-260)
 adds r22, r20
 mov r20, #0
 wrbyte r20, r22
 mov r2, r19
 mov r3, FP
 sub r3, #-(-260)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098176_0000000e_mystrndup_L000196
 add SP, #4
 mov r20, FP
 sub r20, #-(-264)
 rdlong r20, r20
 wrlong r0, r20
 mov r22, FP
 sub r22, #-(-264)
 rdlong r22, r22
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098062_0000000c_do_filelineinput_L000082_1723
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098062_0000000c_do_filelineinput_L000082_1719
C_tmp098062_0000000c_do_filelineinput_L000082_1724
 mov r2, #47
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098062_0000000c_do_filelineinput_L000082_1719
C_tmp098062_0000000c_do_filelineinput_L000082_1722
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098062_0000000c_do_filelineinput_L000082_1723
C_tmp098062_0000000c_do_filelineinput_L000082_1719
 calld PA,#POPM
 add SP, #276
 calld PA,#RETF
 alignl
C_tmp098285_0000018f_fwrite_char_L001751
 calld PA,#NEWF
 calld PA,#PSHM
 long $c00000
 mov r23, r3
 mov RI, FP
 add RI, #12
 wrlong r2, RI
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 mov RI, FP
 add RI,#12
 wrbyte r22, RI
 mov r2, r23
 mov r22, #1
 mov r3, r22
 mov r4, r22
 mov r5, FP
 add r5, #12
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_fwrite
 add SP, #12
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098286_00000190_fwrite_str_L001753
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r3
 mov r21, r2
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 mov r2, r23
 mov r3, r22
 mov r4, #1
 mov r5, r21
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_fwrite
 add SP, #12
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098287_00000191_fwrite_num_L001755
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r3
 mov r21, r2
 mov r2, #32
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098285_0000018f_fwrite_char_L001751
 add SP, #4
 jmp #\@C_tmp098287_00000191_fwrite_num_L001755_1758
C_tmp098287_00000191_fwrite_num_L001755_1757
 rdbyte r2, r21
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098285_0000018f_fwrite_char_L001751
 add SP, #4
 adds r21, #1
C_tmp098287_00000191_fwrite_num_L001755_1758
 rdbyte r22, r21
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098287_00000191_fwrite_num_L001755_1757
 mov r2, #32
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098285_0000018f_fwrite_char_L001751
 add SP, #4
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098051_0000000b_do_fileprint_L000071
 calld PA,#NEWF
 sub SP, #324
 calld PA,#PSHM
 long $faa800
 mov r19, ##0
 mov r22, ##0
 mov RI, FP
 sub RI, #-(-280)
 wrlong r22, RI
 mov r22, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-268)
 wrlong r22, RI
 mov r22, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-272)
 wrlong r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-304)
 wrlong r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-288)
 wrlong r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-292)
 wrlong r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-296)
 wrlong r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-300)
 wrlong r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-284)
 wrlong r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-276)
 wrlong r22, RI
 mov r2, #35
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-320)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-320)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r15, r0
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1761
 jmp #\@C_tmp098051_0000000b_do_fileprint_L000071_1760
C_tmp098051_0000000b_do_fileprint_L000071_1761
 cmps r15,  #1 wcz
 if_b jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1763
 cmps r15,  #3 wcz
 if_a jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1763
 subs r15, #1
 mov r22, #140

  stalli

 qmul r22, r15
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1764
 mov r22, #140

  stalli

 qmul r22, r15
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+4
 adds r22, r0
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1767
 mov r2, #43
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098051_0000000b_do_fileprint_L000071_1760
C_tmp098051_0000000b_do_fileprint_L000071_1767
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #197 wz
 if_nz jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1775
 mov r2, #197
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov RI, FP
 sub RI, #-(-280)
 wrlong r0, RI
 mov r22, #1
 mov RI, FP
 sub RI, #-(-284)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-280)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1772
 mov r2, FP
 sub r2, #-(-300)
 mov r3, FP
 sub r3, #-(-296)
 mov r4, FP
 sub r4, #-(-272)
 mov r5, FP
 sub r5, #-(-268)
 sub SP, #16
 mov RI, FP
 sub RI, #-(-292)
 wrlong RI, --PTRA
 mov RI, FP
 sub RI, #-(-288)
 wrlong RI, --PTRA
 mov RI, FP
 sub RI, #-(-276)
 wrlong RI, --PTRA
 mov RI, FP
 sub RI, #-(-304)
 wrlong RI, --PTRA
 calld PA,#PSHF
 long -280
 mov BC, #36
 add SP, #4
 calld PA,#CALA
 long @C_tmp098263_00000095_decode_using_L000802
 add SP, #32
C_tmp098051_0000000b_do_fileprint_L000071_1772
 mov r2, #59
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098051_0000000b_do_fileprint_L000071_1775
C_tmp098051_0000000b_do_fileprint_L000071_1774
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1777
 jmp #\@C_tmp098051_0000000b_do_fileprint_L000071_1760
C_tmp098051_0000000b_do_fileprint_L000071_1777
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098162_0000000d_is_string_L000182
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1779
 mov r21, #0
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #5 wz
 if_nz jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1781
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov RI, FP
 sub RI, #-(-264)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-264)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_b jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1787
 mov r13, #1
 jmp #\@C_tmp098051_0000000b_do_fileprint_L000071_1788
C_tmp098051_0000000b_do_fileprint_L000071_1787
 mov r13, #0
C_tmp098051_0000000b_do_fileprint_L000071_1788
 mov r22, FP
 sub r22, #-(-264)
 rdlong r22, r22
 mov r20, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1789
 mov r11, #1
 jmp #\@C_tmp098051_0000000b_do_fileprint_L000071_1790
C_tmp098051_0000000b_do_fileprint_L000071_1789
 mov r11, #0
C_tmp098051_0000000b_do_fileprint_L000071_1790
 mov r22, r13
 and r22, r11
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1783
 mov r22, #52
 mov r20, FP
 sub r20, #-(-264)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #44
 rdlong r22, r22
 mov r21, r22
 jmp #\@C_tmp098051_0000000b_do_fileprint_L000071_1784
C_tmp098051_0000000b_do_fileprint_L000071_1783
 mov r21, #0
C_tmp098051_0000000b_do_fileprint_L000071_1784
C_tmp098051_0000000b_do_fileprint_L000071_1781
 cmps r21,  #0 wz
 if_nz jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1791
 mov r22, FP
 sub r22, #-(-276)
 rdlong r21, r22
C_tmp098051_0000000b_do_fileprint_L000071_1791
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r19, r0
 mov r17, #0
 mov r22, r19
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1780
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r17, r0
 cmps r21,  #0 wz
 if_nz jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1795
 mov r21, r17
C_tmp098051_0000000b_do_fileprint_L000071_1795
 cmps r21,  #255 wcz
 if_be jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1797
 mov r21, #255
C_tmp098051_0000000b_do_fileprint_L000071_1797
 cmps r17, r21 wcz
 if_be jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1799
 mov r17, r21
C_tmp098051_0000000b_do_fileprint_L000071_1799
 mov r23, #0
 jmp #\@C_tmp098051_0000000b_do_fileprint_L000071_1804
C_tmp098051_0000000b_do_fileprint_L000071_1801
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r23
 mov r20, r23
 adds r20, r19
 rdbyte r20, r20
 wrbyte r20, r22
 adds r23, #1
C_tmp098051_0000000b_do_fileprint_L000071_1804
 cmps r23, r17 wcz
 if_b jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1801
 mov r23, r17
 jmp #\@C_tmp098051_0000000b_do_fileprint_L000071_1808
C_tmp098051_0000000b_do_fileprint_L000071_1805
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r23
 mov r20, #32
 wrbyte r20, r22
 adds r23, #1
C_tmp098051_0000000b_do_fileprint_L000071_1808
 cmps r23, r21 wcz
 if_b jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1805
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r23
 mov r20, #0
 wrbyte r20, r22
 mov RI, FP
 sub RI, #-(-268)
 rdlong r2, RI
 mov r22, #140

  stalli

 qmul r22, r15
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098286_00000190_fwrite_str_L001753
 add SP, #4
 mov r2, FP
 sub r2, #-(-260)
 mov r22, #140

  stalli

 qmul r22, r15
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098286_00000190_fwrite_str_L001753
 add SP, #4
 mov RI, FP
 sub RI, #-(-272)
 rdlong r2, RI
 mov r22, #140

  stalli

 qmul r22, r15
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098286_00000190_fwrite_str_L001753
 add SP, #4
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_free
 jmp #\@C_tmp098051_0000000b_do_fileprint_L000071_1780
C_tmp098051_0000000b_do_fileprint_L000071_1779
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #230 wz
 if_nz jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1809
 mov r2, #230
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-328)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-328)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r23, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 cmps r23,  #1 wcz
 if_b jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1813
 mov r22, ##@C_tmp098024_00000009_width_L000044
 rdlong r22, r22
 cmps r23, r22 wcz
 if_be jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1810
C_tmp098051_0000000b_do_fileprint_L000071_1813
 mov r2, #20
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098051_0000000b_do_fileprint_L000071_1810
C_tmp098051_0000000b_do_fileprint_L000071_1809
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #229 wz
 if_nz jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1814
 mov r2, #229
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-328)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-328)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r23, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 cmps r23,  #0 wcz
 if_b jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1818
 cmps r23,  #255 wcz
 if_be jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1815
C_tmp098051_0000000b_do_fileprint_L000071_1818
 mov r2, #20
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098051_0000000b_do_fileprint_L000071_1815
C_tmp098051_0000000b_do_fileprint_L000071_1814
 mov r2, #1
 mov r3, FP
 sub r3, #-(-312)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov RI, FP
 sub RI, #-(-272)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-292)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-288)
 rdlong r4, RI
 mov RI, FP
 sub RI, #-(-296)
 rdlong r5, RI
 sub SP, #16
 calld PA,#PSHF
 long -300
 calld PA,#PSHF
 long -284
 calld PA,#PSHF
 long -268
 mov RI, FP
 sub RI, #-(-260)
 wrlong RI, --PTRA
 mov r0, FP
 sub r0, #-(-328)
 mov r1, FP
 sub r1, #-(-312)
 calld PA,#CPYB
 long 8
 mov RI, FP
 sub RI, #-(-328)
 wrlong RI, --PTRA
 mov BC, #36
 add SP, #4
 calld PA,#CALA
 long @C_print_to_buff
 add SP, #32
 mov r2, FP
 sub r2, #-(-260)
 mov r22, #140

  stalli

 qmul r22, r15
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098287_00000191_fwrite_num_L001755
 add SP, #4
C_tmp098051_0000000b_do_fileprint_L000071_1815
C_tmp098051_0000000b_do_fileprint_L000071_1810
C_tmp098051_0000000b_do_fileprint_L000071_1780
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1819
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098051_0000000b_do_fileprint_L000071_1820
C_tmp098051_0000000b_do_fileprint_L000071_1819
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #59 wz
 if_nz jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1821
 mov r2, #59
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098051_0000000b_do_fileprint_L000071_1821
C_tmp098051_0000000b_do_fileprint_L000071_1820
C_tmp098051_0000000b_do_fileprint_L000071_1775
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1824
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #175 wz
 if_z jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1824
 cmps r22,  #179 wz
 if_nz jmp #\C_tmp098051_0000000b_do_fileprint_L000071_1774
C_tmp098051_0000000b_do_fileprint_L000071_1824
 mov r2, #10
 mov r22, #140

  stalli

 qmul r22, r15
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098285_0000018f_fwrite_char_L001751
 add SP, #4
 mov RI, FP
 sub RI, #-(-280)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_free
 jmp #\@C_tmp098051_0000000b_do_fileprint_L000071_1764
C_tmp098051_0000000b_do_fileprint_L000071_1763
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098051_0000000b_do_fileprint_L000071_1764
C_tmp098051_0000000b_do_fileprint_L000071_1760
 calld PA,#POPM
 add SP, #324
 calld PA,#RETF
 alignl
C_tmp098052_0000000b_do_filewrite_L000072
 calld PA,#NEWF
 sub SP, #272
 calld PA,#PSHM
 long $e80000
 mov r2, #35
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-276)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-276)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r19, r0
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098052_0000000b_do_filewrite_L000072_1826
 jmp #\@C_tmp098052_0000000b_do_filewrite_L000072_1825
C_tmp098052_0000000b_do_filewrite_L000072_1826
 cmps r19,  #1 wcz
 if_b jmp #\C_tmp098052_0000000b_do_filewrite_L000072_1828
 cmps r19,  #3 wcz
 if_a jmp #\C_tmp098052_0000000b_do_filewrite_L000072_1828
 subs r19, #1
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098052_0000000b_do_filewrite_L000072_1830
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+4
 adds r22, r0
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098052_0000000b_do_filewrite_L000072_1832
 mov r2, #43
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098052_0000000b_do_filewrite_L000072_1825
C_tmp098052_0000000b_do_filewrite_L000072_1832
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098052_0000000b_do_filewrite_L000072_1836
C_tmp098052_0000000b_do_filewrite_L000072_1835
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098052_0000000b_do_filewrite_L000072_1838
 jmp #\@C_tmp098052_0000000b_do_filewrite_L000072_1825
C_tmp098052_0000000b_do_filewrite_L000072_1838
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098162_0000000d_is_string_L000182
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098052_0000000b_do_filewrite_L000072_1840
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r23, r0
 mov r22, r23
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098052_0000000b_do_filewrite_L000072_1841
 mov r2, r23
 mov r3, ##@C_tmp098050_0000000b_do_write_L000070_887_L000888
 mov r4, FP
 sub r4, #-(-260)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sprintf
 add SP, #8
 mov r2, FP
 sub r2, #-(-260)
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098286_00000190_fwrite_str_L001753
 add SP, #4
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_free
 jmp #\@C_tmp098052_0000000b_do_filewrite_L000072_1841
C_tmp098052_0000000b_do_filewrite_L000072_1840
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #230 wz
 if_nz jmp #\C_tmp098052_0000000b_do_filewrite_L000072_1844
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098052_0000000b_do_filewrite_L000072_1845
C_tmp098052_0000000b_do_filewrite_L000072_1844
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #229 wz
 if_nz jmp #\C_tmp098052_0000000b_do_filewrite_L000072_1846
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098052_0000000b_do_filewrite_L000072_1847
C_tmp098052_0000000b_do_filewrite_L000072_1846
 mov r2, #1
 mov r3, FP
 sub r3, #-(-268)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r22, FP
 sub r22, #-(-268)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098052_0000000b_do_filewrite_L000072_1848
 mov RI, FP
 sub RI, #-(-264)
 rdlong r2, RI
 mov r3, ##@C_tmp098050_0000000b_do_write_L000070_895_L000896
 mov r4, FP
 sub r4, #-(-260)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sprintf
 add SP, #8
 jmp #\@C_tmp098052_0000000b_do_filewrite_L000072_1849
C_tmp098052_0000000b_do_filewrite_L000072_1848
 mov RI, FP
 sub RI, #-(-264)
 rdlong r2, RI
 mov r3, ##@C_tmp098050_0000000b_do_write_L000070_898_L000899
 mov r4, FP
 sub r4, #-(-260)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sprintf
 add SP, #8
C_tmp098052_0000000b_do_filewrite_L000072_1849
 mov r23, FP
 sub r23, #-(-260)
 jmp #\@C_tmp098052_0000000b_do_filewrite_L000072_1853
C_tmp098052_0000000b_do_filewrite_L000072_1852
 rdbyte r2, r23
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098285_0000018f_fwrite_char_L001751
 add SP, #4
 adds r23, #1
C_tmp098052_0000000b_do_filewrite_L000072_1853
 rdbyte r22, r23
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098052_0000000b_do_filewrite_L000072_1852
C_tmp098052_0000000b_do_filewrite_L000072_1847
C_tmp098052_0000000b_do_filewrite_L000072_1845
C_tmp098052_0000000b_do_filewrite_L000072_1841
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_z jmp #\C_tmp098052_0000000b_do_filewrite_L000072_1857
 cmps r22,  #59 wz
 if_nz jmp #\C_tmp098052_0000000b_do_filewrite_L000072_1855
C_tmp098052_0000000b_do_filewrite_L000072_1857
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #44
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098285_0000018f_fwrite_char_L001751
 add SP, #4
 mov r2, #32
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098285_0000018f_fwrite_char_L001751
 add SP, #4
C_tmp098052_0000000b_do_filewrite_L000072_1855
C_tmp098052_0000000b_do_filewrite_L000072_1836
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098052_0000000b_do_filewrite_L000072_1859
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #175 wz
 if_z jmp #\C_tmp098052_0000000b_do_filewrite_L000072_1859
 cmps r22,  #179 wz
 if_nz jmp #\C_tmp098052_0000000b_do_filewrite_L000072_1835
C_tmp098052_0000000b_do_filewrite_L000072_1859
 mov r2, #10
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098285_0000018f_fwrite_char_L001751
 add SP, #4
 jmp #\@C_tmp098052_0000000b_do_filewrite_L000072_1831
C_tmp098052_0000000b_do_filewrite_L000072_1830
 mov r2, #47
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098052_0000000b_do_filewrite_L000072_1831
C_tmp098052_0000000b_do_filewrite_L000072_1828
C_tmp098052_0000000b_do_filewrite_L000072_1825
 calld PA,#POPM
 add SP, #272
 calld PA,#RETF
 alignl
C_tmp098098_0000000c_do_lset_L000118
 calld PA,#NEWF
 sub SP, #20
 calld PA,#PSHM
 long $f00000
 mov r21, ##0
 mov r2, #153
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, FP
 sub r2, #-(-16)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098103_0000000c_lvalue_L000123
 mov r2, #61
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-16)
 rdbyte r22, r22
 cmps r22,  #131 wz
 if_nz jmp #\C_tmp098098_0000000c_do_lset_L000118_1861
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r21, r0
 mov r22, r21
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098098_0000000c_do_lset_L000118_1863
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098098_0000000c_do_lset_L000118_1865
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 mov r23, #0
 jmp #\@C_tmp098098_0000000c_do_lset_L000118_1872
C_tmp098098_0000000c_do_lset_L000118_1869
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r22, r22
 adds r22, r23
 mov r20, r23
 adds r20, r21
 rdbyte r20, r20
 wrbyte r20, r22
 adds r23, #1
C_tmp098098_0000000c_do_lset_L000118_1872
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r23, r22 wcz
 if_b jmp #\C_tmp098098_0000000c_do_lset_L000118_1869
 jmp #\@C_tmp098098_0000000c_do_lset_L000118_1866
C_tmp098098_0000000c_do_lset_L000118_1865
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-20)
 rdlong r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098098_0000000c_do_lset_L000118_1875
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
C_tmp098098_0000000c_do_lset_L000118_1875
 mov r23, #0
 jmp #\@C_tmp098098_0000000c_do_lset_L000118_1880
C_tmp098098_0000000c_do_lset_L000118_1877
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r22, r22
 adds r22, r23
 mov r20, r23
 adds r20, r21
 rdbyte r20, r20
 wrbyte r20, r22
 adds r23, #1
C_tmp098098_0000000c_do_lset_L000118_1880
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r23, r22 wcz
 if_b jmp #\C_tmp098098_0000000c_do_lset_L000118_1877
C_tmp098098_0000000c_do_lset_L000118_1866
C_tmp098098_0000000c_do_lset_L000118_1863
 mov r22, r21
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098098_0000000c_do_lset_L000118_1862
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_free
 jmp #\@C_tmp098098_0000000c_do_lset_L000118_1862
C_tmp098098_0000000c_do_lset_L000118_1861
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098098_0000000c_do_lset_L000118_1862
 calld PA,#POPM
 add SP, #20
 calld PA,#RETF
 alignl
C_tmp098099_0000000c_do_rset_L000119
 calld PA,#NEWF
 sub SP, #24
 calld PA,#PSHM
 long $f80000
 mov r21, ##0
 mov r2, #154
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, FP
 sub r2, #-(-16)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098103_0000000c_lvalue_L000123
 mov r2, #61
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-16)
 rdbyte r22, r22
 cmps r22,  #131 wz
 if_nz jmp #\C_tmp098099_0000000c_do_rset_L000119_1885
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r21, r0
 mov r22, r21
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098099_0000000c_do_rset_L000119_1887
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098099_0000000c_do_rset_L000119_1889
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r19, r22
 jmp #\@C_tmp098099_0000000c_do_rset_L000119_1890
C_tmp098099_0000000c_do_rset_L000119_1889
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r19, r0
C_tmp098099_0000000c_do_rset_L000119_1890
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 cmps r22, r19 wcz
 if_ae jmp #\C_tmp098099_0000000c_do_rset_L000119_1894
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 mov r20, r19
 subs r20, r22
 mov RI, FP
 sub RI, #-(-20)
 wrlong r20, RI
 mov r20, #0
 mov RI, FP
 sub RI, #-(-24)
 wrlong r20, RI
 mov r19, r22
 jmp #\@C_tmp098099_0000000c_do_rset_L000119_1895
C_tmp098099_0000000c_do_rset_L000119_1894
 mov r22, #0
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 subs r22, r19
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
C_tmp098099_0000000c_do_rset_L000119_1895
 mov r23, #0
 jmp #\@C_tmp098099_0000000c_do_rset_L000119_1899
C_tmp098099_0000000c_do_rset_L000119_1896
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 adds r22, r23
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 rdlong r20, r20
 adds r22, r20
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20
 adds r20, r23
 adds r20, r21
 rdbyte r20, r20
 wrbyte r20, r22
 adds r23, #1
C_tmp098099_0000000c_do_rset_L000119_1899
 cmps r23, r19 wcz
 if_b jmp #\C_tmp098099_0000000c_do_rset_L000119_1896
C_tmp098099_0000000c_do_rset_L000119_1887
 mov r22, r21
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098099_0000000c_do_rset_L000119_1886
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_free
 jmp #\@C_tmp098099_0000000c_do_rset_L000119_1886
C_tmp098099_0000000c_do_rset_L000119_1885
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098099_0000000c_do_rset_L000119_1886
 calld PA,#POPM
 add SP, #24
 calld PA,#RETF
 alignl
C_tmp098100_0000000c_do_poke_L000120
 calld PA,#NEWF
 sub SP, #20
 calld PA,#PSHM
 long $d00000
 mov r2, #192
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-16)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-16)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_tmp098100_0000000c_do_poke_L000120_1904
 mov r2, #20
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098100_0000000c_do_poke_L000120_1904
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-24)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-24)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r23, r0
 cmps r23,  #0 wcz
 if_b jmp #\C_tmp098100_0000000c_do_poke_L000120_1908
 cmps r23,  #255 wcz
 if_be jmp #\C_tmp098100_0000000c_do_poke_L000120_1906
C_tmp098100_0000000c_do_poke_L000120_1908
 mov r2, #20
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098100_0000000c_do_poke_L000120_1906
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098100_0000000c_do_poke_L000120_1909
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, r23
 wrbyte r20, r22
C_tmp098100_0000000c_do_poke_L000120_1909
 calld PA,#POPM
 add SP, #20
 calld PA,#RETF
 alignl
C_tmp098102_0000000c_do_resume_L000122
 calld PA,#NEWF
 sub SP, #20
 calld PA,#PSHM
 long $500000
 mov r2, #158
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #0
 mov r20, ##@C_tmp098036_0000000a_errorindx_L000056
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_tmp098102_0000000c_do_resume_L000122_1914
 mov r20, ##@C_tmp098035_0000000a_errorlast_L000055
 rdlong r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098102_0000000c_do_resume_L000122_1912
C_tmp098102_0000000c_do_resume_L000122_1914
 mov r2, #42
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, #0
 jmp #\@C_tmp098102_0000000c_do_resume_L000122_1911
C_tmp098102_0000000c_do_resume_L000122_1912
 mov r22, #0
 wrlong r22, ##@C_tmp098034_0000000a_errorflag_L000054
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098102_0000000c_do_resume_L000122_1915
 mov r0, ##@C_tmp098036_0000000a_errorindx_L000056
 rdlong r0, r0
 jmp #\@C_tmp098102_0000000c_do_resume_L000122_1911
C_tmp098102_0000000c_do_resume_L000122_1915
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #170 wz
 if_nz jmp #\C_tmp098102_0000000c_do_resume_L000122_1917
 mov r22, ##@C_tmp098036_0000000a_errorindx_L000056
 rdlong r22, r22
 mov r0, r22
 adds r0, #1
 jmp #\@C_tmp098102_0000000c_do_resume_L000122_1911
C_tmp098102_0000000c_do_resume_L000122_1917
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098165_0000000d_getlineindex_L000185
 cmps r0,  #0 wcz
 if_be jmp #\C_tmp098102_0000000c_do_resume_L000122_1919
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 jmp #\@C_tmp098102_0000000c_do_resume_L000122_1911
C_tmp098102_0000000c_do_resume_L000122_1919
 mov r2, #1
 mov r3, FP
 sub r3, #-(-24)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-24)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-16)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098102_0000000c_do_resume_L000122_1922
 mov r0, ##@C_tmp098036_0000000a_errorindx_L000056
 rdlong r0, r0
 jmp #\@C_tmp098102_0000000c_do_resume_L000122_1911
C_tmp098102_0000000c_do_resume_L000122_1922
 mov RI, FP
 sub RI, #-(-16)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098044_0000000b_findline_L000064
 mov r22, r0
C_tmp098102_0000000c_do_resume_L000122_1911
 calld PA,#POPM
 add SP, #20
 calld PA,#RETF
 alignl
C_tmp098288_000001c3_call_assembly_L001924
 calld PA,#NEWF
 calld PA,#PSHM
 long $400000
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 wrlong r22, ##@C_assembly_addr
 mov r22, #0
 wrlong r22, ##@C_assembly_retn
 rdlong RI, ##@C_assembly_addr
 calld PA,#CALI
 wrlong r0, ##@C_assembly_retn
 mov r0, ##@C_assembly_retn
 rdlong r0, r0
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098292_000001c4_cvalue_L001932
 calld PA,#NEWF
 sub SP, #60
 calld PA,#PSHM
 long $d40000
 mov r23, r2
 mov r22, ##0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, ##0
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, #135
 wrbyte r22, r23
 mov r22, r23
 adds r22, #4
 mov r20, #0
 wrlong r20, r22
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #3 wcz
 if_b jmp #\C_tmp098292_000001c4_cvalue_L001932_1934
 cmps r22,  #8 wcz
 if_a jmp #\C_tmp098292_000001c4_cvalue_L001932_1972
 shl r22, #2
 mov r20, ##@C_tmp098292_000001c4_cvalue_L001932_1973_L001975-12
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098292_000001c4_cvalue_L001932_1972
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #129 wcz
 if_b jmp #\C_tmp098292_000001c4_cvalue_L001932_1934
 cmps r22,  #134 wcz
 if_a jmp #\C_tmp098292_000001c4_cvalue_L001932_1934
 shl r22, #2
 mov r20, ##@C_tmp098292_000001c4_cvalue_L001932_1977_L001979-516
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098292_000001c4_cvalue_L001932_1936
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov RI, FP
 sub RI, #-(-64)
 wrlong r0, RI
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 subs r22, #3
 adds r22, #129
 wrbyte r22, r23
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-64)
 rdlong r22, r22
 mov r20, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098292_000001c4_cvalue_L001932_1937
 rdbyte r22, r23
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098292_000001c4_cvalue_L001932_1939
 mov r22, r23
 adds r22, #8
 mov r20, #52
 mov r18, FP
 sub r18, #-(-64)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098015_00000009_variables_L000035
 rdlong r20, r20
 adds r20, r0
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1939
 rdbyte r22, r23
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098292_000001c4_cvalue_L001932_1941
 mov r22, r23
 adds r22, #8
 mov r20, #52
 mov r18, FP
 sub r18, #-(-64)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098015_00000009_variables_L000035
 rdlong r20, r20
 adds r20, r0
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1941
 mov r22, r23
 adds r22, #4
 mov r20, #52
 mov r18, FP
 sub r18, #-(-64)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098015_00000009_variables_L000035
 rdlong r20, r20
 adds r20, r0
 adds r20, #44
 rdlong r20, r20
 wrlong r20, r22
 mov r22, r23
 adds r22, #8
 mov r20, #52
 mov r18, FP
 sub r18, #-(-64)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098015_00000009_variables_L000035
 rdlong r20, r20
 adds r20, r0
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1937
 mov r2, #99
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1943
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 wrbyte r22, r23
 mov r2, FP
 sub r2, #-(-56)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov RI, FP
 sub RI, #-(-60)
 wrlong r0, RI
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, FP
 sub r2, #-(-56)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098119_0000000d_findvariable_L000139
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098292_000001c4_cvalue_L001932_1944
 rdbyte r22, r23
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098292_000001c4_cvalue_L001932_1946
 mov r2, FP
 sub r2, #-(-56)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098127_0000000d_addfloat_L000147
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1946
 rdbyte r22, r23
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098292_000001c4_cvalue_L001932_1948
 mov r2, FP
 sub r2, #-(-56)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098126_0000000d_addinteger_L000146
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1948
 mov r2, FP
 sub r2, #-(-56)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098128_0000000d_addstring_L000148
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, r23
 adds r22, #4
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 adds r20, #44
 rdlong r20, r20
 wrlong r20, r22
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1944
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098292_000001c4_cvalue_L001932_1935
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1952
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov RI, FP
 sub RI, #-(-64)
 wrlong r0, RI
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 subs r22, #6
 adds r22, #129
 wrbyte r22, r23
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-64)
 rdlong r22, r22
 mov r20, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098292_000001c4_cvalue_L001932_1953
 mov r22, #76
 mov r20, FP
 sub r20, #-(-64)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r22, r0
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 adds r22, #41
 rdbyte r22, r22
 wrbyte r22, r23
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1954
C_tmp098292_000001c4_cvalue_L001932_1953
 mov r2, #99
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1954
 mov RI, FP
 sub RI, #-(-12)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 sub r22, #1
 mov RI, FP
 sub RI, #-(-60)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-60)
 rdlong r22, r22
 mov r2, r22
 mov RI, FP
 sub RI, #-(-12)
 rdlong r3, RI
 mov r4, FP
 sub r4, #-(-56)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_strncpy
 add SP, #8
 mov r22, FP
 sub r22, #-(-60)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-56)
 adds r22, r20
 mov r20, #0
 wrbyte r20, r22
 mov r2, FP
 sub r2, #-(-56)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098119_0000000d_findvariable_L000139
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098292_000001c4_cvalue_L001932_1955
 rdbyte r22, r23
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098292_000001c4_cvalue_L001932_1957
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1957
 rdbyte r22, r23
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098292_000001c4_cvalue_L001932_1959
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1959
 mov r22, r23
 adds r22, #4
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 adds r20, #44
 rdlong r20, r20
 wrlong r20, r22
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1955
 mov r2, #99
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1961
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 subs r22, #132
 adds r22, #129
 wrbyte r22, r23
 mov r2, FP
 sub r2, #-(-56)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov RI, FP
 sub RI, #-(-60)
 wrlong r0, RI
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, FP
 sub r2, #-(-56)
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 sub r22, #1
 mov RI, FP
 sub RI, #-(-60)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-60)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-56)
 adds r22, r20
 mov r20, #0
 wrbyte r20, r22
 mov r2, FP
 sub r2, #-(-56)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098119_0000000d_findvariable_L000139
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098292_000001c4_cvalue_L001932_1962
 rdbyte r22, r23
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098292_000001c4_cvalue_L001932_1964
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1964
 rdbyte r22, r23
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098292_000001c4_cvalue_L001932_1966
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1966
 mov r22, r23
 adds r22, #4
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 adds r20, #44
 rdlong r20, r20
 wrlong r20, r22
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1962
 rdbyte r22, r23
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098292_000001c4_cvalue_L001932_1968
 mov r2, FP
 sub r2, #-(-56)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098127_0000000d_addfloat_L000147
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1968
 rdbyte r22, r23
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098292_000001c4_cvalue_L001932_1970
 mov r2, FP
 sub r2, #-(-56)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098126_0000000d_addinteger_L000146
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1970
 mov r2, FP
 sub r2, #-(-56)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098128_0000000d_addstring_L000148
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, r23
 adds r22, #4
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 adds r20, #44
 rdlong r20, r20
 wrlong r20, r22
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098292_000001c4_cvalue_L001932_1933
C_tmp098292_000001c4_cvalue_L001932_1934
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098292_000001c4_cvalue_L001932_1935
C_tmp098292_000001c4_cvalue_L001932_1933
 calld PA,#POPM
 add SP, #60
 calld PA,#RETF
DAT
 alignl
C_tmp098101_0000000c_do_call_L000121
 calld PA,#NEWF
 sub SP, #88
 calld PA,#PSHM
 long $f40000
 mov r0, FP
 sub r0, #-(-20)
 mov r1, ##@C_tmp098101_0000000c_do_call_L000121_1982_L001983
 calld PA,#CPYB
 long 16
 mov r0, FP
 sub r0, #-(-68)
 mov r1, ##@C_tmp098101_0000000c_do_call_L000121_1984_L001985
 calld PA,#CPYB
 long 16
 mov r2, #29
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, FP
 sub r2, #-(-80)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098292_000001c4_cvalue_L001932
 mov r22, FP
 sub r22, #-(-80)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098101_0000000c_do_call_L000121_1986
 mov r22, FP
 sub r22, #-(-72)
 rdlong r22, r22
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-84)
 wrlong r22, RI
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098101_0000000c_do_call_L000121_1987
 mov r2, #20
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098101_0000000c_do_call_L000121_1981
C_tmp098101_0000000c_do_call_L000121_1986
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098101_0000000c_do_call_L000121_1981
C_tmp098101_0000000c_do_call_L000121_1987
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #40 wz
 if_nz jmp #\C_tmp098101_0000000c_do_call_L000121_1991
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098101_0000000c_do_call_L000121_1991
 mov r21, #0
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098101_0000000c_do_call_L000121_1993
 jmp #\@C_tmp098101_0000000c_do_call_L000121_1996
C_tmp098101_0000000c_do_call_L000121_1995
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098162_0000000d_is_string_L000182
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098101_0000000c_do_call_L000121_1998
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r20, r21
 shl r20, #2
 mov r18, FP
 sub r18, #-(-20)
 adds r20, r18
 wrlong r0, r20
 jmp #\@C_tmp098101_0000000c_do_call_L000121_1999
C_tmp098101_0000000c_do_call_L000121_1998
 mov r2, #1
 mov r3, FP
 sub r3, #-(-92)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r22, r21
 shl r22, #3
 mov r20, FP
 sub r20, #-(-52)
 mov r0, r22
 adds r0, r20
 mov r1, FP
 sub r1, #-(-92)
 calld PA,#CPYB
 long 8
C_tmp098101_0000000c_do_call_L000121_1999
 adds r21, #1
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098101_0000000c_do_call_L000121_2000
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098101_0000000c_do_call_L000121_2000
C_tmp098101_0000000c_do_call_L000121_1996
 cmps r21,  #4 wcz
 if_ae jmp #\C_tmp098101_0000000c_do_call_L000121_2002
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #41 wz
 if_nz jmp #\C_tmp098101_0000000c_do_call_L000121_1995
C_tmp098101_0000000c_do_call_L000121_2002
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098101_0000000c_do_call_L000121_2003
 mov r2, #35
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098101_0000000c_do_call_L000121_1981
C_tmp098101_0000000c_do_call_L000121_2003
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #41 wz
 if_nz jmp #\C_tmp098101_0000000c_do_call_L000121_2005
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098101_0000000c_do_call_L000121_2006
C_tmp098101_0000000c_do_call_L000121_2005
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098101_0000000c_do_call_L000121_1981
C_tmp098101_0000000c_do_call_L000121_2006
C_tmp098101_0000000c_do_call_L000121_1993
 mov r23, #0
C_tmp098101_0000000c_do_call_L000121_2007
 mov r22, r23
 shl r22, #2
 mov r20, FP
 sub r20, #-(-20)
 adds r22, r20
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098101_0000000c_do_call_L000121_2011
 mov r22, r23
 shl r22, #2
 mov r20, FP
 sub r20, #-(-68)
 adds r20, r22
 mov r18, FP
 sub r18, #-(-20)
 adds r22, r18
 rdlong r22, r22
 wrlong r22, r20
 jmp #\@C_tmp098101_0000000c_do_call_L000121_2012
C_tmp098101_0000000c_do_call_L000121_2011
 mov r22, r23
 shl r22, #3
 mov r20, FP
 sub r20, #-(-52)
 adds r22, r20
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098101_0000000c_do_call_L000121_2013
 mov r22, r23
 shl r22, #2
 mov r20, FP
 sub r20, #-(-68)
 adds r22, r20
 mov r20, r23
 shl r20, #3
 mov r18, FP
 sub r18, #-(-48)
 adds r20, r18
 rdlong r20, r20
 wrlong r20, r22
 jmp #\@C_tmp098101_0000000c_do_call_L000121_2014
C_tmp098101_0000000c_do_call_L000121_2013
 mov r22, r23
 shl r22, #3
 mov r20, FP
 sub r20, #-(-52)
 adds r22, r20
 rdbyte r22, r22
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098101_0000000c_do_call_L000121_2016
 mov r22, r23
 shl r22, #2
 mov r20, FP
 sub r20, #-(-68)
 adds r22, r20
 mov r20, r23
 shl r20, #3
 mov r18, FP
 sub r18, #-(-48)
 adds r20, r18
 rdlong r0, r20
 calld PA,#INFL
 wrlong r0, r22
 jmp #\@C_tmp098101_0000000c_do_call_L000121_2017
C_tmp098101_0000000c_do_call_L000121_2016
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098101_0000000c_do_call_L000121_1981
C_tmp098101_0000000c_do_call_L000121_2017
C_tmp098101_0000000c_do_call_L000121_2014
C_tmp098101_0000000c_do_call_L000121_2012
 adds r23, #1
 cmps r23,  #4 wcz
 if_b jmp #\C_tmp098101_0000000c_do_call_L000121_2007
 mov RI, FP
 sub RI, #-(-68)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-64)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-60)
 rdlong r4, RI
 mov RI, FP
 sub RI, #-(-56)
 rdlong r5, RI
 sub SP, #16
 calld PA,#PSHF
 long -84
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_tmp098288_000001c3_call_assembly_L001924
 add SP, #16
C_tmp098101_0000000c_do_call_L000121_1981
 calld PA,#POPM
 add SP, #88
 calld PA,#RETF
 alignl
C_tmp098112_0000000c_int_usr_L000132
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $f00000
 mov r23, r3
 mov r21, r2
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, r23
 shl r22, #2
 mov r20, ##@C_tmp098004_00000009_usr_function_L000024
 adds r22, r20
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098112_0000000c_int_usr_L000132_2023
 mov r2, #50
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098112_0000000c_int_usr_L000132_2024
C_tmp098112_0000000c_int_usr_L000132_2023
 mov r2, r21
 mov r22, #0
 mov r3, r22
 mov r4, r22
 mov r5, r22
 sub SP, #16
 calld PA,#PSHF
 long -12
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_tmp098288_000001c3_call_assembly_L001924
 add SP, #16
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
C_tmp098112_0000000c_int_usr_L000132_2024
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
 alignl
C_tmp098113_0000000c_real_usr_L000133
 calld PA,#NEWF
 sub SP, #16
 calld PA,#PSHM
 long $f00000
 mov r23, r3
 mov r21, r2
 mov r22, ##@C_tmp098054_0000000b_do_dim_L000074_1198_L001199
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, r23
 shl r22, #2
 mov r20, ##@C_tmp098004_00000009_usr_function_L000024
 adds r22, r20
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098113_0000000c_real_usr_L000133_2026
 mov r2, #50
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098113_0000000c_real_usr_L000133_2027
C_tmp098113_0000000c_real_usr_L000133_2026
 mov RI, FP
 sub RI, #-(-20)
 wrlong r21, RI
 mov RI, FP
 sub RI, #-(-20)
 rdlong r2, RI
 mov r22, #0
 mov r3, r22
 mov r4, r22
 mov r5, r22
 sub SP, #16
 calld PA,#PSHF
 long -12
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_tmp098288_000001c3_call_assembly_L001924
 add SP, #16
 mov RI, FP
 sub RI, #-(-20)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_tmp098113_0000000c_real_usr_L000133_2027
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#POPM
 add SP, #16
 calld PA,#RETF
 alignl
C_tmp098114_0000000c_str_usr_L000134
 calld PA,#NEWF
 sub SP, #16
 calld PA,#PSHM
 long $f00000
 mov r23, r3
 mov r21, r2
 mov r22, r23
 shl r22, #2
 mov r20, ##@C_tmp098004_00000009_usr_function_L000024
 adds r22, r20
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098114_0000000c_str_usr_L000134_2029
 mov r2, #50
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 jmp #\@C_tmp098114_0000000c_str_usr_L000134_2030
C_tmp098114_0000000c_str_usr_L000134_2029
 mov RI, FP
 sub RI, #-(-20)
 wrlong r21, RI
 mov RI, FP
 sub RI, #-(-20)
 rdlong r2, RI
 mov r22, #0
 mov r3, r22
 mov r4, r22
 mov r5, r22
 sub SP, #16
 calld PA,#PSHF
 long -8
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_tmp098288_000001c3_call_assembly_L001924
 add SP, #16
 mov RI, FP
 sub RI, #-(-20)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
C_tmp098114_0000000c_str_usr_L000134_2030
 mov r22, FP
 sub r22, #-(-12)
 rdlong r0, r22
 calld PA,#POPM
 add SP, #16
 calld PA,#RETF
 alignl
C_tmp098058_0000000c_do_restore_L000078
 calld PA,#NEWF
 sub SP, #20
 calld PA,#PSHM
 long $400000
 mov r2, #174
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098058_0000000c_do_restore_L000078_2032
 mov r22, #0
 wrlong r22, ##@C_tmp098038_0000000b_data_indx_L000058
 wrlong r22, ##@C_tmp098039_0000000b_data_offs_L000059
 jmp #\@C_tmp098058_0000000c_do_restore_L000078_2033
C_tmp098058_0000000c_do_restore_L000078_2032
 mov r2, #1
 mov r3, FP
 sub r3, #-(-24)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-24)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r22, r0
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098044_0000000b_findline_L000064
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_tmp098058_0000000c_do_restore_L000078_2034
 mov r2, #31
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098058_0000000c_do_restore_L000078_2031
C_tmp098058_0000000c_do_restore_L000078_2034
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 wrlong r22, ##@C_tmp098030_0000000a_current_indx_L000050
 mov r22, #0
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #128 wz
 if_nz jmp #\C_tmp098058_0000000c_do_restore_L000078_2036
 mov r2, #128
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098058_0000000c_do_restore_L000078_2036
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #173 wz
 if_nz jmp #\C_tmp098058_0000000c_do_restore_L000078_2038
 mov r2, #173
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 wrlong r22, ##@C_tmp098038_0000000b_data_indx_L000058
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 wrlong r22, ##@C_tmp098039_0000000b_data_offs_L000059
 jmp #\@C_tmp098058_0000000c_do_restore_L000078_2039
C_tmp098058_0000000c_do_restore_L000078_2038
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 wrlong r22, ##@C_tmp098030_0000000a_current_indx_L000050
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov r0, ##-1
 jmp #\@C_tmp098058_0000000c_do_restore_L000078_2031
C_tmp098058_0000000c_do_restore_L000078_2039
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 wrlong r22, ##@C_tmp098030_0000000a_current_indx_L000050
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
C_tmp098058_0000000c_do_restore_L000078_2033
 mov r0, #0
C_tmp098058_0000000c_do_restore_L000078_2031
 calld PA,#POPM
 add SP, #20
 calld PA,#RETF
 alignl
C_tmp098075_0000000c_do_data_L000095
 calld PA,#NEWF
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098159_0000000d_find_eol_L000179
 calld PA,#RETF
' Catalina Export next_data_element
 alignl
C_next_data_element
 calld PA,#NEWF
 calld PA,#PSHM
 long $400000
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_next_data_element_2045
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_next_data_element_2043
C_next_data_element_2044
 mov BC, #0
 calld PA,#CALA
 long @C_next_token
C_next_data_element_2045
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_next_data_element_2048
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #173 wz
 if_z jmp #\C_next_data_element_2048
 cmps r22,  #1 wz
 if_nz jmp #\C_next_data_element_2044
C_next_data_element_2048
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #173 wz
 if_nz jmp #\C_next_data_element_2049
 mov r2, #173
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_next_data_element_2049
C_next_data_element_2043
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098076_0000000c_do_read_L000096
 calld PA,#NEWF
 sub SP, #84
 calld PA,#PSHM
 long $fa0000
 mov r22, #0
 mov RI, FP
 sub RI, #-(-72)
 wrlong r22, RI
 mov r2, #172
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #0
 mov r20, ##@C_tmp098038_0000000b_data_indx_L000058
 rdlong r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098076_0000000c_do_read_L000096_2052
 mov r20, ##@C_tmp098039_0000000b_data_offs_L000059
 rdlong r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098076_0000000c_do_read_L000096_2052
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r23, r22
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r21, r22
 mov r22, #1
 wrlong r22, ##@C_tmp098030_0000000a_current_indx_L000050
 mov r22, #0
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 jmp #\@C_tmp098076_0000000c_do_read_L000096_2055
C_tmp098076_0000000c_do_read_L000096_2054
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #1 wz
 if_nz jmp #\C_tmp098076_0000000c_do_read_L000096_2057
 mov r2, #31
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098076_0000000c_do_read_L000096_2051
C_tmp098076_0000000c_do_read_L000096_2057
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #173 wz
 if_nz jmp #\C_tmp098076_0000000c_do_read_L000096_2059
 mov r2, #173
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 wrlong r22, ##@C_tmp098038_0000000b_data_indx_L000058
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 wrlong r22, ##@C_tmp098039_0000000b_data_offs_L000059
 wrlong r23, ##@C_tmp098030_0000000a_current_indx_L000050
 wrlong r21, ##@C_tmp098031_0000000a_current_offs_L000051
 jmp #\@C_tmp098076_0000000c_do_read_L000096_2056
C_tmp098076_0000000c_do_read_L000096_2059
 mov BC, #0
 calld PA,#CALA
 long @C_next_token
C_tmp098076_0000000c_do_read_L000096_2055
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098076_0000000c_do_read_L000096_2054
C_tmp098076_0000000c_do_read_L000096_2056
C_tmp098076_0000000c_do_read_L000096_2052
C_tmp098076_0000000c_do_read_L000096_2061
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #3 wcz
 if_b jmp #\C_tmp098076_0000000c_do_read_L000096_2064
 cmps r22,  #5 wcz
 if_a jmp #\C_tmp098076_0000000c_do_read_L000096_2064
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov r19, r0
 mov r22, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r22, r22
 cmps r19, r22 wcz
 if_ae jmp #\C_tmp098076_0000000c_do_read_L000096_2066
 mov r22, #52

  stalli

 qmul r22, r19
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 mov r2, r0
 adds r2, r22
 mov r3, FP
 sub r3, #-(-60)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
C_tmp098076_0000000c_do_read_L000096_2066
 mov r2, FP
 sub r2, #-(-16)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098103_0000000c_lvalue_L000123
 jmp #\@C_tmp098076_0000000c_do_read_L000096_2065
C_tmp098076_0000000c_do_read_L000096_2064
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #6 wcz
 if_b jmp #\C_tmp098076_0000000c_do_read_L000096_2068
 cmps r22,  #8 wcz
 if_a jmp #\C_tmp098076_0000000c_do_read_L000096_2068
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov r19, r0
 mov r22, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r22, r22
 cmps r19, r22 wcz
 if_ae jmp #\C_tmp098076_0000000c_do_read_L000096_2070
 mov r22, #76

  stalli

 qmul r22, r19
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 mov r2, r0
 adds r2, r22
 mov r3, FP
 sub r3, #-(-60)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
C_tmp098076_0000000c_do_read_L000096_2070
 mov r2, FP
 sub r2, #-(-16)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098103_0000000c_lvalue_L000123
 jmp #\@C_tmp098076_0000000c_do_read_L000096_2069
C_tmp098076_0000000c_do_read_L000096_2068
 mov r2, FP
 sub r2, #-(-60)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov RI, FP
 sub RI, #-(-68)
 wrlong r0, RI
 mov r2, FP
 sub r2, #-(-16)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098103_0000000c_lvalue_L000123
C_tmp098076_0000000c_do_read_L000096_2069
C_tmp098076_0000000c_do_read_L000096_2065
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098076_0000000c_do_read_L000096_2072
 mov r0, ##-1
 jmp #\@C_tmp098076_0000000c_do_read_L000096_2051
C_tmp098076_0000000c_do_read_L000096_2072
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r23, r22
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r21, r22
 mov r22, ##@C_tmp098038_0000000b_data_indx_L000058
 rdlong r22, r22
 wrlong r22, ##@C_tmp098030_0000000a_current_indx_L000050
 mov r22, ##@C_tmp098039_0000000b_data_offs_L000059
 rdlong r22, r22
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, FP
 sub r22, #-(-16)
 rdbyte r17, r22
 cmps r17,  #129 wz
 if_z jmp #\C_tmp098076_0000000c_do_read_L000096_2077
 cmps r17,  #130 wz
 if_z jmp #\C_tmp098076_0000000c_do_read_L000096_2079
 cmps r17,  #131 wz
 if_z jmp #\C_tmp098076_0000000c_do_read_L000096_2081
 jmp #\@C_tmp098076_0000000c_do_read_L000096_2075
C_tmp098076_0000000c_do_read_L000096_2077
 mov r2, #1
 mov r3, FP
 sub r3, #-(-80)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-80)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 wrlong r0, r20
 jmp #\@C_tmp098076_0000000c_do_read_L000096_2075
C_tmp098076_0000000c_do_read_L000096_2079
 mov r2, #1
 mov r3, FP
 sub r3, #-(-88)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-88)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098154_0000000d_real_L000174
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 wrlong r0, r20
 jmp #\@C_tmp098076_0000000c_do_read_L000096_2075
C_tmp098076_0000000c_do_read_L000096_2081
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-64)
 wrlong r22, RI
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 wrlong r0, r20
 mov r22, FP
 sub r22, #-(-64)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098076_0000000c_do_read_L000096_2075
 mov RI, FP
 sub RI, #-(-64)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_tmp098076_0000000c_do_read_L000096_2075
 mov BC, #0
 calld PA,#CALA
 long @C_next_data_element
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 wrlong r22, ##@C_tmp098038_0000000b_data_indx_L000058
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 wrlong r22, ##@C_tmp098039_0000000b_data_offs_L000059
 wrlong r23, ##@C_tmp098030_0000000a_current_indx_L000050
 wrlong r21, ##@C_tmp098031_0000000a_current_offs_L000051
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098076_0000000c_do_read_L000096_2086
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098076_0000000c_do_read_L000096_2086
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098076_0000000c_do_read_L000096_2061
 mov r22, FP
 sub r22, #-(-72)
 rdlong r0, r22
C_tmp098076_0000000c_do_read_L000096_2051
 calld PA,#POPM
 add SP, #84
 calld PA,#RETF
' Catalina Export find_control
 alignl
C_find_control
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r2
 mov r21, #0
 jmp #\@C_find_control_2092
C_find_control_2089
 mov r2, r23
 mov r22, #76

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098008_00000009_forstack_L000028
 mov r3, r0
 adds r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098045_0000000b_strcmp_i_L000065
 add SP, #4
 cmps r0,  #0 wz
 if_nz jmp #\C_find_control_2093
 mov r0, r21
 jmp #\@C_find_control_2088
C_find_control_2093
 adds r21, #1
C_find_control_2092
 mov r22, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r22, r22
 cmps r21, r22 wcz
 if_b jmp #\C_find_control_2089
 mov r0, ##-1
C_find_control_2088
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098066_0000000c_do_for_L000086
 calld PA,#NEWF
 sub SP, #136
 calld PA,#PSHM
 long $faa000
 mov r23, #0
 mov r21, #0
 mov r2, #168
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #3 wcz
 if_b jmp #\C_tmp098066_0000000c_do_for_L000086_2096
 cmps r22,  #5 wcz
 if_a jmp #\C_tmp098066_0000000c_do_for_L000086_2096
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov r19, r0
 mov r22, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r22, r22
 cmps r19, r22 wcz
 if_ae jmp #\C_tmp098066_0000000c_do_for_L000086_2098
 mov r22, #52

  stalli

 qmul r22, r19
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 mov r2, r0
 adds r2, r22
 mov r3, FP
 sub r3, #-(-92)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
C_tmp098066_0000000c_do_for_L000086_2098
 mov r2, FP
 sub r2, #-(-104)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098103_0000000c_lvalue_L000123
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2097
C_tmp098066_0000000c_do_for_L000086_2096
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #6 wcz
 if_b jmp #\C_tmp098066_0000000c_do_for_L000086_2100
 cmps r22,  #8 wcz
 if_a jmp #\C_tmp098066_0000000c_do_for_L000086_2100
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov r19, r0
 mov r22, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r22, r22
 cmps r19, r22 wcz
 if_ae jmp #\C_tmp098066_0000000c_do_for_L000086_2102
 mov r22, #76

  stalli

 qmul r22, r19
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 mov r2, r0
 adds r2, r22
 mov r3, FP
 sub r3, #-(-92)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
C_tmp098066_0000000c_do_for_L000086_2102
 mov r2, FP
 sub r2, #-(-104)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098103_0000000c_lvalue_L000123
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2101
C_tmp098066_0000000c_do_for_L000086_2100
 mov r2, FP
 sub r2, #-(-92)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov r15, r0
 mov r2, FP
 sub r2, #-(-104)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098103_0000000c_lvalue_L000123
C_tmp098066_0000000c_do_for_L000086_2101
C_tmp098066_0000000c_do_for_L000086_2097
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098066_0000000c_do_for_L000086_2104
 mov r0, ##-1
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2095
C_tmp098066_0000000c_do_for_L000086_2104
 mov r22, FP
 sub r22, #-(-104)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_z jmp #\C_tmp098066_0000000c_do_for_L000086_2106
 cmps r22,  #130 wz
 if_z jmp #\C_tmp098066_0000000c_do_for_L000086_2106
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2095
C_tmp098066_0000000c_do_for_L000086_2106
 mov r2, #61
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-104)
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-112)
 wrbyte r22, RI
 and r22, cviu_m1
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098066_0000000c_do_for_L000086_2108
 mov r2, #1
 mov r3, FP
 sub r3, #-(-140)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-140)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov RI, FP
 sub RI, #-(-108)
 wrlong r0, RI
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2109
C_tmp098066_0000000c_do_for_L000086_2108
 mov r2, #1
 mov r3, FP
 sub r3, #-(-140)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-140)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098154_0000000d_real_L000174
 mov RI, FP
 sub RI, #-(-108)
 wrlong r0, RI
C_tmp098066_0000000c_do_for_L000086_2109
 mov r2, #169
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-104)
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-120)
 wrbyte r22, RI
 and r22, cviu_m1
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098066_0000000c_do_for_L000086_2112
 mov r2, #1
 mov r3, FP
 sub r3, #-(-140)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-140)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov RI, FP
 sub RI, #-(-116)
 wrlong r0, RI
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2113
C_tmp098066_0000000c_do_for_L000086_2112
 mov r2, #1
 mov r3, FP
 sub r3, #-(-140)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-140)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098154_0000000d_real_L000174
 mov RI, FP
 sub RI, #-(-116)
 wrlong r0, RI
C_tmp098066_0000000c_do_for_L000086_2113
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #171 wz
 if_nz jmp #\C_tmp098066_0000000c_do_for_L000086_2116
 mov r2, #171
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-104)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098066_0000000c_do_for_L000086_2118
 mov r2, #1
 mov r3, FP
 sub r3, #-(-140)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-140)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov RI, FP
 sub RI, #-(-124)
 wrlong r0, RI
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2117
C_tmp098066_0000000c_do_for_L000086_2118
 mov r2, #1
 mov r3, FP
 sub r3, #-(-140)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-140)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098154_0000000d_real_L000174
 mov RI, FP
 sub RI, #-(-124)
 wrlong r0, RI
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2117
C_tmp098066_0000000c_do_for_L000086_2116
 mov r22, FP
 sub r22, #-(-104)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098066_0000000c_do_for_L000086_2122
 mov r22, #1
 mov RI, FP
 sub RI, #-(-124)
 wrlong r22, RI
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2123
C_tmp098066_0000000c_do_for_L000086_2122
 mov r22, ##@C_tmp098066_0000000c_do_for_L000086_2126_L002127
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-124)
 wrlong r22, RI
C_tmp098066_0000000c_do_for_L000086_2123
C_tmp098066_0000000c_do_for_L000086_2117
 mov r22, FP
 sub r22, #-(-104)
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-128)
 wrbyte r22, RI
 and r22, cviu_m1
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098066_0000000c_do_for_L000086_2128
 mov r22, FP
 sub r22, #-(-96)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-108)
 rdlong r20, r20
 wrlong r20, r22
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2129
C_tmp098066_0000000c_do_for_L000086_2128
 mov r22, FP
 sub r22, #-(-96)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-108)
 rdlong r20, r20
 wrlong r20, r22
C_tmp098066_0000000c_do_for_L000086_2129
 mov r22, FP
 sub r22, #-(-104)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098066_0000000c_do_for_L000086_2134
 mov r22, FP
 sub r22, #-(-124)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_tmp098066_0000000c_do_for_L000086_2146
 mov r22, FP
 sub r22, #-(-108)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-116)
 rdlong r20, r20
 cmps r22, r20 wcz
 if_b jmp #\C_tmp098066_0000000c_do_for_L000086_2145
C_tmp098066_0000000c_do_for_L000086_2146
 mov r22, FP
 sub r22, #-(-124)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_be jmp #\C_tmp098066_0000000c_do_for_L000086_2143
 mov r22, FP
 sub r22, #-(-108)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-116)
 rdlong r20, r20
 cmps r22, r20 wcz
 if_be jmp #\C_tmp098066_0000000c_do_for_L000086_2143
C_tmp098066_0000000c_do_for_L000086_2145
 mov r13, #1
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2144
C_tmp098066_0000000c_do_for_L000086_2143
 mov r13, #0
C_tmp098066_0000000c_do_for_L000086_2144
 mov RI, FP
 sub RI, #-(-132)
 wrlong r13, RI
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2135
C_tmp098066_0000000c_do_for_L000086_2134
 mov r22, FP
 sub r22, #-(-124)
 rdlong r22, r22
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_ae jmp #\C_tmp098066_0000000c_do_for_L000086_2157
 mov r22, FP
 sub r22, #-(-108)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-116)
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_b jmp #\C_tmp098066_0000000c_do_for_L000086_2156
C_tmp098066_0000000c_do_for_L000086_2157
 mov r22, FP
 sub r22, #-(-124)
 rdlong r22, r22
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_be jmp #\C_tmp098066_0000000c_do_for_L000086_2154
 mov r22, FP
 sub r22, #-(-108)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-116)
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_be jmp #\C_tmp098066_0000000c_do_for_L000086_2154
C_tmp098066_0000000c_do_for_L000086_2156
 mov r13, #1
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2155
C_tmp098066_0000000c_do_for_L000086_2154
 mov r13, #0
C_tmp098066_0000000c_do_for_L000086_2155
 mov RI, FP
 sub RI, #-(-132)
 wrlong r13, RI
C_tmp098066_0000000c_do_for_L000086_2135
 mov r22, FP
 sub r22, #-(-132)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098066_0000000c_do_for_L000086_2158
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2161
C_tmp098066_0000000c_do_for_L000086_2160
 mov BC, #0
 calld PA,#CALA
 long @C_next_token
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098066_0000000c_do_for_L000086_2163
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #1 wz
 if_nz jmp #\C_tmp098066_0000000c_do_for_L000086_2165
 mov r2, #10
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2095
C_tmp098066_0000000c_do_for_L000086_2165
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #168 wz
 if_nz jmp #\C_tmp098066_0000000c_do_for_L000086_2167
 adds r23, #1
C_tmp098066_0000000c_do_for_L000086_2167
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #170 wz
 if_nz jmp #\C_tmp098066_0000000c_do_for_L000086_2169
 mov r2, #170
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098066_0000000c_do_for_L000086_2176
 cmps r23,  #0 wcz
 if_be jmp #\C_tmp098066_0000000c_do_for_L000086_2173
 subs r23, #1
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2172
C_tmp098066_0000000c_do_for_L000086_2173
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 mov r21, r22
 adds r21, #1
 mov r0, r21
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2095
C_tmp098066_0000000c_do_for_L000086_2175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #3 wcz
 if_b jmp #\C_tmp098066_0000000c_do_for_L000086_2178
 cmps r22,  #14 wcz
 if_a jmp #\C_tmp098066_0000000c_do_for_L000086_2178
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov r19, r0
 mov r22, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r22, r22
 cmps r19, r22 wcz
 if_ae jmp #\C_tmp098066_0000000c_do_for_L000086_2179
 mov r22, #52

  stalli

 qmul r22, r19
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 mov r2, r0
 adds r2, r22
 mov r3, FP
 sub r3, #-(-48)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2179
C_tmp098066_0000000c_do_for_L000086_2178
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov r15, r0
C_tmp098066_0000000c_do_for_L000086_2179
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, FP
 sub r2, #-(-48)
 mov r3, FP
 sub r3, #-(-92)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098045_0000000b_strcmp_i_L000065
 add SP, #4
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098066_0000000c_do_for_L000086_2182
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 mov r21, r22
 adds r21, #1
 mov r0, r21
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2095
C_tmp098066_0000000c_do_for_L000086_2182
 mov r2, FP
 sub r2, #-(-48)
 mov r3, FP
 sub r3, #-(-92)
 mov r4, ##@C_tmp098066_0000000c_do_for_L000086_2184_L002185
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_printf
 add SP, #8
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098066_0000000c_do_for_L000086_2186
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098066_0000000c_do_for_L000086_2186
C_tmp098066_0000000c_do_for_L000086_2176
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #129 wz
 if_z jmp #\C_tmp098066_0000000c_do_for_L000086_2175
 cmps r22,  #130 wz
 if_z jmp #\C_tmp098066_0000000c_do_for_L000086_2175
 cmps r22,  #132 wz
 if_z jmp #\C_tmp098066_0000000c_do_for_L000086_2175
 cmps r22,  #133 wz
 if_z jmp #\C_tmp098066_0000000c_do_for_L000086_2175
 cmps r22,  #3 wz
 if_z jmp #\C_tmp098066_0000000c_do_for_L000086_2175
 cmps r22,  #4 wz
 if_z jmp #\C_tmp098066_0000000c_do_for_L000086_2175
 cmps r22,  #6 wz
 if_z jmp #\C_tmp098066_0000000c_do_for_L000086_2175
 cmps r22,  #7 wz
 if_z jmp #\C_tmp098066_0000000c_do_for_L000086_2175
C_tmp098066_0000000c_do_for_L000086_2172
C_tmp098066_0000000c_do_for_L000086_2169
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098159_0000000d_find_eol_L000179
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2164
C_tmp098066_0000000c_do_for_L000086_2163
 mov r21, ##-1
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2159
C_tmp098066_0000000c_do_for_L000086_2164
C_tmp098066_0000000c_do_for_L000086_2161
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098066_0000000c_do_for_L000086_2160
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2159
C_tmp098066_0000000c_do_for_L000086_2158
 mov r2, FP
 sub r2, #-(-92)
 mov BC, #4
 calld PA,#CALA
 long @C_find_control
 mov r17, r0
 cmps r17,  #0 wcz
 if_ae jmp #\C_tmp098066_0000000c_do_for_L000086_2188
 mov r22, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r22, r22
 cmps r22,  #31 wcz
 if_b jmp #\C_tmp098066_0000000c_do_for_L000086_2190
 mov r2, #9
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2095
C_tmp098066_0000000c_do_for_L000086_2190
 mov r22, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r22, r22
 mov r17, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098009_00000009_nfors_L000029
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2189
C_tmp098066_0000000c_do_for_L000086_2188
 mov r23, r17
 jmp #\@C_tmp098066_0000000c_do_for_L000086_2195
C_tmp098066_0000000c_do_for_L000086_2192
 mov r22, #76

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, r0
 mov r20, ##@C_tmp098008_00000009_forstack_L000028
 mov r0, r22
 adds r0, r20
 mov r20, ##@C_tmp098008_00000009_forstack_L000028+76
 mov r1, r22
 adds r1, r20
 calld PA,#CPYB
 long 76
 adds r23, #1
C_tmp098066_0000000c_do_for_L000086_2195
 mov r22, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r22, r22
 cmps r23, r22 wcz
 if_b jmp #\C_tmp098066_0000000c_do_for_L000086_2192
 mov r22, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r22, r22
 mov r17, r22
 subs r17, #1
C_tmp098066_0000000c_do_for_L000086_2189
 mov r2, FP
 sub r2, #-(-92)
 mov r22, #76

  stalli

 qmul r22, r17
 getqx r0

  allowi

 mov r22, ##@C_tmp098008_00000009_forstack_L000028
 mov r3, r0
 adds r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
 mov r22, #76

  stalli

 qmul r22, r17
 getqx r0

  allowi

 mov r22, ##@C_tmp098008_00000009_forstack_L000028+44
 adds r0, r22
 mov r1, FP
 sub r1, #-(-104)
 calld PA,#CPYB
 long 12
 mov r22, #76

  stalli

 qmul r22, r17
 getqx r0

  allowi

 mov r22, ##@C_tmp098008_00000009_forstack_L000028+56
 adds r22, r0
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 adds r20, #1
 wrlong r20, r22
 mov r22, #76

  stalli

 qmul r22, r17
 getqx r0

  allowi

 mov r22, ##@C_tmp098008_00000009_forstack_L000028+68
 adds r0, r22
 mov r1, FP
 sub r1, #-(-128)
 calld PA,#CPYB
 long 8
 mov r22, #76

  stalli

 qmul r22, r17
 getqx r0

  allowi

 mov r22, ##@C_tmp098008_00000009_forstack_L000028+60
 adds r0, r22
 mov r1, FP
 sub r1, #-(-120)
 calld PA,#CPYB
 long 8
 mov r21, #0
C_tmp098066_0000000c_do_for_L000086_2159
 mov r0, r21
C_tmp098066_0000000c_do_for_L000086_2095
 calld PA,#POPM
 add SP, #136
 calld PA,#RETF
 alignl
C_tmp098301_00000216_for_complete_L002201
 calld PA,#PSHM
 long $550000
 rdbyte r22, r2
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098301_00000216_for_complete_L002201_2203
 mov r22, r2
 adds r22, #8
 rdlong r22, r22
 rdlong r20, r22
 mov r18, #76
 mov r16, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r16, r16

  stalli

 qmul r18, r16
 getqx r0

  allowi

 mov r18, ##@C_tmp098008_00000009_forstack_L000028-76+68+4
 adds r18, r0
 rdlong r18, r18
 adds r20, r18
 wrlong r20, r22
 mov r22, #76
 mov r20, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, r0
 mov r20, ##@C_tmp098008_00000009_forstack_L000028-76+68+4
 adds r20, r22
 rdlong r0, r20
 calld PA,#FLIN
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r1, r20
 calld PA,#FCMP
 if_ae jmp #\C_tmp098301_00000216_for_complete_L002201_2223
 mov r20, r2
 adds r20, #8
 rdlong r20, r20
 rdlong r20, r20
 mov r18, ##@C_tmp098008_00000009_forstack_L000028-76+60+4
 adds r22, r18
 rdlong r22, r22
 cmps r20, r22 wcz
 if_b jmp #\C_tmp098301_00000216_for_complete_L002201_2222
C_tmp098301_00000216_for_complete_L002201_2223
 mov r22, #76
 mov r20, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, r0
 mov r20, ##@C_tmp098008_00000009_forstack_L000028-76+68+4
 adds r20, r22
 rdlong r0, r20
 calld PA,#FLIN
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r1, r20
 calld PA,#FCMP
 if_be jmp #\C_tmp098301_00000216_for_complete_L002201_2204
 mov r20, r2
 adds r20, #8
 rdlong r20, r20
 rdlong r20, r20
 mov r18, ##@C_tmp098008_00000009_forstack_L000028-76+60+4
 adds r22, r18
 rdlong r22, r22
 cmps r20, r22 wcz
 if_be jmp #\C_tmp098301_00000216_for_complete_L002201_2204
C_tmp098301_00000216_for_complete_L002201_2222
 mov r0, #1
 jmp #\@C_tmp098301_00000216_for_complete_L002201_2202
C_tmp098301_00000216_for_complete_L002201_2203
 mov r22, r2
 adds r22, #8
 rdlong r22, r22
 rdlong r20, r22
 mov r18, #76
 mov r16, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r16, r16

  stalli

 qmul r18, r16
 getqx r0

  allowi

 mov r18, ##@C_tmp098008_00000009_forstack_L000028-76+68+4
 adds r18, r0
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#FADD
 wrlong r0, r22
 mov r22, #76
 mov r20, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, r0
 mov r20, ##@C_tmp098008_00000009_forstack_L000028-76+68+4
 adds r20, r22
 rdlong r20, r20
 mov r18, ##@C_print_to_buff_936_L000937
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#FCMP
 if_ae jmp #\C_tmp098301_00000216_for_complete_L002201_2242
 mov r20, r2
 adds r20, #8
 rdlong r20, r20
 rdlong r20, r20
 mov r18, ##@C_tmp098008_00000009_forstack_L000028-76+60+4
 adds r22, r18
 rdlong r22, r22
 mov r0, r20
 mov r1, r22
 calld PA,#FCMP
 if_b jmp #\C_tmp098301_00000216_for_complete_L002201_2241
C_tmp098301_00000216_for_complete_L002201_2242
 mov r22, #76
 mov r20, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, r0
 mov r20, ##@C_tmp098008_00000009_forstack_L000028-76+68+4
 adds r20, r22
 rdlong r20, r20
 mov r18, ##@C_print_to_buff_936_L000937
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#FCMP
 if_be jmp #\C_tmp098301_00000216_for_complete_L002201_2227
 mov r20, r2
 adds r20, #8
 rdlong r20, r20
 rdlong r20, r20
 mov r18, ##@C_tmp098008_00000009_forstack_L000028-76+60+4
 adds r22, r18
 rdlong r22, r22
 mov r0, r20
 mov r1, r22
 calld PA,#FCMP
 if_be jmp #\C_tmp098301_00000216_for_complete_L002201_2227
C_tmp098301_00000216_for_complete_L002201_2241
 mov r0, #1
 jmp #\@C_tmp098301_00000216_for_complete_L002201_2202
C_tmp098301_00000216_for_complete_L002201_2227
C_tmp098301_00000216_for_complete_L002201_2204
 mov r0, #0
C_tmp098301_00000216_for_complete_L002201_2202
 calld PA,#POPM
 calld PA,#RETN
 alignl
C_tmp098067_0000000c_do_next_L000087
 calld PA,#NEWF
 sub SP, #72
 calld PA,#PSHM
 long $f00000
 mov r23, #0
 mov r2, #170
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098067_0000000c_do_next_L000087_2244
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098067_0000000c_do_next_L000087_2246
 mov r22, #76
 mov r20, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098008_00000009_forstack_L000028-76+44
 mov r2, r0
 adds r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098301_00000216_for_complete_L002201
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098067_0000000c_do_next_L000087_2248
 mov r22, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r22, r22
 subs r22, #1
 wrlong r22, ##@C_tmp098009_00000009_nfors_L000029
 jmp #\@C_tmp098067_0000000c_do_next_L000087_2245
C_tmp098067_0000000c_do_next_L000087_2248
 mov r22, #76
 mov r20, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098008_00000009_forstack_L000028-76+56
 adds r22, r0
 rdlong r23, r22
 mov r0, r23
 jmp #\@C_tmp098067_0000000c_do_next_L000087_2243
C_tmp098067_0000000c_do_next_L000087_2246
 mov r22, #0
 mov RI, FP
 sub RI, #-(-76)
 wrlong r22, RI
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-68)
 wrlong r22, RI
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-72)
 wrlong r22, RI
 jmp #\@C_tmp098067_0000000c_do_next_L000087_2255
C_tmp098067_0000000c_do_next_L000087_2254
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #3 wcz
 if_b jmp #\C_tmp098067_0000000c_do_next_L000087_2257
 cmps r22,  #14 wcz
 if_a jmp #\C_tmp098067_0000000c_do_next_L000087_2257
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov r21, r0
 mov r22, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r22, r22
 cmps r21, r22 wcz
 if_ae jmp #\C_tmp098067_0000000c_do_next_L000087_2258
 mov r22, #52

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 mov r2, r0
 adds r2, r22
 mov r3, FP
 sub r3, #-(-48)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
 jmp #\@C_tmp098067_0000000c_do_next_L000087_2258
C_tmp098067_0000000c_do_next_L000087_2257
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov RI, FP
 sub RI, #-(-64)
 wrlong r0, RI
C_tmp098067_0000000c_do_next_L000087_2258
 mov r2, FP
 sub r2, #-(-48)
 mov r22, #76
 mov r20, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098008_00000009_forstack_L000028-76
 mov r3, r0
 adds r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098045_0000000b_strcmp_i_L000065
 add SP, #4
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098067_0000000c_do_next_L000087_2261
 mov r2, FP
 sub r2, #-(-60)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098103_0000000c_lvalue_L000123
 mov r2, FP
 sub r2, #-(-60)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098301_00000216_for_complete_L002201
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098067_0000000c_do_next_L000087_2264
 mov r22, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r20, r22
 subs r20, #1
 wrlong r20, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098067_0000000c_do_next_L000087_2262
 mov r22, FP
 sub r22, #-(-68)
 rdlong r22, r22
 wrlong r22, ##@C_tmp098030_0000000a_current_indx_L000050
 mov r22, FP
 sub r22, #-(-72)
 rdlong r22, r22
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 jmp #\@C_tmp098067_0000000c_do_next_L000087_2262
C_tmp098067_0000000c_do_next_L000087_2264
 mov r22, #76
 mov r20, ##@C_tmp098009_00000009_nfors_L000029
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098008_00000009_forstack_L000028-76+56
 adds r22, r0
 rdlong r23, r22
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098159_0000000d_find_eol_L000179
 mov r0, r23
 jmp #\@C_tmp098067_0000000c_do_next_L000087_2243
C_tmp098067_0000000c_do_next_L000087_2261
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098067_0000000c_do_next_L000087_2262
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098067_0000000c_do_next_L000087_2270
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098067_0000000c_do_next_L000087_2270
C_tmp098067_0000000c_do_next_L000087_2255
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #129 wz
 if_z jmp #\C_tmp098067_0000000c_do_next_L000087_2254
 cmps r22,  #130 wz
 if_z jmp #\C_tmp098067_0000000c_do_next_L000087_2254
 cmps r22,  #132 wz
 if_z jmp #\C_tmp098067_0000000c_do_next_L000087_2254
 cmps r22,  #133 wz
 if_z jmp #\C_tmp098067_0000000c_do_next_L000087_2254
 cmps r22,  #3 wz
 if_z jmp #\C_tmp098067_0000000c_do_next_L000087_2254
 cmps r22,  #4 wz
 if_z jmp #\C_tmp098067_0000000c_do_next_L000087_2254
 cmps r22,  #6 wz
 if_z jmp #\C_tmp098067_0000000c_do_next_L000087_2254
 cmps r22,  #7 wz
 if_z jmp #\C_tmp098067_0000000c_do_next_L000087_2254
 jmp #\@C_tmp098067_0000000c_do_next_L000087_2245
C_tmp098067_0000000c_do_next_L000087_2244
 mov r2, #11
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098067_0000000c_do_next_L000087_2243
C_tmp098067_0000000c_do_next_L000087_2245
 mov r0, r23
C_tmp098067_0000000c_do_next_L000087_2243
 calld PA,#POPM
 add SP, #72
 calld PA,#RETF
' Catalina Export next_token
 alignl
C_next_token
 calld PA,#NEWF
 calld PA,#PSHM
 long $500000
C_next_token_2273
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #1 wz
 if_nz jmp #\C_next_token_2276
 jmp #\@C_next_token_2275
C_next_token_2276
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_next_token_2278
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098156_0000000d_match_eol_L000176
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #128 wz
 if_nz jmp #\C_next_token_2279
 mov r2, #128
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_next_token_2279
C_next_token_2278
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #34 wz
 if_nz jmp #\C_next_token_2282
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098157_0000000d_match_literal_L000177
 jmp #\@C_next_token_2283
C_next_token_2282
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #167 wz
 if_z jmp #\C_next_token_2286
 cmps r22,  #39 wz
 if_nz jmp #\C_next_token_2284
C_next_token_2286
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098159_0000000d_find_eol_L000179
 jmp #\@C_next_token_2285
C_next_token_2284
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_next_token_2285
C_next_token_2283
C_next_token_2279
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 mov r20, ##@C_tmp098020_00000009_nlines_L000040
 rdlong r20, r20
 cmps r22, r20 wcz
 if_a jmp #\C_next_token_2287
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_nz jmp #\C_next_token_2273
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #167 wz
 if_z jmp #\C_next_token_2273
 cmps r22,  #39 wz
 if_z jmp #\C_next_token_2273
C_next_token_2287
C_next_token_2275
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098068_0000000c_do_while_L000088
 calld PA,#NEWF
 sub SP, #12
 calld PA,#PSHM
 long $f00000
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 mov r21, #0
 mov r23, #0
 mov r2, #184
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_z jmp #\C_tmp098068_0000000c_do_while_L000088_2289
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098068_0000000c_do_while_L000088_2288
C_tmp098068_0000000c_do_while_L000088_2289
 mov r22, ##@C_tmp098011_00000009_nwhiles_L000031
 rdlong r22, r22
 cmps r22,  #31 wcz
 if_b jmp #\C_tmp098068_0000000c_do_while_L000088_2291
 mov r2, #24
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098068_0000000c_do_while_L000088_2288
C_tmp098068_0000000c_do_while_L000088_2291
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098068_0000000c_do_while_L000088_2297
 mov r22, ##@C_tmp098011_00000009_nwhiles_L000031
 rdlong r22, r22
 shl r22, #2
 mov r20, ##@C_tmp098010_00000009_whilestack_L000030
 adds r22, r20
 mov r20, FP
 sub r20, #-(-16)
 rdlong r20, r20
 wrlong r20, r22
 mov r22, ##@C_tmp098011_00000009_nwhiles_L000031
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098011_00000009_nwhiles_L000031
 mov r23, #0
 jmp #\@C_tmp098068_0000000c_do_while_L000088_2294
C_tmp098068_0000000c_do_while_L000088_2296
 mov BC, #0
 calld PA,#CALA
 long @C_next_token
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098068_0000000c_do_while_L000088_2299
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #1 wz
 if_nz jmp #\C_tmp098068_0000000c_do_while_L000088_2301
 mov r2, #25
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098068_0000000c_do_while_L000088_2288
C_tmp098068_0000000c_do_while_L000088_2301
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #184 wz
 if_nz jmp #\C_tmp098068_0000000c_do_while_L000088_2303
 adds r21, #1
 jmp #\@C_tmp098068_0000000c_do_while_L000088_2300
C_tmp098068_0000000c_do_while_L000088_2303
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #185 wz
 if_nz jmp #\C_tmp098068_0000000c_do_while_L000088_2300
 cmps r21,  #0 wcz
 if_be jmp #\C_tmp098068_0000000c_do_while_L000088_2307
 subs r21, #1
 jmp #\@C_tmp098068_0000000c_do_while_L000088_2300
C_tmp098068_0000000c_do_while_L000088_2307
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 mov r23, r22
 adds r23, #1
 jmp #\@C_tmp098068_0000000c_do_while_L000088_2298
C_tmp098068_0000000c_do_while_L000088_2299
 mov r23, ##-1
 jmp #\@C_tmp098068_0000000c_do_while_L000088_2298
C_tmp098068_0000000c_do_while_L000088_2300
C_tmp098068_0000000c_do_while_L000088_2297
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098068_0000000c_do_while_L000088_2296
C_tmp098068_0000000c_do_while_L000088_2298
C_tmp098068_0000000c_do_while_L000088_2294
 mov r0, r23
C_tmp098068_0000000c_do_while_L000088_2288
 calld PA,#POPM
 add SP, #12
 calld PA,#RETF
 alignl
C_tmp098069_0000000c_do_wend_L000089
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $500000
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r2, #185
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098011_00000009_nwhiles_L000031
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098069_0000000c_do_wend_L000089_2310
 mov r22, ##@C_tmp098011_00000009_nwhiles_L000031
 rdlong r22, r22
 subs r22, #1
 wrlong r22, ##@C_tmp098011_00000009_nwhiles_L000031
 shl r22, #2
 mov r20, ##@C_tmp098010_00000009_whilestack_L000030
 adds r22, r20
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098069_0000000c_do_wend_L000089_2311
C_tmp098069_0000000c_do_wend_L000089_2310
 mov r2, #23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098069_0000000c_do_wend_L000089_2309
C_tmp098069_0000000c_do_wend_L000089_2311
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
C_tmp098069_0000000c_do_wend_L000089_2309
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
 alignl
C_tmp098070_0000000c_do_gosub_L000090
 calld PA,#NEWF
 sub SP, #24
 calld PA,#PSHM
 long $d00000
 mov r23, #0
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r2, #177
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, FP
 sub r2, #-(-20)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098165_0000000d_getlineindex_L000185
 cmps r0,  #0 wcz
 if_be jmp #\C_tmp098070_0000000c_do_gosub_L000090_2313
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098070_0000000c_do_gosub_L000090_2314
C_tmp098070_0000000c_do_gosub_L000090_2313
 mov r2, #1
 mov r3, FP
 sub r3, #-(-28)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-28)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r22, r0
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098044_0000000b_findline_L000064
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
C_tmp098070_0000000c_do_gosub_L000090_2314
 mov r22, ##@C_tmp098013_00000009_ngosubs_L000033
 rdlong r22, r22
 cmps r22,  #31 wcz
 if_b jmp #\C_tmp098070_0000000c_do_gosub_L000090_2316
 mov r2, #28
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098070_0000000c_do_gosub_L000090_2312
C_tmp098070_0000000c_do_gosub_L000090_2316
 mov r22, ##@C_tmp098013_00000009_ngosubs_L000033
 rdlong r22, r22
 shl r22, #2
 mov r20, ##@C_tmp098012_00000009_gosubstack_L000032
 adds r22, r20
 mov r20, FP
 sub r20, #-(-12)
 rdlong r20, r20
 adds r20, #1
 wrlong r20, r22
 mov r22, ##@C_tmp098013_00000009_ngosubs_L000033
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098013_00000009_ngosubs_L000033
 mov r22, FP
 sub r22, #-(-8)
 rdlong r23, r22
 mov r0, r23
C_tmp098070_0000000c_do_gosub_L000090_2312
 calld PA,#POPM
 add SP, #24
 calld PA,#RETF
 alignl
C_tmp098071_0000000c_do_return_L000091
 calld PA,#NEWF
 sub SP, #16
 calld PA,#PSHM
 long $500000
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r2, #178
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #128 wz
 if_nz jmp #\C_tmp098071_0000000c_do_return_L000091_2319
 mov r2, #1
 mov r3, FP
 sub r3, #-(-20)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-20)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r22, r0
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098044_0000000b_findline_L000064
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
C_tmp098071_0000000c_do_return_L000091_2319
 mov r22, ##@C_tmp098013_00000009_ngosubs_L000033
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098071_0000000c_do_return_L000091_2321
 mov r22, ##@C_tmp098013_00000009_ngosubs_L000033
 rdlong r22, r22
 subs r22, #1
 wrlong r22, ##@C_tmp098013_00000009_ngosubs_L000033
 shl r22, #2
 mov r20, ##@C_tmp098012_00000009_gosubstack_L000032
 adds r22, r20
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098071_0000000c_do_return_L000091_2322
C_tmp098071_0000000c_do_return_L000091_2321
 mov r2, #27
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098071_0000000c_do_return_L000091_2318
C_tmp098071_0000000c_do_return_L000091_2322
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
C_tmp098071_0000000c_do_return_L000091_2318
 calld PA,#POPM
 add SP, #16
 calld PA,#RETF
 alignl
C_tmp098072_0000000c_do_end_L000092
 calld PA,#NEWF
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098042_0000000b_cleanup_L000062
 mov r2, #100
 mov BC, #4
 calld PA,#CALA
 long @C__waitms
 mov r2, #0
 mov BC, #4
 calld PA,#CALA
 long @C_exit
 calld PA,#RETF
 alignl
C_tmp098073_0000000c_do_stop_L000093
 calld PA,#NEWF
 calld PA,#PSHM
 long $400000
 mov r2, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098047_0000000b_lineno_L000067
 mov r22, r0
 mov r2, r22
 mov r3, ##@C_tmp098073_0000000c_do_stop_L000093_2325_L002326
 mov r4, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r4, r4
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fprintf
 add SP, #8
 mov r2, #100
 mov BC, #4
 calld PA,#CALA
 long @C__waitms
 mov r2, #0
 mov BC, #4
 calld PA,#CALA
 long @C_exit
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098303_00000236_line_index_L002327
 calld PA,#NEWF
 calld PA,#PSHM
 long $d00000
 mov r23, r2
 rdbyte r22, r23
 cmps r22,  #198 wz
 if_nz jmp #\C_tmp098303_00000236_line_index_L002327_2329
 mov r22, r23
 adds r22, #4
 rdlong r0, r22
 jmp #\@C_tmp098303_00000236_line_index_L002327_2328
C_tmp098303_00000236_line_index_L002327_2329
 rdbyte r22, r23
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098303_00000236_line_index_L002327_2331
 mov r22, r23
 adds r22, #4
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098044_0000000b_findline_L000064
 mov r22, r0
 jmp #\@C_tmp098303_00000236_line_index_L002327_2328
C_tmp098303_00000236_line_index_L002327_2331
 mov r22, r23
 adds r22, #4
 rdlong r22, r22
 mov r20, ##@C_tmp098303_00000236_line_index_L002327_2336_L002337
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_b jmp #\C_tmp098303_00000236_line_index_L002327_2335
 mov r20, ##@C_tmp098303_00000236_line_index_L002327_2338_L002339
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_be jmp #\C_tmp098303_00000236_line_index_L002327_2333
C_tmp098303_00000236_line_index_L002327_2335
 mov r2, #20
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098303_00000236_line_index_L002327_2333
 mov r22, r23
 adds r22, #4
 rdlong r22, r22
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_floor
 mov r20, r0
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_z jmp #\C_tmp098303_00000236_line_index_L002327_2340
 mov r2, #21
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098303_00000236_line_index_L002327_2340
 mov r22, r23
 adds r22, #4
 rdlong r0, r22
 calld PA,#INFL
 mov r2, r0
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098044_0000000b_findline_L000064
 mov r22, r0
C_tmp098303_00000236_line_index_L002327_2328
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export get_choice
 alignl
C_get_choice
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $e80000
 mov r23, r2
 mov r19, #0
 cmps r23,  #0 wz
 if_nz jmp #\C_get_choice_2343
 mov r19, #0
 jmp #\@C_get_choice_2344
C_get_choice_2343
 cmps r23,  #0 wcz
 if_b jmp #\C_get_choice_2347
 cmps r23,  #255 wcz
 if_be jmp #\C_get_choice_2345
C_get_choice_2347
 mov r2, #30
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r19, ##-1
 jmp #\@C_get_choice_2346
C_get_choice_2345
 mov r21, #0
 jmp #\@C_get_choice_2351
C_get_choice_2348
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098303_00000236_line_index_L002327
 mov r19, r0
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_get_choice_2352
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_get_choice_2353
C_get_choice_2352
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_get_choice_2354
 mov r22, r23
 subs r22, #1
 cmps r21, r22 wz
 if_z jmp #\C_get_choice_2356
 mov r19, #0
 jmp #\@C_get_choice_2350
C_get_choice_2356
C_get_choice_2354
C_get_choice_2353
 adds r21, #1
C_get_choice_2351
 cmps r21, r23 wcz
 if_b jmp #\C_get_choice_2348
C_get_choice_2350
C_get_choice_2346
C_get_choice_2344
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098159_0000000d_find_eol_L000179
 mov r0, r19
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
 alignl
C_tmp098074_0000000c_do_on_L000094
 calld PA,#NEWF
 sub SP, #32
 calld PA,#PSHM
 long $500000
 mov r2, #180
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #210 wz
 if_nz jmp #\C_tmp098074_0000000c_do_on_L000094_2359
 mov r2, #210
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #165
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098074_0000000c_do_on_L000094_2361
 mov r2, FP
 sub r2, #-(-20)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098165_0000000d_getlineindex_L000185
 mov RI, FP
 sub RI, #-(-24)
 wrlong r0, RI
 cmps r0,  #0 wcz
 if_be jmp #\C_tmp098074_0000000c_do_on_L000094_2363
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 wrlong r22, ##@C_tmp098037_0000000b_resume_indx_L000057
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20
 adds r20, #1
 adds r22, r20
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 jmp #\@C_tmp098074_0000000c_do_on_L000094_2364
C_tmp098074_0000000c_do_on_L000094_2363
 mov r2, #1
 mov r3, FP
 sub r3, #-(-36)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-36)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-28)
 wrlong r0, RI
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098074_0000000c_do_on_L000094_2366
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098074_0000000c_do_on_L000094_2368
 mov r22, ##@C_tmp098037_0000000b_resume_indx_L000057
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_be jmp #\C_tmp098074_0000000c_do_on_L000094_2370
 mov r22, ##@C_tmp098035_0000000a_errorlast_L000055
 rdlong r22, r22
 wrlong r22, ##@C_tmp098034_0000000a_errorflag_L000054
 mov r2, ##@C_tmp098036_0000000a_errorindx_L000056
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098047_0000000b_lineno_L000067
 mov r22, r0
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098043_0000000b_reporterror_L000063
 mov r22, #0
 wrlong r22, ##@C_tmp098034_0000000a_errorflag_L000054
 jmp #\@C_tmp098074_0000000c_do_on_L000094_2369
C_tmp098074_0000000c_do_on_L000094_2370
 mov r22, #0
 wrlong r22, ##@C_tmp098037_0000000b_resume_indx_L000057
 jmp #\@C_tmp098074_0000000c_do_on_L000094_2369
C_tmp098074_0000000c_do_on_L000094_2368
 mov RI, FP
 sub RI, #-(-28)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098044_0000000b_findline_L000064
 wrlong r0, ##@C_tmp098037_0000000b_resume_indx_L000057
C_tmp098074_0000000c_do_on_L000094_2369
C_tmp098074_0000000c_do_on_L000094_2366
C_tmp098074_0000000c_do_on_L000094_2364
C_tmp098074_0000000c_do_on_L000094_2361
 mov r0, #0
 jmp #\@C_tmp098074_0000000c_do_on_L000094_2358
C_tmp098074_0000000c_do_on_L000094_2359
 mov r2, #1
 mov r3, FP
 sub r3, #-(-36)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-36)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #165 wz
 if_nz jmp #\C_tmp098074_0000000c_do_on_L000094_2372
 mov r2, #165
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov RI, FP
 sub RI, #-(-12)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_get_choice
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098074_0000000c_do_on_L000094_2373
C_tmp098074_0000000c_do_on_L000094_2372
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #177 wz
 if_nz jmp #\C_tmp098074_0000000c_do_on_L000094_2374
 mov r2, #177
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov RI, FP
 sub RI, #-(-12)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_get_choice
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_a jmp #\C_tmp098074_0000000c_do_on_L000094_2376
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 jmp #\@C_tmp098074_0000000c_do_on_L000094_2358
C_tmp098074_0000000c_do_on_L000094_2376
 mov r22, ##@C_tmp098013_00000009_ngosubs_L000033
 rdlong r22, r22
 cmps r22,  #31 wcz
 if_b jmp #\C_tmp098074_0000000c_do_on_L000094_2378
 mov r2, #28
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098074_0000000c_do_on_L000094_2358
C_tmp098074_0000000c_do_on_L000094_2378
 mov r22, ##@C_tmp098013_00000009_ngosubs_L000033
 rdlong r22, r22
 shl r22, #2
 mov r20, ##@C_tmp098012_00000009_gosubstack_L000032
 adds r22, r20
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 adds r20, #1
 wrlong r20, r22
 mov r22, ##@C_tmp098013_00000009_ngosubs_L000033
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098013_00000009_ngosubs_L000033
C_tmp098074_0000000c_do_on_L000094_2374
C_tmp098074_0000000c_do_on_L000094_2373
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
C_tmp098074_0000000c_do_on_L000094_2358
 calld PA,#POPM
 add SP, #32
 calld PA,#RETF
 alignl
C_tmp098306_00000244_argtype_L002380
 calld PA,#NEWF
 calld PA,#PSHM
 long $f80000
 mov r23, r3
 mov r21, r2
 mov r22, r21
 subs r22, #1
 adds r22, r23
 rdbyte r22, r22
 cmps r22,  #40 wz
 if_nz jmp #\C_tmp098306_00000244_argtype_L002380_2382
 subs r21, #1
C_tmp098306_00000244_argtype_L002380_2382
 mov r22, r21
 subs r22, #1
 adds r22, r23
 rdbyte r19, r22
 cmps r19,  #33 wcz
 if_b jmp #\C_tmp098306_00000244_argtype_L002380_2384
 cmps r19,  #37 wcz
 if_a jmp #\C_tmp098306_00000244_argtype_L002380_2384
 mov r22, r19
 shl r22, #2
 mov r20, ##@C_tmp098306_00000244_argtype_L002380_2391_L002393-132
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098306_00000244_argtype_L002380_2387
 mov r0, #129
 jmp #\@C_tmp098306_00000244_argtype_L002380_2381
C_tmp098306_00000244_argtype_L002380_2388
 mov r0, #131
 jmp #\@C_tmp098306_00000244_argtype_L002380_2381
C_tmp098306_00000244_argtype_L002380_2389
 mov r0, #130
 jmp #\@C_tmp098306_00000244_argtype_L002380_2381
C_tmp098306_00000244_argtype_L002380_2384
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 mov r22, r0
 shl r22, #2
 mov r20, ##@C_tmp098003_00000009_deftype_L000023-260
 adds r22, r20
 rdlong r0, r22
C_tmp098306_00000244_argtype_L002380_2381
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098079_0000000c_do_clear_L000099
 calld PA,#NEWF
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098159_0000000d_find_eol_L000179
 calld PA,#RETF
 alignl
C_tmp098087_0000000c_do_datestring_L000107
 calld PA,#NEWF
 sub SP, #12
 calld PA,#PSHM
 long $f40000
 mov r2, #248
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #61
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r21, r0
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098087_0000000c_do_datestring_L000107_2397
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098087_0000000c_do_datestring_L000107_2396
C_tmp098087_0000000c_do_datestring_L000107_2397
 mov r2, ##0
 mov BC, #4
 calld PA,#CALA
 long @C_time
 mov RI, FP
 sub RI, #-(-16)
 wrlong r0, RI
 mov r2, FP
 sub r2, #-(-16)
 mov BC, #4
 calld PA,#CALA
 long @C_localtime
 mov r23, r0
 mov r2, r23
 adds r2, #20
 mov r3, FP
 sub r3, #-(-12)
 mov r4, r23
 adds r4, #12
 mov r5, FP
 sub r5, #-(-8)
 mov r22, r23
 adds r22, #16
 sub SP, #16
 mov RI, r22
 wrlong RI, --PTRA
 mov RI, ##@C_tmp098087_0000000c_do_datestring_L000107_2401_L002402
 wrlong RI, --PTRA
 mov RI, r21
 wrlong RI, --PTRA
 mov BC, #28
 add SP, #4
 calld PA,#CALA
 long @C_sscanf
 add SP, #24
 cmps r0,  #5 wz
 if_nz jmp #\C_tmp098087_0000000c_do_datestring_L000107_2399
 mov r22, #45
 mov r20, FP
 sub r20, #-(-8)
 rdbyte r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098087_0000000c_do_datestring_L000107_2404
 mov r20, FP
 sub r20, #-(-12)
 rdbyte r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_tmp098087_0000000c_do_datestring_L000107_2403
C_tmp098087_0000000c_do_datestring_L000107_2404
 mov r22, #47
 mov r20, FP
 sub r20, #-(-8)
 rdbyte r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098087_0000000c_do_datestring_L000107_2399
 mov r20, FP
 sub r20, #-(-12)
 rdbyte r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098087_0000000c_do_datestring_L000107_2399
C_tmp098087_0000000c_do_datestring_L000107_2403
 mov r22, #12
 mov r20, r23
 adds r20, #12
 rdlong r20, r20
 cmps r20,  #1 wcz
 if_b jmp #\C_tmp098087_0000000c_do_datestring_L000107_2405
 cmps r20,  #31 wcz
 if_a jmp #\C_tmp098087_0000000c_do_datestring_L000107_2405
 mov r20, r23
 adds r20, #16
 rdlong r20, r20
 cmps r20,  #0 wcz
 if_be jmp #\C_tmp098087_0000000c_do_datestring_L000107_2405
 cmps r20, r22 wcz
 if_ae jmp #\C_tmp098087_0000000c_do_datestring_L000107_2405
 mov r22, r23
 adds r22, #16
 rdlong r20, r22
 subs r20, #1
 wrlong r20, r22
 mov r22, r23
 adds r22, #20
 rdlong r22, r22
 cmps r22,  #100 wcz
 if_ae jmp #\C_tmp098087_0000000c_do_datestring_L000107_2407
 mov r22, r23
 adds r22, #20
 rdlong r20, r22
 adds r20, #100
 wrlong r20, r22
 jmp #\@C_tmp098087_0000000c_do_datestring_L000107_2408
C_tmp098087_0000000c_do_datestring_L000107_2407
 mov r22, r23
 adds r22, #20
 rdlong r20, r22
 mov r18, ##1900
 subs r20, r18
 wrlong r20, r22
C_tmp098087_0000000c_do_datestring_L000107_2408
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_mktime
 mov RI, FP
 sub RI, #-(-16)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-16)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C__settime
 jmp #\@C_tmp098087_0000000c_do_datestring_L000107_2400
C_tmp098087_0000000c_do_datestring_L000107_2405
 mov r2, #38
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r0, ##-1
 jmp #\@C_tmp098087_0000000c_do_datestring_L000107_2396
C_tmp098087_0000000c_do_datestring_L000107_2399
 mov r2, #38
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r0, ##-1
 jmp #\@C_tmp098087_0000000c_do_datestring_L000107_2396
C_tmp098087_0000000c_do_datestring_L000107_2400
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r0, #0
C_tmp098087_0000000c_do_datestring_L000107_2396
 calld PA,#POPM
 add SP, #12
 calld PA,#RETF
 alignl
C_tmp098088_0000000c_do_timestring_L000108
 calld PA,#NEWF
 sub SP, #12
 calld PA,#PSHM
 long $f40000
 mov r2, #249
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #61
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r21, r0
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098088_0000000c_do_timestring_L000108_2410
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##-1
 jmp #\@C_tmp098088_0000000c_do_timestring_L000108_2409
C_tmp098088_0000000c_do_timestring_L000108_2410
 mov r2, ##0
 mov BC, #4
 calld PA,#CALA
 long @C_time
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r2, FP
 sub r2, #-(-8)
 mov BC, #4
 calld PA,#CALA
 long @C_localtime
 mov r23, r0
 mov r2, r23
 mov r3, FP
 sub r3, #-(-16)
 mov r4, r23
 adds r4, #4
 mov r5, FP
 sub r5, #-(-12)
 mov r22, r23
 adds r22, #8
 sub SP, #16
 mov RI, r22
 wrlong RI, --PTRA
 mov RI, ##@C_tmp098087_0000000c_do_datestring_L000107_2401_L002402
 wrlong RI, --PTRA
 mov RI, r21
 wrlong RI, --PTRA
 mov BC, #28
 add SP, #4
 calld PA,#CALA
 long @C_sscanf
 add SP, #24
 cmps r0,  #5 wz
 if_nz jmp #\C_tmp098088_0000000c_do_timestring_L000108_2412
 mov r22, #58
 mov r20, FP
 sub r20, #-(-12)
 rdbyte r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098088_0000000c_do_timestring_L000108_2412
 mov r20, FP
 sub r20, #-(-16)
 rdbyte r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098088_0000000c_do_timestring_L000108_2412
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 mov r20, #0
 cmps r22, r20 wcz
 if_b jmp #\C_tmp098088_0000000c_do_timestring_L000108_2414
 cmps r22,  #23 wcz
 if_a jmp #\C_tmp098088_0000000c_do_timestring_L000108_2414
 mov r22, r23
 adds r22, #4
 rdlong r22, r22
 cmps r22, r20 wcz
 if_b jmp #\C_tmp098088_0000000c_do_timestring_L000108_2414
 mov r18, #59
 cmps r22, r18 wcz
 if_a jmp #\C_tmp098088_0000000c_do_timestring_L000108_2414
 rdlong r22, r23
 cmps r22, r20 wcz
 if_b jmp #\C_tmp098088_0000000c_do_timestring_L000108_2414
 cmps r22, r18 wcz
 if_a jmp #\C_tmp098088_0000000c_do_timestring_L000108_2414
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_mktime
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C__settime
 jmp #\@C_tmp098088_0000000c_do_timestring_L000108_2413
C_tmp098088_0000000c_do_timestring_L000108_2414
 mov r2, #39
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r0, ##-1
 jmp #\@C_tmp098088_0000000c_do_timestring_L000108_2409
C_tmp098088_0000000c_do_timestring_L000108_2412
 mov r2, #39
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r0, ##-1
 jmp #\@C_tmp098088_0000000c_do_timestring_L000108_2409
C_tmp098088_0000000c_do_timestring_L000108_2413
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r0, #0
C_tmp098088_0000000c_do_timestring_L000108_2409
 calld PA,#POPM
 add SP, #12
 calld PA,#RETF
 alignl
C_tmp098089_0000000c_do_swap_L000109
 calld PA,#NEWF
 sub SP, #36
 calld PA,#PSHM
 long $d00000
 mov r2, #235
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, FP
 sub r2, #-(-16)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098103_0000000c_lvalue_L000123
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, FP
 sub r2, #-(-28)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098103_0000000c_lvalue_L000123
 mov r22, FP
 sub r22, #-(-16)
 rdbyte r22, r22
 mov r20, FP
 sub r20, #-(-28)
 rdbyte r20, r20
 cmps r22, r20 wz
 if_z jmp #\C_tmp098089_0000000c_do_swap_L000109_2417
 mov r2, #18
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098089_0000000c_do_swap_L000109_2418
C_tmp098089_0000000c_do_swap_L000109_2417
 mov r22, FP
 sub r22, #-(-16)
 rdbyte r23, r22
 cmps r23,  #129 wz
 if_z jmp #\C_tmp098089_0000000c_do_swap_L000109_2422
 cmps r23,  #130 wz
 if_z jmp #\C_tmp098089_0000000c_do_swap_L000109_2427
 jmp #\@C_tmp098089_0000000c_do_swap_L000109_2419
C_tmp098089_0000000c_do_swap_L000109_2422
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-32)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-20)
 rdlong r20, r20
 rdlong r20, r20
 wrlong r20, r22
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-32)
 rdlong r20, r20
 wrlong r20, r22
 jmp #\@C_tmp098089_0000000c_do_swap_L000109_2420
C_tmp098089_0000000c_do_swap_L000109_2427
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-36)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-20)
 rdlong r20, r20
 rdlong r20, r20
 wrlong r20, r22
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-36)
 rdlong r20, r20
 wrlong r20, r22
 jmp #\@C_tmp098089_0000000c_do_swap_L000109_2420
C_tmp098089_0000000c_do_swap_L000109_2419
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-40)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-20)
 rdlong r20, r20
 rdlong r20, r20
 wrlong r20, r22
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-40)
 rdlong r20, r20
 wrlong r20, r22
C_tmp098089_0000000c_do_swap_L000109_2420
C_tmp098089_0000000c_do_swap_L000109_2418
 calld PA,#POPM
 add SP, #36
 calld PA,#RETF
 alignl
C_tmp098090_0000000c_do_randomize_L000110
 calld PA,#NEWF
 sub SP, #12
 calld PA,#PSHM
 long $500000
 mov r2, #183
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098090_0000000c_do_randomize_L000110_2437
 mov r2, ##@C_tmp098090_0000000c_do_randomize_L000110_2439_L002440
 mov BC, #4
 calld PA,#CALA
 long @C_printf
 jmp #\@C_tmp098090_0000000c_do_randomize_L000110_2442
C_tmp098090_0000000c_do_randomize_L000110_2441
 mov r2, ##@C_tmp098027_0000000a_fpin_L000047
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_fgetc
 mov r22, ##@C_tmp098027_0000000a_fpin_L000047
 rdlong r22, r22
 adds r22, #8
 rdlong r22, r22
 and r22, #16
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098090_0000000c_do_randomize_L000110_2444
 mov r2, #16
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098090_0000000c_do_randomize_L000110_2436
C_tmp098090_0000000c_do_randomize_L000110_2444
C_tmp098090_0000000c_do_randomize_L000110_2442
 mov r2, FP
 sub r2, #-(-8)
 mov r3, ##@C_tmp098050_0000000b_do_write_L000070_895_L000896
 mov r4, ##@C_tmp098027_0000000a_fpin_L000047
 rdlong r4, r4
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fscanf
 add SP, #8
 cmps r0,  #1 wz
 if_nz jmp #\C_tmp098090_0000000c_do_randomize_L000110_2441
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##-32767
 cmps r22, r20 wcz
 if_b jmp #\C_tmp098090_0000000c_do_randomize_L000110_2441
 mov r20, ##32768
 cmps r22, r20 wcz
 if_a jmp #\C_tmp098090_0000000c_do_randomize_L000110_2441
 mov r2, ##@C_tmp098027_0000000a_fpin_L000047
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_fgetc
 jmp #\@C_tmp098090_0000000c_do_randomize_L000110_2438
C_tmp098090_0000000c_do_randomize_L000110_2437
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #234 wz
 if_nz jmp #\C_tmp098090_0000000c_do_randomize_L000110_2446
 mov r2, #234
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, ##0
 mov BC, #4
 calld PA,#CALA
 long @C_time
 mov r22, r0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098090_0000000c_do_randomize_L000110_2447
C_tmp098090_0000000c_do_randomize_L000110_2446
 mov r2, #1
 mov r3, FP
 sub r3, #-(-16)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-16)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
C_tmp098090_0000000c_do_randomize_L000110_2447
C_tmp098090_0000000c_do_randomize_L000110_2438
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_srand
C_tmp098090_0000000c_do_randomize_L000110_2436
 calld PA,#POPM
 add SP, #12
 calld PA,#RETF
 alignl
C_tmp098080_0000000c_do_width_L000100
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $c00000
 mov r2, #199
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov r23, r0
 cmps r23,  #0 wcz
 if_b jmp #\C_tmp098080_0000000c_do_width_L000100_2449
 cmps r23,  #255 wcz
 if_a jmp #\C_tmp098080_0000000c_do_width_L000100_2449
 wrlong r23, ##@C_tmp098024_00000009_width_L000044
 jmp #\@C_tmp098080_0000000c_do_width_L000100_2450
C_tmp098080_0000000c_do_width_L000100_2449
 mov r2, #20
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098080_0000000c_do_width_L000100_2450
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
 alignl
C_tmp098091_0000000c_do_cls_L000111
 calld PA,#NEWF
 mov r2, #204
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098159_0000000d_find_eol_L000179
 mov r2, #12
 mov r3, #1
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_t_char
 add SP, #4
 calld PA,#RETF
 alignl
C_tmp098311_0000025d_getrange_L002452
 calld PA,#NEWF
 calld PA,#PSHM
 long $fc0000
 mov r23, r3
 mov r21, r2
 mov r22, #0
 wrlong r22, r23
 mov r22, ##-1
 wrlong r22, r21
 mov r22, #0
 mov r20, ##@C_tmp098007_00000009_context_L000027
 rdlong r20, r20
 cmp r20, r22 wz
 if_nz jmp #\C_tmp098311_0000025d_getrange_L002452_2454
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #12
 rdlong r20, r20
 mov r19, r20
 cmp r20, r22 wz
 if_z jmp #\C_tmp098311_0000025d_getrange_L002452_2454
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r19, r22
 jmp #\@C_tmp098311_0000025d_getrange_L002452_2455
C_tmp098311_0000025d_getrange_L002452_2454
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #4
 rdlong r20, r20
 mov r19, r22
 adds r19, r20
 jmp #\@C_tmp098311_0000025d_getrange_L002452_2457
C_tmp098311_0000025d_getrange_L002452_2456
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r19, #1
C_tmp098311_0000025d_getrange_L002452_2457
 rdbyte r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098181_00000013_space_or_tab_L000224
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098311_0000025d_getrange_L002452_2456
C_tmp098311_0000025d_getrange_L002452_2455
 rdbyte r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098311_0000025d_getrange_L002452_2459
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098311_0000025d_getrange_L002452_2460
C_tmp098311_0000025d_getrange_L002452_2459
 rdbyte r22, r19
 mov r20, ##@C___ctype+1
 adds r22, r20
 rdbyte r22, r22
 and r22, #3
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098311_0000025d_getrange_L002452_2465
 rdbyte r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 mov r22, r0
 subs r22, #65
 wrlong r22, r23
 rdlong r22, r23
 wrlong r22, r21
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r19, #1
 jmp #\@C_tmp098311_0000025d_getrange_L002452_2465
C_tmp098311_0000025d_getrange_L002452_2464
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r19, #1
C_tmp098311_0000025d_getrange_L002452_2465
 rdbyte r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098181_00000013_space_or_tab_L000224
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098311_0000025d_getrange_L002452_2464
 rdbyte r22, r19
 cmps r22,  #45 wz
 if_nz jmp #\C_tmp098311_0000025d_getrange_L002452_2467
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r19, #1
 jmp #\@C_tmp098311_0000025d_getrange_L002452_2470
C_tmp098311_0000025d_getrange_L002452_2469
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r19, #1
C_tmp098311_0000025d_getrange_L002452_2470
 rdbyte r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098181_00000013_space_or_tab_L000224
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098311_0000025d_getrange_L002452_2469
 rdbyte r22, r19
 mov r20, ##@C___ctype+1
 adds r22, r20
 rdbyte r22, r22
 and r22, #3
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098311_0000025d_getrange_L002452_2472
 rdbyte r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 mov r22, r0
 subs r22, #65
 wrlong r22, r21
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r19, #1
 rdlong r22, r21
 rdlong r20, r23
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098311_0000025d_getrange_L002452_2475
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098311_0000025d_getrange_L002452_2475
C_tmp098311_0000025d_getrange_L002452_2472
C_tmp098311_0000025d_getrange_L002452_2467
C_tmp098311_0000025d_getrange_L002452_2460
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098081_0000000c_do_defint_L000101
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $500000
 mov r2, #187
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098081_0000000c_do_defint_L000101_2479
C_tmp098081_0000000c_do_defint_L000101_2478
 mov r2, FP
 sub r2, #-(-12)
 mov r3, FP
 sub r3, #-(-8)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098311_0000025d_getrange_L002452
 add SP, #4
 jmp #\@C_tmp098081_0000000c_do_defint_L000101_2482
C_tmp098081_0000000c_do_defint_L000101_2481
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, r22
 adds r20, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r20, RI
 shl r22, #2
 mov r20, ##@C_tmp098003_00000009_deftype_L000023
 adds r22, r20
 mov r20, #129
 wrlong r20, r22
C_tmp098081_0000000c_do_defint_L000101_2482
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-12)
 rdlong r20, r20
 cmps r22, r20 wcz
 if_be jmp #\C_tmp098081_0000000c_do_defint_L000101_2481
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098081_0000000c_do_defint_L000101_2484
 mov r0, ##-1
 jmp #\@C_tmp098081_0000000c_do_defint_L000101_2477
C_tmp098081_0000000c_do_defint_L000101_2484
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098081_0000000c_do_defint_L000101_2486
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098081_0000000c_do_defint_L000101_2486
C_tmp098081_0000000c_do_defint_L000101_2479
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098081_0000000c_do_defint_L000101_2478
 mov r0, #0
C_tmp098081_0000000c_do_defint_L000101_2477
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
 alignl
C_tmp098082_0000000c_do_defsng_L000102
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $500000
 mov r2, #188
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098082_0000000c_do_defsng_L000102_2490
C_tmp098082_0000000c_do_defsng_L000102_2489
 mov r2, FP
 sub r2, #-(-12)
 mov r3, FP
 sub r3, #-(-8)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098311_0000025d_getrange_L002452
 add SP, #4
 jmp #\@C_tmp098082_0000000c_do_defsng_L000102_2493
C_tmp098082_0000000c_do_defsng_L000102_2492
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, r22
 adds r20, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r20, RI
 shl r22, #2
 mov r20, ##@C_tmp098003_00000009_deftype_L000023
 adds r22, r20
 mov r20, #130
 wrlong r20, r22
C_tmp098082_0000000c_do_defsng_L000102_2493
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-12)
 rdlong r20, r20
 cmps r22, r20 wcz
 if_be jmp #\C_tmp098082_0000000c_do_defsng_L000102_2492
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098082_0000000c_do_defsng_L000102_2495
 mov r0, ##-1
 jmp #\@C_tmp098082_0000000c_do_defsng_L000102_2488
C_tmp098082_0000000c_do_defsng_L000102_2495
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098082_0000000c_do_defsng_L000102_2497
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098082_0000000c_do_defsng_L000102_2497
C_tmp098082_0000000c_do_defsng_L000102_2490
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098082_0000000c_do_defsng_L000102_2489
 mov r0, #0
C_tmp098082_0000000c_do_defsng_L000102_2488
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
 alignl
C_tmp098083_0000000c_do_defdbl_L000103
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $500000
 mov r2, #189
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098083_0000000c_do_defdbl_L000103_2501
C_tmp098083_0000000c_do_defdbl_L000103_2500
 mov r2, FP
 sub r2, #-(-12)
 mov r3, FP
 sub r3, #-(-8)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098311_0000025d_getrange_L002452
 add SP, #4
 jmp #\@C_tmp098083_0000000c_do_defdbl_L000103_2504
C_tmp098083_0000000c_do_defdbl_L000103_2503
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, r22
 adds r20, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r20, RI
 shl r22, #2
 mov r20, ##@C_tmp098003_00000009_deftype_L000023
 adds r22, r20
 mov r20, #130
 wrlong r20, r22
C_tmp098083_0000000c_do_defdbl_L000103_2504
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-12)
 rdlong r20, r20
 cmps r22, r20 wcz
 if_be jmp #\C_tmp098083_0000000c_do_defdbl_L000103_2503
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098083_0000000c_do_defdbl_L000103_2506
 mov r0, ##-1
 jmp #\@C_tmp098083_0000000c_do_defdbl_L000103_2499
C_tmp098083_0000000c_do_defdbl_L000103_2506
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098083_0000000c_do_defdbl_L000103_2508
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098083_0000000c_do_defdbl_L000103_2508
C_tmp098083_0000000c_do_defdbl_L000103_2501
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098083_0000000c_do_defdbl_L000103_2500
 mov r0, #0
C_tmp098083_0000000c_do_defdbl_L000103_2499
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
 alignl
C_tmp098084_0000000c_do_defstr_L000104
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $500000
 mov r2, #190
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098084_0000000c_do_defstr_L000104_2512
C_tmp098084_0000000c_do_defstr_L000104_2511
 mov r2, FP
 sub r2, #-(-12)
 mov r3, FP
 sub r3, #-(-8)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098311_0000025d_getrange_L002452
 add SP, #4
 jmp #\@C_tmp098084_0000000c_do_defstr_L000104_2515
C_tmp098084_0000000c_do_defstr_L000104_2514
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, r22
 adds r20, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r20, RI
 shl r22, #2
 mov r20, ##@C_tmp098003_00000009_deftype_L000023
 adds r22, r20
 mov r20, #131
 wrlong r20, r22
C_tmp098084_0000000c_do_defstr_L000104_2515
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-12)
 rdlong r20, r20
 cmps r22, r20 wcz
 if_be jmp #\C_tmp098084_0000000c_do_defstr_L000104_2514
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098084_0000000c_do_defstr_L000104_2517
 mov r0, ##-1
 jmp #\@C_tmp098084_0000000c_do_defstr_L000104_2510
C_tmp098084_0000000c_do_defstr_L000104_2517
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098084_0000000c_do_defstr_L000104_2519
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098084_0000000c_do_defstr_L000104_2519
C_tmp098084_0000000c_do_defstr_L000104_2512
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098084_0000000c_do_defstr_L000104_2511
 mov r0, #0
C_tmp098084_0000000c_do_defstr_L000104_2510
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
 alignl
C_tmp098077_0000000c_do_deffn_L000097
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $f50000
 mov r22, ##@C_tmp098006_00000009_nfunctions_L000026
 rdlong r22, r22
 cmps r22,  #31 wcz
 if_b jmp #\C_tmp098077_0000000c_do_deffn_L000097_2522
 mov r2, #34
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098077_0000000c_do_deffn_L000097_2521
C_tmp098077_0000000c_do_deffn_L000097_2522
 mov r22, #316
 mov r20, ##@C_tmp098006_00000009_nfunctions_L000026
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098005_00000009_functions_L000025
 mov r2, r0
 adds r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov r21, r0
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, r21
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 cmps r21,  #2 wcz
 if_be jmp #\C_tmp098077_0000000c_do_deffn_L000097_2524
 mov r22, #316
 mov r20, ##@C_tmp098006_00000009_nfunctions_L000026
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098005_00000009_functions_L000025
 adds r22, r0
 rdbyte r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 cmps r0,  #70 wz
 if_nz jmp #\C_tmp098077_0000000c_do_deffn_L000097_2524
 mov r22, #316
 mov r20, ##@C_tmp098006_00000009_nfunctions_L000026
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098005_00000009_functions_L000025+1
 adds r22, r0
 rdbyte r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 cmps r0,  #78 wz
 if_nz jmp #\C_tmp098077_0000000c_do_deffn_L000097_2524
 mov r2, r21
 subs r2, #2
 mov r22, #316
 mov r20, ##@C_tmp098006_00000009_nfunctions_L000026
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, r0
 mov r20, ##@C_tmp098005_00000009_functions_L000025+2
 mov r3, r22
 adds r3, r20
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098306_00000244_argtype_L002380
 add SP, #4
 mov r18, ##@C_tmp098005_00000009_functions_L000025+41
 adds r22, r18
 mov r20, r0
 wrbyte r20, r22
 mov r22, #316
 mov r20, ##@C_tmp098006_00000009_nfunctions_L000026
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098005_00000009_functions_L000025+44
 adds r22, r0
 mov r20, #0
 wrlong r20, r22
 mov r23, #0
 mov r22, r21
 subs r22, #1
 mov r20, #316
 mov r18, ##@C_tmp098006_00000009_nfunctions_L000026
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098005_00000009_functions_L000025
 adds r20, r0
 adds r22, r20
 rdbyte r22, r22
 cmps r22,  #40 wz
 if_nz jmp #\C_tmp098077_0000000c_do_deffn_L000097_2530
 mov r22, r21
 subs r22, #1
 mov r20, #316
 mov r18, ##@C_tmp098006_00000009_nfunctions_L000026
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098005_00000009_functions_L000025
 adds r20, r0
 adds r22, r20
 mov r20, #0
 wrbyte r20, r22
 jmp #\@C_tmp098077_0000000c_do_deffn_L000097_2533
C_tmp098077_0000000c_do_deffn_L000097_2532
 mov r22, #52

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, #316
 mov r20, ##@C_tmp098006_00000009_nfunctions_L000026
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098005_00000009_functions_L000025+48
 adds r22, r0
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 mov r2, r20
 adds r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov r21, r0
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, r21
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r2, r21
 mov r22, #52

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r22, r0
 mov r20, #316
 mov r18, ##@C_tmp098006_00000009_nfunctions_L000026
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, r0
 mov r18, ##@C_tmp098005_00000009_functions_L000025+48
 adds r18, r20
 mov r3, r22
 adds r3, r18
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098306_00000244_argtype_L002380
 add SP, #4
 mov r16, ##@C_tmp098005_00000009_functions_L000025+48
 adds r20, r16
 adds r22, r20
 adds r22, #41
 mov r20, r0
 wrbyte r20, r22
 adds r23, #1
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098077_0000000c_do_deffn_L000097_2534
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098077_0000000c_do_deffn_L000097_2533
 cmps r23,  #5 wcz
 if_b jmp #\C_tmp098077_0000000c_do_deffn_L000097_2532
C_tmp098077_0000000c_do_deffn_L000097_2534
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098077_0000000c_do_deffn_L000097_2540
 mov r2, #35
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098077_0000000c_do_deffn_L000097_2521
C_tmp098077_0000000c_do_deffn_L000097_2540
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098077_0000000c_do_deffn_L000097_2530
 mov r22, #316
 mov r20, ##@C_tmp098006_00000009_nfunctions_L000026
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098005_00000009_functions_L000025+44
 adds r22, r0
 wrlong r23, r22
 mov r2, #61
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #316
 mov r20, ##@C_tmp098006_00000009_nfunctions_L000026
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098005_00000009_functions_L000025+308
 adds r22, r0
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 wrlong r20, r22
 mov r22, #316
 mov r20, ##@C_tmp098006_00000009_nfunctions_L000026
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098005_00000009_functions_L000025+312
 adds r22, r0
 mov r20, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r20, r20
 wrlong r20, r22
 mov r22, ##@C_tmp098006_00000009_nfunctions_L000026
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098006_00000009_nfunctions_L000026
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098159_0000000d_find_eol_L000179
 jmp #\@C_tmp098077_0000000c_do_deffn_L000097_2525
C_tmp098077_0000000c_do_deffn_L000097_2524
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098077_0000000c_do_deffn_L000097_2525
C_tmp098077_0000000c_do_deffn_L000097_2521
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
 alignl
C_tmp098078_0000000c_do_defusr_L000098
 calld PA,#NEWF
 sub SP, #28
 calld PA,#PSHM
 long $500000
 mov r2, #28
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #61 wz
 if_nz jmp #\C_tmp098078_0000000c_do_defusr_L000098_2546
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098078_0000000c_do_defusr_L000098_2547
C_tmp098078_0000000c_do_defusr_L000098_2546
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #128 wz
 if_nz jmp #\C_tmp098078_0000000c_do_defusr_L000098_2548
 mov r2, FP
 sub r2, #-(-20)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098163_0000000d_getvalue_L000183
 mov RI, FP
 sub RI, #-(-24)
 wrlong r0, RI
 mov r2, #128
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-20)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_z jmp #\C_tmp098078_0000000c_do_defusr_L000098_2550
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098078_0000000c_do_defusr_L000098_2550
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_b jmp #\C_tmp098078_0000000c_do_defusr_L000098_2555
 cmps r22,  #9 wcz
 if_be jmp #\C_tmp098078_0000000c_do_defusr_L000098_2553
C_tmp098078_0000000c_do_defusr_L000098_2555
 mov r2, #50
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098078_0000000c_do_defusr_L000098_2553
C_tmp098078_0000000c_do_defusr_L000098_2548
C_tmp098078_0000000c_do_defusr_L000098_2547
 mov r2, #61
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-32)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-32)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 shl r22, #2
 mov r20, ##@C_tmp098004_00000009_usr_function_L000024
 adds r22, r20
 mov r20, FP
 sub r20, #-(-12)
 rdlong r20, r20
 wrlong r20, r22
 calld PA,#POPM
 add SP, #28
 calld PA,#RETF
 alignl
C_tmp098059_0000000c_do_input_L000079
 calld PA,#NEWF
 sub SP, ##1040
 calld PA,#PSHM
 long $f00000
 mov r2, #166
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #35 wz
 if_nz jmp #\C_tmp098059_0000000c_do_input_L000079_2557
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098061_0000000c_do_fileinput_L000081
 jmp #\@C_tmp098059_0000000c_do_input_L000079_2556
C_tmp098059_0000000c_do_input_L000079_2557
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #59 wz
 if_nz jmp #\C_tmp098059_0000000c_do_input_L000079_2559
 mov r2, #59
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098059_0000000c_do_input_L000079_2559
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #34 wz
 if_nz jmp #\C_tmp098059_0000000c_do_input_L000079_2561
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098150_0000000d_stringliteral_L000170
 mov RI, ##-1044
 adds RI, FP
 wrlong r0, RI
 mov r22, ##-1044
 adds r22, FP
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098059_0000000c_do_input_L000079_2574
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098059_0000000c_do_input_L000079_2565
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov RI, FP
 adds RI, ##(-1044)
 rdlong r2, RI
 mov r3, ##@C_tmp098059_0000000c_do_input_L000079_2567_L002568
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_printf
 add SP, #4
 mov r2, ##@C___stdout
 mov BC, #4
 calld PA,#CALA
 long @C_fflush
 jmp #\@C_tmp098059_0000000c_do_input_L000079_2566
C_tmp098059_0000000c_do_input_L000079_2565
 mov r2, #59
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov RI, FP
 adds RI, ##(-1044)
 rdlong r2, RI
 mov r3, ##@C_tmp098059_0000000c_do_input_L000079_2569_L002570
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_printf
 add SP, #4
 mov r2, ##@C___stdout
 mov BC, #4
 calld PA,#CALA
 long @C_fflush
C_tmp098059_0000000c_do_input_L000079_2566
 mov RI, FP
 adds RI, ##(-1044)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_free
 jmp #\@C_tmp098059_0000000c_do_input_L000079_2574
C_tmp098059_0000000c_do_input_L000079_2561
 mov r2, ##@C_tmp098059_0000000c_do_input_L000079_2571_L002572
 mov BC, #4
 calld PA,#CALA
 long @C_printf
 jmp #\@C_tmp098059_0000000c_do_input_L000079_2574
C_tmp098059_0000000c_do_input_L000079_2573
 mov r2, FP
 sub r2, #-(-16)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098103_0000000c_lvalue_L000123
 mov r22, FP
 sub r22, #-(-16)
 rdbyte r21, r22
 cmps r21,  #129 wz
 if_z jmp #\C_tmp098059_0000000c_do_input_L000079_2581
 cmps r21,  #130 wz
 if_z jmp #\C_tmp098059_0000000c_do_input_L000079_2588
 cmps r21,  #131 wz
 if_z jmp #\C_tmp098059_0000000c_do_input_L000079_2593
 jmp #\@C_tmp098059_0000000c_do_input_L000079_2577
C_tmp098059_0000000c_do_input_L000079_2580
 mov r2, ##@C_tmp098027_0000000a_fpin_L000047
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_fgetc
 mov r22, ##@C_tmp098027_0000000a_fpin_L000047
 rdlong r22, r22
 adds r22, #8
 rdlong r22, r22
 and r22, #16
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098059_0000000c_do_input_L000079_2584
 mov r2, #16
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098059_0000000c_do_input_L000079_2556
C_tmp098059_0000000c_do_input_L000079_2584
C_tmp098059_0000000c_do_input_L000079_2581
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov r3, ##@C_tmp098050_0000000b_do_write_L000070_895_L000896
 mov r4, ##@C_tmp098027_0000000a_fpin_L000047
 rdlong r4, r4
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fscanf
 add SP, #8
 cmps r0,  #1 wz
 if_nz jmp #\C_tmp098059_0000000c_do_input_L000079_2580
 mov r2, ##@C_tmp098027_0000000a_fpin_L000047
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_fgetc
 mov r22, #1
 wrlong r22, ##@C_tmp098022_00000009_pos_L000042
 jmp #\@C_tmp098059_0000000c_do_input_L000079_2577
C_tmp098059_0000000c_do_input_L000079_2587
 mov r2, ##@C_tmp098027_0000000a_fpin_L000047
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_fgetc
 mov r22, ##@C_tmp098027_0000000a_fpin_L000047
 rdlong r22, r22
 adds r22, #8
 rdlong r22, r22
 and r22, #16
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098059_0000000c_do_input_L000079_2591
 mov r2, #16
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098059_0000000c_do_input_L000079_2556
C_tmp098059_0000000c_do_input_L000079_2591
C_tmp098059_0000000c_do_input_L000079_2588
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov r3, ##@C_tmp098061_0000000c_do_fileinput_L000081_1691_L001692
 mov r4, ##@C_tmp098027_0000000a_fpin_L000047
 rdlong r4, r4
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fscanf
 add SP, #8
 cmps r0,  #1 wz
 if_nz jmp #\C_tmp098059_0000000c_do_input_L000079_2587
 mov r2, ##@C_tmp098027_0000000a_fpin_L000047
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_fgetc
 mov r22, #1
 wrlong r22, ##@C_tmp098022_00000009_pos_L000042
 jmp #\@C_tmp098059_0000000c_do_input_L000079_2577
C_tmp098059_0000000c_do_input_L000079_2593
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098059_0000000c_do_input_L000079_2594
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##0
 wrlong r20, r22
C_tmp098059_0000000c_do_input_L000079_2594
 mov r2, ##@C_tmp098027_0000000a_fpin_L000047
 rdlong r2, r2
 mov r3, ##1024
 mov r4, FP
 adds r4, ##(-1040)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fgets
 add SP, #8
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098059_0000000c_do_input_L000079_2599
 mov r2, #16
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098059_0000000c_do_input_L000079_2556
C_tmp098059_0000000c_do_input_L000079_2599
 mov r2, #10
 mov r3, FP
 adds r3, ##(-1040)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strchr
 add SP, #4
 mov r23, r0
 mov r22, r23
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098059_0000000c_do_input_L000079_2601
 mov r2, #19
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098059_0000000c_do_input_L000079_2556
C_tmp098059_0000000c_do_input_L000079_2601
 mov r22, #0
 wrbyte r22, r23
 mov r2, FP
 adds r2, ##(-1040)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 wrlong r0, r20
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098059_0000000c_do_input_L000079_2604
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098059_0000000c_do_input_L000079_2556
C_tmp098059_0000000c_do_input_L000079_2604
 mov r22, #1
 wrlong r22, ##@C_tmp098022_00000009_pos_L000042
C_tmp098059_0000000c_do_input_L000079_2577
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098059_0000000c_do_input_L000079_2607
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098059_0000000c_do_input_L000079_2607
C_tmp098059_0000000c_do_input_L000079_2574
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098059_0000000c_do_input_L000079_2610
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #175 wz
 if_z jmp #\C_tmp098059_0000000c_do_input_L000079_2610
 cmps r22,  #179 wz
 if_nz jmp #\C_tmp098059_0000000c_do_input_L000079_2573
C_tmp098059_0000000c_do_input_L000079_2610
C_tmp098059_0000000c_do_input_L000079_2556
 calld PA,#POPM
 add SP, ##1040
 calld PA,#RETF
' Catalina Export wait_key
 alignl
C_wait_key
 calld PA,#NEWF
 calld PA,#PSHM
 long $400000
 mov BC, #0
 calld PA,#CALA
 long @C_k_wait
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098060_0000000c_do_lineinput_L000080
 calld PA,#NEWF
 sub SP, #276
 calld PA,#PSHM
 long $f00000
 mov r22, ##0
 mov RI, FP
 sub RI, #-(-276)
 wrlong r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-280)
 wrlong r22, RI
 mov r21, #0
 mov r2, #198
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #166
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #35 wz
 if_nz jmp #\C_tmp098060_0000000c_do_lineinput_L000080_2613
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098062_0000000c_do_filelineinput_L000082
 jmp #\@C_tmp098060_0000000c_do_lineinput_L000080_2612
C_tmp098060_0000000c_do_lineinput_L000080_2613
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #59 wz
 if_nz jmp #\C_tmp098060_0000000c_do_lineinput_L000080_2615
 mov r22, #1
 mov RI, FP
 sub RI, #-(-280)
 wrlong r22, RI
 mov r2, #59
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098060_0000000c_do_lineinput_L000080_2615
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #34 wz
 if_nz jmp #\C_tmp098060_0000000c_do_lineinput_L000080_2617
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098150_0000000d_stringliteral_L000170
 mov RI, FP
 sub RI, #-(-276)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-276)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098060_0000000c_do_lineinput_L000080_2619
 mov r2, #59
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov RI, FP
 sub RI, #-(-276)
 rdlong r2, RI
 mov r3, ##@C_tmp098060_0000000c_do_lineinput_L000080_2621_L002622
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_printf
 add SP, #4
 mov r2, ##@C___stdout
 mov BC, #4
 calld PA,#CALA
 long @C_fflush
C_tmp098060_0000000c_do_lineinput_L000080_2619
 mov RI, FP
 sub RI, #-(-276)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_tmp098060_0000000c_do_lineinput_L000080_2617
 mov r2, FP
 sub r2, #-(-272)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098103_0000000c_lvalue_L000123
 mov r22, FP
 sub r22, #-(-272)
 rdbyte r22, r22
 cmps r22,  #131 wz
 if_z jmp #\C_tmp098060_0000000c_do_lineinput_L000080_2623
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098060_0000000c_do_lineinput_L000080_2612
C_tmp098060_0000000c_do_lineinput_L000080_2623
 mov r22, FP
 sub r22, #-(-264)
 rdlong r22, r22
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098060_0000000c_do_lineinput_L000080_2631
 mov r22, FP
 sub r22, #-(-264)
 rdlong r22, r22
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r22, FP
 sub r22, #-(-264)
 rdlong r22, r22
 mov r20, ##0
 wrlong r20, r22
 jmp #\@C_tmp098060_0000000c_do_lineinput_L000080_2631
C_tmp098060_0000000c_do_lineinput_L000080_2630
 mov BC, #0
 calld PA,#CALA
 long @C_wait_key
 mov r22, r0
 mov r23, r22
 mov r22, r23
 and r22, cviu_m1
 mov r20, ##-1
 cmps r22, r20 wz
 if_z jmp #\C_tmp098060_0000000c_do_lineinput_L000080_2637
 cmps r22,  #3 wz
 if_z jmp #\C_tmp098060_0000000c_do_lineinput_L000080_2637
 cmps r22,  #13 wz
 if_z jmp #\C_tmp098060_0000000c_do_lineinput_L000080_2637
 cmps r22,  #10 wz
 if_nz jmp #\C_tmp098060_0000000c_do_lineinput_L000080_2633
C_tmp098060_0000000c_do_lineinput_L000080_2637
 jmp #\@C_tmp098060_0000000c_do_lineinput_L000080_2632
C_tmp098060_0000000c_do_lineinput_L000080_2633
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, FP
 sub r20, #-(-260)
 adds r22, r20
 wrbyte r23, r22
 mov r2, r23
 and r2, cviu_m1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098269_000000a3_print_char_L000856
C_tmp098060_0000000c_do_lineinput_L000080_2631
 cmps r21,  #255 wcz
 if_b jmp #\C_tmp098060_0000000c_do_lineinput_L000080_2630
C_tmp098060_0000000c_do_lineinput_L000080_2632
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, FP
 sub r20, #-(-260)
 adds r22, r20
 mov r20, #0
 wrbyte r20, r22
 mov r2, r21
 mov r3, FP
 sub r3, #-(-260)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098176_0000000e_mystrndup_L000196
 add SP, #4
 mov r20, FP
 sub r20, #-(-264)
 rdlong r20, r20
 wrlong r0, r20
 mov r22, FP
 sub r22, #-(-264)
 rdlong r22, r22
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098060_0000000c_do_lineinput_L000080_2639
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098060_0000000c_do_lineinput_L000080_2612
C_tmp098060_0000000c_do_lineinput_L000080_2639
 mov r22, FP
 sub r22, #-(-280)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098060_0000000c_do_lineinput_L000080_2642
 mov r2, #10
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098269_000000a3_print_char_L000856
C_tmp098060_0000000c_do_lineinput_L000080_2642
 mov r22, #1
 wrlong r22, ##@C_tmp098022_00000009_pos_L000042
C_tmp098060_0000000c_do_lineinput_L000080_2612
 calld PA,#POPM
 add SP, #276
 calld PA,#RETF
 alignl
C_tmp098063_0000000c_do_rem_L000083
 calld PA,#NEWF
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098159_0000000d_find_eol_L000179
 mov r0, #0
 calld PA,#RETF
 alignl
C_tmp098064_0000000c_do_tron_L000084
 calld PA,#NEWF
 calld PA,#PSHM
 long $400000
 mov r2, #201
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #1
 wrlong r22, ##@C_tmp098021_00000009_tron_L000041
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098065_0000000c_do_troff_L000085
 calld PA,#NEWF
 calld PA,#PSHM
 long $400000
 mov r2, #202
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #0
 wrlong r22, ##@C_tmp098021_00000009_tron_L000041
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098103_0000000c_lvalue_L000123
 calld PA,#NEWF
 sub SP, #204
 calld PA,#PSHM
 long $f40000
 mov r23, r2
 mov r22, ##0
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 mov r22, ##0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, ##0
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, #135
 wrbyte r22, r23
 mov r22, r23
 adds r22, #4
 mov r20, #0
 wrlong r20, r22
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #3 wcz
 if_b jmp #\C_tmp098103_0000000c_lvalue_L000123_2648
 cmps r22,  #8 wcz
 if_a jmp #\C_tmp098103_0000000c_lvalue_L000123_2672
 shl r22, #2
 mov r20, ##@C_tmp098103_0000000c_lvalue_L000123_2673_L002675-12
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098103_0000000c_lvalue_L000123_2672
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #129 wcz
 if_b jmp #\C_tmp098103_0000000c_lvalue_L000123_2648
 cmps r22,  #134 wcz
 if_a jmp #\C_tmp098103_0000000c_lvalue_L000123_2648
 shl r22, #2
 mov r20, ##@C_tmp098103_0000000c_lvalue_L000123_2677_L002679-516
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098103_0000000c_lvalue_L000123_2650
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov RI, FP
 sub RI, #-(-40)
 wrlong r0, RI
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 subs r22, #3
 adds r22, #129
 wrbyte r22, r23
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 mov r20, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098103_0000000c_lvalue_L000123_2651
 rdbyte r22, r23
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098103_0000000c_lvalue_L000123_2653
 mov r22, r23
 adds r22, #8
 mov r20, #52
 mov r18, FP
 sub r18, #-(-40)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098015_00000009_variables_L000035
 rdlong r20, r20
 adds r20, r0
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2647
C_tmp098103_0000000c_lvalue_L000123_2653
 rdbyte r22, r23
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098103_0000000c_lvalue_L000123_2655
 mov r22, r23
 adds r22, #8
 mov r20, #52
 mov r18, FP
 sub r18, #-(-40)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098015_00000009_variables_L000035
 rdlong r20, r20
 adds r20, r0
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2647
C_tmp098103_0000000c_lvalue_L000123_2655
 mov r22, r23
 adds r22, #4
 mov r20, #52
 mov r18, FP
 sub r18, #-(-40)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098015_00000009_variables_L000035
 rdlong r20, r20
 adds r20, r0
 adds r20, #44
 rdlong r20, r20
 wrlong r20, r22
 mov r22, r23
 adds r22, #8
 mov r20, #52
 mov r18, FP
 sub r18, #-(-40)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098015_00000009_variables_L000035
 rdlong r20, r20
 adds r20, r0
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2647
C_tmp098103_0000000c_lvalue_L000123_2651
 mov r2, #99
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2647
C_tmp098103_0000000c_lvalue_L000123_2657
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 wrbyte r22, r23
 mov r2, FP
 sub r2, #-(-84)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov RI, FP
 sub RI, #-(-88)
 wrlong r0, RI
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, FP
 sub r2, #-(-84)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098119_0000000d_findvariable_L000139
 mov RI, FP
 sub RI, #-(-16)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098103_0000000c_lvalue_L000123_2658
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098103_0000000c_lvalue_L000123_2660
 mov r2, FP
 sub r2, #-(-84)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098127_0000000d_addfloat_L000147
 mov RI, FP
 sub RI, #-(-16)
 wrlong r0, RI
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-16)
 rdlong r20, r20
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2647
C_tmp098103_0000000c_lvalue_L000123_2660
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098103_0000000c_lvalue_L000123_2662
 mov r2, FP
 sub r2, #-(-84)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098126_0000000d_addinteger_L000146
 mov RI, FP
 sub RI, #-(-16)
 wrlong r0, RI
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-16)
 rdlong r20, r20
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2647
C_tmp098103_0000000c_lvalue_L000123_2662
 mov r2, FP
 sub r2, #-(-84)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098128_0000000d_addstring_L000148
 mov RI, FP
 sub RI, #-(-16)
 wrlong r0, RI
 mov r22, r23
 adds r22, #4
 mov r20, FP
 sub r20, #-(-16)
 rdlong r20, r20
 adds r20, #44
 rdlong r20, r20
 wrlong r20, r22
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-16)
 rdlong r20, r20
 adds r20, #48
 wrlong r20, r22
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2647
C_tmp098103_0000000c_lvalue_L000123_2658
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098103_0000000c_lvalue_L000123_2649
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2647
C_tmp098103_0000000c_lvalue_L000123_2666
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov RI, FP
 sub RI, #-(-40)
 wrlong r0, RI
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 subs r22, #6
 adds r22, #129
 wrbyte r22, r23
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 mov r20, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098103_0000000c_lvalue_L000123_2667
 mov r22, #76
 mov r20, FP
 sub r20, #-(-40)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r22, r0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 adds r22, #41
 rdbyte r22, r22
 wrbyte r22, r23
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2649
C_tmp098103_0000000c_lvalue_L000123_2667
 mov r2, #99
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2647
C_tmp098103_0000000c_lvalue_L000123_2669
 mov r2, FP
 sub r2, #-(-84)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov RI, FP
 sub RI, #-(-88)
 wrlong r0, RI
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, FP
 sub r2, #-(-84)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098121_0000000d_finddimvar_L000141
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098103_0000000c_lvalue_L000123_2670
 mov r2, FP
 sub r2, #-(-84)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098130_0000000d_autodimvar_L000150
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
C_tmp098103_0000000c_lvalue_L000123_2670
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 subs r22, #132
 adds r22, #129
 wrbyte r22, r23
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2649
C_tmp098103_0000000c_lvalue_L000123_2648
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2647
C_tmp098103_0000000c_lvalue_L000123_2649
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098103_0000000c_lvalue_L000123_2681
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 adds r22, #48
 rdlong r21, r22
 cmps r21,  #1 wcz
 if_b jmp #\C_tmp098103_0000000c_lvalue_L000123_2683
 cmps r21,  #5 wcz
 if_a jmp #\C_tmp098103_0000000c_lvalue_L000123_2683
 mov r22, r21
 shl r22, #2
 mov r20, ##@C_tmp098103_0000000c_lvalue_L000123_2721_L002723-4
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098103_0000000c_lvalue_L000123_2686
 mov r2, #1
 mov r3, FP
 sub r3, #-(-96)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-96)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098103_0000000c_lvalue_L000123_2684
 mov RI, FP
 sub RI, #-(-36)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-8)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #4
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2684
C_tmp098103_0000000c_lvalue_L000123_2689
 mov r2, #1
 mov r3, FP
 sub r3, #-(-104)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-104)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-112)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-112)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-32)
 wrlong r0, RI
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098103_0000000c_lvalue_L000123_2684
 mov RI, FP
 sub RI, #-(-32)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-36)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-8)
 rdlong r4, RI
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #8
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2684
C_tmp098103_0000000c_lvalue_L000123_2694
 mov r2, #1
 mov r3, FP
 sub r3, #-(-120)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-120)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-128)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-128)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-32)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-136)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-136)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-28)
 wrlong r0, RI
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098103_0000000c_lvalue_L000123_2684
 mov RI, FP
 sub RI, #-(-28)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-32)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-36)
 rdlong r4, RI
 mov RI, FP
 sub RI, #-(-8)
 rdlong r5, RI
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #12
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2684
C_tmp098103_0000000c_lvalue_L000123_2701
 mov r2, #1
 mov r3, FP
 sub r3, #-(-144)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-144)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-152)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-152)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-32)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-160)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-160)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-28)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-168)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-168)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-24)
 wrlong r0, RI
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098103_0000000c_lvalue_L000123_2684
 mov RI, FP
 sub RI, #-(-24)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-28)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-32)
 rdlong r4, RI
 mov RI, FP
 sub RI, #-(-36)
 rdlong r5, RI
 sub SP, #16
 calld PA,#PSHF
 long -8
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #16
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2684
C_tmp098103_0000000c_lvalue_L000123_2710
 mov r2, #1
 mov r3, FP
 sub r3, #-(-176)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-176)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-184)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-184)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-32)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-192)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-192)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-28)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-200)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-200)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-24)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-208)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-208)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-20)
 wrlong r0, RI
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098103_0000000c_lvalue_L000123_2684
 mov RI, FP
 sub RI, #-(-20)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-24)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-28)
 rdlong r4, RI
 mov RI, FP
 sub RI, #-(-32)
 rdlong r5, RI
 sub SP, #16
 calld PA,#PSHF
 long -36
 calld PA,#PSHF
 long -8
 mov BC, #24
 add SP, #4
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #20
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
C_tmp098103_0000000c_lvalue_L000123_2683
C_tmp098103_0000000c_lvalue_L000123_2684
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098103_0000000c_lvalue_L000123_2725
 rdbyte r22, r23
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098103_0000000c_lvalue_L000123_2727
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-12)
 rdlong r20, r20
 wrlong r20, r22
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2682
C_tmp098103_0000000c_lvalue_L000123_2727
 rdbyte r22, r23
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098103_0000000c_lvalue_L000123_2729
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-12)
 rdlong r20, r20
 wrlong r20, r22
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2682
C_tmp098103_0000000c_lvalue_L000123_2729
 mov r22, r23
 adds r22, #8
 mov r20, FP
 sub r20, #-(-12)
 rdlong r20, r20
 wrlong r20, r22
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2682
C_tmp098103_0000000c_lvalue_L000123_2725
 mov r22, #135
 wrbyte r22, r23
 jmp #\@C_tmp098103_0000000c_lvalue_L000123_2682
C_tmp098103_0000000c_lvalue_L000123_2681
 mov r2, #4
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098103_0000000c_lvalue_L000123_2682
C_tmp098103_0000000c_lvalue_L000123_2647
 calld PA,#POPM
 add SP, #204
 calld PA,#RETF
' Catalina Export precedence
 alignl
C_precedence
 calld PA,#PSHM
 long $500000
 cmps r2,  #137 wz
 if_z jmp #\C_precedence_2739
 cmps r2,  #138 wz
 if_z jmp #\C_precedence_2738
 mov r22, #139
 cmps r2, r22 wz
 if_z jmp #\C_precedence_2739
 cmps r2, r22 wcz
 if_a jmp #\C_precedence_2744
 cmps r2,  #60 wz
 if_z jmp #\C_precedence_2739
 cmps r2,  #61 wz
 if_z jmp #\C_precedence_2738
 mov r22, #62
 cmps r2, r22 wz
 if_z jmp #\C_precedence_2739
 cmps r2, r22 wcz
 if_a jmp #\C_precedence_2746
 cmps r2,  #42 wcz
 if_b jmp #\C_precedence_2732
 cmps r2,  #47 wcz
 if_a jmp #\C_precedence_2732
 mov r22, r2
 shl r22, #2
 mov r20, ##@C_precedence_2747_L002749-168
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_precedence_2746
 cmps r2,  #94 wz
 if_z jmp #\C_precedence_2734
 jmp #\@C_precedence_2732
C_precedence_2744
 cmps r2,  #194 wz
 if_z jmp #\C_precedence_2741
 cmps r2,  #195 wz
 if_z jmp #\C_precedence_2742
 mov r22, #196
 cmps r2, r22 wz
 if_z jmp #\C_precedence_2742
 cmps r2, r22 wcz
 if_a jmp #\C_precedence_2752
 cmps r2,  #163 wz
 if_z jmp #\C_precedence_2740
 cmps r2,  #164 wz
 if_z jmp #\C_precedence_2741
 jmp #\@C_precedence_2732
C_precedence_2752
 cmps r2,  #217 wz
 if_z jmp #\C_precedence_2736
 jmp #\@C_precedence_2732
C_precedence_2734
 mov r0, #9
 jmp #\@C_precedence_2731
C_precedence_2735
 mov r0, #8
 jmp #\@C_precedence_2731
C_precedence_2736
 mov r0, #7
 jmp #\@C_precedence_2731
C_precedence_2737
 mov r0, #6
 jmp #\@C_precedence_2731
C_precedence_2738
 mov r0, #5
 jmp #\@C_precedence_2731
C_precedence_2739
 mov r0, #4
 jmp #\@C_precedence_2731
C_precedence_2740
 mov r0, #3
 jmp #\@C_precedence_2731
C_precedence_2741
 mov r0, #2
 jmp #\@C_precedence_2731
C_precedence_2742
 mov r0, #1
 jmp #\@C_precedence_2731
C_precedence_2732
 mov r0, #0
C_precedence_2731
 calld PA,#POPM
 calld PA,#RETN
 alignl
C_tmp098324_000002b6_debug_val_L002753
 calld PA,#NEWF
 calld PA,#PSHM
 long $c00000
 mov r23, r2
 rdbyte r22, r23
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098324_000002b6_debug_val_L002753_2755
 mov r22, r23
 adds r22, #4
 rdlong r2, r22
 mov r3, ##@C_tmp098324_000002b6_debug_val_L002753_2757_L002758
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_printf
 add SP, #4
 jmp #\@C_tmp098324_000002b6_debug_val_L002753_2756
C_tmp098324_000002b6_debug_val_L002753_2755
 mov r22, r23
 adds r22, #4
 rdlong r2, r22
 mov r3, ##@C_tmp098324_000002b6_debug_val_L002753_2759_L002760
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_printf
 add SP, #4
C_tmp098324_000002b6_debug_val_L002753_2756
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098104_0000000c_expr_L000124
 calld PA,#NEWF
 sub SP, #40
 calld PA,#PSHM
 long $eaa000
 mov r23, r3
 mov r21, r2
 mov r2, FP
 sub r2, #-(-28)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098107_0000000c_factor_L000127
 mov r13, ##@C_tmp098033_0000000a_token_L000053
 rdlong r13, r13
 mov r2, r13
 mov BC, #4
 calld PA,#CALA
 long @C_precedence
 mov r15, r0
 cmps r15, r21 wcz
 if_b jmp #\C_tmp098104_0000000c_expr_L000124_2766
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098104_0000000c_expr_L000124_2766
C_tmp098104_0000000c_expr_L000124_2765
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098107_0000000c_factor_L000127
 mov r17, ##@C_tmp098033_0000000a_token_L000053
 rdlong r17, r17
 mov r2, r17
 mov BC, #4
 calld PA,#CALA
 long @C_precedence
 mov r19, r0
 cmps r19, r21 wcz
 if_b jmp #\C_tmp098104_0000000c_expr_L000124_2768
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098104_0000000c_expr_L000124_2768
 cmps r19, r15 wcz
 if_a jmp #\C_tmp098104_0000000c_expr_L000124_2773
 mov r0, FP
 sub r0, #-(-36)
 mov r1, FP
 sub r1, #-(-12)
 calld PA,#CPYB
 long 8
 mov r2, FP
 sub r2, #-(-36)
 mov r3, r13
 mov r0, FP
 sub r0, #-(-44)
 mov r1, FP
 sub r1, #-(-28)
 calld PA,#CPYB
 long 8
 mov r4, FP
 sub r4, #-(-44)
 mov r5, FP
 sub r5, #-(-28)
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_tmp098105_0000000c_binop_L000125
 add SP, #12
 mov r13, r17
 mov r15, r19
 jmp #\@C_tmp098104_0000000c_expr_L000124_2771
C_tmp098104_0000000c_expr_L000124_2772
 mov r2, r19
 mov r3, FP
 sub r3, #-(-20)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r0, FP
 sub r0, #-(-36)
 mov r1, FP
 sub r1, #-(-20)
 calld PA,#CPYB
 long 8
 mov r2, FP
 sub r2, #-(-36)
 mov r3, r17
 mov r0, FP
 sub r0, #-(-44)
 mov r1, FP
 sub r1, #-(-12)
 calld PA,#CPYB
 long 8
 mov r4, FP
 sub r4, #-(-44)
 mov r5, FP
 sub r5, #-(-12)
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_tmp098105_0000000c_binop_L000125
 add SP, #12
 mov r17, ##@C_tmp098033_0000000a_token_L000053
 rdlong r17, r17
 mov r2, r17
 mov BC, #4
 calld PA,#CALA
 long @C_precedence
 mov r19, r0
 cmps r19, r15 wcz
 if_be jmp #\C_tmp098104_0000000c_expr_L000124_2775
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098104_0000000c_expr_L000124_2775
C_tmp098104_0000000c_expr_L000124_2773
 cmps r19, r15 wcz
 if_a jmp #\C_tmp098104_0000000c_expr_L000124_2772
 mov r0, FP
 sub r0, #-(-36)
 mov r1, FP
 sub r1, #-(-12)
 calld PA,#CPYB
 long 8
 mov r2, FP
 sub r2, #-(-36)
 mov r3, r13
 mov r0, FP
 sub r0, #-(-44)
 mov r1, FP
 sub r1, #-(-28)
 calld PA,#CPYB
 long 8
 mov r4, FP
 sub r4, #-(-44)
 mov r5, FP
 sub r5, #-(-28)
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_tmp098105_0000000c_binop_L000125
 add SP, #12
 mov r13, ##@C_tmp098033_0000000a_token_L000053
 rdlong r13, r13
 mov r2, r13
 mov BC, #4
 calld PA,#CALA
 long @C_precedence
 mov r15, r0
 cmps r15, r21 wcz
 if_b jmp #\C_tmp098104_0000000c_expr_L000124_2777
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098104_0000000c_expr_L000124_2777
C_tmp098104_0000000c_expr_L000124_2771
C_tmp098104_0000000c_expr_L000124_2766
 cmps r15, r21 wcz
 if_ae jmp #\C_tmp098104_0000000c_expr_L000124_2765
 mov r0, r23
 mov r1, FP
 sub r1, #-(-28)
 calld PA,#CPYB
 long 8
 calld PA,#POPM
 add SP, #40
 calld PA,#RETF
 alignl
C_tmp098105_0000000c_binop_L000125
 calld PA,#NEWF
 calld PA,#PSHM
 long $fe8000
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 cmps r19,  #137 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2840
 cmps r19,  #138 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2802
 mov r22, #139
 cmps r19, r22 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2878
 cmps r19, r22 wcz
 if_a jmp #\C_tmp098105_0000000c_binop_L000125_3011
 cmps r19,  #60 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2821
 cmps r19,  #61 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2783
 mov r22, #62
 cmps r19, r22 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2859
 cmps r19, r22 wcz
 if_a jmp #\C_tmp098105_0000000c_binop_L000125_3013
 cmps r19,  #42 wcz
 if_b jmp #\C_tmp098105_0000000c_binop_L000125_2781
 cmps r19,  #47 wcz
 if_a jmp #\C_tmp098105_0000000c_binop_L000125_2781
 mov r22, r19
 shl r22, #2
 mov r20, ##@C_tmp098105_0000000c_binop_L000125_3014_L003016-168
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098105_0000000c_binop_L000125_3013
 cmps r19,  #92 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2982
 cmps r19,  #94 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2997
 jmp #\@C_tmp098105_0000000c_binop_L000125_2781
C_tmp098105_0000000c_binop_L000125_3011
 cmps r19,  #194 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2910
 cmps r19,  #195 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2925
 mov r22, #196
 cmps r19, r22 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2918
 cmps r19, r22 wcz
 if_a jmp #\C_tmp098105_0000000c_binop_L000125_3019
 cmps r19,  #163 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2897
 cmps r19,  #164 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2903
 jmp #\@C_tmp098105_0000000c_binop_L000125_2781
C_tmp098105_0000000c_binop_L000125_3019
 cmps r19,  #217 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2967
 jmp #\@C_tmp098105_0000000c_binop_L000125_2781
C_tmp098105_0000000c_binop_L000125_2783
 rdbyte r22, r21
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2784
 rdbyte r22, r17
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2786
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 cmps r20, r18 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2789
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2790
C_tmp098105_0000000c_binop_L000125_2789
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2790
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2786
 mov r22, r21
 adds r22, #4
 rdlong r0, r22
 calld PA,#FLIN
 mov r20, r17
 adds r20, #4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FCMP
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2792
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2793
C_tmp098105_0000000c_binop_L000125_2792
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2793
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2784
 mov r22, #129
 wrbyte r22, r21
 rdbyte r22, r17
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2794
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#FCMP
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2797
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2798
C_tmp098105_0000000c_binop_L000125_2797
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2798
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2794
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r0, r18
 calld PA,#FLIN
 mov r1, r0
 mov r0, r20
 calld PA,#FCMP
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2800
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2801
C_tmp098105_0000000c_binop_L000125_2800
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2801
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2802
 rdbyte r22, r21
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2803
 rdbyte r22, r17
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2805
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 cmps r20, r18 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2808
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2809
C_tmp098105_0000000c_binop_L000125_2808
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2809
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2805
 mov r22, r21
 adds r22, #4
 rdlong r0, r22
 calld PA,#FLIN
 mov r20, r17
 adds r20, #4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FCMP
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2811
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2812
C_tmp098105_0000000c_binop_L000125_2811
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2812
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2803
 mov r22, #129
 wrbyte r22, r21
 rdbyte r22, r17
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2813
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#FCMP
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2816
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2817
C_tmp098105_0000000c_binop_L000125_2816
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2817
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2813
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r0, r18
 calld PA,#FLIN
 mov r1, r0
 mov r0, r20
 calld PA,#FCMP
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2819
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2820
C_tmp098105_0000000c_binop_L000125_2819
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2820
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2821
 rdbyte r22, r21
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2822
 rdbyte r22, r17
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2824
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 cmps r20, r18 wcz
 if_ae jmp #\C_tmp098105_0000000c_binop_L000125_2827
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2828
C_tmp098105_0000000c_binop_L000125_2827
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2828
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2824
 mov r22, r21
 adds r22, #4
 rdlong r0, r22
 calld PA,#FLIN
 mov r20, r17
 adds r20, #4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FCMP
 if_ae jmp #\C_tmp098105_0000000c_binop_L000125_2830
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2831
C_tmp098105_0000000c_binop_L000125_2830
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2831
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2822
 mov r22, #129
 wrbyte r22, r21
 rdbyte r22, r17
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2832
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#FCMP
 if_ae jmp #\C_tmp098105_0000000c_binop_L000125_2835
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2836
C_tmp098105_0000000c_binop_L000125_2835
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2836
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2832
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r0, r18
 calld PA,#FLIN
 mov r1, r0
 mov r0, r20
 calld PA,#FCMP
 if_ae jmp #\C_tmp098105_0000000c_binop_L000125_2838
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2839
C_tmp098105_0000000c_binop_L000125_2838
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2839
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2840
 rdbyte r22, r21
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2841
 rdbyte r22, r17
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2843
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 cmps r20, r18 wcz
 if_a jmp #\C_tmp098105_0000000c_binop_L000125_2846
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2847
C_tmp098105_0000000c_binop_L000125_2846
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2847
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2843
 mov r22, r21
 adds r22, #4
 rdlong r0, r22
 calld PA,#FLIN
 mov r20, r17
 adds r20, #4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FCMP
 if_a jmp #\C_tmp098105_0000000c_binop_L000125_2849
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2850
C_tmp098105_0000000c_binop_L000125_2849
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2850
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2841
 mov r22, #129
 wrbyte r22, r21
 rdbyte r22, r17
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2851
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#FCMP
 if_a jmp #\C_tmp098105_0000000c_binop_L000125_2854
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2855
C_tmp098105_0000000c_binop_L000125_2854
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2855
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2851
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r0, r18
 calld PA,#FLIN
 mov r1, r0
 mov r0, r20
 calld PA,#FCMP
 if_a jmp #\C_tmp098105_0000000c_binop_L000125_2857
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2858
C_tmp098105_0000000c_binop_L000125_2857
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2858
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2859
 rdbyte r22, r21
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2860
 rdbyte r22, r17
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2862
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 cmps r20, r18 wcz
 if_be jmp #\C_tmp098105_0000000c_binop_L000125_2865
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2866
C_tmp098105_0000000c_binop_L000125_2865
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2866
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2862
 mov r22, r21
 adds r22, #4
 rdlong r0, r22
 calld PA,#FLIN
 mov r20, r17
 adds r20, #4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FCMP
 if_be jmp #\C_tmp098105_0000000c_binop_L000125_2868
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2869
C_tmp098105_0000000c_binop_L000125_2868
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2869
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2860
 mov r22, #129
 wrbyte r22, r21
 rdbyte r22, r17
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2870
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#FCMP
 if_be jmp #\C_tmp098105_0000000c_binop_L000125_2873
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2874
C_tmp098105_0000000c_binop_L000125_2873
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2874
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2870
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r0, r18
 calld PA,#FLIN
 mov r1, r0
 mov r0, r20
 calld PA,#FCMP
 if_be jmp #\C_tmp098105_0000000c_binop_L000125_2876
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2877
C_tmp098105_0000000c_binop_L000125_2876
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2877
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2878
 rdbyte r22, r21
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2879
 rdbyte r22, r17
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2881
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 cmps r20, r18 wcz
 if_b jmp #\C_tmp098105_0000000c_binop_L000125_2884
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2885
C_tmp098105_0000000c_binop_L000125_2884
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2885
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2881
 mov r22, r21
 adds r22, #4
 rdlong r0, r22
 calld PA,#FLIN
 mov r20, r17
 adds r20, #4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FCMP
 if_b jmp #\C_tmp098105_0000000c_binop_L000125_2887
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2888
C_tmp098105_0000000c_binop_L000125_2887
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2888
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2879
 mov r22, #129
 wrbyte r22, r21
 rdbyte r22, r17
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2889
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#FCMP
 if_b jmp #\C_tmp098105_0000000c_binop_L000125_2892
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2893
C_tmp098105_0000000c_binop_L000125_2892
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2893
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2889
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r0, r18
 calld PA,#FLIN
 mov r1, r0
 mov r0, r20
 calld PA,#FCMP
 if_b jmp #\C_tmp098105_0000000c_binop_L000125_2895
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2896
C_tmp098105_0000000c_binop_L000125_2895
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2896
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2897
 mov r22, #129
 rdbyte r20, r21
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2898
 rdbyte r20, r17
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2898
 mov r22, #0
 mov r20, r21
 adds r20, #4
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2901
 mov r20, r17
 adds r20, #4
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2901
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2902
C_tmp098105_0000000c_binop_L000125_2901
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2902
 mov r22, r21
 adds r22, #4
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2898
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2903
 mov r22, #129
 rdbyte r20, r21
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2904
 rdbyte r20, r17
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2904
 mov r22, #0
 mov r20, r21
 adds r20, #4
 rdlong r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2909
 mov r20, r17
 adds r20, #4
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2907
C_tmp098105_0000000c_binop_L000125_2909
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2908
C_tmp098105_0000000c_binop_L000125_2907
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2908
 mov r22, r21
 adds r22, #4
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2904
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2910
 mov r22, #129
 rdbyte r20, r21
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2911
 rdbyte r20, r17
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2911
 mov r22, #0
 mov r20, r21
 adds r20, #4
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2917
 mov r20, r17
 adds r20, #4
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2916
C_tmp098105_0000000c_binop_L000125_2917
 mov r22, #0
 mov r20, r21
 adds r20, #4
 rdlong r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2914
 mov r20, r17
 adds r20, #4
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2914
C_tmp098105_0000000c_binop_L000125_2916
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2915
C_tmp098105_0000000c_binop_L000125_2914
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2915
 mov r22, r21
 adds r22, #4
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2911
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2918
 mov r22, #129
 rdbyte r20, r21
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2919
 rdbyte r20, r17
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2919
 mov r22, #0
 mov r20, r21
 adds r20, #4
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2924
 mov r20, r17
 adds r20, #4
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2922
C_tmp098105_0000000c_binop_L000125_2924
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2923
C_tmp098105_0000000c_binop_L000125_2922
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2923
 mov r22, r21
 adds r22, #4
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2919
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2925
 mov r22, #129
 rdbyte r20, r21
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2926
 rdbyte r20, r17
 cmps r20, r22 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2926
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 cmps r20, r18 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2929
 mov r15, #1
 jmp #\@C_tmp098105_0000000c_binop_L000125_2930
C_tmp098105_0000000c_binop_L000125_2929
 mov r15, #0
C_tmp098105_0000000c_binop_L000125_2930
 wrlong r15, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2926
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2931
 rdbyte r22, r21
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2932
 rdbyte r22, r17
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2934
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 adds r20, r18
 wrlong r20, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2934
 mov r22, #130
 wrbyte r22, r21
 mov r22, r21
 adds r22, #4
 rdlong r0, r22
 calld PA,#FLIN
 mov r20, r17
 adds r20, #4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FADD
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2932
 rdbyte r22, r17
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2936
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#FADD
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2936
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r0, r18
 calld PA,#FLIN
 mov r1, r0
 mov r0, r20
 calld PA,#FADD
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2938
 rdbyte r22, r21
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2939
 rdbyte r22, r17
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2941
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 subs r20, r18
 wrlong r20, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2941
 mov r22, #130
 wrbyte r22, r21
 mov r22, r21
 adds r22, #4
 rdlong r0, r22
 calld PA,#FLIN
 mov r20, r17
 adds r20, #4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FSUB
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2939
 rdbyte r22, r17
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2943
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#FSUB
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2943
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r0, r18
 calld PA,#FLIN
 mov r1, r0
 mov r0, r20
 calld PA,#FSUB
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2945
 rdbyte r22, r21
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2946
 rdbyte r22, r17
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2948
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2948
 mov r22, #130
 wrbyte r22, r21
 mov r22, r21
 adds r22, #4
 rdlong r0, r22
 calld PA,#FLIN
 mov r20, r17
 adds r20, #4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FMUL
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2946
 rdbyte r22, r17
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2950
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#FMUL
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2950
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r0, r18
 calld PA,#FLIN
 mov r1, r0
 mov r0, r20
 calld PA,#FMUL
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2952
 rdbyte r22, r21
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2953
 rdbyte r22, r17
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2955
 mov r22, r17
 adds r22, #4
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2957
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#DIVS
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2957
 mov r2, #12
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2955
 mov r22, r17
 adds r22, #4
 rdlong r22, r22
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2959
 mov r22, #130
 wrbyte r22, r21
 mov r22, r21
 adds r22, #4
 rdlong r0, r22
 calld PA,#FLIN
 mov r20, r17
 adds r20, #4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FDIV
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2959
 mov r2, #12
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2953
 rdbyte r22, r17
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2961
 mov r22, r17
 adds r22, #4
 rdlong r22, r22
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2963
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#FDIV
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2963
 mov r2, #12
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2961
 mov r22, r17
 adds r22, #4
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2965
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r0, r18
 calld PA,#FLIN
 mov r1, r0
 mov r0, r20
 calld PA,#FDIV
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2965
 mov r2, #12
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2967
 rdbyte r22, r21
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2968
 rdbyte r22, r17
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2970
 mov r22, r17
 adds r22, #4
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2972
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#DIVS
 wrlong r1, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2972
 mov r2, #12
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2970
 mov r22, r17
 adds r22, #4
 rdlong r22, r22
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2974
 mov r22, #130
 wrbyte r22, r21
 mov r22, r17
 adds r22, #4
 rdlong r2, r22
 mov r22, r21
 adds r22, #4
 rdlong r0, r22
 calld PA,#FLIN
 mov r3, r0
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fmod
 add SP, #4
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2974
 mov r2, #12
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2968
 rdbyte r22, r17
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2976
 mov r22, r17
 adds r22, #4
 rdlong r22, r22
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2978
 mov r22, r17
 adds r22, #4
 rdlong r2, r22
 mov r22, r21
 adds r22, #4
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fmod
 add SP, #4
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2978
 mov r2, #12
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2976
 mov r22, r17
 adds r22, #4
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2980
 mov r22, r17
 adds r22, #4
 rdlong r0, r22
 calld PA,#FLIN
 mov r2, r0
 mov r22, r21
 adds r22, #4
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fmod
 add SP, #4
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2980
 mov r2, #12
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2982
 rdbyte r22, r21
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2983
 rdbyte r22, r17
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2985
 mov r22, r17
 adds r22, #4
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2987
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#DIVS
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2987
 mov r2, #12
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2985
 mov r22, r17
 adds r22, #4
 rdlong r22, r22
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2989
 mov r22, #129
 wrbyte r22, r17
 mov r22, r17
 adds r22, #4
 rdlong r0, r22
 calld PA,#INFL
 wrlong r0, r22
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#DIVS
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2989
 mov r2, #12
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2983
 mov r22, #129
 wrbyte r22, r21
 mov r22, r21
 adds r22, #4
 rdlong r0, r22
 calld PA,#INFL
 wrlong r0, r22
 rdbyte r22, r17
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2991
 mov r22, r17
 adds r22, #4
 rdlong r22, r22
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2993
 mov r22, #129
 wrbyte r22, r17
 mov r22, r17
 adds r22, #4
 rdlong r0, r22
 calld PA,#INFL
 wrlong r0, r22
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#DIVS
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2993
 mov r2, #12
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2991
 mov r22, r17
 adds r22, #4
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098105_0000000c_binop_L000125_2995
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, r17
 adds r18, #4
 rdlong r18, r18
 mov r0, r20
 mov r1, r18
 calld PA,#DIVS
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2995
 mov r2, #12
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2997
 rdbyte r22, r21
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_2998
 rdbyte r22, r17
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_3000
 mov r22, #130
 wrbyte r22, r21
 mov r22, r17
 adds r22, #4
 rdlong r0, r22
 calld PA,#FLIN
 mov r2, r0
 mov r22, r21
 adds r22, #4
 rdlong r0, r22
 calld PA,#FLIN
 mov r3, r0
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_pow
 add SP, #4
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_3000
 mov r22, r21
 adds r22, #4
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_tmp098105_0000000c_binop_L000125_3004
 mov r22, r17
 adds r22, #4
 rdlong r22, r22
 mov r0, r22
 calld PA,#INFL
 calld PA,#FLIN
 mov r1, r0
 mov r0, r22
 calld PA,#FCMP
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_3002
C_tmp098105_0000000c_binop_L000125_3004
 mov r22, #130
 wrbyte r22, r21
 mov r22, r17
 adds r22, #4
 rdlong r2, r22
 mov r22, r21
 adds r22, #4
 rdlong r0, r22
 calld PA,#FLIN
 mov r3, r0
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_pow
 add SP, #4
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_3002
 mov r2, #33
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2998
 rdbyte r22, r17
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_3005
 mov r22, r21
 adds r22, #4
 rdlong r22, r22
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_ae jmp #\C_tmp098105_0000000c_binop_L000125_3009
 mov r22, r17
 adds r22, #4
 rdlong r22, r22
 mov r0, r22
 calld PA,#INFL
 calld PA,#FLIN
 mov r1, r0
 mov r0, r22
 calld PA,#FCMP
 if_nz jmp #\C_tmp098105_0000000c_binop_L000125_3007
C_tmp098105_0000000c_binop_L000125_3009
 mov r22, r17
 adds r22, #4
 rdlong r2, r22
 mov r22, r21
 adds r22, #4
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_pow
 add SP, #4
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_3007
 mov r2, #33
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_3005
 mov r22, r17
 adds r22, #4
 rdlong r0, r22
 calld PA,#FLIN
 mov r2, r0
 mov r22, r21
 adds r22, #4
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_pow
 add SP, #4
 wrlong r0, r22
 jmp #\@C_tmp098105_0000000c_binop_L000125_2782
C_tmp098105_0000000c_binop_L000125_2781
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098105_0000000c_binop_L000125_2782
 mov r0, r23
 mov r1, r21
 calld PA,#CPYB
 long 8
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098106_0000000c_stringfactor_L000126
 calld PA,#NEWF
 sub SP, #16
 calld PA,#PSHM
 long $faaa80
 mov r23, r2
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r21, r0
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 mov RI, FP
 sub RI, #-(-16)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r19, r0
 mov r22, #0
 mov r20, r21
 cmp r20, r22 wz
 if_z jmp #\C_tmp098106_0000000c_stringfactor_L000126_3024
 mov r20, r19
 cmp r20, r22 wz
 if_nz jmp #\C_tmp098106_0000000c_stringfactor_L000126_3022
C_tmp098106_0000000c_stringfactor_L000126_3024
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098106_0000000c_stringfactor_L000126_3023
C_tmp098106_0000000c_stringfactor_L000126_3022
 mov r2, r19
 mov r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcmp
 add SP, #4
 mov RI, FP
 sub RI, #-(-20)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r20, #60
 cmps r22, r20 wz
 if_z jmp #\C_tmp098106_0000000c_stringfactor_L000126_3038
 cmps r22,  #61 wz
 if_z jmp #\C_tmp098106_0000000c_stringfactor_L000126_3028
 cmps r22,  #62 wz
 if_z jmp #\C_tmp098106_0000000c_stringfactor_L000126_3048
 cmps r22, r20 wcz
 if_b jmp #\C_tmp098106_0000000c_stringfactor_L000126_3026
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #137 wz
 if_z jmp #\C_tmp098106_0000000c_stringfactor_L000126_3043
 cmps r22,  #138 wz
 if_z jmp #\C_tmp098106_0000000c_stringfactor_L000126_3033
 cmps r22,  #139 wz
 if_z jmp #\C_tmp098106_0000000c_stringfactor_L000126_3053
 jmp #\@C_tmp098106_0000000c_stringfactor_L000126_3026
C_tmp098106_0000000c_stringfactor_L000126_3028
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098106_0000000c_stringfactor_L000126_3031
 mov r17, #1
 jmp #\@C_tmp098106_0000000c_stringfactor_L000126_3032
C_tmp098106_0000000c_stringfactor_L000126_3031
 mov r17, #0
C_tmp098106_0000000c_stringfactor_L000126_3032
 mov RI, FP
 sub RI, #-(-8)
 wrlong r17, RI
 jmp #\@C_tmp098106_0000000c_stringfactor_L000126_3027
C_tmp098106_0000000c_stringfactor_L000126_3033
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098106_0000000c_stringfactor_L000126_3036
 mov r15, #0
 jmp #\@C_tmp098106_0000000c_stringfactor_L000126_3037
C_tmp098106_0000000c_stringfactor_L000126_3036
 mov r15, #1
C_tmp098106_0000000c_stringfactor_L000126_3037
 mov RI, FP
 sub RI, #-(-8)
 wrlong r15, RI
 jmp #\@C_tmp098106_0000000c_stringfactor_L000126_3027
C_tmp098106_0000000c_stringfactor_L000126_3038
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_tmp098106_0000000c_stringfactor_L000126_3041
 mov r13, #1
 jmp #\@C_tmp098106_0000000c_stringfactor_L000126_3042
C_tmp098106_0000000c_stringfactor_L000126_3041
 mov r13, #0
C_tmp098106_0000000c_stringfactor_L000126_3042
 mov RI, FP
 sub RI, #-(-8)
 wrlong r13, RI
 jmp #\@C_tmp098106_0000000c_stringfactor_L000126_3027
C_tmp098106_0000000c_stringfactor_L000126_3043
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_a jmp #\C_tmp098106_0000000c_stringfactor_L000126_3046
 mov r11, #1
 jmp #\@C_tmp098106_0000000c_stringfactor_L000126_3047
C_tmp098106_0000000c_stringfactor_L000126_3046
 mov r11, #0
C_tmp098106_0000000c_stringfactor_L000126_3047
 mov RI, FP
 sub RI, #-(-8)
 wrlong r11, RI
 jmp #\@C_tmp098106_0000000c_stringfactor_L000126_3027
C_tmp098106_0000000c_stringfactor_L000126_3048
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_be jmp #\C_tmp098106_0000000c_stringfactor_L000126_3051
 mov r9, #1
 jmp #\@C_tmp098106_0000000c_stringfactor_L000126_3052
C_tmp098106_0000000c_stringfactor_L000126_3051
 mov r9, #0
C_tmp098106_0000000c_stringfactor_L000126_3052
 mov RI, FP
 sub RI, #-(-8)
 wrlong r9, RI
 jmp #\@C_tmp098106_0000000c_stringfactor_L000126_3027
C_tmp098106_0000000c_stringfactor_L000126_3053
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_b jmp #\C_tmp098106_0000000c_stringfactor_L000126_3056
 mov r7, #1
 jmp #\@C_tmp098106_0000000c_stringfactor_L000126_3057
C_tmp098106_0000000c_stringfactor_L000126_3056
 mov r7, #0
C_tmp098106_0000000c_stringfactor_L000126_3057
 mov RI, FP
 sub RI, #-(-8)
 wrlong r7, RI
 jmp #\@C_tmp098106_0000000c_stringfactor_L000126_3027
C_tmp098106_0000000c_stringfactor_L000126_3026
 mov r2, #32
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_tmp098106_0000000c_stringfactor_L000126_3027
C_tmp098106_0000000c_stringfactor_L000126_3023
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r0, r23
 mov r1, FP
 sub r1, #-(-12)
 calld PA,#CPYB
 long 8
 calld PA,#POPM
 add SP, #16
 calld PA,#RETF
' Catalina Export ms_since_midnight
 alignl
C_ms_since_midnight
 calld PA,#NEWF
 sub SP, #16
 calld PA,#PSHM
 long $f50000
 mov BC, #0
 calld PA,#CALA
 long @C_rtc_getclock
 mov r21, r0
 mov r22, ##1000

  stalli

 qdiv r21, r22
 getqx r0

  allowi

 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 mov r20, FP
 sub r20, #-(-12)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, r21
 sub r22, r0
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 mov BC, #0
 calld PA,#CALA
 long @C_rtc_gettime
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r2, FP
 sub r2, #-(-8)
 mov BC, #4
 calld PA,#CALA
 long @C_localtime
 mov r23, r0
 mov r22, ##1000
 mov r20, ##1000
 mov r18, ##3600
 mov r16, r23
 adds r16, #8
 rdlong r16, r16

  stalli

 qmul r18, r16
 getqx r0

  allowi

 mov RI, FP
 sub RI, #-(-20)
 wrlong r0, RI
 mov r18, #60
 mov r16, r23
 adds r16, #4
 rdlong r16, r16

  stalli

 qmul r18, r16
 getqx r0

  allowi

 mov r18, FP
 sub r18, #-(-20)
 rdlong r18, r18
 adds r18, r0
 rdlong r16, r23
 adds r18, r16

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, r0
 mov r18, FP
 sub r18, #-(-16)
 rdlong r18, r18

  stalli

 qmul r22, r18
 getqx r0

  allowi


  stalli

 qdiv r0, r22
 getqx r0

  allowi

 add r0, r20
 calld PA,#POPM
 add SP, #16
 calld PA,#RETF
' Catalina Export timer
 alignl
C_timer
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $540000
 mov BC, #0
 calld PA,#CALA
 long @C_ms_since_midnight
 mov r22, r0
 mov r20, ##@C_timer_3062_L003063
 rdlong r20, r20
 mov r18, r22
 shr r18, #1
 mov r0, r18
 calld PA,#FLIN
 mov r1, r0
 mov r0, r20
 calld PA,#FMUL
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 and r22, #1
 mov r0, r22
 calld PA,#FLIN
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r1, r0
 mov r0, r22
 calld PA,#FADD
 mov r22, ##@C_timer_3064_L003065
 rdlong r22, r22
 mov r1, r22
 calld PA,#FDIV
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
 alignl
C_tmp098107_0000000c_factor_L000127
 calld PA,#NEWF
 sub SP, #52
 calld PA,#PSHM
 long $fa0000
 mov r23, r2
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098162_0000000d_is_string_L000182
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3068
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098106_0000000c_stringfactor_L000126
 jmp #\@C_tmp098107_0000000c_factor_L000127_3066
C_tmp098107_0000000c_factor_L000127_3068
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 mov r20, #45
 cmps r22, r20 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3074
 cmps r22, r20 wcz
 if_a jmp #\C_tmp098107_0000000c_factor_L000127_3421
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 mov r20, #26
 cmps r22, r20 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3397
 cmps r22, r20 wcz
 if_a jmp #\C_tmp098107_0000000c_factor_L000127_3423
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #3 wcz
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3070
 cmps r22,  #7 wcz
 if_a jmp #\C_tmp098107_0000000c_factor_L000127_3070
 shl r22, #2
 mov r20, ##@C_tmp098107_0000000c_factor_L000127_3424_L003426-12
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098107_0000000c_factor_L000127_3423
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #40 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3072
 jmp #\@C_tmp098107_0000000c_factor_L000127_3070
C_tmp098107_0000000c_factor_L000127_3421
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #149 wcz
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3428
 cmps r22,  #157 wcz
 if_a jmp #\C_tmp098107_0000000c_factor_L000127_3429
 shl r22, #2
 mov r20, ##@C_tmp098107_0000000c_factor_L000127_3430_L003432-596
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098107_0000000c_factor_L000127_3428
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #128 wcz
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3070
 cmps r22,  #136 wcz
 if_a jmp #\C_tmp098107_0000000c_factor_L000127_3070
 shl r22, #2
 mov r20, ##@C_tmp098107_0000000c_factor_L000127_3434_L003436-512
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098107_0000000c_factor_L000127_3429
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #191 wcz
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3070
 cmps r22,  #239 wcz
 if_a jmp #\C_tmp098107_0000000c_factor_L000127_3070
 shl r22, #2
 mov r20, ##@C_tmp098107_0000000c_factor_L000127_3438_L003440-764
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098107_0000000c_factor_L000127_3072
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3073
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098163_0000000d_getvalue_L000183
 mov RI, FP
 sub RI, #-(-32)
 wrlong r0, RI
 mov r2, #128
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3074
 mov r2, #45
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098107_0000000c_factor_L000127
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3075
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 neg r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3075
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 xor r22, Bit31
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3081
 mov r2, #193
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098107_0000000c_factor_L000127
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3082
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3087
 mov r17, #1
 jmp #\@C_tmp098107_0000000c_factor_L000127_3088
C_tmp098107_0000000c_factor_L000127_3087
 mov r17, #0
C_tmp098107_0000000c_factor_L000127_3088
 mov RI, FP
 sub RI, #-(-8)
 wrlong r17, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3082
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3089
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098108_0000000c_variable_L000128
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3090
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098109_0000000c_dimvariable_L000129
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3091
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r2, ##@C_print_to_buff_936_L000937
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_acos
 mov r22, r0
 mov r20, ##@C_tmp098107_0000000c_factor_L000127_3093_L003094
 rdlong r20, r20
 mov r0, r20
 mov r1, r22
 calld PA,#FMUL
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r2, #136
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3095
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov BC, #0
 calld PA,#CALA
 long @C_timer
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r2, #234
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3097
 mov r2, #211
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3098
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#FLIN
 mov r2, r0
 mov BC, #4
 calld PA,#CALA
 long @C_sin
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3098
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_sin
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3104
 mov r2, #212
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3105
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#FLIN
 mov r2, r0
 mov BC, #4
 calld PA,#CALA
 long @C_cos
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3105
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_cos
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3111
 mov r2, #213
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3112
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#FLIN
 mov r2, r0
 mov BC, #4
 calld PA,#CALA
 long @C_tan
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3112
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_tan
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3118
 mov r2, #214
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3119
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_be jmp #\C_tmp098107_0000000c_factor_L000127_3121
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#FLIN
 mov r2, r0
 mov BC, #4
 calld PA,#CALA
 long @C_log
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3121
 mov r2, #13
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3119
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_be jmp #\C_tmp098107_0000000c_factor_L000127_3126
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_log
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3126
 mov r2, #13
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3131
 mov r2, #215
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3132
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#FLIN
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
C_tmp098107_0000000c_factor_L000127_3132
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-28)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r22, FP
 sub r22, #-(-28)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3136
 mov r22, #130
 mov RI, FP
 sub RI, #-(-28)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-24)
 rdlong r0, r22
 calld PA,#FLIN
 mov RI, FP
 sub RI, #-(-24)
 wrlong r0, RI
C_tmp098107_0000000c_factor_L000127_3136
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_ae jmp #\C_tmp098107_0000000c_factor_L000127_3145
 mov r22, FP
 sub r22, #-(-24)
 rdlong r0, r22
 calld PA,#INFL
 calld PA,#FLIN
 mov r22, r0
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 mov r20, ##@C_tmp098054_0000000b_do_dim_L000074_1198_L001199
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3140
C_tmp098107_0000000c_factor_L000127_3145
 mov RI, FP
 sub RI, #-(-24)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-8)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_pow
 add SP, #4
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3140
 mov r2, #33
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3149
 mov r2, #239
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3150
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#FLIN
 mov r2, r0
 mov BC, #4
 calld PA,#CALA
 long @C_exp
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3150
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_exp
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3156
 mov r2, #216
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3157
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3159
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#FLIN
 mov r2, r0
 mov BC, #4
 calld PA,#CALA
 long @C_sqrt
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3159
 mov r2, #14
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3157
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3164
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_sqrt
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3164
 mov r2, #14
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3169
 mov r2, #218
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3170
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_tmp098107_0000000c_factor_L000127_3071
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 neg r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3170
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_fabs
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3179
 mov r2, #238
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3180
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_tmp098107_0000000c_factor_L000127_3182
 mov r22, ##-1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3182
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_be jmp #\C_tmp098107_0000000c_factor_L000127_3186
 mov r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3186
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3180
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_ae jmp #\C_tmp098107_0000000c_factor_L000127_3191
 mov r22, ##@C_tmp098107_0000000c_factor_L000127_3195_L003196
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3191
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_tmp098054_0000000b_do_dim_L000074_1198_L001199
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_be jmp #\C_tmp098107_0000000c_factor_L000127_3197
 mov r22, ##@C_tmp098066_0000000c_do_for_L000086_2126_L002127
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3197
 mov r22, ##@C_tmp098054_0000000b_do_dim_L000074_1198_L001199
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3202
 mov r2, #219
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r19, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, r19
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3203
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_free
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3203
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3207
 mov r2, #220
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r19, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, r19
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3208
 rdbyte r22, r19
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_free
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3208
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3212
 mov r2, #221
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3213
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##-1
 cmps r22, r20 wcz
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3215
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #1 wcz
 if_a jmp #\C_tmp098107_0000000c_factor_L000127_3215
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#FLIN
 mov r2, r0
 mov BC, #4
 calld PA,#CALA
 long @C_asin
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3215
 mov r2, #15
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3213
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_tmp098107_0000000c_factor_L000127_3225_L003226
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3221
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_tmp098107_0000000c_factor_L000127_3227_L003228
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_a jmp #\C_tmp098107_0000000c_factor_L000127_3221
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_asin
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3221
 mov r2, #15
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3231
 mov r2, #222
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3232
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##-1
 cmps r22, r20 wcz
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3234
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #1 wcz
 if_a jmp #\C_tmp098107_0000000c_factor_L000127_3234
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#FLIN
 mov r2, r0
 mov BC, #4
 calld PA,#CALA
 long @C_acos
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3234
 mov r2, #15
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3232
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_tmp098107_0000000c_factor_L000127_3225_L003226
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3240
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_tmp098107_0000000c_factor_L000127_3227_L003228
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_a jmp #\C_tmp098107_0000000c_factor_L000127_3240
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_acos
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3240
 mov r2, #15
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3246
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3247
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#FLIN
 mov r2, r0
 mov BC, #4
 calld PA,#CALA
 long @C_atan
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3247
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_atan
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3253
 mov r2, #224
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3071
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_floor
 mov r22, r0
 calld PA,#INFL
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3258
 mov r2, #236
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3071
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_be jmp #\C_tmp098107_0000000c_factor_L000127_3261
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_floor
 mov r22, r0
 calld PA,#INFL
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3261
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r2, r22
 xor r2, Bit31
 mov BC, #4
 calld PA,#CALA
 long @C_floor
 mov r22, r0
 mov r0, r22
 xor r0, Bit31
 calld PA,#INFL
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3268
 mov r2, #231
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3071
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_print_to_buff_936_L000937
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3271
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_tmp098303_00000236_line_index_L002327_2338_L002339
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_be jmp #\C_tmp098107_0000000c_factor_L000127_3274
 mov r2, #37
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3274
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_floor
 mov r22, r0
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 mov r0, r20
 mov r1, r22
 calld PA,#FSUB
 mov r22, ##@C_tmp098107_0000000c_factor_L000127_3281_L003282
 rdlong r22, r22
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_tmp098107_0000000c_factor_L000127_3277
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#INFL
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3277
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#INFL
 mov r22, r0
 adds r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3271
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_tmp098303_00000236_line_index_L002327_2336_L002337
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_ae jmp #\C_tmp098107_0000000c_factor_L000127_3287
 mov r2, #37
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3287
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_floor
 mov r22, r0
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 xor r20, Bit31
 mov r0, r20
 mov r1, r22
 calld PA,#FADD
 mov r22, ##@C_tmp098107_0000000c_factor_L000127_3294_L003295
 rdlong r22, r22
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_tmp098107_0000000c_factor_L000127_3290
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#INFL
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3290
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#INFL
 mov r22, r0
 subs r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3300
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3071
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#FLIN
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3305
 mov r2, #225
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #40 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3306
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-48)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov r21, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 cmps r21,  #0 wcz
 if_a jmp #\C_tmp098107_0000000c_factor_L000127_3308
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, ##@C_last_rnd
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3308
C_tmp098107_0000000c_factor_L000127_3306
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov BC, #0
 calld PA,#CALA
 long @C_rand
 mov r22, r0
 calld PA,#FLIN
 mov r22, ##@C_tmp098107_0000000c_factor_L000127_3312_L003313
 rdlong r22, r22
 mov r1, r22
 calld PA,#FDIV
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 wrlong r22, ##@C_last_rnd
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3315
 mov r2, #205
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #40 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3316
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-48)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov r21, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098107_0000000c_factor_L000127_3316
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, ##@C_tmp098022_00000009_pos_L000042
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3319
 mov r2, #226
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r19, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r19
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3320
 mov r2, FP
 sub r2, #-(-32)
 mov r3, r19
 mov r4, FP
 sub r4, #-(-12)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_tmp098170_0000000d_getstringvalue_L000190
 add SP, #8
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_free
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3320
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3323
 mov r2, #227
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r19, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, r19
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3324
 mov r2, FP
 sub r2, #-(-32)
 mov r3, r19
 mov r4, FP
 sub r4, #-(-48)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_tmp098170_0000000d_getstringvalue_L000190
 add SP, #8
 mov r22, FP
 sub r22, #-(-32)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_free
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3324
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3328
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098115_0000000c_instr_L000135
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3330
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, ##@C_tmp098036_0000000a_errorindx_L000056
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_be jmp #\C_tmp098107_0000000c_factor_L000127_3331
 mov r22, ##@C_tmp098036_0000000a_errorindx_L000056
 rdlong r22, r22
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3332
C_tmp098107_0000000c_factor_L000127_3331
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_tmp098107_0000000c_factor_L000127_3332
 mov r2, #206
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3335
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, ##@C_tmp098035_0000000a_errorlast_L000055
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r2, #207
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3337
 mov r2, #149
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r19, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r19
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3071
 mov r21, #0
 jmp #\@C_tmp098107_0000000c_factor_L000127_3343
C_tmp098107_0000000c_factor_L000127_3340
 mov r22, FP
 sub r22, #-(-20)
 adds r22, r21
 mov r20, r21
 adds r20, r19
 rdbyte r20, r20
 wrbyte r20, r22
 adds r21, #1
C_tmp098107_0000000c_factor_L000127_3343
 mov r22, r21
 cmp r22,  #4 wcz
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3340
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3345
 mov r2, #150
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r19, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r19
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3071
 mov r21, #0
 jmp #\@C_tmp098107_0000000c_factor_L000127_3351
C_tmp098107_0000000c_factor_L000127_3348
 mov r22, FP
 sub r22, #-(-20)
 adds r22, r21
 mov r20, r21
 adds r20, r19
 rdbyte r20, r20
 wrbyte r20, r22
 adds r21, #1
C_tmp098107_0000000c_factor_L000127_3351
 mov r22, r21
 cmp r22,  #4 wcz
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3348
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3353
 mov r2, #151
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r19, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r19
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3071
 mov r21, #0
 jmp #\@C_tmp098107_0000000c_factor_L000127_3359
C_tmp098107_0000000c_factor_L000127_3356
 mov r22, FP
 sub r22, #-(-20)
 adds r22, r21
 mov r20, r21
 adds r20, r19
 rdbyte r20, r20
 wrbyte r20, r22
 adds r21, #1
C_tmp098107_0000000c_factor_L000127_3359
 mov r22, r21
 cmp r22,  #4 wcz
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3356
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3361
 mov r2, #155
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #40 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3363
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-48)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov r21, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 cmps r21,  #1 wcz
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3071
 cmps r21,  #3 wcz
 if_a jmp #\C_tmp098107_0000000c_factor_L000127_3071
 subs r21, #1
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3367
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_ftell
 mov RI, FP
 sub RI, #-(-52)
 wrlong r0, RI
 mov r2, #2
 mov r3, #0
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fseek
 add SP, #8
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_ftell
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r2, #0
 mov RI, FP
 sub RI, #-(-52)
 rdlong r3, RI
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_fseek
 add SP, #8
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3367
 mov r2, #47
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3363
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3370
 mov r2, #156
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #40 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3372
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-48)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov r21, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 cmps r21,  #1 wcz
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3071
 cmps r21,  #3 wcz
 if_a jmp #\C_tmp098107_0000000c_factor_L000127_3071
 subs r21, #1
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3376
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+136
 adds r22, r0
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_be jmp #\C_tmp098107_0000000c_factor_L000127_3378
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_ftell
 mov r22, r0
 adds r22, #1
 mov r20, #140

  stalli

 qmul r20, r21
 getqx r0

  allowi

 mov r20, ##@C_tmp098014_00000009_F_I_L_E_S__L000034+136
 adds r20, r0
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#DIVS
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3378
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_ftell
 mov r22, r0
 adds r22, #1
 mov r20, #128
 mov r0, r22
 mov r1, r20
 calld PA,#DIVS
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3376
 mov r2, #47
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3372
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3384
 mov r2, #157
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #40 wz
 if_nz jmp #\C_tmp098107_0000000c_factor_L000127_3386
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-48)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov r21, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 cmps r21,  #1 wcz
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3071
 cmps r21,  #3 wcz
 if_a jmp #\C_tmp098107_0000000c_factor_L000127_3071
 subs r21, #1
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3390
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_fgetc
 mov r22, r0
 mov RI, FP
 sub RI, #-(-40)
 wrbyte r22, RI
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 adds r22, #8
 rdlong r22, r22
 and r22, #16
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3392
 mov r22, ##-1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3392
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov r22, FP
 sub r22, #-(-40)
 rdbyte r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_ungetc
 add SP, #4
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3390
 mov r2, #47
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3386
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3395
 mov r2, #191
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-48)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3397
 mov r2, #26
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 mov r20, #35
 cmps r22, r20 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3400
 cmps r22, r20 wcz
 if_a jmp #\C_tmp098107_0000000c_factor_L000127_3409
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #3 wcz
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3398
 cmps r22,  #7 wcz
 if_a jmp #\C_tmp098107_0000000c_factor_L000127_3398
 shl r22, #2
 mov r20, ##@C_tmp098107_0000000c_factor_L000127_3410_L003412-12
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098107_0000000c_factor_L000127_3409
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #129 wcz
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3398
 cmps r22,  #133 wcz
 if_a jmp #\C_tmp098107_0000000c_factor_L000127_3398
 shl r22, #2
 mov r20, ##@C_tmp098107_0000000c_factor_L000127_3414_L003416-516
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098107_0000000c_factor_L000127_3400
 mov r2, #35
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-56)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-56)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r21, r0
 cmps r21,  #0 wcz
 if_b jmp #\C_tmp098107_0000000c_factor_L000127_3401
 cmps r21,  #3 wcz
 if_ae jmp #\C_tmp098107_0000000c_factor_L000127_3401
 subs r21, #1
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3403
 mov r22, #140

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098107_0000000c_factor_L000127_3399
C_tmp098107_0000000c_factor_L000127_3403
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3399
C_tmp098107_0000000c_factor_L000127_3401
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3399
C_tmp098107_0000000c_factor_L000127_3406
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098110_0000000c_variable_addr_L000130
 jmp #\@C_tmp098107_0000000c_factor_L000127_3399
C_tmp098107_0000000c_factor_L000127_3407
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098111_0000000c_dimvariable_addr_L000131
 jmp #\@C_tmp098107_0000000c_factor_L000127_3399
C_tmp098107_0000000c_factor_L000127_3398
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098107_0000000c_factor_L000127_3399
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3070
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098162_0000000d_is_string_L000182
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098107_0000000c_factor_L000127_3418
 mov r2, #18
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098107_0000000c_factor_L000127_3071
C_tmp098107_0000000c_factor_L000127_3418
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098107_0000000c_factor_L000127_3071
 mov r0, r23
 mov r1, FP
 sub r1, #-(-12)
 calld PA,#CPYB
 long 8
C_tmp098107_0000000c_factor_L000127_3066
 calld PA,#POPM
 add SP, #52
 calld PA,#RETF
 alignl
C_tmp098115_0000000c_instr_L000135
 calld PA,#NEWF
 sub SP, #16
 calld PA,#PSHM
 long $f80000
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r2, #228
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r23, r0
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r19, r0
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-20)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-20)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r21, r0
 subs r21, #1
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #0
 mov r20, r23
 cmp r20, r22 wz
 if_z jmp #\C_tmp098115_0000000c_instr_L000135_3445
 mov r20, r19
 cmp r20, r22 wz
 if_nz jmp #\C_tmp098115_0000000c_instr_L000135_3443
C_tmp098115_0000000c_instr_L000135_3445
 mov r22, r23
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098115_0000000c_instr_L000135_3446
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_tmp098115_0000000c_instr_L000135_3446
 mov r22, r19
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098115_0000000c_instr_L000135_3448
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_tmp098115_0000000c_instr_L000135_3448
 mov r0, #0
 jmp #\@C_tmp098115_0000000c_instr_L000135_3442
C_tmp098115_0000000c_instr_L000135_3443
 cmps r21,  #0 wcz
 if_b jmp #\C_tmp098115_0000000c_instr_L000135_3450
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 cmps r21, r22 wcz
 if_ae jmp #\C_tmp098115_0000000c_instr_L000135_3450
 mov r2, r19
 mov r3, r21
 adds r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strstr
 add SP, #4
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098115_0000000c_instr_L000135_3452
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, r23
 sub r22, r20
 adds r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_tmp098115_0000000c_instr_L000135_3452
C_tmp098115_0000000c_instr_L000135_3450
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
C_tmp098115_0000000c_instr_L000135_3442
 calld PA,#POPM
 add SP, #16
 calld PA,#RETF
 alignl
C_tmp098118_0000000d_findfunction_L000138
 calld PA,#NEWF
 calld PA,#PSHM
 long $e80000
 mov r23, r3
 mov r21, r2
 mov r22, r21
 subs r22, #1
 adds r22, r23
 rdbyte r22, r22
 cmps r22,  #40 wz
 if_nz jmp #\C_tmp098118_0000000d_findfunction_L000138_3455
 subs r21, #1
C_tmp098118_0000000d_findfunction_L000138_3455
 mov r19, #0
 jmp #\@C_tmp098118_0000000d_findfunction_L000138_3460
C_tmp098118_0000000d_findfunction_L000138_3457
 mov r2, r21
 mov r22, #316

  stalli

 qmul r22, r19
 getqx r0

  allowi

 mov r22, ##@C_tmp098005_00000009_functions_L000025
 mov r3, r0
 adds r3, r22
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_tmp098046_0000000b_strncmp_i_L000066
 add SP, #8
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098118_0000000d_findfunction_L000138_3461
 mov r22, #316

  stalli

 qmul r22, r19
 getqx r0

  allowi

 mov r22, ##@C_tmp098005_00000009_functions_L000025
 adds r0, r22
 jmp #\@C_tmp098118_0000000d_findfunction_L000138_3454
C_tmp098118_0000000d_findfunction_L000138_3461
 adds r19, #1
C_tmp098118_0000000d_findfunction_L000138_3460
 mov r22, ##@C_tmp098006_00000009_nfunctions_L000026
 rdlong r22, r22
 cmps r19, r22 wcz
 if_b jmp #\C_tmp098118_0000000d_findfunction_L000138_3457
 mov r0, ##0
C_tmp098118_0000000d_findfunction_L000138_3454
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098350_00000363_findargument_L003463
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r2
 mov r22, ##@C_tmp098007_00000009_context_L000027
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098350_00000363_findargument_L003463_3465
 mov r21, #0
 jmp #\@C_tmp098350_00000363_findargument_L003463_3470
C_tmp098350_00000363_findargument_L003463_3467
 mov r22, #52

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098007_00000009_context_L000027
 rdlong r22, r22
 adds r22, #48
 mov r2, r0
 adds r2, r22
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098045_0000000b_strcmp_i_L000065
 add SP, #4
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098350_00000363_findargument_L003463_3471
 mov r22, #52

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098007_00000009_context_L000027
 rdlong r22, r22
 adds r22, #48
 adds r0, r22
 jmp #\@C_tmp098350_00000363_findargument_L003463_3464
C_tmp098350_00000363_findargument_L003463_3471
 adds r21, #1
C_tmp098350_00000363_findargument_L003463_3470
 mov r22, ##@C_tmp098007_00000009_context_L000027
 rdlong r22, r22
 adds r22, #44
 rdlong r22, r22
 cmps r21, r22 wcz
 if_b jmp #\C_tmp098350_00000363_findargument_L003463_3467
C_tmp098350_00000363_findargument_L003463_3465
 mov r0, ##0
C_tmp098350_00000363_findargument_L003463_3464
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098351_00000365_evalstringfunction_L003473
 calld PA,#NEWF
 sub SP, #28
 calld PA,#PSHM
 long $f80000
 mov r23, r2
 mov r22, ##@C_tmp098007_00000009_context_L000027
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098351_00000365_evalstringfunction_L003473_3475
 mov r2, #36
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r22, r0
 jmp #\@C_tmp098351_00000365_evalstringfunction_L003473_3474
C_tmp098351_00000365_evalstringfunction_L003473_3475
 mov r22, r23
 adds r22, #44
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098351_00000365_evalstringfunction_L003473_3477
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #40 wz
 if_nz jmp #\C_tmp098351_00000365_evalstringfunction_L003473_3478
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r22, r0
 jmp #\@C_tmp098351_00000365_evalstringfunction_L003473_3474
C_tmp098351_00000365_evalstringfunction_L003473_3477
 mov r21, #0
 jmp #\@C_tmp098351_00000365_evalstringfunction_L003473_3484
C_tmp098351_00000365_evalstringfunction_L003473_3481
 mov r22, #52

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, r23
 adds r22, #48
 adds r22, r0
 adds r22, #41
 rdbyte r19, r22
 cmps r19,  #130 wz
 if_z jmp #\C_tmp098351_00000365_evalstringfunction_L003473_3489
 cmps r19,  #131 wz
 if_z jmp #\C_tmp098351_00000365_evalstringfunction_L003473_3488
 jmp #\@C_tmp098351_00000365_evalstringfunction_L003473_3485
C_tmp098351_00000365_evalstringfunction_L003473_3488
 mov r22, #52

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, r23
 adds r22, #48
 adds r22, r0
 adds r22, #48
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r22, r0
 mov r20, #52

  stalli

 qmul r20, r21
 getqx r0

  allowi

 mov r20, r23
 adds r20, #48
 adds r20, r0
 adds r20, #48
 wrlong r22, r20
 jmp #\@C_tmp098351_00000365_evalstringfunction_L003473_3486
C_tmp098351_00000365_evalstringfunction_L003473_3489
 mov r2, #1
 mov r3, FP
 sub r3, #-(-24)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-24)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098154_0000000d_real_L000174
 mov r22, r0
 mov r20, #52

  stalli

 qmul r20, r21
 getqx r0

  allowi

 mov r20, r23
 adds r20, #48
 adds r20, r0
 adds r20, #48
 wrlong r22, r20
 jmp #\@C_tmp098351_00000365_evalstringfunction_L003473_3486
C_tmp098351_00000365_evalstringfunction_L003473_3485
 mov r2, #1
 mov r3, FP
 sub r3, #-(-32)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-32)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov r22, r0
 mov r20, #52

  stalli

 qmul r20, r21
 getqx r0

  allowi

 mov r20, r23
 adds r20, #48
 adds r20, r0
 adds r20, #48
 wrlong r22, r20
C_tmp098351_00000365_evalstringfunction_L003473_3486
 mov r22, r23
 adds r22, #44
 rdlong r22, r22
 subs r22, #1
 cmps r21, r22 wcz
 if_ae jmp #\C_tmp098351_00000365_evalstringfunction_L003473_3490
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098351_00000365_evalstringfunction_L003473_3490
 adds r21, #1
C_tmp098351_00000365_evalstringfunction_L003473_3484
 mov r22, r23
 adds r22, #44
 rdlong r22, r22
 cmps r21, r22 wcz
 if_b jmp #\C_tmp098351_00000365_evalstringfunction_L003473_3481
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098351_00000365_evalstringfunction_L003473_3478
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 mov r22, r23
 adds r22, #308
 rdlong r22, r22
 wrlong r22, ##@C_tmp098030_0000000a_current_indx_L000050
 mov r22, r23
 adds r22, #312
 rdlong r22, r22
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 wrlong r23, ##@C_tmp098007_00000009_context_L000027
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 wrlong r22, ##@C_tmp098030_0000000a_current_indx_L000050
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov r22, ##0
 wrlong r22, ##@C_tmp098007_00000009_context_L000027
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
C_tmp098351_00000365_evalstringfunction_L003473_3474
 calld PA,#POPM
 add SP, #28
 calld PA,#RETF
 alignl
C_tmp098352_0000036d_evalfunction_L003492
 calld PA,#NEWF
 sub SP, #32
 calld PA,#PSHM
 long $fa0000
 mov r23, r3
 mov r21, r2
 mov r22, ##@C_tmp098007_00000009_context_L000027
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098352_0000036d_evalfunction_L003492_3495
 mov r2, #36
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, r23
 mov r1, ##@C_tmp098116_0000000c_D_U_M_M_Y__I_V_A_L_U_E__L000136
 calld PA,#CPYB
 long 8
 jmp #\@C_tmp098352_0000036d_evalfunction_L003492_3493
C_tmp098352_0000036d_evalfunction_L003492_3495
 mov r22, r21
 adds r22, #44
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098352_0000036d_evalfunction_L003492_3497
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #40 wz
 if_nz jmp #\C_tmp098352_0000036d_evalfunction_L003492_3498
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, r23
 mov r1, ##@C_tmp098116_0000000c_D_U_M_M_Y__I_V_A_L_U_E__L000136
 calld PA,#CPYB
 long 8
 jmp #\@C_tmp098352_0000036d_evalfunction_L003492_3493
C_tmp098352_0000036d_evalfunction_L003492_3497
 mov r19, #0
 jmp #\@C_tmp098352_0000036d_evalfunction_L003492_3504
C_tmp098352_0000036d_evalfunction_L003492_3501
 mov r22, #52

  stalli

 qmul r22, r19
 getqx r0

  allowi

 mov r22, r21
 adds r22, #48
 adds r22, r0
 adds r22, #41
 rdbyte r17, r22
 cmps r17,  #130 wz
 if_z jmp #\C_tmp098352_0000036d_evalfunction_L003492_3509
 cmps r17,  #131 wz
 if_z jmp #\C_tmp098352_0000036d_evalfunction_L003492_3508
 jmp #\@C_tmp098352_0000036d_evalfunction_L003492_3505
C_tmp098352_0000036d_evalfunction_L003492_3508
 mov r22, #52

  stalli

 qmul r22, r19
 getqx r0

  allowi

 mov r22, r21
 adds r22, #48
 adds r22, r0
 adds r22, #48
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r22, r0
 mov r20, #52

  stalli

 qmul r20, r19
 getqx r0

  allowi

 mov r20, r21
 adds r20, #48
 adds r20, r0
 adds r20, #48
 wrlong r22, r20
 jmp #\@C_tmp098352_0000036d_evalfunction_L003492_3506
C_tmp098352_0000036d_evalfunction_L003492_3509
 mov r2, #1
 mov r3, FP
 sub r3, #-(-28)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-28)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098154_0000000d_real_L000174
 mov r22, r0
 mov r20, #52

  stalli

 qmul r20, r19
 getqx r0

  allowi

 mov r20, r21
 adds r20, #48
 adds r20, r0
 adds r20, #48
 wrlong r22, r20
 jmp #\@C_tmp098352_0000036d_evalfunction_L003492_3506
C_tmp098352_0000036d_evalfunction_L003492_3505
 mov r2, #1
 mov r3, FP
 sub r3, #-(-36)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-36)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov r22, r0
 mov r20, #52

  stalli

 qmul r20, r19
 getqx r0

  allowi

 mov r20, r21
 adds r20, #48
 adds r20, r0
 adds r20, #48
 wrlong r22, r20
C_tmp098352_0000036d_evalfunction_L003492_3506
 mov r22, r21
 adds r22, #44
 rdlong r22, r22
 subs r22, #1
 cmps r19, r22 wcz
 if_ae jmp #\C_tmp098352_0000036d_evalfunction_L003492_3510
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098352_0000036d_evalfunction_L003492_3510
 adds r19, #1
C_tmp098352_0000036d_evalfunction_L003492_3504
 mov r22, r21
 adds r22, #44
 rdlong r22, r22
 cmps r19, r22 wcz
 if_b jmp #\C_tmp098352_0000036d_evalfunction_L003492_3501
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098352_0000036d_evalfunction_L003492_3498
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 mov r22, r21
 adds r22, #308
 rdlong r22, r22
 wrlong r22, ##@C_tmp098030_0000000a_current_indx_L000050
 mov r22, r21
 adds r22, #312
 rdlong r22, r22
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 wrlong r21, ##@C_tmp098007_00000009_context_L000027
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 wrlong r22, ##@C_tmp098030_0000000a_current_indx_L000050
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov r22, ##0
 wrlong r22, ##@C_tmp098007_00000009_context_L000027
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, r21
 adds r22, #41
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098352_0000036d_evalfunction_L003492_3512
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098352_0000036d_evalfunction_L003492_3513
 mov r0, FP
 sub r0, #-(-28)
 mov r1, FP
 sub r1, #-(-12)
 calld PA,#CPYB
 long 8
 mov r2, FP
 sub r2, #-(-28)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, #129
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 jmp #\@C_tmp098352_0000036d_evalfunction_L003492_3513
C_tmp098352_0000036d_evalfunction_L003492_3512
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098352_0000036d_evalfunction_L003492_3517
 mov r0, FP
 sub r0, #-(-28)
 mov r1, FP
 sub r1, #-(-12)
 calld PA,#CPYB
 long 8
 mov r2, FP
 sub r2, #-(-28)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098154_0000000d_real_L000174
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, #130
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
C_tmp098352_0000036d_evalfunction_L003492_3517
C_tmp098352_0000036d_evalfunction_L003492_3513
 mov r0, r23
 mov r1, FP
 sub r1, #-(-12)
 calld PA,#CPYB
 long 8
C_tmp098352_0000036d_evalfunction_L003492_3493
 calld PA,#POPM
 add SP, #32
 calld PA,#RETF
 alignl
C_tmp098108_0000000c_variable_L000128
 calld PA,#NEWF
 sub SP, #64
 calld PA,#PSHM
 long $f80000
 mov r23, r2
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #3 wcz
 if_b jmp #\C_tmp098108_0000000c_variable_L000128_3522
 cmps r22,  #14 wcz
 if_a jmp #\C_tmp098108_0000000c_variable_L000128_3522
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov RI, FP
 sub RI, #-(-68)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-68)
 rdlong r22, r22
 mov r20, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098108_0000000c_variable_L000128_3524
 mov r22, #52
 mov r20, FP
 sub r20, #-(-68)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #41
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-56)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-56)
 rdbyte r19, r22
 cmps r19,  #129 wz
 if_z jmp #\C_tmp098108_0000000c_variable_L000128_3529
 cmps r19,  #130 wz
 if_z jmp #\C_tmp098108_0000000c_variable_L000128_3531
 jmp #\@C_tmp098108_0000000c_variable_L000128_3526
C_tmp098108_0000000c_variable_L000128_3529
 mov r22, #52
 mov r20, FP
 sub r20, #-(-68)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #48
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-52)
 wrlong r22, RI
 jmp #\@C_tmp098108_0000000c_variable_L000128_3527
C_tmp098108_0000000c_variable_L000128_3531
 mov r22, #52
 mov r20, FP
 sub r20, #-(-68)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #48
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-52)
 wrlong r22, RI
 jmp #\@C_tmp098108_0000000c_variable_L000128_3527
C_tmp098108_0000000c_variable_L000128_3526
 mov r22, #135
 mov RI, FP
 sub RI, #-(-56)
 wrbyte r22, RI
C_tmp098108_0000000c_variable_L000128_3527
C_tmp098108_0000000c_variable_L000128_3524
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r0, r23
 mov r1, FP
 sub r1, #-(-56)
 calld PA,#CPYB
 long 8
 jmp #\@C_tmp098108_0000000c_variable_L000128_3520
C_tmp098108_0000000c_variable_L000128_3522
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov RI, FP
 sub RI, #-(-64)
 wrlong r0, RI
 mov r22, ##@C_tmp098007_00000009_context_L000027
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098108_0000000c_variable_L000128_3533
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098350_00000363_findargument_L003463
 mov r21, r0
 jmp #\@C_tmp098108_0000000c_variable_L000128_3534
C_tmp098108_0000000c_variable_L000128_3533
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098119_0000000d_findvariable_L000139
 mov r21, r0
C_tmp098108_0000000c_variable_L000128_3534
 mov r22, r21
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098108_0000000c_variable_L000128_3535
 mov r22, r21
 adds r22, #41
 rdbyte r20, r22
 mov RI, FP
 sub RI, #-(-56)
 wrbyte r20, RI
 rdbyte r19, r22
 cmps r19,  #129 wz
 if_z jmp #\C_tmp098108_0000000c_variable_L000128_3540
 cmps r19,  #130 wz
 if_z jmp #\C_tmp098108_0000000c_variable_L000128_3542
 jmp #\@C_tmp098108_0000000c_variable_L000128_3537
C_tmp098108_0000000c_variable_L000128_3540
 mov r2, #129
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r21
 adds r22, #48
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-52)
 wrlong r22, RI
 jmp #\@C_tmp098108_0000000c_variable_L000128_3538
C_tmp098108_0000000c_variable_L000128_3542
 mov r2, #130
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r21
 adds r22, #48
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-52)
 wrlong r22, RI
 jmp #\@C_tmp098108_0000000c_variable_L000128_3538
C_tmp098108_0000000c_variable_L000128_3537
 mov r22, #135
 mov RI, FP
 sub RI, #-(-56)
 wrbyte r22, RI
C_tmp098108_0000000c_variable_L000128_3538
 mov r0, r23
 mov r1, FP
 sub r1, #-(-56)
 calld PA,#CPYB
 long 8
 jmp #\@C_tmp098108_0000000c_variable_L000128_3520
C_tmp098108_0000000c_variable_L000128_3535
 mov RI, FP
 sub RI, #-(-64)
 rdlong r2, RI
 mov r3, FP
 sub r3, #-(-48)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098118_0000000d_findfunction_L000138
 add SP, #4
 mov RI, FP
 sub RI, #-(-60)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-60)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098108_0000000c_variable_L000128_3544
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-64)
 rdlong r20, r20
 adds r22, r20
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov RI, FP
 sub RI, #-(-60)
 rdlong r2, RI
 mov r3, FP
 sub r3, #-(-56)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098352_0000036d_evalfunction_L003492
 add SP, #4
 mov r0, r23
 mov r1, FP
 sub r1, #-(-56)
 calld PA,#CPYB
 long 8
 jmp #\@C_tmp098108_0000000c_variable_L000128_3520
C_tmp098108_0000000c_variable_L000128_3544
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098125_0000000d_addautovar_L000145
 mov r21, r0
 mov r22, r21
 adds r22, #41
 rdbyte r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r21
 adds r22, #41
 rdbyte r19, r22
 cmps r19,  #129 wz
 if_z jmp #\C_tmp098108_0000000c_variable_L000128_3549
 cmps r19,  #130 wz
 if_z jmp #\C_tmp098108_0000000c_variable_L000128_3550
 jmp #\@C_tmp098108_0000000c_variable_L000128_3546
C_tmp098108_0000000c_variable_L000128_3549
 mov r0, r23
 mov r1, ##@C_tmp098116_0000000c_D_U_M_M_Y__I_V_A_L_U_E__L000136
 calld PA,#CPYB
 long 8
 jmp #\@C_tmp098108_0000000c_variable_L000128_3520
C_tmp098108_0000000c_variable_L000128_3550
 mov r0, r23
 mov r1, ##@C_tmp098117_0000000d_D_U_M_M_Y__F_V_A_L_U_E__L000137
 calld PA,#CPYB
 long 8
 jmp #\@C_tmp098108_0000000c_variable_L000128_3520
C_tmp098108_0000000c_variable_L000128_3546
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, r23
 mov r1, ##@C_tmp098116_0000000c_D_U_M_M_Y__I_V_A_L_U_E__L000136
 calld PA,#CPYB
 long 8
C_tmp098108_0000000c_variable_L000128_3520
 calld PA,#POPM
 add SP, #64
 calld PA,#RETF
 alignl
C_tmp098109_0000000c_dimvariable_L000129
 calld PA,#NEWF
 sub SP, #208
 calld PA,#PSHM
 long $f80000
 mov r23, r2
 mov r21, ##0
 mov r22, ##0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #3 wcz
 if_b jmp #\C_tmp098109_0000000c_dimvariable_L000129_3553
 cmps r22,  #14 wcz
 if_a jmp #\C_tmp098109_0000000c_dimvariable_L000129_3553
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov RI, FP
 sub RI, #-(-88)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-88)
 rdlong r22, r22
 mov r20, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098109_0000000c_dimvariable_L000129_3554
 mov r22, #76
 mov r20, FP
 sub r20, #-(-88)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 mov r21, r0
 adds r21, r22
 jmp #\@C_tmp098109_0000000c_dimvariable_L000129_3554
C_tmp098109_0000000c_dimvariable_L000129_3553
 mov r2, FP
 sub r2, #-(-52)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov RI, FP
 sub RI, #-(-92)
 wrlong r0, RI
 mov r2, FP
 sub r2, #-(-52)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098121_0000000d_finddimvar_L000141
 mov r21, r0
C_tmp098109_0000000c_dimvariable_L000129_3554
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098109_0000000c_dimvariable_L000129_3557
 mov RI, FP
 sub RI, #-(-92)
 rdlong r2, RI
 mov r3, FP
 sub r3, #-(-52)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098118_0000000d_findfunction_L000138
 add SP, #4
 mov RI, FP
 sub RI, #-(-84)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-84)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098109_0000000c_dimvariable_L000129_3559
 mov RI, FP
 sub RI, #-(-84)
 rdlong r2, RI
 mov r3, FP
 sub r3, #-(-60)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098352_0000036d_evalfunction_L003492
 add SP, #4
 mov r0, r23
 mov r1, FP
 sub r1, #-(-60)
 calld PA,#CPYB
 long 8
 jmp #\@C_tmp098109_0000000c_dimvariable_L000129_3551
C_tmp098109_0000000c_dimvariable_L000129_3559
 mov r2, FP
 sub r2, #-(-52)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098130_0000000d_autodimvar_L000150
 mov r21, r0
C_tmp098109_0000000c_dimvariable_L000129_3557
 mov r22, r21
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098109_0000000c_dimvariable_L000129_3561
 mov r22, r21
 adds r22, #48
 rdlong r19, r22
 cmps r19,  #1 wcz
 if_b jmp #\C_tmp098109_0000000c_dimvariable_L000129_3563
 cmps r19,  #5 wcz
 if_a jmp #\C_tmp098109_0000000c_dimvariable_L000129_3563
 mov r22, r19
 shl r22, #2
 mov r20, ##@C_tmp098109_0000000c_dimvariable_L000129_3591_L003593-4
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098109_0000000c_dimvariable_L000129_3566
 mov r2, #1
 mov r3, FP
 sub r3, #-(-100)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-100)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-80)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-80)
 rdlong r2, RI
 mov r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #4
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098109_0000000c_dimvariable_L000129_3564
C_tmp098109_0000000c_dimvariable_L000129_3567
 mov r2, #1
 mov r3, FP
 sub r3, #-(-108)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-108)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-80)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-116)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-116)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-76)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-76)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-80)
 rdlong r3, RI
 mov r4, r21
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #8
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098109_0000000c_dimvariable_L000129_3564
C_tmp098109_0000000c_dimvariable_L000129_3570
 mov r2, #1
 mov r3, FP
 sub r3, #-(-124)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-124)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-80)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-132)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-132)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-76)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-140)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-140)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-72)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-72)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-76)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-80)
 rdlong r4, RI
 mov r5, r21
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #12
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098109_0000000c_dimvariable_L000129_3564
C_tmp098109_0000000c_dimvariable_L000129_3575
 mov r2, #1
 mov r3, FP
 sub r3, #-(-148)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-148)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-80)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-156)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-156)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-76)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-164)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-164)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-72)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-172)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-172)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-68)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-68)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-72)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-76)
 rdlong r4, RI
 mov RI, FP
 sub RI, #-(-80)
 rdlong r5, RI
 sub SP, #16
 mov RI, r21
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #16
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098109_0000000c_dimvariable_L000129_3564
C_tmp098109_0000000c_dimvariable_L000129_3582
 mov r2, #1
 mov r3, FP
 sub r3, #-(-180)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-180)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-80)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-188)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-188)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-76)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-196)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-196)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-72)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-204)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-204)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-68)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-212)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-212)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-64)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-64)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-68)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-72)
 rdlong r4, RI
 mov RI, FP
 sub RI, #-(-76)
 rdlong r5, RI
 sub SP, #16
 calld PA,#PSHF
 long -80
 mov RI, r21
 wrlong RI, --PTRA
 mov BC, #24
 add SP, #4
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #20
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
C_tmp098109_0000000c_dimvariable_L000129_3563
C_tmp098109_0000000c_dimvariable_L000129_3564
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098109_0000000c_dimvariable_L000129_3561
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098109_0000000c_dimvariable_L000129_3595
 mov r22, r21
 adds r22, #41
 rdbyte r20, r22
 mov RI, FP
 sub RI, #-(-60)
 wrbyte r20, RI
 rdbyte r19, r22
 cmps r19,  #129 wz
 if_z jmp #\C_tmp098109_0000000c_dimvariable_L000129_3600
 cmps r19,  #130 wz
 if_z jmp #\C_tmp098109_0000000c_dimvariable_L000129_3602
 jmp #\@C_tmp098109_0000000c_dimvariable_L000129_3597
C_tmp098109_0000000c_dimvariable_L000129_3600
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-56)
 wrlong r22, RI
 jmp #\@C_tmp098109_0000000c_dimvariable_L000129_3598
C_tmp098109_0000000c_dimvariable_L000129_3602
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-56)
 wrlong r22, RI
 jmp #\@C_tmp098109_0000000c_dimvariable_L000129_3598
C_tmp098109_0000000c_dimvariable_L000129_3597
 mov r22, #135
 mov RI, FP
 sub RI, #-(-60)
 wrbyte r22, RI
C_tmp098109_0000000c_dimvariable_L000129_3598
 mov r0, r23
 mov r1, FP
 sub r1, #-(-60)
 calld PA,#CPYB
 long 8
 jmp #\@C_tmp098109_0000000c_dimvariable_L000129_3551
C_tmp098109_0000000c_dimvariable_L000129_3595
 mov r0, r23
 mov r1, ##@C_tmp098116_0000000c_D_U_M_M_Y__I_V_A_L_U_E__L000136
 calld PA,#CPYB
 long 8
C_tmp098109_0000000c_dimvariable_L000129_3551
 calld PA,#POPM
 add SP, #208
 calld PA,#RETF
 alignl
C_tmp098110_0000000c_variable_addr_L000130
 calld PA,#NEWF
 sub SP, #60
 calld PA,#PSHM
 long $f80000
 mov r23, r2
 mov r22, #129
 mov RI, FP
 sub RI, #-(-56)
 wrbyte r22, RI
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #3 wcz
 if_b jmp #\C_tmp098110_0000000c_variable_addr_L000130_3606
 cmps r22,  #14 wcz
 if_a jmp #\C_tmp098110_0000000c_variable_addr_L000130_3606
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov RI, FP
 sub RI, #-(-60)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-60)
 rdlong r22, r22
 mov r20, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098110_0000000c_variable_addr_L000130_3608
 mov r22, #52
 mov r20, FP
 sub r20, #-(-60)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #41
 rdbyte r19, r22
 cmps r19,  #129 wz
 if_z jmp #\C_tmp098110_0000000c_variable_addr_L000130_3613
 cmps r19,  #130 wz
 if_z jmp #\C_tmp098110_0000000c_variable_addr_L000130_3615
 cmps r19,  #131 wz
 if_z jmp #\C_tmp098110_0000000c_variable_addr_L000130_3617
 jmp #\@C_tmp098110_0000000c_variable_addr_L000130_3610
C_tmp098110_0000000c_variable_addr_L000130_3613
 mov r22, #52
 mov r20, FP
 sub r20, #-(-60)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #48
 mov RI, FP
 sub RI, #-(-52)
 wrlong r22, RI
 jmp #\@C_tmp098110_0000000c_variable_addr_L000130_3611
C_tmp098110_0000000c_variable_addr_L000130_3615
 mov r22, #52
 mov r20, FP
 sub r20, #-(-60)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #48
 mov RI, FP
 sub RI, #-(-52)
 wrlong r22, RI
 jmp #\@C_tmp098110_0000000c_variable_addr_L000130_3611
C_tmp098110_0000000c_variable_addr_L000130_3617
 mov r22, #52
 mov r20, FP
 sub r20, #-(-60)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #48
 mov RI, FP
 sub RI, #-(-52)
 wrlong r22, RI
 jmp #\@C_tmp098110_0000000c_variable_addr_L000130_3611
C_tmp098110_0000000c_variable_addr_L000130_3610
 mov r22, #0
 mov RI, FP
 sub RI, #-(-52)
 wrlong r22, RI
C_tmp098110_0000000c_variable_addr_L000130_3611
C_tmp098110_0000000c_variable_addr_L000130_3608
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r0, r23
 mov r1, FP
 sub r1, #-(-56)
 calld PA,#CPYB
 long 8
 jmp #\@C_tmp098110_0000000c_variable_addr_L000130_3604
C_tmp098110_0000000c_variable_addr_L000130_3606
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov RI, FP
 sub RI, #-(-64)
 wrlong r0, RI
 mov r22, ##@C_tmp098007_00000009_context_L000027
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098110_0000000c_variable_addr_L000130_3620
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098350_00000363_findargument_L003463
 mov r21, r0
 jmp #\@C_tmp098110_0000000c_variable_addr_L000130_3621
C_tmp098110_0000000c_variable_addr_L000130_3620
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098119_0000000d_findvariable_L000139
 mov r21, r0
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098110_0000000c_variable_addr_L000130_3622
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098125_0000000d_addautovar_L000145
 mov r21, r0
C_tmp098110_0000000c_variable_addr_L000130_3622
C_tmp098110_0000000c_variable_addr_L000130_3621
 mov r22, r21
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098110_0000000c_variable_addr_L000130_3624
 mov r22, r21
 adds r22, #41
 rdbyte r19, r22
 cmps r19,  #129 wz
 if_z jmp #\C_tmp098110_0000000c_variable_addr_L000130_3629
 cmps r19,  #130 wz
 if_z jmp #\C_tmp098110_0000000c_variable_addr_L000130_3631
 cmps r19,  #131 wz
 if_z jmp #\C_tmp098110_0000000c_variable_addr_L000130_3633
 jmp #\@C_tmp098110_0000000c_variable_addr_L000130_3627
C_tmp098110_0000000c_variable_addr_L000130_3629
 mov r2, #129
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r21
 adds r22, #48
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-52)
 wrlong r22, RI
 jmp #\@C_tmp098110_0000000c_variable_addr_L000130_3627
C_tmp098110_0000000c_variable_addr_L000130_3631
 mov r2, #130
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r21
 adds r22, #48
 mov RI, FP
 sub RI, #-(-52)
 wrlong r22, RI
 jmp #\@C_tmp098110_0000000c_variable_addr_L000130_3627
C_tmp098110_0000000c_variable_addr_L000130_3633
 mov r2, #131
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r21
 adds r22, #48
 mov RI, FP
 sub RI, #-(-52)
 wrlong r22, RI
C_tmp098110_0000000c_variable_addr_L000130_3627
 mov r0, r23
 mov r1, FP
 sub r1, #-(-56)
 calld PA,#CPYB
 long 8
 jmp #\@C_tmp098110_0000000c_variable_addr_L000130_3604
C_tmp098110_0000000c_variable_addr_L000130_3624
 mov r2, #4
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, r23
 mov r1, ##@C_tmp098116_0000000c_D_U_M_M_Y__I_V_A_L_U_E__L000136
 calld PA,#CPYB
 long 8
C_tmp098110_0000000c_variable_addr_L000130_3604
 calld PA,#POPM
 add SP, #60
 calld PA,#RETF
 alignl
C_tmp098111_0000000c_dimvariable_addr_L000131
 calld PA,#NEWF
 sub SP, #204
 calld PA,#PSHM
 long $f80000
 mov r23, r2
 mov r21, ##0
 mov r22, ##0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, #129
 mov RI, FP
 sub RI, #-(-16)
 wrbyte r22, RI
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #3 wcz
 if_b jmp #\C_tmp098111_0000000c_dimvariable_addr_L000131_3637
 cmps r22,  #14 wcz
 if_a jmp #\C_tmp098111_0000000c_dimvariable_addr_L000131_3637
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov RI, FP
 sub RI, #-(-40)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 mov r20, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098111_0000000c_dimvariable_addr_L000131_3638
 mov r22, #76
 mov r20, FP
 sub r20, #-(-40)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 mov r21, r0
 adds r21, r22
 jmp #\@C_tmp098111_0000000c_dimvariable_addr_L000131_3638
C_tmp098111_0000000c_dimvariable_addr_L000131_3637
 mov r2, FP
 sub r2, #-(-84)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov RI, FP
 sub RI, #-(-88)
 wrlong r0, RI
 mov r2, FP
 sub r2, #-(-84)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098121_0000000d_finddimvar_L000141
 mov r21, r0
C_tmp098111_0000000c_dimvariable_addr_L000131_3638
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r21
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098111_0000000c_dimvariable_addr_L000131_3641
 mov r22, r21
 adds r22, #48
 rdlong r19, r22
 cmps r19,  #1 wcz
 if_b jmp #\C_tmp098111_0000000c_dimvariable_addr_L000131_3643
 cmps r19,  #5 wcz
 if_a jmp #\C_tmp098111_0000000c_dimvariable_addr_L000131_3643
 mov r22, r19
 shl r22, #2
 mov r20, ##@C_tmp098111_0000000c_dimvariable_addr_L000131_3671_L003673-4
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098111_0000000c_dimvariable_addr_L000131_3646
 mov r2, #1
 mov r3, FP
 sub r3, #-(-96)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-96)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-36)
 rdlong r2, RI
 mov r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #4
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098111_0000000c_dimvariable_addr_L000131_3644
C_tmp098111_0000000c_dimvariable_addr_L000131_3647
 mov r2, #1
 mov r3, FP
 sub r3, #-(-104)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-104)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-112)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-112)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-32)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-32)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-36)
 rdlong r3, RI
 mov r4, r21
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #8
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098111_0000000c_dimvariable_addr_L000131_3644
C_tmp098111_0000000c_dimvariable_addr_L000131_3650
 mov r2, #1
 mov r3, FP
 sub r3, #-(-120)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-120)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-128)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-128)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-32)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-136)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-136)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-28)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-28)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-32)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-36)
 rdlong r4, RI
 mov r5, r21
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #12
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098111_0000000c_dimvariable_addr_L000131_3644
C_tmp098111_0000000c_dimvariable_addr_L000131_3655
 mov r2, #1
 mov r3, FP
 sub r3, #-(-144)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-144)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-152)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-152)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-32)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-160)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-160)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-28)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-168)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-168)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-24)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-24)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-28)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-32)
 rdlong r4, RI
 mov RI, FP
 sub RI, #-(-36)
 rdlong r5, RI
 sub SP, #16
 mov RI, r21
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #16
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_tmp098111_0000000c_dimvariable_addr_L000131_3644
C_tmp098111_0000000c_dimvariable_addr_L000131_3662
 mov r2, #1
 mov r3, FP
 sub r3, #-(-176)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-176)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-184)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-184)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-32)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-192)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-192)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-28)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-200)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-200)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-24)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-208)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-208)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-20)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-20)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-24)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-28)
 rdlong r4, RI
 mov RI, FP
 sub RI, #-(-32)
 rdlong r5, RI
 sub SP, #16
 calld PA,#PSHF
 long -36
 mov RI, r21
 wrlong RI, --PTRA
 mov BC, #24
 add SP, #4
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #20
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
C_tmp098111_0000000c_dimvariable_addr_L000131_3643
C_tmp098111_0000000c_dimvariable_addr_L000131_3644
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098111_0000000c_dimvariable_addr_L000131_3642
C_tmp098111_0000000c_dimvariable_addr_L000131_3641
 mov r2, #4
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, r23
 mov r1, ##@C_tmp098116_0000000c_D_U_M_M_Y__I_V_A_L_U_E__L000136
 calld PA,#CPYB
 long 8
 jmp #\@C_tmp098111_0000000c_dimvariable_addr_L000131_3635
C_tmp098111_0000000c_dimvariable_addr_L000131_3642
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098111_0000000c_dimvariable_addr_L000131_3675
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r0, r23
 mov r1, FP
 sub r1, #-(-16)
 calld PA,#CPYB
 long 8
 jmp #\@C_tmp098111_0000000c_dimvariable_addr_L000131_3635
C_tmp098111_0000000c_dimvariable_addr_L000131_3675
 mov r2, #4
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, r23
 mov r1, ##@C_tmp098116_0000000c_D_U_M_M_Y__I_V_A_L_U_E__L000136
 calld PA,#CPYB
 long 8
C_tmp098111_0000000c_dimvariable_addr_L000131_3635
 calld PA,#POPM
 add SP, #204
 calld PA,#RETF
 alignl
C_tmp098045_0000000b_strcmp_i_L000065
 calld PA,#NEWF
 calld PA,#PSHM
 long $f40000
 mov r23, r3
 mov r21, r2
 jmp #\@C_tmp098045_0000000b_strcmp_i_L000065_3680
C_tmp098045_0000000b_strcmp_i_L000065_3679
 adds r23, #1
 adds r21, #1
C_tmp098045_0000000b_strcmp_i_L000065_3680
 rdbyte r22, r23
 mov r20, #0
 cmps r22, r20 wz
 if_z jmp #\C_tmp098045_0000000b_strcmp_i_L000065_3683
 rdbyte r18, r21
 cmps r18, r20 wz
 if_z jmp #\C_tmp098045_0000000b_strcmp_i_L000065_3683
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 mov r22, r0
 rdbyte r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 cmps r22, r0 wz
 if_z jmp #\C_tmp098045_0000000b_strcmp_i_L000065_3679
C_tmp098045_0000000b_strcmp_i_L000065_3683
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 mov r22, r0
 rdbyte r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 mov r20, r0
 mov r0, r22
 subs r0, r20
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098046_0000000b_strncmp_i_L000066
 calld PA,#NEWF
 calld PA,#PSHM
 long $fe0000
 mov r23, r4
 mov r21, r3
 mov r19, r2
 mov r17, #0
 cmps r19,  #0 wcz
 if_a jmp #\C_tmp098046_0000000b_strncmp_i_L000066_3688
 mov r0, #0
 jmp #\@C_tmp098046_0000000b_strncmp_i_L000066_3684
C_tmp098046_0000000b_strncmp_i_L000066_3687
 adds r23, #1
 adds r21, #1
 adds r17, #1
C_tmp098046_0000000b_strncmp_i_L000066_3688
 rdbyte r22, r23
 mov r20, #0
 cmps r22, r20 wz
 if_z jmp #\C_tmp098046_0000000b_strncmp_i_L000066_3692
 rdbyte r18, r21
 cmps r18, r20 wz
 if_z jmp #\C_tmp098046_0000000b_strncmp_i_L000066_3692
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 mov r22, r0
 rdbyte r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 cmps r22, r0 wz
 if_nz jmp #\C_tmp098046_0000000b_strncmp_i_L000066_3692
 mov r22, r19
 subs r22, #1
 cmps r17, r22 wcz
 if_b jmp #\C_tmp098046_0000000b_strncmp_i_L000066_3687
C_tmp098046_0000000b_strncmp_i_L000066_3692
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 mov r22, r0
 rdbyte r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 mov r20, r0
 mov r0, r22
 subs r0, r20
C_tmp098046_0000000b_strncmp_i_L000066_3684
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098119_0000000d_findvariable_L000139
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r2
 mov r21, #0
 jmp #\@C_tmp098119_0000000d_findvariable_L000139_3697
C_tmp098119_0000000d_findvariable_L000139_3694
 mov r2, r23
 mov r22, #52

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 mov r3, r0
 adds r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098045_0000000b_strcmp_i_L000065
 add SP, #4
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098119_0000000d_findvariable_L000139_3698
 mov r22, #52

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r0, r22
 jmp #\@C_tmp098119_0000000d_findvariable_L000139_3693
C_tmp098119_0000000d_findvariable_L000139_3698
 adds r21, #1
C_tmp098119_0000000d_findvariable_L000139_3697
 mov r22, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r22, r22
 cmps r21, r22 wcz
 if_b jmp #\C_tmp098119_0000000d_findvariable_L000139_3694
 mov r0, ##0
C_tmp098119_0000000d_findvariable_L000139_3693
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098120_0000000d_findvarindx_L000140
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r2
 mov r21, #0
 jmp #\@C_tmp098120_0000000d_findvarindx_L000140_3704
C_tmp098120_0000000d_findvarindx_L000140_3701
 mov r2, r23
 mov r22, #52

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 mov r3, r0
 adds r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098045_0000000b_strcmp_i_L000065
 add SP, #4
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098120_0000000d_findvarindx_L000140_3705
 mov r0, r21
 jmp #\@C_tmp098120_0000000d_findvarindx_L000140_3700
C_tmp098120_0000000d_findvarindx_L000140_3705
 adds r21, #1
C_tmp098120_0000000d_findvarindx_L000140_3704
 mov r22, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r22, r22
 cmps r21, r22 wcz
 if_b jmp #\C_tmp098120_0000000d_findvarindx_L000140_3701
 mov r0, ##-1
C_tmp098120_0000000d_findvarindx_L000140_3700
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098121_0000000d_finddimvar_L000141
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r2
 mov r21, #0
 jmp #\@C_tmp098121_0000000d_finddimvar_L000141_3711
C_tmp098121_0000000d_finddimvar_L000141_3708
 mov r2, r23
 mov r22, #76

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 mov r3, r0
 adds r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098045_0000000b_strcmp_i_L000065
 add SP, #4
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098121_0000000d_finddimvar_L000141_3712
 mov r22, #76

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r0, r22
 jmp #\@C_tmp098121_0000000d_finddimvar_L000141_3707
C_tmp098121_0000000d_finddimvar_L000141_3712
 adds r21, #1
C_tmp098121_0000000d_finddimvar_L000141_3711
 mov r22, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r22, r22
 cmps r21, r22 wcz
 if_b jmp #\C_tmp098121_0000000d_finddimvar_L000141_3708
 mov r0, ##0
C_tmp098121_0000000d_finddimvar_L000141_3707
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098122_0000000d_finddimvarindx_L000142
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r2
 mov r21, #0
 jmp #\@C_tmp098122_0000000d_finddimvarindx_L000142_3718
C_tmp098122_0000000d_finddimvarindx_L000142_3715
 mov r2, r23
 mov r22, #76

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 mov r3, r0
 adds r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098045_0000000b_strcmp_i_L000065
 add SP, #4
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098122_0000000d_finddimvarindx_L000142_3719
 mov r0, r21
 jmp #\@C_tmp098122_0000000d_finddimvarindx_L000142_3714
C_tmp098122_0000000d_finddimvarindx_L000142_3719
 adds r21, #1
C_tmp098122_0000000d_finddimvarindx_L000142_3718
 mov r22, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r22, r22
 cmps r21, r22 wcz
 if_b jmp #\C_tmp098122_0000000d_finddimvarindx_L000142_3715
 mov r0, ##-1
C_tmp098122_0000000d_finddimvarindx_L000142_3714
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098123_0000000d_dimension_L000143
 calld PA,#NEWF
 sub SP, #32
 calld PA,#PSHM
 long $fea000
 mov RI, FP
 add RI, #8
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r2, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r3, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r4, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r5, BC
 mov r19, #1
 mov r15, #1
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 cmps r22,  #5 wcz
 if_be jmp #\C_tmp098123_0000000d_dimension_L000143_3722
 mov r2, #6
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3721
C_tmp098123_0000000d_dimension_L000143_3722
 mov RI, FP
 add RI, #8
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098121_0000000d_finddimvar_L000141
 mov r21, r0
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098123_0000000d_dimension_L000143_3724
 mov RI, FP
 add RI, #8
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098129_0000000d_adddimvar_L000149
 mov r21, r0
C_tmp098123_0000000d_dimension_L000143_3724
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098123_0000000d_dimension_L000143_3726
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3721
C_tmp098123_0000000d_dimension_L000143_3726
 mov r22, r21
 adds r22, #48
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098123_0000000d_dimension_L000143_3728
 mov r23, #0
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3733
C_tmp098123_0000000d_dimension_L000143_3730
 mov r22, r23
 shl r22, #2
 mov r20, r21
 adds r20, #52
 adds r22, r20
 rdlong r22, r22

  stalli

 qmul r15, r22
 getqx r0

  allowi

 mov r15, r0
 adds r23, #1
C_tmp098123_0000000d_dimension_L000143_3733
 mov r22, r21
 adds r22, #48
 rdlong r22, r22
 cmps r23, r22 wcz
 if_b jmp #\C_tmp098123_0000000d_dimension_L000143_3730
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3729
C_tmp098123_0000000d_dimension_L000143_3728
 mov r15, #0
C_tmp098123_0000000d_dimension_L000143_3729
 mov r17, FP
 add r17, #16
 mov r23, #0
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3738
C_tmp098123_0000000d_dimension_L000143_3735
 mov r22, r17
 adds r22, #4
 mov r17, r22
 mov r20, r23
 shl r20, #2
 mov r18, FP
 sub r18, #-(-24)
 adds r20, r18
 mov r18, ##-4
 adds r22, r18
 rdlong r22, r22
 wrlong r22, r20
 mov r22, r23
 shl r22, #2
 mov r20, FP
 sub r20, #-(-24)
 adds r22, r20
 rdlong r22, r22
 adds r22, #1
 mov r20, ##@C_tmp098025_0000000a_base_L000045
 rdlong r20, r20
 subs r22, r20

  stalli

 qmul r19, r22
 getqx r0

  allowi

 mov r19, r0
 adds r23, #1
C_tmp098123_0000000d_dimension_L000143_3738
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 cmps r23, r22 wcz
 if_b jmp #\C_tmp098123_0000000d_dimension_L000143_3735
 mov r22, r21
 adds r22, #41
 rdbyte r13, r22
 cmps r13,  #129 wz
 if_z jmp #\C_tmp098123_0000000d_dimension_L000143_3742
 cmps r13,  #130 wz
 if_z jmp #\C_tmp098123_0000000d_dimension_L000143_3749
 cmps r13,  #131 wz
 if_z jmp #\C_tmp098123_0000000d_dimension_L000143_3756
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3739
C_tmp098123_0000000d_dimension_L000143_3742
 mov r22, r19
 mov r2, r22
 shl r2, #2
 mov r22, r21
 adds r22, #72
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_realloc
 add SP, #4
 mov RI, FP
 sub RI, #-(-28)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098123_0000000d_dimension_L000143_3743
 mov r22, r21
 adds r22, #72
 mov r20, FP
 sub r20, #-(-28)
 rdlong r20, r20
 wrlong r20, r22
 mov r23, #0
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3748
C_tmp098123_0000000d_dimension_L000143_3745
 mov r22, r23
 shl r22, #2
 mov r20, r21
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 mov r20, #0
 wrlong r20, r22
 adds r23, #1
C_tmp098123_0000000d_dimension_L000143_3748
 cmps r23, r19 wcz
 if_b jmp #\C_tmp098123_0000000d_dimension_L000143_3745
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3740
C_tmp098123_0000000d_dimension_L000143_3743
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3721
C_tmp098123_0000000d_dimension_L000143_3749
 mov r22, r19
 mov r2, r22
 shl r2, #2
 mov r22, r21
 adds r22, #72
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_realloc
 add SP, #4
 mov RI, FP
 sub RI, #-(-32)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-32)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098123_0000000d_dimension_L000143_3750
 mov r22, r21
 adds r22, #72
 mov r20, FP
 sub r20, #-(-32)
 rdlong r20, r20
 wrlong r20, r22
 mov r23, #0
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3755
C_tmp098123_0000000d_dimension_L000143_3752
 mov r22, r23
 shl r22, #2
 mov r20, r21
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 mov r20, ##@C_tmp098054_0000000b_do_dim_L000074_1198_L001199
 rdlong r20, r20
 wrlong r20, r22
 adds r23, #1
C_tmp098123_0000000d_dimension_L000143_3755
 cmps r23, r19 wcz
 if_b jmp #\C_tmp098123_0000000d_dimension_L000143_3752
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3740
C_tmp098123_0000000d_dimension_L000143_3750
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3721
C_tmp098123_0000000d_dimension_L000143_3756
 mov r22, r21
 adds r22, #72
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098123_0000000d_dimension_L000143_3757
 mov r23, r19
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3762
C_tmp098123_0000000d_dimension_L000143_3759
 mov r22, r23
 shl r22, #2
 mov r20, r21
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098123_0000000d_dimension_L000143_3763
 mov r22, r23
 shl r22, #2
 mov r20, r21
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r22, r23
 shl r22, #2
 mov r20, r21
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 mov r20, ##0
 wrlong r20, r22
C_tmp098123_0000000d_dimension_L000143_3763
 adds r23, #1
C_tmp098123_0000000d_dimension_L000143_3762
 cmps r23, r15 wcz
 if_b jmp #\C_tmp098123_0000000d_dimension_L000143_3759
C_tmp098123_0000000d_dimension_L000143_3757
 mov r22, r19
 mov r2, r22
 shl r2, #2
 mov r22, r21
 adds r22, #72
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_realloc
 add SP, #4
 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098123_0000000d_dimension_L000143_3765
 mov r22, r21
 adds r22, #72
 mov r20, FP
 sub r20, #-(-36)
 rdlong r20, r20
 wrlong r20, r22
 mov r23, #0
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3770
C_tmp098123_0000000d_dimension_L000143_3767
 mov r22, r23
 shl r22, #2
 mov r20, r21
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 mov r20, ##0
 wrlong r20, r22
 adds r23, #1
C_tmp098123_0000000d_dimension_L000143_3770
 cmps r23, r19 wcz
 if_b jmp #\C_tmp098123_0000000d_dimension_L000143_3767
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3740
C_tmp098123_0000000d_dimension_L000143_3765
 mov r23, #0
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3774
C_tmp098123_0000000d_dimension_L000143_3771
 mov r22, r23
 shl r22, #2
 mov r20, r21
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098123_0000000d_dimension_L000143_3775
 mov r22, r23
 shl r22, #2
 mov r20, r21
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r22, r23
 shl r22, #2
 mov r20, r21
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 mov r20, ##0
 wrlong r20, r22
C_tmp098123_0000000d_dimension_L000143_3775
 adds r23, #1
C_tmp098123_0000000d_dimension_L000143_3774
 cmps r23, r15 wcz
 if_b jmp #\C_tmp098123_0000000d_dimension_L000143_3771
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3721
C_tmp098123_0000000d_dimension_L000143_3739
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
 jmp #\@C_tmp098123_0000000d_dimension_L000143_3721
C_tmp098123_0000000d_dimension_L000143_3740
 mov r23, #0
C_tmp098123_0000000d_dimension_L000143_3777
 mov r22, r23
 shl r22, #2
 mov r20, r21
 adds r20, #52
 adds r20, r22
 mov r18, FP
 sub r18, #-(-24)
 adds r22, r18
 rdlong r22, r22
 adds r22, #1
 mov r18, ##@C_tmp098025_0000000a_base_L000045
 rdlong r18, r18
 subs r22, r18
 wrlong r22, r20
 adds r23, #1
 cmps r23,  #5 wcz
 if_b jmp #\C_tmp098123_0000000d_dimension_L000143_3777
 mov r22, r21
 adds r22, #48
 mov r20, FP
 add r20, #12
 rdlong r20, r20
 wrlong r20, r22
 mov r0, r21
C_tmp098123_0000000d_dimension_L000143_3721
 calld PA,#POPM
 add SP, #32
 calld PA,#RETF
 alignl
C_tmp098124_0000000d_getdimvar_L000144
 calld PA,#NEWF
 sub SP, #36
 calld PA,#PSHM
 long $fd5000
 mov RI, FP
 add RI, #8
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r2, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r3, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r4, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r5, BC
 mov r22, ##0
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 mov r21, FP
 add r21, #12
 mov r23, #0
 jmp #\@C_tmp098124_0000000d_getdimvar_L000144_3786
C_tmp098124_0000000d_getdimvar_L000144_3783
 mov r22, r21
 adds r22, #4
 mov r21, r22
 mov r20, r23
 shl r20, #2
 mov r18, FP
 sub r18, #-(-24)
 adds r20, r18
 mov r18, ##-4
 adds r22, r18
 rdlong r22, r22
 mov r18, ##@C_tmp098025_0000000a_base_L000045
 rdlong r18, r18
 subs r22, r18
 wrlong r22, r20
 adds r23, #1
C_tmp098124_0000000d_getdimvar_L000144_3786
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #48
 rdlong r22, r22
 cmps r23, r22 wcz
 if_b jmp #\C_tmp098124_0000000d_getdimvar_L000144_3783
 mov r23, #0
 jmp #\@C_tmp098124_0000000d_getdimvar_L000144_3790
C_tmp098124_0000000d_getdimvar_L000144_3787
 mov r22, r23
 shl r22, #2
 mov r20, FP
 sub r20, #-(-24)
 adds r20, r22
 rdlong r20, r20
 mov r18, FP
 add r18, #8
 rdlong r18, r18
 adds r18, #52
 adds r22, r18
 rdlong r22, r22
 cmps r20, r22 wcz
 if_a jmp #\C_tmp098124_0000000d_getdimvar_L000144_3793
 cmps r20,  #0 wcz
 if_ae jmp #\C_tmp098124_0000000d_getdimvar_L000144_3791
C_tmp098124_0000000d_getdimvar_L000144_3793
 mov r2, #5
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
 jmp #\@C_tmp098124_0000000d_getdimvar_L000144_3781
C_tmp098124_0000000d_getdimvar_L000144_3791
 adds r23, #1
C_tmp098124_0000000d_getdimvar_L000144_3790
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #48
 rdlong r22, r22
 cmps r23, r22 wcz
 if_b jmp #\C_tmp098124_0000000d_getdimvar_L000144_3787
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #41
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098124_0000000d_getdimvar_L000144_3794
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #48
 rdlong r19, r22
 cmps r19,  #1 wcz
 if_b jmp #\C_tmp098124_0000000d_getdimvar_L000144_3795
 cmps r19,  #5 wcz
 if_a jmp #\C_tmp098124_0000000d_getdimvar_L000144_3795
 mov r22, r19
 shl r22, #2
 mov r20, ##@C_tmp098124_0000000d_getdimvar_L000144_3814_L003816-4
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098124_0000000d_getdimvar_L000144_3799
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 shl r22, #2
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 jmp #\@C_tmp098124_0000000d_getdimvar_L000144_3795
C_tmp098124_0000000d_getdimvar_L000144_3800
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-20)
 rdlong r20, r20
 mov r18, r22
 adds r18, #52
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20
 adds r20, r0
 shl r20, #2
 adds r22, #72
 rdlong r22, r22
 adds r22, r20
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 jmp #\@C_tmp098124_0000000d_getdimvar_L000144_3795
C_tmp098124_0000000d_getdimvar_L000144_3802
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #52
 rdlong r20, r20
 mov r18, FP
 sub r18, #-(-16)
 rdlong r18, r18
 mov r16, r22
 adds r16, #56
 rdlong r16, r16

  stalli

 qmul r20, r16
 getqx r0

  allowi


  stalli

 qmul r18, r0
 getqx r0

  allowi

 mov RI, FP
 sub RI, #-(-32)
 wrlong r0, RI
 mov r18, FP
 sub r18, #-(-20)
 rdlong r18, r18

  stalli

 qmul r18, r20
 getqx r0

  allowi

 mov r20, FP
 sub r20, #-(-32)
 rdlong r20, r20
 adds r20, r0
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18
 adds r20, r18
 shl r20, #2
 adds r22, #72
 rdlong r22, r22
 adds r22, r20
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 jmp #\@C_tmp098124_0000000d_getdimvar_L000144_3795
C_tmp098124_0000000d_getdimvar_L000144_3805
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #52
 rdlong r20, r20
 mov r18, r22
 adds r18, #56
 rdlong r18, r18
 mov r16, FP
 sub r16, #-(-12)
 rdlong r16, r16
 mov r14, r20
 adds r14, r18
 mov r12, r22
 adds r12, #60
 rdlong r12, r12
 adds r14, r12

  stalli

 qmul r16, r14
 getqx r0

  allowi

 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r16, FP
 sub r16, #-(-16)
 rdlong r16, r16

  stalli

 qmul r20, r18
 getqx r0

  allowi


  stalli

 qmul r16, r0
 getqx r0

  allowi

 mov r18, FP
 sub r18, #-(-36)
 rdlong r18, r18
 adds r18, r0
 mov r16, FP
 sub r16, #-(-20)
 rdlong r16, r16

  stalli

 qmul r16, r20
 getqx r0

  allowi

 mov r20, r18
 adds r20, r0
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18
 adds r20, r18
 shl r20, #2
 adds r22, #72
 rdlong r22, r22
 adds r22, r20
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
C_tmp098124_0000000d_getdimvar_L000144_3809
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #52
 rdlong r20, r20
 mov r18, r22
 adds r18, #56
 rdlong r18, r18
 adds r18, r20
 mov r16, r22
 adds r16, #60
 rdlong r16, r16
 adds r16, r18
 mov r14, FP
 sub r14, #-(-8)
 rdlong r14, r14
 mov r12, r22
 adds r12, #64
 rdlong r12, r12
 adds r12, r16

  stalli

 qmul r14, r12
 getqx r0

  allowi

 mov RI, FP
 sub RI, #-(-40)
 wrlong r0, RI
 mov r14, FP
 sub r14, #-(-12)
 rdlong r14, r14

  stalli

 qmul r14, r16
 getqx r0

  allowi

 mov r16, FP
 sub r16, #-(-40)
 rdlong r16, r16
 adds r16, r0
 mov r14, FP
 sub r14, #-(-16)
 rdlong r14, r14

  stalli

 qmul r14, r18
 getqx r0

  allowi

 mov r18, r16
 adds r18, r0
 mov r16, FP
 sub r16, #-(-20)
 rdlong r16, r16

  stalli

 qmul r16, r20
 getqx r0

  allowi

 mov r20, r18
 adds r20, r0
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18
 adds r20, r18
 shl r20, #2
 adds r22, #72
 rdlong r22, r22
 adds r22, r20
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 jmp #\@C_tmp098124_0000000d_getdimvar_L000144_3795
C_tmp098124_0000000d_getdimvar_L000144_3794
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #41
 rdbyte r22, r22
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098124_0000000d_getdimvar_L000144_3818
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #48
 rdlong r19, r22
 cmps r19,  #1 wcz
 if_b jmp #\C_tmp098124_0000000d_getdimvar_L000144_3819
 cmps r19,  #5 wcz
 if_a jmp #\C_tmp098124_0000000d_getdimvar_L000144_3819
 mov r22, r19
 shl r22, #2
 mov r20, ##@C_tmp098124_0000000d_getdimvar_L000144_3838_L003840-4
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098124_0000000d_getdimvar_L000144_3823
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 shl r22, #2
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 jmp #\@C_tmp098124_0000000d_getdimvar_L000144_3819
C_tmp098124_0000000d_getdimvar_L000144_3824
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-20)
 rdlong r20, r20
 mov r18, r22
 adds r18, #52
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20
 adds r20, r0
 shl r20, #2
 adds r22, #72
 rdlong r22, r22
 adds r22, r20
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 jmp #\@C_tmp098124_0000000d_getdimvar_L000144_3819
C_tmp098124_0000000d_getdimvar_L000144_3826
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #52
 rdlong r20, r20
 mov r18, FP
 sub r18, #-(-16)
 rdlong r18, r18
 mov r16, r22
 adds r16, #56
 rdlong r16, r16

  stalli

 qmul r20, r16
 getqx r0

  allowi


  stalli

 qmul r18, r0
 getqx r0

  allowi

 mov RI, FP
 sub RI, #-(-32)
 wrlong r0, RI
 mov r18, FP
 sub r18, #-(-20)
 rdlong r18, r18

  stalli

 qmul r18, r20
 getqx r0

  allowi

 mov r20, FP
 sub r20, #-(-32)
 rdlong r20, r20
 adds r20, r0
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18
 adds r20, r18
 shl r20, #2
 adds r22, #72
 rdlong r22, r22
 adds r22, r20
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 jmp #\@C_tmp098124_0000000d_getdimvar_L000144_3819
C_tmp098124_0000000d_getdimvar_L000144_3829
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #52
 rdlong r20, r20
 mov r18, r22
 adds r18, #56
 rdlong r18, r18
 mov r16, FP
 sub r16, #-(-12)
 rdlong r16, r16
 mov r14, r20
 adds r14, r18
 mov r12, r22
 adds r12, #60
 rdlong r12, r12
 adds r14, r12

  stalli

 qmul r16, r14
 getqx r0

  allowi

 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r16, FP
 sub r16, #-(-16)
 rdlong r16, r16

  stalli

 qmul r20, r18
 getqx r0

  allowi


  stalli

 qmul r16, r0
 getqx r0

  allowi

 mov r18, FP
 sub r18, #-(-36)
 rdlong r18, r18
 adds r18, r0
 mov r16, FP
 sub r16, #-(-20)
 rdlong r16, r16

  stalli

 qmul r16, r20
 getqx r0

  allowi

 mov r20, r18
 adds r20, r0
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18
 adds r20, r18
 shl r20, #2
 adds r22, #72
 rdlong r22, r22
 adds r22, r20
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
C_tmp098124_0000000d_getdimvar_L000144_3833
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #52
 rdlong r20, r20
 mov r18, r22
 adds r18, #56
 rdlong r18, r18
 adds r18, r20
 mov r16, r22
 adds r16, #60
 rdlong r16, r16
 adds r16, r18
 mov r14, FP
 sub r14, #-(-8)
 rdlong r14, r14
 mov r12, r22
 adds r12, #64
 rdlong r12, r12
 adds r12, r16

  stalli

 qmul r14, r12
 getqx r0

  allowi

 mov RI, FP
 sub RI, #-(-40)
 wrlong r0, RI
 mov r14, FP
 sub r14, #-(-12)
 rdlong r14, r14

  stalli

 qmul r14, r16
 getqx r0

  allowi

 mov r16, FP
 sub r16, #-(-40)
 rdlong r16, r16
 adds r16, r0
 mov r14, FP
 sub r14, #-(-16)
 rdlong r14, r14

  stalli

 qmul r14, r18
 getqx r0

  allowi

 mov r18, r16
 adds r18, r0
 mov r16, FP
 sub r16, #-(-20)
 rdlong r16, r16

  stalli

 qmul r16, r20
 getqx r0

  allowi

 mov r20, r18
 adds r20, r0
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18
 adds r20, r18
 shl r20, #2
 adds r22, #72
 rdlong r22, r22
 adds r22, r20
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 jmp #\@C_tmp098124_0000000d_getdimvar_L000144_3819
C_tmp098124_0000000d_getdimvar_L000144_3818
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #41
 rdbyte r22, r22
 cmps r22,  #131 wz
 if_nz jmp #\C_tmp098124_0000000d_getdimvar_L000144_3842
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #48
 rdlong r19, r22
 cmps r19,  #1 wcz
 if_b jmp #\C_tmp098124_0000000d_getdimvar_L000144_3844
 cmps r19,  #5 wcz
 if_a jmp #\C_tmp098124_0000000d_getdimvar_L000144_3844
 mov r22, r19
 shl r22, #2
 mov r20, ##@C_tmp098124_0000000d_getdimvar_L000144_3862_L003864-4
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098124_0000000d_getdimvar_L000144_3847
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 shl r22, #2
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 jmp #\@C_tmp098124_0000000d_getdimvar_L000144_3845
C_tmp098124_0000000d_getdimvar_L000144_3848
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-20)
 rdlong r20, r20
 mov r18, r22
 adds r18, #52
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20
 adds r20, r0
 shl r20, #2
 adds r22, #72
 rdlong r22, r22
 adds r22, r20
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 jmp #\@C_tmp098124_0000000d_getdimvar_L000144_3845
C_tmp098124_0000000d_getdimvar_L000144_3850
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #52
 rdlong r20, r20
 mov r18, FP
 sub r18, #-(-16)
 rdlong r18, r18
 mov r16, r22
 adds r16, #56
 rdlong r16, r16

  stalli

 qmul r20, r16
 getqx r0

  allowi


  stalli

 qmul r18, r0
 getqx r0

  allowi

 mov RI, FP
 sub RI, #-(-32)
 wrlong r0, RI
 mov r18, FP
 sub r18, #-(-20)
 rdlong r18, r18

  stalli

 qmul r18, r20
 getqx r0

  allowi

 mov r20, FP
 sub r20, #-(-32)
 rdlong r20, r20
 adds r20, r0
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18
 adds r20, r18
 shl r20, #2
 adds r22, #72
 rdlong r22, r22
 adds r22, r20
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 jmp #\@C_tmp098124_0000000d_getdimvar_L000144_3845
C_tmp098124_0000000d_getdimvar_L000144_3853
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #52
 rdlong r20, r20
 mov r18, r22
 adds r18, #56
 rdlong r18, r18
 mov r16, FP
 sub r16, #-(-12)
 rdlong r16, r16
 mov r14, r20
 adds r14, r18
 mov r12, r22
 adds r12, #60
 rdlong r12, r12
 adds r14, r12

  stalli

 qmul r16, r14
 getqx r0

  allowi

 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r16, FP
 sub r16, #-(-16)
 rdlong r16, r16

  stalli

 qmul r20, r18
 getqx r0

  allowi


  stalli

 qmul r16, r0
 getqx r0

  allowi

 mov r18, FP
 sub r18, #-(-36)
 rdlong r18, r18
 adds r18, r0
 mov r16, FP
 sub r16, #-(-20)
 rdlong r16, r16

  stalli

 qmul r16, r20
 getqx r0

  allowi

 mov r20, r18
 adds r20, r0
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18
 adds r20, r18
 shl r20, #2
 adds r22, #72
 rdlong r22, r22
 adds r22, r20
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
C_tmp098124_0000000d_getdimvar_L000144_3857
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #52
 rdlong r20, r20
 mov r18, r22
 adds r18, #56
 rdlong r18, r18
 adds r18, r20
 mov r16, r22
 adds r16, #60
 rdlong r16, r16
 adds r16, r18
 mov r14, FP
 sub r14, #-(-8)
 rdlong r14, r14
 mov r12, r22
 adds r12, #64
 rdlong r12, r12
 adds r12, r16

  stalli

 qmul r14, r12
 getqx r0

  allowi

 mov RI, FP
 sub RI, #-(-40)
 wrlong r0, RI
 mov r14, FP
 sub r14, #-(-12)
 rdlong r14, r14

  stalli

 qmul r14, r16
 getqx r0

  allowi

 mov r16, FP
 sub r16, #-(-40)
 rdlong r16, r16
 adds r16, r0
 mov r14, FP
 sub r14, #-(-16)
 rdlong r14, r14

  stalli

 qmul r14, r18
 getqx r0

  allowi

 mov r18, r16
 adds r18, r0
 mov r16, FP
 sub r16, #-(-20)
 rdlong r16, r16

  stalli

 qmul r16, r20
 getqx r0

  allowi

 mov r20, r18
 adds r20, r0
 mov r18, FP
 sub r18, #-(-24)
 rdlong r18, r18
 adds r20, r18
 shl r20, #2
 adds r22, #72
 rdlong r22, r22
 adds r22, r20
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
C_tmp098124_0000000d_getdimvar_L000144_3844
C_tmp098124_0000000d_getdimvar_L000144_3845
C_tmp098124_0000000d_getdimvar_L000144_3842
C_tmp098124_0000000d_getdimvar_L000144_3819
C_tmp098124_0000000d_getdimvar_L000144_3795
 mov r22, FP
 sub r22, #-(-28)
 rdlong r0, r22
C_tmp098124_0000000d_getdimvar_L000144_3781
 calld PA,#POPM
 add SP, #36
 calld PA,#RETF
 alignl
C_tmp098125_0000000d_addautovar_L000145
 calld PA,#NEWF
 calld PA,#PSHM
 long $f00000
 mov r23, r2
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 mov r22, r0
 shl r22, #2
 mov r20, ##@C_tmp098003_00000009_deftype_L000023-260
 adds r22, r20
 rdlong r21, r22
 cmps r21,  #129 wz
 if_z jmp #\C_tmp098125_0000000d_addautovar_L000145_3871
 cmps r21,  #130 wz
 if_z jmp #\C_tmp098125_0000000d_addautovar_L000145_3872
 jmp #\@C_tmp098125_0000000d_addautovar_L000145_3867
C_tmp098125_0000000d_addautovar_L000145_3871
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098126_0000000d_addinteger_L000146
 mov r22, r0
 jmp #\@C_tmp098125_0000000d_addautovar_L000145_3866
C_tmp098125_0000000d_addautovar_L000145_3872
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098127_0000000d_addfloat_L000147
 mov r22, r0
 jmp #\@C_tmp098125_0000000d_addautovar_L000145_3866
C_tmp098125_0000000d_addautovar_L000145_3867
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098128_0000000d_addstring_L000148
 mov r22, r0
C_tmp098125_0000000d_addautovar_L000145_3866
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098126_0000000d_addinteger_L000146
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $d40000
 mov r23, r2
 mov r22, #52
 mov r20, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r20
 adds r20, #1

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r2, r0
 mov r3, ##@C_tmp098015_00000009_variables_L000035
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_realloc
 add SP, #4
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098126_0000000d_addinteger_L000146_3874
 mov r22, ##@C_tmp098015_00000009_variables_L000035
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 wrlong r20, ##@C_tmp098015_00000009_variables_L000035
 mov r2, r23
 mov r20, #52
 mov r18, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 rdlong r22, r22
 mov r3, r0
 adds r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
 mov r22, #52
 mov r20, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #41
 mov r20, #129
 wrbyte r20, r22
 mov r22, #52
 mov r20, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #48
 mov r20, #0
 wrlong r20, r22
 mov r22, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r22
 adds r20, #1
 wrlong r20, ##@C_tmp098016_00000009_nvariables_L000036
 mov r20, #52
 rdlong r22, r22

  stalli

 qmul r20, r22
 getqx r0

  allowi

 mov r22, r0
 subs r22, #52
 mov r20, ##@C_tmp098015_00000009_variables_L000035
 rdlong r20, r20
 mov r0, r22
 adds r0, r20
 jmp #\@C_tmp098126_0000000d_addinteger_L000146_3873
C_tmp098126_0000000d_addinteger_L000146_3874
 mov r2, ##@C_errno
 rdlong r2, r2
 mov r3, ##@C_tmp098126_0000000d_addinteger_L000146_3876_L003877
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_printf
 add SP, #4
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
C_tmp098126_0000000d_addinteger_L000146_3873
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
 alignl
C_tmp098127_0000000d_addfloat_L000147
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $d40000
 mov r23, r2
 mov r22, #52
 mov r20, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r20
 adds r20, #1

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r2, r0
 mov r3, ##@C_tmp098015_00000009_variables_L000035
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_realloc
 add SP, #4
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098127_0000000d_addfloat_L000147_3879
 mov r22, ##@C_tmp098015_00000009_variables_L000035
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 wrlong r20, ##@C_tmp098015_00000009_variables_L000035
 mov r2, r23
 mov r20, #52
 mov r18, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 rdlong r22, r22
 mov r3, r0
 adds r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
 mov r22, #52
 mov r20, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #41
 mov r20, #130
 wrbyte r20, r22
 mov r22, #52
 mov r20, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #48
 mov r20, ##@C_tmp098054_0000000b_do_dim_L000074_1198_L001199
 rdlong r20, r20
 wrlong r20, r22
 mov r22, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r22
 adds r20, #1
 wrlong r20, ##@C_tmp098016_00000009_nvariables_L000036
 mov r20, #52
 rdlong r22, r22

  stalli

 qmul r20, r22
 getqx r0

  allowi

 mov r22, r0
 subs r22, #52
 mov r20, ##@C_tmp098015_00000009_variables_L000035
 rdlong r20, r20
 mov r0, r22
 adds r0, r20
 jmp #\@C_tmp098127_0000000d_addfloat_L000147_3878
C_tmp098127_0000000d_addfloat_L000147_3879
 mov r2, ##@C_errno
 rdlong r2, r2
 mov r3, ##@C_tmp098126_0000000d_addinteger_L000146_3876_L003877
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_printf
 add SP, #4
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
C_tmp098127_0000000d_addfloat_L000147_3878
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
 alignl
C_tmp098128_0000000d_addstring_L000148
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $d40000
 mov r23, r2
 mov r22, #52
 mov r20, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r20
 adds r20, #1

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r2, r0
 mov r3, ##@C_tmp098015_00000009_variables_L000035
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_realloc
 add SP, #4
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098128_0000000d_addstring_L000148_3882
 mov r22, ##@C_tmp098015_00000009_variables_L000035
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 wrlong r20, ##@C_tmp098015_00000009_variables_L000035
 mov r2, r23
 mov r20, #52
 mov r18, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 rdlong r22, r22
 mov r3, r0
 adds r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
 mov r22, #52
 mov r20, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #41
 mov r20, #131
 wrbyte r20, r22
 mov r22, #52
 mov r20, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #44
 mov r20, #0
 wrlong r20, r22
 mov r22, #52
 mov r20, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #48
 mov r20, ##0
 wrlong r20, r22
 mov r22, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r22
 adds r20, #1
 wrlong r20, ##@C_tmp098016_00000009_nvariables_L000036
 mov r20, #52
 rdlong r22, r22

  stalli

 qmul r20, r22
 getqx r0

  allowi

 mov r22, r0
 subs r22, #52
 mov r20, ##@C_tmp098015_00000009_variables_L000035
 rdlong r20, r20
 mov r0, r22
 adds r0, r20
 jmp #\@C_tmp098128_0000000d_addstring_L000148_3881
C_tmp098128_0000000d_addstring_L000148_3882
 mov r2, ##@C_errno
 rdlong r2, r2
 mov r3, ##@C_tmp098126_0000000d_addinteger_L000146_3876_L003877
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_printf
 add SP, #4
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
C_tmp098128_0000000d_addstring_L000148_3881
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
 alignl
C_tmp098129_0000000d_adddimvar_L000149
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $d40000
 mov r23, r2
 mov r22, #76
 mov r20, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r20, r20
 adds r20, #1

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r2, r0
 mov r3, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_realloc
 add SP, #4
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098129_0000000d_adddimvar_L000149_3885
 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 wrlong r20, ##@C_tmp098017_00000009_dimvariables_L000037
 mov r2, r23
 mov r20, #76
 mov r18, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 rdlong r22, r22
 mov r3, r0
 adds r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
 mov r22, #76
 mov r20, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r22, r0
 adds r22, #48
 mov r20, #0
 wrlong r20, r22
 mov r2, #37
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strchr
 add SP, #4
 mov r22, r0
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098129_0000000d_adddimvar_L000149_3887
 mov r22, #76
 mov r20, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r22, r0
 adds r22, #41
 mov r20, #129
 wrbyte r20, r22
 mov r22, #76
 mov r20, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r22, r0
 adds r22, #72
 mov r20, ##0
 wrlong r20, r22
 jmp #\@C_tmp098129_0000000d_adddimvar_L000149_3888
C_tmp098129_0000000d_adddimvar_L000149_3887
 mov r2, #36
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strchr
 add SP, #4
 mov r22, r0
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098129_0000000d_adddimvar_L000149_3889
 mov r22, #76
 mov r20, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r22, r0
 adds r22, #41
 mov r20, #131
 wrbyte r20, r22
 mov r22, #76
 mov r20, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r22, r0
 adds r22, #44
 mov r20, #0
 wrlong r20, r22
 mov r22, #76
 mov r20, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r22, r0
 adds r22, #72
 mov r20, ##0
 wrlong r20, r22
 jmp #\@C_tmp098129_0000000d_adddimvar_L000149_3890
C_tmp098129_0000000d_adddimvar_L000149_3889
 mov r2, #33
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strchr
 add SP, #4
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098129_0000000d_adddimvar_L000149_3893
 mov r2, #35
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strchr
 add SP, #4
 mov r22, r0
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098129_0000000d_adddimvar_L000149_3891
C_tmp098129_0000000d_adddimvar_L000149_3893
 mov r22, #76
 mov r20, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r22, r0
 adds r22, #41
 mov r20, #130
 wrbyte r20, r22
 mov r22, #76
 mov r20, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r22, r0
 adds r22, #72
 mov r20, ##0
 wrlong r20, r22
 jmp #\@C_tmp098129_0000000d_adddimvar_L000149_3892
C_tmp098129_0000000d_adddimvar_L000149_3891
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 mov r22, r0
 mov r20, #76
 mov r18, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r20, r20
 adds r20, r0
 adds r20, #41
 shl r22, #2
 mov r18, ##@C_tmp098003_00000009_deftype_L000023-260
 adds r22, r18
 rdlong r22, r22
 wrbyte r22, r20
 mov r22, #76
 mov r20, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 adds r22, r0
 adds r22, #72
 mov r20, ##0
 wrlong r20, r22
C_tmp098129_0000000d_adddimvar_L000149_3892
C_tmp098129_0000000d_adddimvar_L000149_3890
C_tmp098129_0000000d_adddimvar_L000149_3888
 mov r22, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r20, r22
 adds r20, #1
 wrlong r20, ##@C_tmp098018_00000009_ndimvariables_L000038
 mov r20, #76
 rdlong r22, r22

  stalli

 qmul r20, r22
 getqx r0

  allowi

 mov r22, r0
 subs r22, #76
 mov r20, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r20, r20
 mov r0, r22
 adds r0, r20
 jmp #\@C_tmp098129_0000000d_adddimvar_L000149_3884
C_tmp098129_0000000d_adddimvar_L000149_3885
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
C_tmp098129_0000000d_adddimvar_L000149_3884
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
 alignl
C_tmp098130_0000000d_autodimvar_L000150
 calld PA,#NEWF
 sub SP, #28
 calld PA,#PSHM
 long $fea000
 mov r23, r2
 mov r19, ##0
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-24)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-24)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov r21, r0
 mov r15, #1
 jmp #\@C_tmp098130_0000000d_autodimvar_L000150_3897
C_tmp098130_0000000d_autodimvar_L000150_3896
 adds r15, #1
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-32)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-32)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov r21, r0
C_tmp098130_0000000d_autodimvar_L000150_3897
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_z jmp #\C_tmp098130_0000000d_autodimvar_L000150_3896
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 wrlong r22, ##@C_tmp098030_0000000a_current_indx_L000050
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 wrlong r22, ##@C_tmp098033_0000000a_token_L000053
 cmps r15,  #5 wcz
 if_be jmp #\C_tmp098130_0000000d_autodimvar_L000150_3899
 mov r2, #6
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
 jmp #\@C_tmp098130_0000000d_autodimvar_L000150_3895
C_tmp098130_0000000d_autodimvar_L000150_3899
 cmps r15,  #1 wcz
 if_b jmp #\C_tmp098130_0000000d_autodimvar_L000150_3901
 cmps r15,  #5 wcz
 if_a jmp #\C_tmp098130_0000000d_autodimvar_L000150_3901
 mov r22, r15
 shl r22, #2
 mov r20, ##@C_tmp098130_0000000d_autodimvar_L000150_3908_L003910-4
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098130_0000000d_autodimvar_L000150_3903
 mov r2, #10
 mov r3, #1
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_tmp098123_0000000d_dimension_L000143
 add SP, #8
 mov r19, r0
 jmp #\@C_tmp098130_0000000d_autodimvar_L000150_3902
C_tmp098130_0000000d_autodimvar_L000150_3904
 mov r22, #10
 mov r2, r22
 mov r3, r22
 mov r4, #2
 mov r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_tmp098123_0000000d_dimension_L000143
 add SP, #12
 mov r19, r0
 jmp #\@C_tmp098130_0000000d_autodimvar_L000150_3902
C_tmp098130_0000000d_autodimvar_L000150_3905
 mov r22, #10
 mov r2, r22
 mov r3, r22
 mov r4, r22
 mov r5, #3
 sub SP, #16
 mov RI, r23
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_tmp098123_0000000d_dimension_L000143
 add SP, #16
 mov r19, r0
 jmp #\@C_tmp098130_0000000d_autodimvar_L000150_3902
C_tmp098130_0000000d_autodimvar_L000150_3906
 mov r22, #10
 mov r2, r22
 mov r3, r22
 mov r4, r22
 mov r5, r22
 sub SP, #16
 mov RI, #4
 wrlong RI, --PTRA
 mov RI, r23
 wrlong RI, --PTRA
 mov BC, #24
 add SP, #4
 calld PA,#CALA
 long @C_tmp098123_0000000d_dimension_L000143
 add SP, #20
 mov r19, r0
 jmp #\@C_tmp098130_0000000d_autodimvar_L000150_3902
C_tmp098130_0000000d_autodimvar_L000150_3907
 mov r22, #10
 mov r2, r22
 mov r3, r22
 mov r4, r22
 mov r5, r22
 sub SP, #16
 mov RI, #10
 wrlong RI, --PTRA
 mov RI, #5
 wrlong RI, --PTRA
 mov RI, r23
 wrlong RI, --PTRA
 mov BC, #28
 add SP, #4
 calld PA,#CALA
 long @C_tmp098123_0000000d_dimension_L000143
 add SP, #24
 mov r19, r0
C_tmp098130_0000000d_autodimvar_L000150_3901
C_tmp098130_0000000d_autodimvar_L000150_3902
 mov r17, #1
 mov r21, #0
 jmp #\@C_tmp098130_0000000d_autodimvar_L000150_3915
C_tmp098130_0000000d_autodimvar_L000150_3912
 mov r22, r21
 shl r22, #2
 mov r20, r19
 adds r20, #52
 adds r22, r20
 rdlong r22, r22

  stalli

 qmul r17, r22
 getqx r0

  allowi

 mov r17, r0
 adds r21, #1
C_tmp098130_0000000d_autodimvar_L000150_3915
 mov r22, r19
 adds r22, #48
 rdlong r22, r22
 cmps r21, r22 wcz
 if_b jmp #\C_tmp098130_0000000d_autodimvar_L000150_3912
 mov r22, r19
 adds r22, #41
 rdbyte r13, r22
 cmps r13,  #129 wz
 if_z jmp #\C_tmp098130_0000000d_autodimvar_L000150_3919
 cmps r13,  #130 wz
 if_z jmp #\C_tmp098130_0000000d_autodimvar_L000150_3925
 cmps r13,  #131 wz
 if_z jmp #\C_tmp098130_0000000d_autodimvar_L000150_3931
 jmp #\@C_tmp098130_0000000d_autodimvar_L000150_3916
C_tmp098130_0000000d_autodimvar_L000150_3919
 mov r22, #0
 mov r21, r22
 mov r20, r21
 mov r21, r20
 adds r21, #1
 shl r20, #2
 mov r18, r19
 adds r18, #72
 rdlong r18, r18
 adds r20, r18
 wrlong r22, r20
 jmp #\@C_tmp098130_0000000d_autodimvar_L000150_3921
C_tmp098130_0000000d_autodimvar_L000150_3920
 mov r22, r21
 mov r21, r22
 adds r21, #1
 shl r22, #2
 mov r20, r19
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 mov r20, #0
 wrlong r20, r22
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098130_0000000d_autodimvar_L000150_3923
 jmp #\@C_tmp098130_0000000d_autodimvar_L000150_3917
C_tmp098130_0000000d_autodimvar_L000150_3923
C_tmp098130_0000000d_autodimvar_L000150_3921
 cmps r21, r17 wcz
 if_b jmp #\C_tmp098130_0000000d_autodimvar_L000150_3920
 jmp #\@C_tmp098130_0000000d_autodimvar_L000150_3917
C_tmp098130_0000000d_autodimvar_L000150_3925
 mov r21, #0
 mov r22, r21
 mov r21, r22
 adds r21, #1
 shl r22, #2
 mov r20, r19
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 mov r20, ##@C_tmp098054_0000000b_do_dim_L000074_1198_L001199
 rdlong r20, r20
 wrlong r20, r22
 jmp #\@C_tmp098130_0000000d_autodimvar_L000150_3927
C_tmp098130_0000000d_autodimvar_L000150_3926
 mov r22, r21
 mov r21, r22
 adds r21, #1
 shl r22, #2
 mov r20, r19
 adds r20, #72
 rdlong r20, r20
 adds r22, r20
 mov r20, ##@C_tmp098054_0000000b_do_dim_L000074_1198_L001199
 rdlong r20, r20
 wrlong r20, r22
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098130_0000000d_autodimvar_L000150_3929
 jmp #\@C_tmp098130_0000000d_autodimvar_L000150_3917
C_tmp098130_0000000d_autodimvar_L000150_3929
C_tmp098130_0000000d_autodimvar_L000150_3927
 cmps r21, r17 wcz
 if_b jmp #\C_tmp098130_0000000d_autodimvar_L000150_3926
 jmp #\@C_tmp098130_0000000d_autodimvar_L000150_3917
C_tmp098130_0000000d_autodimvar_L000150_3931
 mov r21, #0
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 shl r22, #2
 mov r18, r19
 adds r18, #72
 rdlong r18, r18
 adds r22, r18
 wrlong r0, r22
 jmp #\@C_tmp098130_0000000d_autodimvar_L000150_3933
C_tmp098130_0000000d_autodimvar_L000150_3932
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 shl r22, #2
 mov r18, r19
 adds r18, #72
 rdlong r18, r18
 adds r22, r18
 wrlong r0, r22
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098130_0000000d_autodimvar_L000150_3935
 jmp #\@C_tmp098130_0000000d_autodimvar_L000150_3917
C_tmp098130_0000000d_autodimvar_L000150_3935
C_tmp098130_0000000d_autodimvar_L000150_3933
 cmps r21, r17 wcz
 if_b jmp #\C_tmp098130_0000000d_autodimvar_L000150_3932
C_tmp098130_0000000d_autodimvar_L000150_3916
C_tmp098130_0000000d_autodimvar_L000150_3917
 mov r0, r19
C_tmp098130_0000000d_autodimvar_L000150_3895
 calld PA,#POPM
 add SP, #28
 calld PA,#RETF
 alignl
C_tmp098131_0000000d_stringexpr_L000151
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $d00000
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 mov r20, #34
 cmps r22, r20 wz
 if_z jmp #\C_tmp098131_0000000d_stringexpr_L000151_3942
 cmps r22, r20 wcz
 if_a jmp #\C_tmp098131_0000000d_stringexpr_L000151_3963
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 mov r20, #5
 cmps r22, r20 wz
 if_z jmp #\C_tmp098131_0000000d_stringexpr_L000151_3941
 cmps r22,  #8 wz
 if_z jmp #\C_tmp098131_0000000d_stringexpr_L000151_3940
 cmps r22, r20 wcz
 if_b jmp #\C_tmp098131_0000000d_stringexpr_L000151_3938
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #25 wz
 if_z jmp #\C_tmp098131_0000000d_stringexpr_L000151_3958
 cmps r22,  #27 wz
 if_z jmp #\C_tmp098131_0000000d_stringexpr_L000151_3959
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3938
C_tmp098131_0000000d_stringexpr_L000151_3963
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 mov r20, #131
 cmps r22, r20 wz
 if_z jmp #\C_tmp098131_0000000d_stringexpr_L000151_3941
 cmps r22,  #134 wz
 if_z jmp #\C_tmp098131_0000000d_stringexpr_L000151_3940
 cmps r22, r20 wcz
 if_b jmp #\C_tmp098131_0000000d_stringexpr_L000151_3938
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #240 wcz
 if_b jmp #\C_tmp098131_0000000d_stringexpr_L000151_3938
 cmps r22,  #254 wcz
 if_a jmp #\C_tmp098131_0000000d_stringexpr_L000151_3938
 shl r22, #2
 mov r20, ##@C_tmp098131_0000000d_stringexpr_L000151_3966_L003968-960
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098131_0000000d_stringexpr_L000151_3940
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098148_0000000d_stringdimvar_L000168
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3941
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098149_0000000d_stringvar_L000169
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3942
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098150_0000000d_stringliteral_L000170
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3943
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098132_0000000d_chrstring_L000152
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3944
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098133_0000000d_strstring_L000153
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3945
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098134_0000000d_leftstring_L000154
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3946
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098135_0000000d_rightstring_L000155
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3947
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098136_0000000d_midstring_L000156
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3948
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098147_0000000d_stringstring_L000167
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3949
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098137_0000000d_hexstring_L000157
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3950
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098138_0000000d_octstring_L000158
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3951
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098139_0000000d_datestring_L000159
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3952
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098140_0000000d_timestring_L000160
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3953
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098141_0000000d_spacestring_L000161
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3954
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098142_0000000d_mkistring_L000162
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3955
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098144_0000000d_mkdstring_L000164
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3956
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098143_0000000d_mksstring_L000163
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3957
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098145_0000000d_inkeystring_L000165
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3958
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098146_0000000d_inputstring_L000166
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3959
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098151_0000000d_varptrstring_L000171
 mov r23, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3939
C_tmp098131_0000000d_stringexpr_L000151_3938
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098162_0000000d_is_string_L000182
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098131_0000000d_stringexpr_L000151_3960
 mov r2, #18
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3961
C_tmp098131_0000000d_stringexpr_L000151_3960
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098131_0000000d_stringexpr_L000151_3961
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r22, r0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3937
C_tmp098131_0000000d_stringexpr_L000151_3939
 mov r22, r23
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098131_0000000d_stringexpr_L000151_3970
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3937
C_tmp098131_0000000d_stringexpr_L000151_3970
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #43 wz
 if_z jmp #\C_tmp098131_0000000d_stringexpr_L000151_3974
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3972
C_tmp098131_0000000d_stringexpr_L000151_3974
 mov r2, #43
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098131_0000000d_stringexpr_L000151_3975
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098177_0000000e_mystrconcat_L000197
 add SP, #4
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098131_0000000d_stringexpr_L000151_3977
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r22, FP
 sub r22, #-(-12)
 rdlong r23, r22
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3973
C_tmp098131_0000000d_stringexpr_L000151_3977
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3973
C_tmp098131_0000000d_stringexpr_L000151_3975
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3973
C_tmp098131_0000000d_stringexpr_L000151_3972
 mov r0, r23
 jmp #\@C_tmp098131_0000000d_stringexpr_L000151_3937
C_tmp098131_0000000d_stringexpr_L000151_3973
 mov r0, r23
C_tmp098131_0000000d_stringexpr_L000151_3937
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
 alignl
C_tmp098132_0000000d_chrstring_L000152
 calld PA,#NEWF
 sub SP, #20
 calld PA,#PSHM
 long $f40000
 mov r2, #240
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-24)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-24)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r22, r0
 calld PA,#FLIN
 mov RI, FP
 sub RI, #-(-16)
 wrlong r0, RI
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r20, ##@C_tmp098303_00000236_line_index_L002327_2338_L002339
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_b jmp #\C_tmp098132_0000000d_chrstring_L000152_3981
 mov r0, r22
 mov r1, r20
 calld PA,#FSUB
 calld PA,#INFL
 mov r20, r0
 mov r18, ##$80000000
 mov r21, r20
 add r21, r18
 jmp #\@C_tmp098132_0000000d_chrstring_L000152_3982
C_tmp098132_0000000d_chrstring_L000152_3981
 mov r0, r22
 calld PA,#INFL
 mov r21, r0
C_tmp098132_0000000d_chrstring_L000152_3982
 mov r22, r21
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-11)
 wrbyte r22, RI
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r23, r0
 mov r22, r23
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098132_0000000d_chrstring_L000152_3984
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098132_0000000d_chrstring_L000152_3984
 mov r0, r23
 calld PA,#POPM
 add SP, #20
 calld PA,#RETF
 alignl
C_tmp098133_0000000d_strstring_L000153
 calld PA,#NEWF
 sub SP, #72
 calld PA,#PSHM
 long $d00000
 mov r2, #241
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098133_0000000d_strstring_L000153_3987
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_be jmp #\C_tmp098133_0000000d_strstring_L000153_3989
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov r3, ##@C_tmp098133_0000000d_strstring_L000153_3992_L003993
 mov r4, FP
 sub r4, #-(-76)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sprintf
 add SP, #8
 jmp #\@C_tmp098133_0000000d_strstring_L000153_3988
C_tmp098133_0000000d_strstring_L000153_3989
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov r3, ##@C_tmp098050_0000000b_do_write_L000070_895_L000896
 mov r4, FP
 sub r4, #-(-76)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sprintf
 add SP, #8
 jmp #\@C_tmp098133_0000000d_strstring_L000153_3988
C_tmp098133_0000000d_strstring_L000153_3987
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_tmp098054_0000000b_do_dim_L000074_1198_L001199
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_be jmp #\C_tmp098133_0000000d_strstring_L000153_3996
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov r3, ##@C_tmp098133_0000000d_strstring_L000153_3999_L004000
 mov r4, FP
 sub r4, #-(-76)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sprintf
 add SP, #8
 jmp #\@C_tmp098133_0000000d_strstring_L000153_3997
C_tmp098133_0000000d_strstring_L000153_3996
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov r3, ##@C_tmp098050_0000000b_do_write_L000070_898_L000899
 mov r4, FP
 sub r4, #-(-76)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sprintf
 add SP, #8
C_tmp098133_0000000d_strstring_L000153_3997
C_tmp098133_0000000d_strstring_L000153_3988
 mov r2, FP
 sub r2, #-(-76)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r23, r0
 mov r22, r23
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098133_0000000d_strstring_L000153_4003
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098133_0000000d_strstring_L000153_4003
 mov r0, r23
 calld PA,#POPM
 add SP, #72
 calld PA,#RETF
 alignl
C_tmp098137_0000000d_hexstring_L000157
 calld PA,#NEWF
 sub SP, #72
 calld PA,#PSHM
 long $c00000
 mov r2, #246
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098137_0000000d_hexstring_L000157_4006
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov r3, ##@C_tmp098137_0000000d_hexstring_L000157_4008_L004009
 mov r4, FP
 sub r4, #-(-76)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sprintf
 add SP, #8
 jmp #\@C_tmp098137_0000000d_hexstring_L000157_4007
C_tmp098137_0000000d_hexstring_L000157_4006
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#INFL
 mov r2, r0
 mov r3, ##@C_tmp098137_0000000d_hexstring_L000157_4008_L004009
 mov r4, FP
 sub r4, #-(-76)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sprintf
 add SP, #8
C_tmp098137_0000000d_hexstring_L000157_4007
 mov r2, FP
 sub r2, #-(-76)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r23, r0
 mov r22, r23
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098137_0000000d_hexstring_L000157_4012
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098137_0000000d_hexstring_L000157_4012
 mov r0, r23
 calld PA,#POPM
 add SP, #72
 calld PA,#RETF
 alignl
C_tmp098138_0000000d_octstring_L000158
 calld PA,#NEWF
 sub SP, #72
 calld PA,#PSHM
 long $c00000
 mov r2, #247
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098138_0000000d_octstring_L000158_4015
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov r3, ##@C_tmp098138_0000000d_octstring_L000158_4017_L004018
 mov r4, FP
 sub r4, #-(-76)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sprintf
 add SP, #8
 jmp #\@C_tmp098138_0000000d_octstring_L000158_4016
C_tmp098138_0000000d_octstring_L000158_4015
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#INFL
 mov r2, r0
 mov r3, ##@C_tmp098138_0000000d_octstring_L000158_4017_L004018
 mov r4, FP
 sub r4, #-(-76)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sprintf
 add SP, #8
C_tmp098138_0000000d_octstring_L000158_4016
 mov r2, FP
 sub r2, #-(-76)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r23, r0
 mov r22, r23
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098138_0000000d_octstring_L000158_4021
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098138_0000000d_octstring_L000158_4021
 mov r0, r23
 calld PA,#POPM
 add SP, #72
 calld PA,#RETF
 alignl
C_tmp098141_0000000d_spacestring_L000161
 calld PA,#NEWF
 sub SP, #264
 calld PA,#PSHM
 long $f80000
 mov r2, #254
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-268)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-268)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098153_0000000d_integer_L000173
 mov r21, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 cmps r21,  #0 wcz
 if_b jmp #\C_tmp098141_0000000d_spacestring_L000161_4024
 cmps r21,  #255 wcz
 if_a jmp #\C_tmp098141_0000000d_spacestring_L000161_4024
 mov r23, #0
 jmp #\@C_tmp098141_0000000d_spacestring_L000161_4029
C_tmp098141_0000000d_spacestring_L000161_4026
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r23
 mov r20, #32
 wrbyte r20, r22
 adds r23, #1
C_tmp098141_0000000d_spacestring_L000161_4029
 cmps r23, r21 wcz
 if_b jmp #\C_tmp098141_0000000d_spacestring_L000161_4026
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r23
 mov r20, #0
 wrbyte r20, r22
 jmp #\@C_tmp098141_0000000d_spacestring_L000161_4025
C_tmp098141_0000000d_spacestring_L000161_4024
 mov r2, #20
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098141_0000000d_spacestring_L000161_4025
 mov r2, FP
 sub r2, #-(-260)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r19, r0
 mov r22, r19
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098141_0000000d_spacestring_L000161_4030
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098141_0000000d_spacestring_L000161_4030
 mov r0, r19
 calld PA,#POPM
 add SP, #264
 calld PA,#RETF
 alignl
C_tmp098142_0000000d_mkistring_L000162
 calld PA,#NEWF
 sub SP, #20
 calld PA,#PSHM
 long $400000
 mov r2, #250
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #129 wz
 if_z jmp #\C_tmp098142_0000000d_mkistring_L000162_4033
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
 jmp #\@C_tmp098142_0000000d_mkistring_L000162_4032
C_tmp098142_0000000d_mkistring_L000162_4033
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 mov r2, #4
 mov r3, FP
 sub r3, #-(-24)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098176_0000000e_mystrndup_L000196
 add SP, #4
 mov RI, FP
 sub RI, #-(-16)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098142_0000000d_mkistring_L000162_4036
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098142_0000000d_mkistring_L000162_4036
 mov r22, FP
 sub r22, #-(-16)
 rdlong r0, r22
C_tmp098142_0000000d_mkistring_L000162_4032
 calld PA,#POPM
 add SP, #20
 calld PA,#RETF
 alignl
C_tmp098143_0000000d_mksstring_L000163
 calld PA,#NEWF
 sub SP, #20
 calld PA,#PSHM
 long $400000
 mov r2, #252
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #130 wz
 if_z jmp #\C_tmp098143_0000000d_mksstring_L000163_4039
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
 jmp #\@C_tmp098143_0000000d_mksstring_L000163_4038
C_tmp098143_0000000d_mksstring_L000163_4039
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 mov r2, #4
 mov r3, FP
 sub r3, #-(-24)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098176_0000000e_mystrndup_L000196
 add SP, #4
 mov RI, FP
 sub RI, #-(-16)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098143_0000000d_mksstring_L000163_4042
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098143_0000000d_mksstring_L000163_4042
 mov r22, FP
 sub r22, #-(-16)
 rdlong r0, r22
C_tmp098143_0000000d_mksstring_L000163_4038
 calld PA,#POPM
 add SP, #20
 calld PA,#RETF
 alignl
C_tmp098144_0000000d_mkdstring_L000164
 calld PA,#NEWF
 sub SP, #20
 calld PA,#PSHM
 long $400000
 mov r2, #251
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-12)
 rdbyte r22, r22
 cmps r22,  #130 wz
 if_z jmp #\C_tmp098144_0000000d_mkdstring_L000164_4045
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
 jmp #\@C_tmp098144_0000000d_mkdstring_L000164_4044
C_tmp098144_0000000d_mkdstring_L000164_4045
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 mov r2, #4
 mov r3, FP
 sub r3, #-(-24)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098176_0000000e_mystrndup_L000196
 add SP, #4
 mov RI, FP
 sub RI, #-(-16)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098144_0000000d_mkdstring_L000164_4048
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098144_0000000d_mkdstring_L000164_4048
 mov r22, FP
 sub r22, #-(-16)
 rdlong r0, r22
C_tmp098144_0000000d_mkdstring_L000164_4044
 calld PA,#POPM
 add SP, #20
 calld PA,#RETF
 alignl
C_tmp098151_0000000d_varptrstring_L000171
 calld PA,#NEWF
 sub SP, #24
 calld PA,#PSHM
 long $c00000
 mov r2, #27
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, FP
 sub r2, #-(-20)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098103_0000000c_lvalue_L000123
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098151_0000000d_varptrstring_L000171_4051
 mov r22, FP
 sub r22, #-(-20)
 rdbyte r23, r22
 cmps r23,  #129 wz
 if_z jmp #\C_tmp098151_0000000d_varptrstring_L000171_4056
 cmps r23,  #130 wz
 if_z jmp #\C_tmp098151_0000000d_varptrstring_L000171_4058
 cmps r23,  #131 wz
 if_z jmp #\C_tmp098151_0000000d_varptrstring_L000171_4060
 jmp #\@C_tmp098151_0000000d_varptrstring_L000171_4053
C_tmp098151_0000000d_varptrstring_L000171_4056
 mov r22, FP
 sub r22, #-(-12)
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 jmp #\@C_tmp098151_0000000d_varptrstring_L000171_4054
C_tmp098151_0000000d_varptrstring_L000171_4058
 mov r22, FP
 sub r22, #-(-12)
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 jmp #\@C_tmp098151_0000000d_varptrstring_L000171_4054
C_tmp098151_0000000d_varptrstring_L000171_4060
 mov r22, FP
 sub r22, #-(-12)
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 jmp #\@C_tmp098151_0000000d_varptrstring_L000171_4054
C_tmp098151_0000000d_varptrstring_L000171_4053
 mov r22, #0
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098151_0000000d_varptrstring_L000171_4054
C_tmp098151_0000000d_varptrstring_L000171_4051
 mov r2, #4
 mov r3, FP
 sub r3, #-(-28)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098176_0000000e_mystrndup_L000196
 add SP, #4
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#POPM
 add SP, #24
 calld PA,#RETF
' Catalina Export get_key
 alignl
C_get_key
 calld PA,#NEWF
 calld PA,#PSHM
 long $400000
 mov BC, #0
 calld PA,#CALA
 long @C_k_get
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098145_0000000d_inkeystring_L000165
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $c00000
 mov r2, #253
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_get_key
 mov r22, r0
 mov RI, FP
 sub RI, #-(-8)
 wrbyte r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-7)
 wrbyte r22, RI
 mov r2, #2
 mov r3, FP
 sub r3, #-(-8)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098176_0000000e_mystrndup_L000196
 add SP, #4
 mov r23, r0
 mov r22, r23
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098145_0000000d_inkeystring_L000165_4065
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098145_0000000d_inkeystring_L000165_4065
 mov r0, r23
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
 alignl
C_tmp098146_0000000d_inputstring_L000166
 calld PA,#NEWF
 sub SP, #276
 calld PA,#PSHM
 long $fa8000
 mov r22, #0
 mov RI, FP
 sub RI, #-(-264)
 wrlong r22, RI
 mov r2, #25
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-272)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-272)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r19, r0
 cmps r19,  #0 wcz
 if_b jmp #\C_tmp098146_0000000d_inputstring_L000166_4070
 cmps r19,  #255 wcz
 if_be jmp #\C_tmp098146_0000000d_inputstring_L000166_4068
C_tmp098146_0000000d_inputstring_L000166_4070
 mov r2, #20
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r22, r0
 jmp #\@C_tmp098146_0000000d_inputstring_L000166_4067
C_tmp098146_0000000d_inputstring_L000166_4068
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #44 wz
 if_nz jmp #\C_tmp098146_0000000d_inputstring_L000166_4071
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, #1
 mov RI, FP
 sub RI, #-(-264)
 wrlong r22, RI
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #35 wz
 if_nz jmp #\C_tmp098146_0000000d_inputstring_L000166_4073
 mov r2, #35
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098146_0000000d_inputstring_L000166_4073
 mov r2, #1
 mov r3, FP
 sub r3, #-(-280)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-280)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r17, r0
C_tmp098146_0000000d_inputstring_L000166_4071
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098146_0000000d_inputstring_L000166_4075
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r22, r0
 jmp #\@C_tmp098146_0000000d_inputstring_L000166_4067
C_tmp098146_0000000d_inputstring_L000166_4075
 mov r22, FP
 sub r22, #-(-264)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098146_0000000d_inputstring_L000166_4077
 cmps r17,  #1 wcz
 if_b jmp #\C_tmp098146_0000000d_inputstring_L000166_4079
 cmps r17,  #3 wcz
 if_a jmp #\C_tmp098146_0000000d_inputstring_L000166_4079
 subs r17, #1
 mov r22, #140

  stalli

 qmul r22, r17
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098146_0000000d_inputstring_L000166_4081
 mov r23, #0
 jmp #\@C_tmp098146_0000000d_inputstring_L000166_4086
C_tmp098146_0000000d_inputstring_L000166_4083
 mov r22, #140

  stalli

 qmul r22, r17
 getqx r0

  allowi

 mov r22, ##@C_tmp098014_00000009_F_I_L_E_S__L000034
 adds r22, r0
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_fgetc
 mov r22, r0
 mov r21, r22
 mov r22, r21
 and r22, cviu_m1
 mov r20, ##-1
 cmps r22, r20 wz
 if_nz jmp #\C_tmp098146_0000000d_inputstring_L000166_4087
 jmp #\@C_tmp098146_0000000d_inputstring_L000166_4085
C_tmp098146_0000000d_inputstring_L000166_4087
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r23
 wrbyte r21, r22
 adds r23, #1
C_tmp098146_0000000d_inputstring_L000166_4086
 cmps r23, r19 wcz
 if_b jmp #\C_tmp098146_0000000d_inputstring_L000166_4083
C_tmp098146_0000000d_inputstring_L000166_4085
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r23
 mov r20, #0
 wrbyte r20, r22
 jmp #\@C_tmp098146_0000000d_inputstring_L000166_4078
C_tmp098146_0000000d_inputstring_L000166_4081
 mov r2, #47
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r22, r0
 jmp #\@C_tmp098146_0000000d_inputstring_L000166_4067
C_tmp098146_0000000d_inputstring_L000166_4079
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r22, r0
 jmp #\@C_tmp098146_0000000d_inputstring_L000166_4067
C_tmp098146_0000000d_inputstring_L000166_4077
 mov r23, #0
 jmp #\@C_tmp098146_0000000d_inputstring_L000166_4092
C_tmp098146_0000000d_inputstring_L000166_4089
 mov BC, #0
 calld PA,#CALA
 long @C_wait_key
 mov r22, r0
 mov r21, r22
 mov r22, r21
 and r22, cviu_m1
 cmps r22,  #3 wz
 if_nz jmp #\C_tmp098146_0000000d_inputstring_L000166_4093
 jmp #\@C_tmp098146_0000000d_inputstring_L000166_4091
C_tmp098146_0000000d_inputstring_L000166_4093
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r23
 wrbyte r21, r22
 adds r23, #1
C_tmp098146_0000000d_inputstring_L000166_4092
 cmps r23, r19 wcz
 if_b jmp #\C_tmp098146_0000000d_inputstring_L000166_4089
C_tmp098146_0000000d_inputstring_L000166_4091
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r23
 mov r20, #0
 wrbyte r20, r22
C_tmp098146_0000000d_inputstring_L000166_4078
 mov r2, r23
 adds r2, #1
 mov r3, FP
 sub r3, #-(-260)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098176_0000000e_mystrndup_L000196
 add SP, #4
 mov r15, r0
 mov r22, r15
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098146_0000000d_inputstring_L000166_4095
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098146_0000000d_inputstring_L000166_4095
 mov r0, r15
C_tmp098146_0000000d_inputstring_L000166_4067
 calld PA,#POPM
 add SP, #276
 calld PA,#RETF
 alignl
C_tmp098140_0000000d_timestring_L000160
 calld PA,#NEWF
 sub SP, #68
 calld PA,#PSHM
 long $e00000
 mov r2, #249
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, ##0
 mov BC, #4
 calld PA,#CALA
 long @C_time
 mov RI, FP
 sub RI, #-(-72)
 wrlong r0, RI
 mov r2, FP
 sub r2, #-(-72)
 mov BC, #4
 calld PA,#CALA
 long @C_localtime
 mov r23, r0
 rdlong r2, r23
 mov r22, r23
 adds r22, #4
 rdlong r3, r22
 mov r22, r23
 adds r22, #8
 rdlong r4, r22
 mov r5, ##@C_tmp098140_0000000d_timestring_L000160_4098_L004099
 sub SP, #16
 mov RI, FP
 sub RI, #-(-68)
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_sprintf
 add SP, #16
 mov r2, FP
 sub r2, #-(-68)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r21, r0
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098140_0000000d_timestring_L000160_4100
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098140_0000000d_timestring_L000160_4100
 mov r0, r21
 calld PA,#POPM
 add SP, #68
 calld PA,#RETF
 alignl
C_tmp098139_0000000d_datestring_L000159
 calld PA,#NEWF
 sub SP, #68
 calld PA,#PSHM
 long $f00000
 mov r2, #248
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, ##0
 mov BC, #4
 calld PA,#CALA
 long @C_time
 mov RI, FP
 sub RI, #-(-72)
 wrlong r0, RI
 mov r2, FP
 sub r2, #-(-72)
 mov BC, #4
 calld PA,#CALA
 long @C_localtime
 mov r23, r0
 mov r22, r23
 adds r22, #20
 rdlong r22, r22
 mov r20, ##1900
 mov r2, r22
 adds r2, r20
 mov r22, r23
 adds r22, #12
 rdlong r3, r22
 mov r22, r23
 adds r22, #16
 rdlong r22, r22
 mov r4, r22
 adds r4, #1
 mov r5, ##@C_tmp098139_0000000d_datestring_L000159_4103_L004104
 sub SP, #16
 mov RI, FP
 sub RI, #-(-68)
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_sprintf
 add SP, #16
 mov r2, FP
 sub r2, #-(-68)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r21, r0
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098139_0000000d_datestring_L000159_4105
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098139_0000000d_datestring_L000159_4105
 mov r0, r21
 calld PA,#POPM
 add SP, #68
 calld PA,#RETF
 alignl
C_tmp098134_0000000d_leftstring_L000154
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $f80000
 mov r2, #242
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r23, r0
 mov r22, r23
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098134_0000000d_leftstring_L000154_4108
 mov r0, ##0
 jmp #\@C_tmp098134_0000000d_leftstring_L000154_4107
C_tmp098134_0000000d_leftstring_L000154_4108
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r21, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 cmps r21, r22 wcz
 if_be jmp #\C_tmp098134_0000000d_leftstring_L000154_4110
 mov r0, r23
 jmp #\@C_tmp098134_0000000d_leftstring_L000154_4107
C_tmp098134_0000000d_leftstring_L000154_4110
 cmps r21,  #0 wcz
 if_ae jmp #\C_tmp098134_0000000d_leftstring_L000154_4112
 mov r2, #17
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, r23
 jmp #\@C_tmp098134_0000000d_leftstring_L000154_4107
C_tmp098134_0000000d_leftstring_L000154_4112
 mov r22, r21
 adds r22, r23
 mov r20, #0
 wrbyte r20, r22
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r19, r0
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r22, r19
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098134_0000000d_leftstring_L000154_4114
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098134_0000000d_leftstring_L000154_4114
 mov r0, r19
C_tmp098134_0000000d_leftstring_L000154_4107
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
 alignl
C_tmp098135_0000000d_rightstring_L000155
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $f80000
 mov r2, #243
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r23, r0
 mov r22, r23
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098135_0000000d_rightstring_L000155_4117
 mov r0, ##0
 jmp #\@C_tmp098135_0000000d_rightstring_L000155_4116
C_tmp098135_0000000d_rightstring_L000155_4117
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-12)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r21, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 cmps r21, r22 wcz
 if_be jmp #\C_tmp098135_0000000d_rightstring_L000155_4119
 mov r0, r23
 jmp #\@C_tmp098135_0000000d_rightstring_L000155_4116
C_tmp098135_0000000d_rightstring_L000155_4119
 cmps r21,  #0 wcz
 if_ae jmp #\C_tmp098135_0000000d_rightstring_L000155_4121
 mov r2, #17
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, r23
 jmp #\@C_tmp098135_0000000d_rightstring_L000155_4116
C_tmp098135_0000000d_rightstring_L000155_4121
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r20, r21
 mov r22, r0
 sub r22, r20
 mov r2, r22
 adds r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r19, r0
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r22, r19
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098135_0000000d_rightstring_L000155_4123
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098135_0000000d_rightstring_L000155_4123
 mov r0, r19
C_tmp098135_0000000d_rightstring_L000155_4116
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
 alignl
C_tmp098136_0000000d_midstring_L000156
 calld PA,#NEWF
 sub SP, #20
 calld PA,#PSHM
 long $fa0000
 mov r2, #244
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r23, r0
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-16)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-16)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r17, r0
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-24)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-24)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r21, r0
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r23
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098136_0000000d_midstring_L000156_4126
 mov r0, ##0
 jmp #\@C_tmp098136_0000000d_midstring_L000156_4125
C_tmp098136_0000000d_midstring_L000156_4126
 mov r22, ##-1
 cmps r21, r22 wz
 if_nz jmp #\C_tmp098136_0000000d_midstring_L000156_4128
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r20, r17
 mov r22, r0
 sub r22, r20
 add r22, #1
 mov r21, r22
C_tmp098136_0000000d_midstring_L000156_4128
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 cmps r17, r22 wcz
 if_a jmp #\C_tmp098136_0000000d_midstring_L000156_4132
 cmps r21,  #1 wcz
 if_ae jmp #\C_tmp098136_0000000d_midstring_L000156_4130
C_tmp098136_0000000d_midstring_L000156_4132
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r19, r0
 mov r22, r19
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098136_0000000d_midstring_L000156_4133
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098136_0000000d_midstring_L000156_4133
 mov r0, r19
 jmp #\@C_tmp098136_0000000d_midstring_L000156_4125
C_tmp098136_0000000d_midstring_L000156_4130
 cmps r17,  #1 wcz
 if_ae jmp #\C_tmp098136_0000000d_midstring_L000156_4135
 mov r2, #17
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, r23
 jmp #\@C_tmp098136_0000000d_midstring_L000156_4125
C_tmp098136_0000000d_midstring_L000156_4135
 mov r22, r17
 subs r22, #1
 adds r22, r23
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, r21
 adds r22, #1
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_malloc
 mov r19, r0
 mov r22, r19
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098136_0000000d_midstring_L000156_4137
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, r23
 jmp #\@C_tmp098136_0000000d_midstring_L000156_4125
C_tmp098136_0000000d_midstring_L000156_4137
 mov r2, r21
 mov RI, FP
 sub RI, #-(-8)
 rdlong r3, RI
 mov r4, r19
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_strncpy
 add SP, #8
 mov r22, r21
 adds r22, r19
 mov r20, #0
 wrbyte r20, r22
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r0, r19
C_tmp098136_0000000d_midstring_L000156_4125
 calld PA,#POPM
 add SP, #20
 calld PA,#RETF
 alignl
C_tmp098147_0000000d_stringstring_L000167
 calld PA,#NEWF
 sub SP, #24
 calld PA,#PSHM
 long $faa000
 mov r2, #245
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-20)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-20)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098162_0000000d_is_string_L000182
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098147_0000000d_stringstring_L000167_4140
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098131_0000000d_stringexpr_L000151
 mov r17, r0
 mov r22, #1
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, r17
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098147_0000000d_stringstring_L000167_4141
 mov r0, ##0
 jmp #\@C_tmp098147_0000000d_stringstring_L000167_4139
C_tmp098147_0000000d_stringstring_L000167_4140
 mov r2, #1
 mov r3, FP
 sub r3, #-(-28)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-28)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov r13, r0
 mov r22, #0
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
C_tmp098147_0000000d_stringstring_L000167_4141
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-8)
 rdlong r19, r22
 cmps r19,  #1 wcz
 if_ae jmp #\C_tmp098147_0000000d_stringstring_L000167_4144
 mov r2, r17
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r21, r0
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098147_0000000d_stringstring_L000167_4146
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098147_0000000d_stringstring_L000167_4146
 mov r0, r21
 jmp #\@C_tmp098147_0000000d_stringstring_L000167_4139
C_tmp098147_0000000d_stringstring_L000167_4144
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098147_0000000d_stringstring_L000167_4148
 mov r2, r17
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 mov r15, r22

  stalli

 qmul r19, r15
 getqx r0

  allowi

 mov r22, r0
 adds r22, #1
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_malloc
 mov r21, r0
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098147_0000000d_stringstring_L000167_4150
 mov r2, r17
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
 jmp #\@C_tmp098147_0000000d_stringstring_L000167_4139
C_tmp098147_0000000d_stringstring_L000167_4150
 mov r23, #0
 jmp #\@C_tmp098147_0000000d_stringstring_L000167_4155
C_tmp098147_0000000d_stringstring_L000167_4152
 mov r2, r17

  stalli

 qmul r15, r23
 getqx r0

  allowi

 mov r3, r0
 adds r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
 adds r23, #1
C_tmp098147_0000000d_stringstring_L000167_4155
 cmps r23, r19 wcz
 if_b jmp #\C_tmp098147_0000000d_stringstring_L000167_4152
 mov r2, r17
 mov BC, #4
 calld PA,#CALA
 long @C_free
 jmp #\@C_tmp098147_0000000d_stringstring_L000167_4149
C_tmp098147_0000000d_stringstring_L000167_4148
 mov r22, r19
 adds r22, #1
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_malloc
 mov r21, r0
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098147_0000000d_stringstring_L000167_4156
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
 jmp #\@C_tmp098147_0000000d_stringstring_L000167_4139
C_tmp098147_0000000d_stringstring_L000167_4156
 mov r23, #0
 jmp #\@C_tmp098147_0000000d_stringstring_L000167_4161
C_tmp098147_0000000d_stringstring_L000167_4158
 mov r22, r23
 adds r22, r21
 mov r20, r13
 wrbyte r20, r22
 adds r23, #1
C_tmp098147_0000000d_stringstring_L000167_4161
 cmps r23, r19 wcz
 if_b jmp #\C_tmp098147_0000000d_stringstring_L000167_4158
 mov r22, r23
 adds r22, r21
 mov r20, #0
 wrbyte r20, r22
C_tmp098147_0000000d_stringstring_L000167_4149
 mov r0, r21
C_tmp098147_0000000d_stringstring_L000167_4139
 calld PA,#POPM
 add SP, #24
 calld PA,#RETF
 alignl
C_tmp098148_0000000d_stringdimvar_L000168
 calld PA,#NEWF
 sub SP, #200
 calld PA,#PSHM
 long $f00000
 mov r23, ##0
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #8 wz
 if_nz jmp #\C_tmp098148_0000000d_stringdimvar_L000168_4163
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov RI, FP
 sub RI, #-(-76)
 wrlong r0, RI
 mov r2, #8
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-76)
 rdlong r22, r22
 mov r20, ##@C_tmp098018_00000009_ndimvariables_L000038
 rdlong r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098148_0000000d_stringdimvar_L000168_4164
 mov r22, #76
 mov r20, FP
 sub r20, #-(-76)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098017_00000009_dimvariables_L000037
 rdlong r22, r22
 mov r23, r0
 adds r23, r22
 jmp #\@C_tmp098148_0000000d_stringdimvar_L000168_4164
C_tmp098148_0000000d_stringdimvar_L000168_4163
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov RI, FP
 sub RI, #-(-80)
 wrlong r0, RI
 mov r2, #134
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098121_0000000d_finddimvar_L000141
 mov r23, r0
C_tmp098148_0000000d_stringdimvar_L000168_4164
 mov r22, r23
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098148_0000000d_stringdimvar_L000168_4167
 mov RI, FP
 sub RI, #-(-80)
 rdlong r2, RI
 mov r3, FP
 sub r3, #-(-48)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098118_0000000d_findfunction_L000138
 add SP, #4
 mov RI, FP
 sub RI, #-(-72)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-72)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098148_0000000d_stringdimvar_L000168_4169
 mov RI, FP
 sub RI, #-(-72)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098351_00000365_evalstringfunction_L003473
 mov r22, r0
 jmp #\@C_tmp098148_0000000d_stringdimvar_L000168_4162
C_tmp098148_0000000d_stringdimvar_L000168_4169
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098130_0000000d_autodimvar_L000150
 mov r23, r0
C_tmp098148_0000000d_stringdimvar_L000168_4167
 mov r22, r23
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098148_0000000d_stringdimvar_L000168_4171
 mov r22, r23
 adds r22, #48
 rdlong r21, r22
 cmps r21,  #1 wcz
 if_b jmp #\C_tmp098148_0000000d_stringdimvar_L000168_4173
 cmps r21,  #5 wcz
 if_a jmp #\C_tmp098148_0000000d_stringdimvar_L000168_4173
 mov r22, r21
 shl r22, #2
 mov r20, ##@C_tmp098148_0000000d_stringdimvar_L000168_4201_L004203-4
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098148_0000000d_stringdimvar_L000168_4176
 mov r2, #1
 mov r3, FP
 sub r3, #-(-92)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-92)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-68)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-68)
 rdlong r2, RI
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #4
 mov RI, FP
 sub RI, #-(-84)
 wrlong r0, RI
 jmp #\@C_tmp098148_0000000d_stringdimvar_L000168_4174
C_tmp098148_0000000d_stringdimvar_L000168_4177
 mov r2, #1
 mov r3, FP
 sub r3, #-(-100)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-100)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-68)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-108)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-108)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-64)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-64)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-68)
 rdlong r3, RI
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #8
 mov RI, FP
 sub RI, #-(-84)
 wrlong r0, RI
 jmp #\@C_tmp098148_0000000d_stringdimvar_L000168_4174
C_tmp098148_0000000d_stringdimvar_L000168_4180
 mov r2, #1
 mov r3, FP
 sub r3, #-(-116)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-116)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-68)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-124)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-124)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-64)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-132)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-132)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-60)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-60)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-64)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-68)
 rdlong r4, RI
 mov r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #12
 mov RI, FP
 sub RI, #-(-84)
 wrlong r0, RI
 jmp #\@C_tmp098148_0000000d_stringdimvar_L000168_4174
C_tmp098148_0000000d_stringdimvar_L000168_4185
 mov r2, #1
 mov r3, FP
 sub r3, #-(-140)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-140)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-68)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-148)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-148)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-64)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-156)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-156)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-60)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-164)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-164)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-56)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-56)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-60)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-64)
 rdlong r4, RI
 mov RI, FP
 sub RI, #-(-68)
 rdlong r5, RI
 sub SP, #16
 mov RI, r23
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #16
 mov RI, FP
 sub RI, #-(-84)
 wrlong r0, RI
 jmp #\@C_tmp098148_0000000d_stringdimvar_L000168_4174
C_tmp098148_0000000d_stringdimvar_L000168_4192
 mov r2, #1
 mov r3, FP
 sub r3, #-(-172)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-172)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-68)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-180)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-180)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-64)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-188)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-188)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-60)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-196)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-196)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-56)
 wrlong r0, RI
 mov r2, #44
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov r3, FP
 sub r3, #-(-204)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098104_0000000c_expr_L000124
 add SP, #4
 mov r2, FP
 sub r2, #-(-204)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098152_0000000d_strict_integer_L000172
 mov RI, FP
 sub RI, #-(-52)
 wrlong r0, RI
 mov RI, FP
 sub RI, #-(-52)
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-56)
 rdlong r3, RI
 mov RI, FP
 sub RI, #-(-60)
 rdlong r4, RI
 mov RI, FP
 sub RI, #-(-64)
 rdlong r5, RI
 sub SP, #16
 calld PA,#PSHF
 long -68
 mov RI, r23
 wrlong RI, --PTRA
 mov BC, #24
 add SP, #4
 calld PA,#CALA
 long @C_tmp098124_0000000d_getdimvar_L000144
 add SP, #20
 mov RI, FP
 sub RI, #-(-84)
 wrlong r0, RI
C_tmp098148_0000000d_stringdimvar_L000168_4173
C_tmp098148_0000000d_stringdimvar_L000168_4174
 mov r2, #41
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 jmp #\@C_tmp098148_0000000d_stringdimvar_L000168_4172
C_tmp098148_0000000d_stringdimvar_L000168_4171
 mov r2, #4
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098148_0000000d_stringdimvar_L000168_4172
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098148_0000000d_stringdimvar_L000168_4205
 mov r22, FP
 sub r22, #-(-84)
 rdlong r22, r22
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098148_0000000d_stringdimvar_L000168_4207
 mov r22, FP
 sub r22, #-(-84)
 rdlong r22, r22
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r22, r0
 jmp #\@C_tmp098148_0000000d_stringdimvar_L000168_4162
C_tmp098148_0000000d_stringdimvar_L000168_4207
C_tmp098148_0000000d_stringdimvar_L000168_4205
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r22, r0
C_tmp098148_0000000d_stringdimvar_L000168_4162
 calld PA,#POPM
 add SP, #200
 calld PA,#RETF
 alignl
C_tmp098149_0000000d_stringvar_L000169
 calld PA,#NEWF
 sub SP, #60
 calld PA,#PSHM
 long $d00000
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #5 wz
 if_nz jmp #\C_tmp098149_0000000d_stringvar_L000169_4210
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098167_0000000d_getindex_L000187
 mov RI, FP
 sub RI, #-(-60)
 wrlong r0, RI
 mov r2, #5
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, FP
 sub r22, #-(-60)
 rdlong r22, r22
 mov r20, ##@C_tmp098016_00000009_nvariables_L000036
 rdlong r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C_tmp098149_0000000d_stringvar_L000169_4212
 mov r22, #52
 mov r20, FP
 sub r20, #-(-60)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #48
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098149_0000000d_stringvar_L000169_4214
 mov r22, #52
 mov r20, FP
 sub r20, #-(-60)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #44
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098149_0000000d_stringvar_L000169_4216
 mov r22, #52
 mov r20, FP
 sub r20, #-(-60)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 mov r20, r22
 adds r20, #44
 rdlong r20, r20
 add r20, #1
 mov r2, r20
 adds r22, #48
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098176_0000000e_mystrndup_L000196
 add SP, #4
 mov RI, FP
 sub RI, #-(-64)
 wrlong r0, RI
 mov r22, #52
 mov r20, FP
 sub r20, #-(-60)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #44
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-64)
 rdlong r20, r20
 adds r22, r20
 mov r20, #0
 wrbyte r20, r22
 mov r22, FP
 sub r22, #-(-64)
 rdlong r0, r22
 jmp #\@C_tmp098149_0000000d_stringvar_L000169_4209
C_tmp098149_0000000d_stringvar_L000169_4216
 mov r22, #52
 mov r20, FP
 sub r20, #-(-60)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, ##@C_tmp098015_00000009_variables_L000035
 rdlong r22, r22
 adds r22, r0
 adds r22, #48
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r22, r0
 jmp #\@C_tmp098149_0000000d_stringvar_L000169_4209
C_tmp098149_0000000d_stringvar_L000169_4214
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r22, r0
 jmp #\@C_tmp098149_0000000d_stringvar_L000169_4209
C_tmp098149_0000000d_stringvar_L000169_4212
C_tmp098149_0000000d_stringvar_L000169_4210
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov RI, FP
 sub RI, #-(-52)
 wrlong r0, RI
 mov r22, ##@C_tmp098007_00000009_context_L000027
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098149_0000000d_stringvar_L000169_4218
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098350_00000363_findargument_L003463
 mov r23, r0
 mov r22, r23
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098149_0000000d_stringvar_L000169_4220
 mov r2, #131
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r23
 adds r22, #48
 rdlong r0, r22
 jmp #\@C_tmp098149_0000000d_stringvar_L000169_4209
C_tmp098149_0000000d_stringvar_L000169_4220
C_tmp098149_0000000d_stringvar_L000169_4218
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098119_0000000d_findvariable_L000139
 mov r23, r0
 mov r22, r23
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098149_0000000d_stringvar_L000169_4222
 mov r2, #131
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r22, r23
 adds r22, #48
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098149_0000000d_stringvar_L000169_4224
 mov r22, r23
 adds r22, #48
 rdlong r0, r22
 jmp #\@C_tmp098149_0000000d_stringvar_L000169_4209
C_tmp098149_0000000d_stringvar_L000169_4224
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r22, r0
 jmp #\@C_tmp098149_0000000d_stringvar_L000169_4209
C_tmp098149_0000000d_stringvar_L000169_4222
 mov RI, FP
 sub RI, #-(-52)
 rdlong r2, RI
 mov r3, FP
 sub r3, #-(-48)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098118_0000000d_findfunction_L000138
 add SP, #4
 mov RI, FP
 sub RI, #-(-56)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-56)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098149_0000000d_stringvar_L000169_4226
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-52)
 rdlong r20, r20
 adds r22, r20
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov RI, FP
 sub RI, #-(-56)
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098351_00000365_evalstringfunction_L003473
 mov r22, r0
 jmp #\@C_tmp098149_0000000d_stringvar_L000169_4209
C_tmp098149_0000000d_stringvar_L000169_4226
 mov r2, #131
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, FP
 sub r2, #-(-48)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098128_0000000d_addstring_L000148
 mov r23, r0
 mov r2, ##@C_tmp098001_00000009_nullstr_L000020
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098175_0000000e_mystrdup_L000195
 mov r22, r0
C_tmp098149_0000000d_stringvar_L000169_4209
 calld PA,#POPM
 add SP, #60
 calld PA,#RETF
 alignl
C_tmp098150_0000000d_stringliteral_L000170
 calld PA,#NEWF
 calld PA,#PSHM
 long $fea000
 mov r15, #1
 mov r21, ##0
 mov r22, #0
 mov r20, ##@C_tmp098007_00000009_context_L000027
 rdlong r20, r20
 cmp r20, r22 wz
 if_nz jmp #\C_tmp098150_0000000d_stringliteral_L000170_4229
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #12
 rdlong r20, r20
 mov r23, r20
 cmp r20, r22 wz
 if_z jmp #\C_tmp098150_0000000d_stringliteral_L000170_4229
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r23, r22
 jmp #\@C_tmp098150_0000000d_stringliteral_L000170_4232
C_tmp098150_0000000d_stringliteral_L000170_4229
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #4
 rdlong r20, r20
 mov r23, r22
 adds r23, r20
 jmp #\@C_tmp098150_0000000d_stringliteral_L000170_4232
C_tmp098150_0000000d_stringliteral_L000170_4234
 adds r23, #1
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
C_tmp098150_0000000d_stringliteral_L000170_4235
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098181_00000013_space_or_tab_L000224
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098150_0000000d_stringliteral_L000170_4234
 mov r2, #34
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098173_0000000d_mystrend_L000193
 add SP, #4
 mov r19, r0
 mov r22, r19
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098150_0000000d_stringliteral_L000170_4237
 mov r22, r19
 mov r20, r23
 sub r22, r20
 mov r15, r22
 mov r2, r15
 mov BC, #4
 calld PA,#CALA
 long @C_malloc
 mov r17, r0
 mov r22, r17
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098150_0000000d_stringliteral_L000170_4239
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, r21
 jmp #\@C_tmp098150_0000000d_stringliteral_L000170_4228
C_tmp098150_0000000d_stringliteral_L000170_4239
 mov r2, r23
 mov r3, r17
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098172_0000000d_mystrgrablit_L000192
 add SP, #4
 mov r22, r21
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098150_0000000d_stringliteral_L000170_4241
 mov r2, r17
 mov r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_tmp098177_0000000e_mystrconcat_L000197
 add SP, #4
 mov r13, r0
 mov r2, r17
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r21, r13
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C_tmp098150_0000000d_stringliteral_L000170_4242
 mov r2, #2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, r21
 jmp #\@C_tmp098150_0000000d_stringliteral_L000170_4228
C_tmp098150_0000000d_stringliteral_L000170_4241
 mov r21, r17
C_tmp098150_0000000d_stringliteral_L000170_4242
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, r15
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 jmp #\@C_tmp098150_0000000d_stringliteral_L000170_4238
C_tmp098150_0000000d_stringliteral_L000170_4237
 mov r2, #34
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, r21
 jmp #\@C_tmp098150_0000000d_stringliteral_L000170_4228
C_tmp098150_0000000d_stringliteral_L000170_4238
 mov r2, #34
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098155_0000000d_match_token_L000175
C_tmp098150_0000000d_stringliteral_L000170_4232
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #34 wz
 if_z jmp #\C_tmp098150_0000000d_stringliteral_L000170_4235
 mov r0, r21
C_tmp098150_0000000d_stringliteral_L000170_4228
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098152_0000000d_strict_integer_L000172
 calld PA,#NEWF
 calld PA,#PSHM
 long $d00000
 mov r23, r2
 rdbyte r22, r23
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098152_0000000d_strict_integer_L000172_4246
 mov r22, r23
 adds r22, #4
 rdlong r0, r22
 jmp #\@C_tmp098152_0000000d_strict_integer_L000172_4245
C_tmp098152_0000000d_strict_integer_L000172_4246
 mov r22, r23
 adds r22, #4
 rdlong r22, r22
 mov r20, ##@C_tmp098303_00000236_line_index_L002327_2336_L002337
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_b jmp #\C_tmp098152_0000000d_strict_integer_L000172_4250
 mov r20, ##@C_tmp098303_00000236_line_index_L002327_2338_L002339
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_be jmp #\C_tmp098152_0000000d_strict_integer_L000172_4248
C_tmp098152_0000000d_strict_integer_L000172_4250
 mov r2, #20
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098152_0000000d_strict_integer_L000172_4248
 mov r22, r23
 adds r22, #4
 rdlong r22, r22
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_floor
 mov r20, r0
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_z jmp #\C_tmp098152_0000000d_strict_integer_L000172_4251
 mov r2, #21
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098152_0000000d_strict_integer_L000172_4251
 mov r22, r23
 adds r22, #4
 rdlong r0, r22
 calld PA,#INFL
C_tmp098152_0000000d_strict_integer_L000172_4245
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098153_0000000d_integer_L000173
 calld PA,#NEWF
 calld PA,#PSHM
 long $d00000
 mov r23, r2
 rdbyte r22, r23
 cmps r22,  #129 wz
 if_nz jmp #\C_tmp098153_0000000d_integer_L000173_4254
 mov r22, r23
 adds r22, #4
 rdlong r0, r22
 jmp #\@C_tmp098153_0000000d_integer_L000173_4253
C_tmp098153_0000000d_integer_L000173_4254
 mov r22, r23
 adds r22, #4
 rdlong r22, r22
 mov r20, ##@C_tmp098303_00000236_line_index_L002327_2336_L002337
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_b jmp #\C_tmp098153_0000000d_integer_L000173_4258
 mov r20, ##@C_tmp098303_00000236_line_index_L002327_2338_L002339
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_be jmp #\C_tmp098153_0000000d_integer_L000173_4256
C_tmp098153_0000000d_integer_L000173_4258
 mov r2, #20
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098153_0000000d_integer_L000173_4256
 mov r22, r23
 adds r22, #4
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_floor
 mov r22, r0
 calld PA,#INFL
C_tmp098153_0000000d_integer_L000173_4253
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098154_0000000d_real_L000174
 calld PA,#PSHM
 long $400000
 rdbyte r22, r2
 cmps r22,  #130 wz
 if_nz jmp #\C_tmp098154_0000000d_real_L000174_4260
 mov r22, r2
 adds r22, #4
 rdlong r0, r22
 jmp #\@C_tmp098154_0000000d_real_L000174_4259
C_tmp098154_0000000d_real_L000174_4260
 mov r22, r2
 adds r22, #4
 rdlong r0, r22
 calld PA,#FLIN
C_tmp098154_0000000d_real_L000174_4259
 calld PA,#POPM
 calld PA,#RETN
 alignl
C_tmp098155_0000000d_match_token_L000175
 calld PA,#NEWF
 calld PA,#PSHM
 long $f40000
 mov r23, r2
 mov r22, #0
 mov r20, ##@C_tmp098007_00000009_context_L000027
 rdlong r20, r20
 cmp r20, r22 wz
 if_nz jmp #\C_tmp098155_0000000d_match_token_L000175_4263
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #12
 rdlong r20, r20
 mov r21, r20
 cmp r20, r22 wz
 if_z jmp #\C_tmp098155_0000000d_match_token_L000175_4263
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r21, r22
 jmp #\@C_tmp098155_0000000d_match_token_L000175_4264
C_tmp098155_0000000d_match_token_L000175_4263
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #4
 rdlong r20, r20
 mov r21, r22
 adds r21, r20
 jmp #\@C_tmp098155_0000000d_match_token_L000175_4266
C_tmp098155_0000000d_match_token_L000175_4265
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r21, #1
C_tmp098155_0000000d_match_token_L000175_4266
 rdbyte r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098181_00000013_space_or_tab_L000224
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098155_0000000d_match_token_L000175_4265
C_tmp098155_0000000d_match_token_L000175_4264
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22, r23 wz
 if_z jmp #\C_tmp098155_0000000d_match_token_L000175_4268
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098155_0000000d_match_token_L000175_4262
C_tmp098155_0000000d_match_token_L000175_4268
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098171_0000000d_tokenlen_L000191
 mov r20, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r20, r20
 mov r22, r20
 adds r22, r0
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #2 wz
 if_nz jmp #\C_tmp098155_0000000d_match_token_L000175_4270
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098155_0000000d_match_token_L000175_4270
C_tmp098155_0000000d_match_token_L000175_4262
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098156_0000000d_match_eol_L000176
 calld PA,#NEWF
 calld PA,#PSHM
 long $d40000
 mov r22, #0
 mov r20, ##@C_tmp098007_00000009_context_L000027
 rdlong r20, r20
 cmp r20, r22 wz
 if_nz jmp #\C_tmp098156_0000000d_match_eol_L000176_4273
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #12
 rdlong r20, r20
 mov r23, r20
 cmp r20, r22 wz
 if_z jmp #\C_tmp098156_0000000d_match_eol_L000176_4273
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r23, r22
 jmp #\@C_tmp098156_0000000d_match_eol_L000176_4274
C_tmp098156_0000000d_match_eol_L000176_4273
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #4
 rdlong r20, r20
 mov r23, r22
 adds r23, r20
 jmp #\@C_tmp098156_0000000d_match_eol_L000176_4276
C_tmp098156_0000000d_match_eol_L000176_4275
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r23, #1
C_tmp098156_0000000d_match_eol_L000176_4276
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098181_00000013_space_or_tab_L000224
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098156_0000000d_match_eol_L000176_4275
C_tmp098156_0000000d_match_eol_L000176_4274
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098156_0000000d_match_eol_L000176_4280
 cmps r22,  #10 wz
 if_nz jmp #\C_tmp098156_0000000d_match_eol_L000176_4278
C_tmp098156_0000000d_match_eol_L000176_4280
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r22
 adds r20, #1
 wrlong r20, ##@C_tmp098030_0000000a_current_indx_L000050
 mov r20, #0
 wrlong r20, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, ##@C_tmp098020_00000009_nlines_L000040
 rdlong r20, r20
 cmps r22, r20 wcz
 if_b jmp #\C_tmp098156_0000000d_match_eol_L000176_4281
 mov r22, #1
 wrlong r22, ##@C_tmp098033_0000000a_token_L000053
 jmp #\@C_tmp098156_0000000d_match_eol_L000176_4279
C_tmp098156_0000000d_match_eol_L000176_4281
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 jmp #\@C_tmp098156_0000000d_match_eol_L000176_4279
C_tmp098156_0000000d_match_eol_L000176_4278
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #58 wz
 if_nz jmp #\C_tmp098156_0000000d_match_eol_L000176_4283
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #12
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098156_0000000d_match_eol_L000176_4285
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098030_0000000a_current_indx_L000050
 mov r22, #0
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 jmp #\@C_tmp098156_0000000d_match_eol_L000176_4286
C_tmp098156_0000000d_match_eol_L000176_4285
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r23, #1
 jmp #\@C_tmp098156_0000000d_match_eol_L000176_4288
C_tmp098156_0000000d_match_eol_L000176_4287
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r23, #1
C_tmp098156_0000000d_match_eol_L000176_4288
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098181_00000013_space_or_tab_L000224
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098156_0000000d_match_eol_L000176_4287
C_tmp098156_0000000d_match_eol_L000176_4286
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 jmp #\@C_tmp098156_0000000d_match_eol_L000176_4284
C_tmp098156_0000000d_match_eol_L000176_4283
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #1 wz
 if_z jmp #\C_tmp098156_0000000d_match_eol_L000176_4290
 mov r2, #22
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098156_0000000d_match_eol_L000176_4290
C_tmp098156_0000000d_match_eol_L000176_4284
C_tmp098156_0000000d_match_eol_L000176_4279
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098159_0000000d_find_eol_L000179
 calld PA,#NEWF
 calld PA,#PSHM
 long $fe0000
 mov r21, #0
 mov r22, #0
 mov r20, ##@C_tmp098007_00000009_context_L000027
 rdlong r20, r20
 cmp r20, r22 wz
 if_nz jmp #\C_tmp098159_0000000d_find_eol_L000179_4293
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #12
 rdlong r20, r20
 mov r23, r20
 cmp r20, r22 wz
 if_z jmp #\C_tmp098159_0000000d_find_eol_L000179_4293
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r23, r22
 jmp #\@C_tmp098159_0000000d_find_eol_L000179_4299
C_tmp098159_0000000d_find_eol_L000179_4293
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #4
 rdlong r20, r20
 mov r23, r22
 adds r23, r20
 jmp #\@C_tmp098159_0000000d_find_eol_L000179_4296
C_tmp098159_0000000d_find_eol_L000179_4295
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r23, #1
C_tmp098159_0000000d_find_eol_L000179_4296
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098181_00000013_space_or_tab_L000224
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098159_0000000d_find_eol_L000179_4295
 jmp #\@C_tmp098159_0000000d_find_eol_L000179_4299
C_tmp098159_0000000d_find_eol_L000179_4298
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #167 wz
 if_z jmp #\C_tmp098159_0000000d_find_eol_L000179_4303
 cmps r22,  #39 wz
 if_nz jmp #\C_tmp098159_0000000d_find_eol_L000179_4301
C_tmp098159_0000000d_find_eol_L000179_4303
 jmp #\@C_tmp098159_0000000d_find_eol_L000179_4305
C_tmp098159_0000000d_find_eol_L000179_4304
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r23, #1
C_tmp098159_0000000d_find_eol_L000179_4305
 rdbyte r22, r23
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098159_0000000d_find_eol_L000179_4307
 cmps r22,  #10 wz
 if_nz jmp #\C_tmp098159_0000000d_find_eol_L000179_4304
C_tmp098159_0000000d_find_eol_L000179_4307
 rdbyte r22, r23
 wrlong r22, ##@C_tmp098033_0000000a_token_L000053
 jmp #\@C_tmp098159_0000000d_find_eol_L000179_4302
C_tmp098159_0000000d_find_eol_L000179_4301
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #34 wz
 if_nz jmp #\C_tmp098159_0000000d_find_eol_L000179_4308
 cmps r21,  #0 wz
 if_z jmp #\C_tmp098159_0000000d_find_eol_L000179_4310
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #34 wz
 if_nz jmp #\C_tmp098159_0000000d_find_eol_L000179_4310
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #2
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r23, #2
 jmp #\@C_tmp098159_0000000d_find_eol_L000179_4311
C_tmp098159_0000000d_find_eol_L000179_4310
 cmps r21,  #0 wz
 if_nz jmp #\C_tmp098159_0000000d_find_eol_L000179_4313
 mov r17, #1
 jmp #\@C_tmp098159_0000000d_find_eol_L000179_4314
C_tmp098159_0000000d_find_eol_L000179_4313
 mov r17, #0
C_tmp098159_0000000d_find_eol_L000179_4314
 mov r21, r17
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r23, #1
C_tmp098159_0000000d_find_eol_L000179_4311
 cmps r21,  #0 wz
 if_z jmp #\C_tmp098159_0000000d_find_eol_L000179_4315
 rdbyte r22, r23
 wrlong r22, ##@C_tmp098033_0000000a_token_L000053
 jmp #\@C_tmp098159_0000000d_find_eol_L000179_4309
C_tmp098159_0000000d_find_eol_L000179_4315
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
 jmp #\@C_tmp098159_0000000d_find_eol_L000179_4309
C_tmp098159_0000000d_find_eol_L000179_4308
 cmps r21,  #0 wz
 if_z jmp #\C_tmp098159_0000000d_find_eol_L000179_4317
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, r19
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r23, #1
 rdbyte r22, r23
 wrlong r22, ##@C_tmp098033_0000000a_token_L000053
 jmp #\@C_tmp098159_0000000d_find_eol_L000179_4318
C_tmp098159_0000000d_find_eol_L000179_4317
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098171_0000000d_tokenlen_L000191
 mov r19, r0
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, r19
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r23, r19
 mov BC, #0
 calld PA,#CALA
 long @C_tmp098168_0000000d_gettoken_L000188
 wrlong r0, ##@C_tmp098033_0000000a_token_L000053
C_tmp098159_0000000d_find_eol_L000179_4318
C_tmp098159_0000000d_find_eol_L000179_4309
C_tmp098159_0000000d_find_eol_L000179_4302
C_tmp098159_0000000d_find_eol_L000179_4299
 mov r2, ##@C_tmp098033_0000000a_token_L000053
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098161_0000000d_is_eol_L000181
 cmps r0,  #0 wz
 if_z jmp #\C_tmp098159_0000000d_find_eol_L000179_4298
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098158_0000000d_untokenized_eol_L000178
 calld PA,#NEWF
 calld PA,#PSHM
 long $ea0000
 mov r23, r2
 mov r19, #0
 mov r21, #0
 jmp #\@C_tmp098158_0000000d_untokenized_eol_L000178_4321
C_tmp098158_0000000d_untokenized_eol_L000178_4320
 cmps r21,  #0 wz
 if_nz jmp #\C_tmp098158_0000000d_untokenized_eol_L000178_4323
 mov r2, #3
 mov r3, ##@C_tmp098158_0000000d_untokenized_eol_L000178_4327_L004328
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_tmp098046_0000000b_strncmp_i_L000066
 add SP, #8
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098158_0000000d_untokenized_eol_L000178_4325
 mov r19, #1
 adds r23, #3
 jmp #\@C_tmp098158_0000000d_untokenized_eol_L000178_4326
C_tmp098158_0000000d_untokenized_eol_L000178_4325
 rdbyte r22, r23
 cmps r22,  #39 wz
 if_nz jmp #\C_tmp098158_0000000d_untokenized_eol_L000178_4329
 mov r22, #1
 mov r19, r22
 adds r23, #1
C_tmp098158_0000000d_untokenized_eol_L000178_4329
C_tmp098158_0000000d_untokenized_eol_L000178_4326
C_tmp098158_0000000d_untokenized_eol_L000178_4323
 cmps r19,  #0 wz
 if_z jmp #\C_tmp098158_0000000d_untokenized_eol_L000178_4331
 rdbyte r22, r23
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098158_0000000d_untokenized_eol_L000178_4335
 cmps r22,  #10 wz
 if_nz jmp #\C_tmp098158_0000000d_untokenized_eol_L000178_4333
C_tmp098158_0000000d_untokenized_eol_L000178_4335
 jmp #\@C_tmp098158_0000000d_untokenized_eol_L000178_4322
C_tmp098158_0000000d_untokenized_eol_L000178_4333
 adds r23, #1
 jmp #\@C_tmp098158_0000000d_untokenized_eol_L000178_4332
C_tmp098158_0000000d_untokenized_eol_L000178_4331
 rdbyte r22, r23
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098158_0000000d_untokenized_eol_L000178_4338
 cmps r22,  #10 wz
 if_nz jmp #\C_tmp098158_0000000d_untokenized_eol_L000178_4336
C_tmp098158_0000000d_untokenized_eol_L000178_4338
 jmp #\@C_tmp098158_0000000d_untokenized_eol_L000178_4322
C_tmp098158_0000000d_untokenized_eol_L000178_4336
 rdbyte r22, r23
 cmps r22,  #34 wz
 if_nz jmp #\C_tmp098158_0000000d_untokenized_eol_L000178_4339
 cmps r21,  #0 wz
 if_z jmp #\C_tmp098158_0000000d_untokenized_eol_L000178_4341
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #34 wz
 if_nz jmp #\C_tmp098158_0000000d_untokenized_eol_L000178_4341
 adds r23, #2
 jmp #\@C_tmp098158_0000000d_untokenized_eol_L000178_4340
C_tmp098158_0000000d_untokenized_eol_L000178_4341
 cmps r21,  #0 wz
 if_nz jmp #\C_tmp098158_0000000d_untokenized_eol_L000178_4344
 mov r17, #1
 jmp #\@C_tmp098158_0000000d_untokenized_eol_L000178_4345
C_tmp098158_0000000d_untokenized_eol_L000178_4344
 mov r17, #0
C_tmp098158_0000000d_untokenized_eol_L000178_4345
 mov r21, r17
 adds r23, #1
 jmp #\@C_tmp098158_0000000d_untokenized_eol_L000178_4340
C_tmp098158_0000000d_untokenized_eol_L000178_4339
 rdbyte r22, r23
 cmps r22,  #58 wz
 if_nz jmp #\C_tmp098158_0000000d_untokenized_eol_L000178_4348
 cmps r21,  #0 wz
 if_z jmp #\C_tmp098158_0000000d_untokenized_eol_L000178_4322
C_tmp098158_0000000d_untokenized_eol_L000178_4348
 adds r23, #1
C_tmp098158_0000000d_untokenized_eol_L000178_4340
C_tmp098158_0000000d_untokenized_eol_L000178_4332
C_tmp098158_0000000d_untokenized_eol_L000178_4321
 jmp #\@C_tmp098158_0000000d_untokenized_eol_L000178_4320
C_tmp098158_0000000d_untokenized_eol_L000178_4322
 mov r0, r23
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098160_0000000d_seterror_L000180
 calld PA,#PSHM
 long $500000
 mov r22, #0
 mov r20, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_tmp098160_0000000d_seterror_L000180_4352
 cmps r2, r22 wz
 if_nz jmp #\C_tmp098160_0000000d_seterror_L000180_4350
C_tmp098160_0000000d_seterror_L000180_4352
 wrlong r2, ##@C_tmp098034_0000000a_errorflag_L000054
 cmps r2,  #0 wcz
 if_be jmp #\C_tmp098160_0000000d_seterror_L000180_4353
 mov r22, ##@C_tmp098034_0000000a_errorflag_L000054
 rdlong r22, r22
 wrlong r22, ##@C_tmp098035_0000000a_errorlast_L000055
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 wrlong r22, ##@C_tmp098036_0000000a_errorindx_L000056
C_tmp098160_0000000d_seterror_L000180_4353
C_tmp098160_0000000d_seterror_L000180_4350
 calld PA,#POPM
 calld PA,#RETN
 alignl
C_tmp098167_0000000d_getindex_L000187
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $500000
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #12
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098167_0000000d_getindex_L000187_4356
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 adds r22, r20
 adds r22, #1
 rdbyte r0, r22
 jmp #\@C_tmp098167_0000000d_getindex_L000187_4355
C_tmp098167_0000000d_getindex_L000187_4356
 mov r2, #99
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, #0
C_tmp098167_0000000d_getindex_L000187_4355
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
 alignl
C_tmp098168_0000000d_gettoken_L000188
 calld PA,#NEWF
 sub SP, #56
 calld PA,#PSHM
 long $fea000
 mov r22, #0
 mov r20, ##@C_tmp098007_00000009_context_L000027
 rdlong r20, r20
 cmp r20, r22 wz
 if_nz jmp #\C_tmp098168_0000000d_gettoken_L000188_4359
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #12
 rdlong r20, r20
 mov r23, r20
 cmp r20, r22 wz
 if_z jmp #\C_tmp098168_0000000d_gettoken_L000188_4359
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r23, r22
 rdbyte r22, r23
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098168_0000000d_gettoken_L000188_4361
 mov r0, #0
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4361
 rdbyte r22, r23
 cmps r22,  #255 wz
 if_nz jmp #\C_tmp098168_0000000d_gettoken_L000188_4363
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 mov r20, ##65280
 mov r0, r22
 adds r0, r20
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4363
 rdbyte r22, r23
 cmps r22,  #32 wcz
 if_b jmp #\C_tmp098168_0000000d_gettoken_L000188_4367
 cmps r22,  #127 wcz
 if_be jmp #\C_tmp098168_0000000d_gettoken_L000188_4360
C_tmp098168_0000000d_gettoken_L000188_4367
 rdbyte r0, r23
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4359
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #4
 rdlong r20, r20
 mov r23, r22
 adds r23, r20
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4369
C_tmp098168_0000000d_gettoken_L000188_4368
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r23, #1
C_tmp098168_0000000d_gettoken_L000188_4369
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098181_00000013_space_or_tab_L000224
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098168_0000000d_gettoken_L000188_4368
C_tmp098168_0000000d_gettoken_L000188_4360
 rdbyte r22, r23
 mov r20, r22
 subs r20, #48
 cmp r20,  #10 wcz
 if_b jmp #\C_tmp098168_0000000d_gettoken_L000188_4374
 cmps r22,  #38 wz
 if_z jmp #\C_tmp098168_0000000d_gettoken_L000188_4374
 cmps r22,  #46 wz
 if_nz jmp #\C_tmp098168_0000000d_gettoken_L000188_4371
C_tmp098168_0000000d_gettoken_L000188_4374
 mov r0, #128
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4371
 rdbyte r21, r23
 mov r22, #10
 cmps r21, r22 wz
 if_z jmp #\C_tmp098168_0000000d_gettoken_L000188_4379
 cmps r21, r22 wcz
 if_a jmp #\C_tmp098168_0000000d_gettoken_L000188_4423
 cmps r21,  #0 wz
 if_z jmp #\C_tmp098168_0000000d_gettoken_L000188_4378
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4375
C_tmp098168_0000000d_gettoken_L000188_4423
 cmps r21,  #34 wcz
 if_b jmp #\C_tmp098168_0000000d_gettoken_L000188_4375
 cmps r21,  #63 wcz
 if_a jmp #\C_tmp098168_0000000d_gettoken_L000188_4424
 mov r22, r21
 shl r22, #2
 mov r20, ##@C_tmp098168_0000000d_gettoken_L000188_4425_L004427-136
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098168_0000000d_gettoken_L000188_4424
 cmps r21,  #92 wz
 if_z jmp #\C_tmp098168_0000000d_gettoken_L000188_4380
 cmps r21,  #94 wz
 if_z jmp #\C_tmp098168_0000000d_gettoken_L000188_4380
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4375
C_tmp098168_0000000d_gettoken_L000188_4378
 mov r0, #1
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4379
 mov r0, #0
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4380
 rdbyte r0, r23
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4381
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #62 wz
 if_nz jmp #\C_tmp098168_0000000d_gettoken_L000188_4382
 mov r0, #138
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4382
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #61 wz
 if_nz jmp #\C_tmp098168_0000000d_gettoken_L000188_4384
 mov r0, #137
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4384
 mov r0, #60
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4386
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #61 wz
 if_nz jmp #\C_tmp098168_0000000d_gettoken_L000188_4387
 mov r0, #139
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4387
 mov r0, #62
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4375
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_token_parser
 mov RI, FP
 sub RI, #-(-56)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-56)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098168_0000000d_gettoken_L000188_4389
 mov r22, FP
 sub r22, #-(-56)
 rdlong r0, r22
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4389
 rdbyte r22, r23
 mov r20, ##@C___ctype+1
 adds r22, r20
 rdbyte r22, r22
 and r22, #3
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098168_0000000d_gettoken_L000188_4391
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 mov r22, r0
 mov RI, FP
 sub RI, #-(-60)
 wrbyte r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4395
C_tmp098168_0000000d_gettoken_L000188_4394
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #40 wcz
 if_ae jmp #\C_tmp098168_0000000d_gettoken_L000188_4398
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, r22
 adds r20, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r20, RI
 mov r20, FP
 sub r20, #-(-52)
 adds r22, r20
 rdbyte r20, r23
 wrbyte r20, r22
C_tmp098168_0000000d_gettoken_L000188_4398
 adds r23, #1
C_tmp098168_0000000d_gettoken_L000188_4395
 rdbyte r22, r23
 mov r20, ##@C___ctype+1
 adds r22, r20
 rdbyte r22, r22
 and r22, #7
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098168_0000000d_gettoken_L000188_4394
 rdbyte r19, r23
 cmps r19,  #33 wcz
 if_b jmp #\C_tmp098168_0000000d_gettoken_L000188_4400
 cmps r19,  #40 wcz
 if_a jmp #\C_tmp098168_0000000d_gettoken_L000188_4400
 mov r22, r19
 shl r22, #2
 mov r20, ##@C_tmp098168_0000000d_gettoken_L000188_4418_L004420-132
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098168_0000000d_gettoken_L000188_4403
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, r22
 adds r20, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r20, RI
 mov r20, FP
 sub r20, #-(-52)
 adds r22, r20
 rdbyte r20, r23
 wrbyte r20, r22
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-52)
 adds r22, r20
 mov r20, #0
 wrbyte r20, r22
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #40 wz
 if_nz jmp #\C_tmp098168_0000000d_gettoken_L000188_4405
 mov r17, #132
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4406
C_tmp098168_0000000d_gettoken_L000188_4405
 mov r17, #129
C_tmp098168_0000000d_gettoken_L000188_4406
 mov r0, r17
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4407
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, r22
 adds r20, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r20, RI
 mov r20, FP
 sub r20, #-(-52)
 adds r22, r20
 rdbyte r20, r23
 wrbyte r20, r22
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-52)
 adds r22, r20
 mov r20, #0
 wrbyte r20, r22
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #40 wz
 if_nz jmp #\C_tmp098168_0000000d_gettoken_L000188_4409
 mov r15, #134
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4410
C_tmp098168_0000000d_gettoken_L000188_4409
 mov r15, #131
C_tmp098168_0000000d_gettoken_L000188_4410
 mov r0, r15
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4411
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, r22
 adds r20, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r20, RI
 mov r20, FP
 sub r20, #-(-52)
 adds r22, r20
 rdbyte r20, r23
 wrbyte r20, r22
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-52)
 adds r22, r20
 mov r20, #0
 wrbyte r20, r22
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #40 wz
 if_nz jmp #\C_tmp098168_0000000d_gettoken_L000188_4413
 mov r13, #133
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4414
C_tmp098168_0000000d_gettoken_L000188_4413
 mov r13, #130
C_tmp098168_0000000d_gettoken_L000188_4414
 mov r0, r13
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4415
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-52)
 adds r22, r20
 mov r20, #0
 wrbyte r20, r22
 mov r22, FP
 sub r22, #-(-60)
 rdbyte r22, r22
 shl r22, #2
 mov r20, ##@C_tmp098003_00000009_deftype_L000023-260
 adds r22, r20
 rdlong r22, r22
 subs r22, #129
 mov r0, r22
 adds r0, #132
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4400
 mov r22, FP
 sub r22, #-(-60)
 rdbyte r22, r22
 shl r22, #2
 mov r20, ##@C_tmp098003_00000009_deftype_L000023-260
 adds r22, r20
 rdlong r0, r22
 jmp #\@C_tmp098168_0000000d_gettoken_L000188_4358
C_tmp098168_0000000d_gettoken_L000188_4391
 mov r0, #2
C_tmp098168_0000000d_gettoken_L000188_4358
 calld PA,#POPM
 add SP, #56
 calld PA,#RETF
 alignl
C_tmp098171_0000000d_tokenlen_L000191
 calld PA,#NEWF
 sub SP, #60
 calld PA,#PSHM
 long $540000
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, #0
 mov r20, ##@C_tmp098007_00000009_context_L000027
 rdlong r20, r20
 cmp r20, r22 wz
 if_nz jmp #\C_tmp098171_0000000d_tokenlen_L000191_4430
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #12
 rdlong r20, r20
 mov RI, FP
 sub RI, #-(-12)
 wrlong r20, RI
 cmp r20, r22 wz
 if_z jmp #\C_tmp098171_0000000d_tokenlen_L000191_4430
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_b jmp #\C_tmp098171_0000000d_tokenlen_L000191_4432
 cmps r22,  #14 wcz
 if_a jmp #\C_tmp098171_0000000d_tokenlen_L000191_4438
 shl r22, #2
 mov r20, ##@C_tmp098171_0000000d_tokenlen_L000191_4439_L004441
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098171_0000000d_tokenlen_L000191_4438
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #128 wcz
 if_b jmp #\C_tmp098171_0000000d_tokenlen_L000191_4432
 cmps r22,  #134 wcz
 if_a jmp #\C_tmp098171_0000000d_tokenlen_L000191_4432
 shl r22, #2
 mov r20, ##@C_tmp098171_0000000d_tokenlen_L000191_4442_L004444-512
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098171_0000000d_tokenlen_L000191_4434
 mov r0, #0
 jmp #\@C_tmp098171_0000000d_tokenlen_L000191_4429
C_tmp098171_0000000d_tokenlen_L000191_4435
 mov r2, FP
 sub r2, #-(-64)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098163_0000000d_getvalue_L000183
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 jmp #\@C_tmp098171_0000000d_tokenlen_L000191_4429
C_tmp098171_0000000d_tokenlen_L000191_4436
 mov r2, FP
 sub r2, #-(-56)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 jmp #\@C_tmp098171_0000000d_tokenlen_L000191_4429
C_tmp098171_0000000d_tokenlen_L000191_4437
 mov r0, #2
 jmp #\@C_tmp098171_0000000d_tokenlen_L000191_4429
C_tmp098171_0000000d_tokenlen_L000191_4432
 mov r0, #1
 jmp #\@C_tmp098171_0000000d_tokenlen_L000191_4429
C_tmp098171_0000000d_tokenlen_L000191_4430
 mov r22, ##@C_tmp098033_0000000a_token_L000053
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_b jmp #\C_tmp098171_0000000d_tokenlen_L000191_4446
 cmps r22,  #254 wcz
 if_a jmp #\C_tmp098171_0000000d_tokenlen_L000191_4446
 shl r22, #2
 mov r20, ##@C_tmp098171_0000000d_tokenlen_L000191_4459_L004461
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098171_0000000d_tokenlen_L000191_4448
 mov r0, #0
 jmp #\@C_tmp098171_0000000d_tokenlen_L000191_4429
C_tmp098171_0000000d_tokenlen_L000191_4449
 mov r0, #1
 jmp #\@C_tmp098171_0000000d_tokenlen_L000191_4429
C_tmp098171_0000000d_tokenlen_L000191_4450
 mov r0, #2
 jmp #\@C_tmp098171_0000000d_tokenlen_L000191_4429
C_tmp098171_0000000d_tokenlen_L000191_4451
 mov r0, #3
 jmp #\@C_tmp098171_0000000d_tokenlen_L000191_4429
C_tmp098171_0000000d_tokenlen_L000191_4452
 mov r0, #4
 jmp #\@C_tmp098171_0000000d_tokenlen_L000191_4429
C_tmp098171_0000000d_tokenlen_L000191_4453
 mov r0, #5
 jmp #\@C_tmp098171_0000000d_tokenlen_L000191_4429
C_tmp098171_0000000d_tokenlen_L000191_4454
 mov r0, #6
 jmp #\@C_tmp098171_0000000d_tokenlen_L000191_4429
C_tmp098171_0000000d_tokenlen_L000191_4455
 mov r0, #7
 jmp #\@C_tmp098171_0000000d_tokenlen_L000191_4429
C_tmp098171_0000000d_tokenlen_L000191_4456
 mov r0, #9
 jmp #\@C_tmp098171_0000000d_tokenlen_L000191_4429
C_tmp098171_0000000d_tokenlen_L000191_4457
 mov r2, FP
 sub r2, #-(-64)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098163_0000000d_getvalue_L000183
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 jmp #\@C_tmp098171_0000000d_tokenlen_L000191_4429
C_tmp098171_0000000d_tokenlen_L000191_4458
 mov r2, FP
 sub r2, #-(-56)
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098166_0000000d_getid_L000186
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 jmp #\@C_tmp098171_0000000d_tokenlen_L000191_4429
C_tmp098171_0000000d_tokenlen_L000191_4446
 mov r2, #99
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, #0
C_tmp098171_0000000d_tokenlen_L000191_4429
 calld PA,#POPM
 add SP, #60
 calld PA,#RETF
 alignl
C_tmp098161_0000000d_is_eol_L000181
 calld PA,#PSHM
 long $800000
 cmps r2,  #0 wz
 if_z jmp #\C_tmp098161_0000000d_is_eol_L000181_4468
 cmps r2,  #10 wz
 if_z jmp #\C_tmp098161_0000000d_is_eol_L000181_4468
 cmps r2,  #1 wz
 if_z jmp #\C_tmp098161_0000000d_is_eol_L000181_4468
 cmps r2,  #58 wz
 if_nz jmp #\C_tmp098161_0000000d_is_eol_L000181_4464
C_tmp098161_0000000d_is_eol_L000181_4468
 mov r23, #1
 jmp #\@C_tmp098161_0000000d_is_eol_L000181_4465
C_tmp098161_0000000d_is_eol_L000181_4464
 mov r23, #0
C_tmp098161_0000000d_is_eol_L000181_4465
 mov r0, r23
 calld PA,#POPM
 calld PA,#RETN
 alignl
C_tmp098162_0000000d_is_string_L000182
 calld PA,#PSHM
 long $500000
 mov r22, #34
 cmps r2, r22 wz
 if_z jmp #\C_tmp098162_0000000d_is_string_L000182_4472
 cmps r2, r22 wcz
 if_a jmp #\C_tmp098162_0000000d_is_string_L000182_4474
 mov r22, #5
 cmps r2, r22 wz
 if_z jmp #\C_tmp098162_0000000d_is_string_L000182_4472
 cmps r2,  #8 wz
 if_z jmp #\C_tmp098162_0000000d_is_string_L000182_4472
 cmps r2, r22 wcz
 if_b jmp #\C_tmp098162_0000000d_is_string_L000182_4471
 cmps r2,  #25 wz
 if_z jmp #\C_tmp098162_0000000d_is_string_L000182_4472
 jmp #\@C_tmp098162_0000000d_is_string_L000182_4471
C_tmp098162_0000000d_is_string_L000182_4474
 mov r22, #131
 cmps r2, r22 wz
 if_z jmp #\C_tmp098162_0000000d_is_string_L000182_4472
 cmps r2,  #134 wz
 if_z jmp #\C_tmp098162_0000000d_is_string_L000182_4472
 cmps r2, r22 wcz
 if_b jmp #\C_tmp098162_0000000d_is_string_L000182_4471
 cmps r2,  #240 wcz
 if_b jmp #\C_tmp098162_0000000d_is_string_L000182_4471
 cmps r2,  #254 wcz
 if_a jmp #\C_tmp098162_0000000d_is_string_L000182_4471
 mov r22, r2
 shl r22, #2
 mov r20, ##@C_tmp098162_0000000d_is_string_L000182_4477_L004479-960
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_tmp098162_0000000d_is_string_L000182_4472
 mov r0, #1
 jmp #\@C_tmp098162_0000000d_is_string_L000182_4469
C_tmp098162_0000000d_is_string_L000182_4471
 mov r0, #0
C_tmp098162_0000000d_is_string_L000182_4469
 calld PA,#POPM
 calld PA,#RETN
 alignl
C_tmp098169_0000000d_getcurrentpos_L000189
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $540000
 mov r22, #0
 mov r20, ##@C_tmp098007_00000009_context_L000027
 rdlong r20, r20
 cmp r20, r22 wz
 if_nz jmp #\C_tmp098169_0000000d_getcurrentpos_L000189_4484
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #12
 rdlong r20, r20
 mov RI, FP
 sub RI, #-(-8)
 wrlong r20, RI
 cmp r20, r22 wz
 if_nz jmp #\C_tmp098169_0000000d_getcurrentpos_L000189_4482
C_tmp098169_0000000d_getcurrentpos_L000189_4484
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #4
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_tmp098169_0000000d_getcurrentpos_L000189_4482
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 mov r0, r22
 adds r0, r20
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
 alignl
C_tmp098165_0000000d_getlineindex_L000185
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $d40000
 mov r22, #0
 mov r20, ##@C_tmp098007_00000009_context_L000027
 rdlong r20, r20
 cmp r20, r22 wz
 if_nz jmp #\C_tmp098165_0000000d_getlineindex_L000185_4486
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #12
 rdlong r20, r20
 mov r23, r20
 cmp r20, r22 wz
 if_z jmp #\C_tmp098165_0000000d_getlineindex_L000185_4486
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 adds r23, r22
 mov r22, r23
 mov r23, r22
 adds r23, #1
 rdbyte r22, r22
 wrbyte r22, r2
 mov r22, r23
 adds r22, #3
 mov r20, ##$fffffffc
 and r22, r20
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r0, r2
 adds r0, #4
 mov r22, FP
 sub r22, #-(-8)
 rdlong r1, r22
 calld PA,#CPYB
 long 4
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 adds r22, #4
 mov r20, r23
 sub r22, r20
 adds r22, #1
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 rdbyte r22, r2
 cmps r22,  #198 wz
 if_nz jmp #\C_tmp098165_0000000d_getlineindex_L000185_4488
 mov r22, FP
 sub r22, #-(-12)
 rdlong r0, r22
 jmp #\@C_tmp098165_0000000d_getlineindex_L000185_4485
C_tmp098165_0000000d_getlineindex_L000185_4488
C_tmp098165_0000000d_getlineindex_L000185_4486
 mov r0, #0
C_tmp098165_0000000d_getlineindex_L000185_4485
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
 alignl
C_tmp098163_0000000d_getvalue_L000183
 calld PA,#NEWF
 sub SP, #20
 calld PA,#PSHM
 long $fea000
 mov r23, r2
 mov r22, #0
 mov r20, ##@C_tmp098007_00000009_context_L000027
 rdlong r20, r20
 cmp r20, r22 wz
 if_nz jmp #\C_tmp098163_0000000d_getvalue_L000183_4491
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #12
 rdlong r20, r20
 mov r21, r20
 cmp r20, r22 wz
 if_z jmp #\C_tmp098163_0000000d_getvalue_L000183_4491
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r21, r22
 rdbyte r22, r21
 cmps r22,  #128 wz
 if_nz jmp #\C_tmp098163_0000000d_getvalue_L000183_4492
 mov r22, r21
 adds r22, #1
 rdbyte r22, r22
 wrbyte r22, r23
 rdbyte r22, r23
 cmps r22,  #0 wcz
 if_b jmp #\C_tmp098163_0000000d_getvalue_L000183_4495
 cmps r22,  #127 wcz
 if_a jmp #\C_tmp098163_0000000d_getvalue_L000183_4495
 mov r22, r23
 adds r22, #4
 rdbyte r20, r23
 subs r20, #64
 wrlong r20, r22
 mov r22, #129
 wrbyte r22, r23
 mov r0, #2
 jmp #\@C_tmp098163_0000000d_getvalue_L000183_4490
C_tmp098163_0000000d_getvalue_L000183_4495
 mov r22, r21
 adds r22, #5
 mov r20, ##$fffffffc
 and r22, r20
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 mov r0, r23
 adds r0, #4
 mov r22, FP
 sub r22, #-(-20)
 rdlong r1, r22
 calld PA,#CPYB
 long 4
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 adds r22, #4
 mov r20, r21
 sub r22, r20
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r0, r22
 jmp #\@C_tmp098163_0000000d_getvalue_L000183_4490
C_tmp098163_0000000d_getvalue_L000183_4491
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #4
 rdlong r20, r20
 mov r21, r22
 adds r21, r20
 jmp #\@C_tmp098163_0000000d_getvalue_L000183_4498
C_tmp098163_0000000d_getvalue_L000183_4497
 adds r21, #1
C_tmp098163_0000000d_getvalue_L000183_4498
 rdbyte r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098181_00000013_space_or_tab_L000224
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098163_0000000d_getvalue_L000183_4497
C_tmp098163_0000000d_getvalue_L000183_4492
 mov r15, r21
 rdbyte r22, r21
 cmps r22,  #38 wz
 if_nz jmp #\C_tmp098163_0000000d_getvalue_L000183_4500
 mov r22, #129
 wrbyte r22, r23
 mov r22, r21
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #72 wz
 if_z jmp #\C_tmp098163_0000000d_getvalue_L000183_4504
 cmps r22,  #104 wz
 if_nz jmp #\C_tmp098163_0000000d_getvalue_L000183_4502
C_tmp098163_0000000d_getvalue_L000183_4504
 adds r21, #2
 mov r2, #16
 mov r3, FP
 sub r3, #-(-8)
 mov r4, r21
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_tmp098179_0000000e_mystrtoll_L000199
 add SP, #8
 mov r20, r23
 adds r20, #4
 wrlong r0, r20
 jmp #\@C_tmp098163_0000000d_getvalue_L000183_4501
C_tmp098163_0000000d_getvalue_L000183_4502
 mov r22, r21
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #79 wz
 if_z jmp #\C_tmp098163_0000000d_getvalue_L000183_4507
 cmps r22,  #111 wz
 if_nz jmp #\C_tmp098163_0000000d_getvalue_L000183_4505
C_tmp098163_0000000d_getvalue_L000183_4507
 adds r21, #2
 mov r2, #8
 mov r3, FP
 sub r3, #-(-8)
 mov r4, r21
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_tmp098179_0000000e_mystrtoll_L000199
 add SP, #8
 mov r20, r23
 adds r20, #4
 wrlong r0, r20
 jmp #\@C_tmp098163_0000000d_getvalue_L000183_4501
C_tmp098163_0000000d_getvalue_L000183_4505
 adds r21, #1
 mov r2, #8
 mov r3, FP
 sub r3, #-(-8)
 mov r4, r21
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_tmp098179_0000000e_mystrtoll_L000199
 add SP, #8
 mov r20, r23
 adds r20, #4
 wrlong r0, r20
 jmp #\@C_tmp098163_0000000d_getvalue_L000183_4501
C_tmp098163_0000000d_getvalue_L000183_4500
 mov r19, #0
 mov r22, #0
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 mov r17, r22
 rdbyte r22, r21
 cmps r22,  #43 wz
 if_nz jmp #\C_tmp098163_0000000d_getvalue_L000183_4508
 adds r21, #1
 jmp #\@C_tmp098163_0000000d_getvalue_L000183_4513
C_tmp098163_0000000d_getvalue_L000183_4508
 rdbyte r22, r21
 cmps r22,  #45 wz
 if_nz jmp #\C_tmp098163_0000000d_getvalue_L000183_4513
 mov r22, #1
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 adds r21, #1
 jmp #\@C_tmp098163_0000000d_getvalue_L000183_4513
C_tmp098163_0000000d_getvalue_L000183_4512
 mov r22, ##214748364
 cmps r19, r22 wcz
 if_be jmp #\C_tmp098163_0000000d_getvalue_L000183_4515
 mov r17, #1
 jmp #\@C_tmp098163_0000000d_getvalue_L000183_4516
C_tmp098163_0000000d_getvalue_L000183_4515
 mov r22, r19
 shl r22, #3
 mov r20, r19
 shl r20, #1
 adds r22, r20
 rdbyte r20, r21
 subs r20, #48
 mov r19, r22
 adds r19, r20
C_tmp098163_0000000d_getvalue_L000183_4516
 adds r21, #1
C_tmp098163_0000000d_getvalue_L000183_4513
 rdbyte r22, r21
 subs r22, #48
 cmp r22,  #10 wcz
 if_b jmp #\C_tmp098163_0000000d_getvalue_L000183_4512
 rdbyte r22, r21
 cmps r22,  #46 wz
 if_z jmp #\C_tmp098163_0000000d_getvalue_L000183_4517
 cmps r22,  #33 wz
 if_z jmp #\C_tmp098163_0000000d_getvalue_L000183_4517
 cmps r22,  #35 wz
 if_z jmp #\C_tmp098163_0000000d_getvalue_L000183_4517
 cmps r17,  #0 wz
 if_nz jmp #\C_tmp098163_0000000d_getvalue_L000183_4517
 mov r22, #129
 wrbyte r22, r23
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098163_0000000d_getvalue_L000183_4520
 neg r13, r19
 jmp #\@C_tmp098163_0000000d_getvalue_L000183_4521
C_tmp098163_0000000d_getvalue_L000183_4520
 mov r13, r19
C_tmp098163_0000000d_getvalue_L000183_4521
 mov r22, r23
 adds r22, #4
 wrlong r13, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r21, RI
 jmp #\@C_tmp098163_0000000d_getvalue_L000183_4518
C_tmp098163_0000000d_getvalue_L000183_4517
 mov r22, #130
 wrbyte r22, r23
 mov r2, FP
 sub r2, #-(-8)
 mov r3, r15
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strtod
 add SP, #4
 mov r20, r23
 adds r20, #4
 wrlong r0, r20
 rdbyte r22, r21
 cmps r22,  #33 wz
 if_z jmp #\C_tmp098163_0000000d_getvalue_L000183_4524
 cmps r22,  #35 wz
 if_nz jmp #\C_tmp098163_0000000d_getvalue_L000183_4522
C_tmp098163_0000000d_getvalue_L000183_4524
 adds r21, #1
C_tmp098163_0000000d_getvalue_L000183_4522
C_tmp098163_0000000d_getvalue_L000183_4518
C_tmp098163_0000000d_getvalue_L000183_4501
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, r15
 cmp r22, r20 wz
 if_nz jmp #\C_tmp098163_0000000d_getvalue_L000183_4525
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098163_0000000d_getvalue_L000183_4525
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, r15
 sub r22, r20
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r0, r22
C_tmp098163_0000000d_getvalue_L000183_4490
 calld PA,#POPM
 add SP, #20
 calld PA,#RETF
 alignl
C_tmp098164_0000000d_putvalue_L000184
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $f00000
 mov r22, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r22, r22
 shl r22, #4
 mov r20, ##@C_tmp098019_00000009_lines_L000039
 rdlong r20, r20
 adds r22, r20
 adds r22, #12
 rdlong r22, r22
 mov r23, r22
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098164_0000000d_putvalue_L000184_4528
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 adds r23, r22
 mov r22, r23
 mov r23, r22
 adds r23, #1
 rdbyte r20, r2
 wrbyte r20, r22
 mov r22, r23
 adds r22, #3
 mov r20, ##$fffffffc
 and r22, r20
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r21, r22
 jmp #\@C_tmp098164_0000000d_putvalue_L000184_4531
C_tmp098164_0000000d_putvalue_L000184_4530
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, #0
 wrbyte r20, r22
C_tmp098164_0000000d_putvalue_L000184_4531
 mov r22, r23
 mov r20, r21
 cmp r22, r20 wcz
 if_b jmp #\C_tmp098164_0000000d_putvalue_L000184_4530
 mov r0, r23
 mov r1, r2
 adds r1, #4
 calld PA,#CPYB
 long 4
C_tmp098164_0000000d_putvalue_L000184_4528
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
 alignl
C_tmp098170_0000000d_getstringvalue_L000190
 calld PA,#NEWF
 sub SP, #16
 calld PA,#PSHM
 long $faa800
 mov r23, r4
 mov r21, r3
 mov r19, r2
 jmp #\@C_tmp098170_0000000d_getstringvalue_L000190_4536
C_tmp098170_0000000d_getstringvalue_L000190_4535
 adds r21, #1
C_tmp098170_0000000d_getstringvalue_L000190_4536
 rdbyte r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098181_00000013_space_or_tab_L000224
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4535
 mov r13, r21
 rdbyte r22, r21
 cmps r22,  #38 wz
 if_nz jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4538
 mov r22, #129
 mov RI, FP
 sub RI, #-(-16)
 wrbyte r22, RI
 mov r22, r21
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #72 wz
 if_z jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4542
 cmps r22,  #104 wz
 if_nz jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4540
C_tmp098170_0000000d_getstringvalue_L000190_4542
 adds r21, #2
 mov r2, #16
 mov r3, FP
 sub r3, #-(-8)
 mov r4, r21
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_tmp098179_0000000e_mystrtoll_L000199
 add SP, #8
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 jmp #\@C_tmp098170_0000000d_getstringvalue_L000190_4541
C_tmp098170_0000000d_getstringvalue_L000190_4540
 mov r22, r21
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #79 wz
 if_z jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4546
 cmps r22,  #111 wz
 if_nz jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4544
C_tmp098170_0000000d_getstringvalue_L000190_4546
 adds r21, #2
 mov r2, #8
 mov r3, FP
 sub r3, #-(-8)
 mov r4, r21
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_tmp098179_0000000e_mystrtoll_L000199
 add SP, #8
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 jmp #\@C_tmp098170_0000000d_getstringvalue_L000190_4545
C_tmp098170_0000000d_getstringvalue_L000190_4544
 adds r21, #1
 mov r2, #8
 mov r3, FP
 sub r3, #-(-8)
 mov r4, r21
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_tmp098179_0000000e_mystrtoll_L000199
 add SP, #8
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
C_tmp098170_0000000d_getstringvalue_L000190_4545
C_tmp098170_0000000d_getstringvalue_L000190_4541
 mov RI, FP
 sub RI, #-(-8)
 wrlong r21, RI
 jmp #\@C_tmp098170_0000000d_getstringvalue_L000190_4539
C_tmp098170_0000000d_getstringvalue_L000190_4538
 mov r17, #0
 mov r22, #0
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 mov r15, r22
 rdbyte r22, r21
 cmps r22,  #43 wz
 if_nz jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4549
 adds r21, #1
 jmp #\@C_tmp098170_0000000d_getstringvalue_L000190_4554
C_tmp098170_0000000d_getstringvalue_L000190_4549
 rdbyte r22, r21
 cmps r22,  #45 wz
 if_nz jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4554
 mov r22, #1
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 adds r21, #1
 jmp #\@C_tmp098170_0000000d_getstringvalue_L000190_4554
C_tmp098170_0000000d_getstringvalue_L000190_4553
 mov r22, ##214748364
 cmps r17, r22 wcz
 if_be jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4556
 mov r15, #1
 jmp #\@C_tmp098170_0000000d_getstringvalue_L000190_4557
C_tmp098170_0000000d_getstringvalue_L000190_4556
 mov r22, r17
 shl r22, #3
 mov r20, r17
 shl r20, #1
 adds r22, r20
 rdbyte r20, r21
 subs r20, #48
 mov r17, r22
 adds r17, r20
C_tmp098170_0000000d_getstringvalue_L000190_4557
 adds r21, #1
C_tmp098170_0000000d_getstringvalue_L000190_4554
 rdbyte r22, r21
 subs r22, #48
 cmp r22,  #10 wcz
 if_b jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4553
 rdbyte r22, r21
 cmps r22,  #46 wz
 if_z jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4558
 cmps r22,  #33 wz
 if_z jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4558
 cmps r22,  #35 wz
 if_z jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4558
 cmps r15,  #0 wz
 if_nz jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4558
 mov r22, #129
 mov RI, FP
 sub RI, #-(-16)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4562
 neg r11, r17
 jmp #\@C_tmp098170_0000000d_getstringvalue_L000190_4563
C_tmp098170_0000000d_getstringvalue_L000190_4562
 mov r11, r17
C_tmp098170_0000000d_getstringvalue_L000190_4563
 mov RI, FP
 sub RI, #-(-12)
 wrlong r11, RI
 mov RI, FP
 sub RI, #-(-8)
 wrlong r21, RI
 jmp #\@C_tmp098170_0000000d_getstringvalue_L000190_4559
C_tmp098170_0000000d_getstringvalue_L000190_4558
 mov r22, #130
 mov RI, FP
 sub RI, #-(-16)
 wrbyte r22, RI
 mov r2, FP
 sub r2, #-(-8)
 mov r3, r13
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strtod
 add SP, #4
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 rdbyte r22, r21
 cmps r22,  #33 wz
 if_z jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4567
 cmps r22,  #35 wz
 if_nz jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4565
C_tmp098170_0000000d_getstringvalue_L000190_4567
 adds r21, #1
C_tmp098170_0000000d_getstringvalue_L000190_4565
 mov RI, FP
 sub RI, #-(-8)
 wrlong r21, RI
C_tmp098170_0000000d_getstringvalue_L000190_4559
C_tmp098170_0000000d_getstringvalue_L000190_4539
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, r13
 sub r22, r20
 wrlong r22, r19
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, r13
 cmp r22, r20 wz
 if_nz jmp #\C_tmp098170_0000000d_getstringvalue_L000190_4568
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098170_0000000d_getstringvalue_L000190_4568
 mov r0, r23
 mov r1, FP
 sub r1, #-(-16)
 calld PA,#CPYB
 long 8
 calld PA,#POPM
 add SP, #16
 calld PA,#RETF
 alignl
C_tmp098166_0000000d_getid_L000186
 calld PA,#NEWF
 calld PA,#PSHM
 long $fc0000
 mov r23, r2
 mov r19, #0
 mov r22, #0
 mov r20, ##@C_tmp098007_00000009_context_L000027
 rdlong r20, r20
 cmp r20, r22 wz
 if_nz jmp #\C_tmp098166_0000000d_getid_L000186_4571
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #12
 rdlong r20, r20
 mov r21, r20
 cmp r20, r22 wz
 if_z jmp #\C_tmp098166_0000000d_getid_L000186_4571
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r21, r22
 jmp #\@C_tmp098166_0000000d_getid_L000186_4572
C_tmp098166_0000000d_getid_L000186_4571
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 mov r20, ##@C_tmp098030_0000000a_current_indx_L000050
 rdlong r20, r20
 shl r20, #4
 mov r18, ##@C_tmp098019_00000009_lines_L000039
 rdlong r18, r18
 adds r20, r18
 adds r20, #4
 rdlong r20, r20
 mov r21, r22
 adds r21, r20
 jmp #\@C_tmp098166_0000000d_getid_L000186_4574
C_tmp098166_0000000d_getid_L000186_4573
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r21, #1
C_tmp098166_0000000d_getid_L000186_4574
 rdbyte r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098181_00000013_space_or_tab_L000224
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098166_0000000d_getid_L000186_4573
C_tmp098166_0000000d_getid_L000186_4572
 rdbyte r22, r21
 mov r20, ##@C___ctype+1
 adds r22, r20
 rdbyte r22, r22
 and r22, #3
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098166_0000000d_getid_L000186_4580
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098166_0000000d_getid_L000186_4580
C_tmp098166_0000000d_getid_L000186_4579
 cmps r19,  #40 wcz
 if_ae jmp #\C_tmp098166_0000000d_getid_L000186_4583
 mov r22, r19
 mov r19, r22
 adds r19, #1
 adds r22, r23
 rdbyte r20, r21
 wrbyte r20, r22
 adds r21, #1
 jmp #\@C_tmp098166_0000000d_getid_L000186_4584
C_tmp098166_0000000d_getid_L000186_4583
 mov r2, #3
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 jmp #\@C_tmp098166_0000000d_getid_L000186_4581
C_tmp098166_0000000d_getid_L000186_4584
C_tmp098166_0000000d_getid_L000186_4580
 rdbyte r22, r21
 mov r20, ##@C___ctype+1
 adds r22, r20
 rdbyte r22, r22
 and r22, #7
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098166_0000000d_getid_L000186_4579
C_tmp098166_0000000d_getid_L000186_4581
 rdbyte r22, r21
 cmps r22,  #37 wz
 if_z jmp #\C_tmp098166_0000000d_getid_L000186_4589
 cmps r22,  #33 wz
 if_z jmp #\C_tmp098166_0000000d_getid_L000186_4589
 cmps r22,  #35 wz
 if_z jmp #\C_tmp098166_0000000d_getid_L000186_4589
 cmps r22,  #36 wz
 if_nz jmp #\C_tmp098166_0000000d_getid_L000186_4585
C_tmp098166_0000000d_getid_L000186_4589
 cmps r19,  #40 wcz
 if_ae jmp #\C_tmp098166_0000000d_getid_L000186_4590
 mov r22, r19
 mov r19, r22
 adds r19, #1
 adds r22, r23
 rdbyte r20, r21
 wrbyte r20, r22
 adds r21, #1
 jmp #\@C_tmp098166_0000000d_getid_L000186_4591
C_tmp098166_0000000d_getid_L000186_4590
 mov r2, #3
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098166_0000000d_getid_L000186_4591
C_tmp098166_0000000d_getid_L000186_4585
 rdbyte r22, r21
 cmps r22,  #40 wz
 if_nz jmp #\C_tmp098166_0000000d_getid_L000186_4592
 cmps r19,  #40 wcz
 if_ae jmp #\C_tmp098166_0000000d_getid_L000186_4594
 mov r22, r19
 mov r19, r22
 adds r19, #1
 adds r22, r23
 rdbyte r20, r21
 wrbyte r20, r22
 adds r21, #1
 jmp #\@C_tmp098166_0000000d_getid_L000186_4595
C_tmp098166_0000000d_getid_L000186_4594
 mov r2, #3
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
C_tmp098166_0000000d_getid_L000186_4595
C_tmp098166_0000000d_getid_L000186_4592
 mov r22, r19
 adds r22, r23
 mov r20, #0
 wrbyte r20, r22
 mov r0, r19
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098172_0000000d_mystrgrablit_L000192
 calld PA,#NEWF
 calld PA,#PSHM
 long $f00000
 mov r23, r3
 mov r21, r2
 rdbyte r22, r21
 cmps r22,  #34 wz
 if_nz jmp #\C_tmp098172_0000000d_mystrgrablit_L000192_4599
 jmp #\@C_tmp098172_0000000d_mystrgrablit_L000192_4600
C_tmp098172_0000000d_mystrgrablit_L000192_4599
 mov r2, ##@C_tmp098172_0000000d_mystrgrablit_L000192_4597_L004598
 mov BC, #4
 calld PA,#CALA
 long @C___bad_assertion
C_tmp098172_0000000d_mystrgrablit_L000192_4600
 adds r21, #1
 jmp #\@C_tmp098172_0000000d_mystrgrablit_L000192_4602
C_tmp098172_0000000d_mystrgrablit_L000192_4601
 rdbyte r22, r21
 cmps r22,  #34 wz
 if_nz jmp #\C_tmp098172_0000000d_mystrgrablit_L000192_4604
 mov r22, r21
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #34 wz
 if_nz jmp #\C_tmp098172_0000000d_mystrgrablit_L000192_4603
 mov r22, r23
 mov r23, r22
 adds r23, #1
 rdbyte r20, r21
 wrbyte r20, r22
 adds r21, #1
 adds r21, #1
 jmp #\@C_tmp098172_0000000d_mystrgrablit_L000192_4605
C_tmp098172_0000000d_mystrgrablit_L000192_4604
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, r21
 mov r21, r20
 adds r21, #1
 rdbyte r20, r20
 wrbyte r20, r22
C_tmp098172_0000000d_mystrgrablit_L000192_4605
C_tmp098172_0000000d_mystrgrablit_L000192_4602
 rdbyte r22, r21
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098172_0000000d_mystrgrablit_L000192_4601
C_tmp098172_0000000d_mystrgrablit_L000192_4603
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, #0
 wrbyte r20, r22
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098173_0000000d_mystrend_L000193
 calld PA,#NEWF
 calld PA,#PSHM
 long $f00000
 mov r23, r3
 mov r21, r2
 jmp #\@C_tmp098173_0000000d_mystrend_L000193_4610
C_tmp098173_0000000d_mystrend_L000193_4609
 mov r22, ##@C_tmp098031_0000000a_current_offs_L000051
 rdlong r22, r22
 adds r22, #1
 wrlong r22, ##@C_tmp098031_0000000a_current_offs_L000051
 adds r23, #1
C_tmp098173_0000000d_mystrend_L000193_4610
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098181_00000013_space_or_tab_L000224
 cmps r0,  #0 wz
 if_nz jmp #\C_tmp098173_0000000d_mystrend_L000193_4609
 rdbyte r22, r23
 mov r20, r21
 and r20, cviu_m1
 cmps r22, r20 wz
 if_z jmp #\C_tmp098173_0000000d_mystrend_L000193_4612
 mov r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
 jmp #\@C_tmp098173_0000000d_mystrend_L000193_4608
C_tmp098173_0000000d_mystrend_L000193_4612
 adds r23, #1
 jmp #\@C_tmp098173_0000000d_mystrend_L000193_4615
C_tmp098173_0000000d_mystrend_L000193_4617
 rdbyte r22, r23
 cmps r22,  #10 wz
 if_z jmp #\C_tmp098173_0000000d_mystrend_L000193_4622
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098173_0000000d_mystrend_L000193_4620
C_tmp098173_0000000d_mystrend_L000193_4622
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
 jmp #\@C_tmp098173_0000000d_mystrend_L000193_4608
C_tmp098173_0000000d_mystrend_L000193_4620
 adds r23, #1
C_tmp098173_0000000d_mystrend_L000193_4618
 rdbyte r22, r23
 mov r20, r21
 and r20, cviu_m1
 cmps r22, r20 wz
 if_nz jmp #\C_tmp098173_0000000d_mystrend_L000193_4617
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 mov r20, r21
 and r20, cviu_m1
 cmps r22, r20 wz
 if_nz jmp #\C_tmp098173_0000000d_mystrend_L000193_4616
 adds r23, #2
C_tmp098173_0000000d_mystrend_L000193_4615
 rdbyte r22, r23
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098173_0000000d_mystrend_L000193_4618
C_tmp098173_0000000d_mystrend_L000193_4616
 rdbyte r22, r23
 mov r20, r21
 and r20, cviu_m1
 cmps r22, r20 wz
 if_z jmp #\C_tmp098173_0000000d_mystrend_L000193_4625
 mov r2, #40
 mov BC, #4
 calld PA,#CALA
 long @C_tmp098160_0000000d_seterror_L000180
 mov r0, ##0
 jmp #\@C_tmp098173_0000000d_mystrend_L000193_4608
C_tmp098173_0000000d_mystrend_L000193_4625
 mov r0, r23
C_tmp098173_0000000d_mystrend_L000193_4608
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098174_0000000e_linecount_L000194
 calld PA,#NEWF
 calld PA,#PSHM
 long $ea0000
 mov r23, r2
 mov r17, #0
 mov r19, #0
 jmp #\@C_tmp098174_0000000e_linecount_L000194_4629
C_tmp098174_0000000e_linecount_L000194_4628
 adds r19, #1
 mov r22, r21
 and r22, cviu_m1
 cmps r22,  #10 wz
 if_z jmp #\C_tmp098174_0000000e_linecount_L000194_4633
 cmps r22,  #58 wz
 if_nz jmp #\C_tmp098174_0000000e_linecount_L000194_4631
C_tmp098174_0000000e_linecount_L000194_4633
 adds r17, #1
 jmp #\@C_tmp098174_0000000e_linecount_L000194_4632
C_tmp098174_0000000e_linecount_L000194_4631
 mov r22, r21
 and r22, cviu_m1
 cmps r22,  #32 wcz
 if_b jmp #\C_tmp098174_0000000e_linecount_L000194_4636
 cmps r22,  #127 wcz
 if_be jmp #\C_tmp098174_0000000e_linecount_L000194_4634
C_tmp098174_0000000e_linecount_L000194_4636
 mov r2, r19
 mov r3, r21
 and r3, cviu_m1
 mov r4, ##@C_tmp098174_0000000e_linecount_L000194_4637_L004638
 mov r5, ##@C_tmp098029_0000000a_fperr_L000049
 rdlong r5, r5
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_fprintf
 add SP, #12
 mov r0, #0
 jmp #\@C_tmp098174_0000000e_linecount_L000194_4627
C_tmp098174_0000000e_linecount_L000194_4634
C_tmp098174_0000000e_linecount_L000194_4632
 adds r23, #1
C_tmp098174_0000000e_linecount_L000194_4629
 rdbyte r22, r23
 mov r21, r22
 and r22, cviu_m1
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098174_0000000e_linecount_L000194_4628
 mov r0, r17
C_tmp098174_0000000e_linecount_L000194_4627
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098175_0000000e_mystrdup_L000195
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r2
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 mov r2, r22
 add r2, #1
 mov BC, #4
 calld PA,#CALA
 long @C_malloc
 mov r21, r0
 mov r22, r21
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098175_0000000e_mystrdup_L000195_4640
 mov r2, r23
 mov r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
C_tmp098175_0000000e_mystrdup_L000195_4640
 mov r0, r21
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098176_0000000e_mystrndup_L000196
 calld PA,#NEWF
 calld PA,#PSHM
 long $fa0000
 mov r23, r3
 mov r21, r2
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_malloc
 mov r17, r0
 mov r22, r17
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098176_0000000e_mystrndup_L000196_4643
 mov r19, #0
 jmp #\@C_tmp098176_0000000e_mystrndup_L000196_4648
C_tmp098176_0000000e_mystrndup_L000196_4645
 mov r22, r19
 adds r22, r17
 mov r20, r19
 adds r20, r23
 rdbyte r20, r20
 wrbyte r20, r22
 adds r19, #1
C_tmp098176_0000000e_mystrndup_L000196_4648
 cmps r19, r21 wcz
 if_b jmp #\C_tmp098176_0000000e_mystrndup_L000196_4645
C_tmp098176_0000000e_mystrndup_L000196_4643
 mov r0, r17
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_tmp098177_0000000e_mystrconcat_L000197
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $f80000
 mov r23, r3
 mov r21, r2
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r20, r0
 add r22, r20
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 adds r22, #1
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_malloc
 mov r19, r0
 mov r22, r19
 cmp r22,  #0 wz
 if_z jmp #\C_tmp098177_0000000e_mystrconcat_L000197_4650
 mov r2, r23
 mov r3, r19
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
 mov r2, r21
 mov r3, r19
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcat
 add SP, #4
C_tmp098177_0000000e_mystrconcat_L000197_4650
 mov r0, r19
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
 alignl
C_tmp098178_0000000e_factorial_L000198
 calld PA,#PSHM
 long $e00000
 mov r21, ##@C_tmp098066_0000000c_do_for_L000086_2126_L002127
 rdlong r21, r21
 mov r22, ##@C_timer_3064_L003065
 rdlong r22, r22
 mov r0, r2
 mov r1, r22
 calld PA,#FCMP
 if_be jmp #\C_tmp098178_0000000e_factorial_L000198_4653
 mov r2, ##@C_tmp098178_0000000e_factorial_L000198_4655_L004656
 rdlong r2, r2
C_tmp098178_0000000e_factorial_L000198_4653
 mov r23, ##@C_tmp098066_0000000c_do_for_L000086_2126_L002127
 rdlong r23, r23
 jmp #\@C_tmp098178_0000000e_factorial_L000198_4660
C_tmp098178_0000000e_factorial_L000198_4657
 mov r0, r21
 mov r1, r23
 calld PA,#FMUL
 mov r21, r0
 mov r22, ##@C_tmp098107_0000000c_factor_L000127_3227_L003228
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FADD
 mov r23, r0
C_tmp098178_0000000e_factorial_L000198_4660
 mov r0, r23
 mov r1, r2
 calld PA,#FCMP
 if_be jmp #\C_tmp098178_0000000e_factorial_L000198_4657
 mov r0, r21
 calld PA,#POPM
 calld PA,#RETN
 alignl
C_tmp098179_0000000e_mystrtoll_L000199
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $fa0000
 mov r23, r4
 mov r21, r3
 mov r19, r2
 mov r17, #0
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_tmp098179_0000000e_mystrtoll_L000199_4663
C_tmp098179_0000000e_mystrtoll_L000199_4662
 adds r23, #1
C_tmp098179_0000000e_mystrtoll_L000199_4663
 rdbyte r22, r23
 mov r20, ##@C___ctype+1
 adds r22, r20
 rdbyte r22, r22
 and r22, #8
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098179_0000000e_mystrtoll_L000199_4662
 rdbyte r22, r23
 cmps r22,  #43 wz
 if_nz jmp #\C_tmp098179_0000000e_mystrtoll_L000199_4666
 adds r23, #1
C_tmp098179_0000000e_mystrtoll_L000199_4666
 rdbyte r22, r23
 cmps r22,  #45 wz
 if_nz jmp #\C_tmp098179_0000000e_mystrtoll_L000199_4668
 mov r22, #1
 adds r23, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_tmp098179_0000000e_mystrtoll_L000199_4668
 cmps r19,  #8 wz
 if_nz jmp #\C_tmp098179_0000000e_mystrtoll_L000199_4670
 jmp #\@C_tmp098179_0000000e_mystrtoll_L000199_4673
C_tmp098179_0000000e_mystrtoll_L000199_4672
 mov r22, r17
 shl r22, #3
 rdbyte r20, r23
 subs r20, #48
 mov r17, r22
 adds r17, r20
 adds r23, #1
C_tmp098179_0000000e_mystrtoll_L000199_4673
 rdbyte r22, r23
 cmps r22,  #48 wcz
 if_b jmp #\C_tmp098179_0000000e_mystrtoll_L000199_4675
 cmps r22,  #55 wcz
 if_be jmp #\C_tmp098179_0000000e_mystrtoll_L000199_4672
C_tmp098179_0000000e_mystrtoll_L000199_4675
 wrlong r23, r21
 jmp #\@C_tmp098179_0000000e_mystrtoll_L000199_4671
C_tmp098179_0000000e_mystrtoll_L000199_4670
 cmps r19,  #16 wz
 if_nz jmp #\C_tmp098179_0000000e_mystrtoll_L000199_4676
 jmp #\@C_tmp098179_0000000e_mystrtoll_L000199_4679
C_tmp098179_0000000e_mystrtoll_L000199_4678
 rdbyte r22, r23
 cmps r22,  #48 wcz
 if_b jmp #\C_tmp098179_0000000e_mystrtoll_L000199_4682
 cmps r22,  #57 wcz
 if_a jmp #\C_tmp098179_0000000e_mystrtoll_L000199_4682
 mov r22, r17
 shl r22, #4
 rdbyte r20, r23
 subs r20, #48
 mov r17, r22
 adds r17, r20
 jmp #\@C_tmp098179_0000000e_mystrtoll_L000199_4683
C_tmp098179_0000000e_mystrtoll_L000199_4682
 rdbyte r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 mov r20, r17
 shl r20, #4
 mov r22, r0
 subs r22, #65
 adds r22, #10
 mov r17, r20
 adds r17, r22
C_tmp098179_0000000e_mystrtoll_L000199_4683
 adds r23, #1
C_tmp098179_0000000e_mystrtoll_L000199_4679
 rdbyte r22, r23
 mov r20, ##@C___ctype+1
 adds r22, r20
 rdbyte r22, r22
 and r22, #68
 cmps r22,  #0 wz
 if_nz jmp #\C_tmp098179_0000000e_mystrtoll_L000199_4678
 wrlong r23, r21
 jmp #\@C_tmp098179_0000000e_mystrtoll_L000199_4677
C_tmp098179_0000000e_mystrtoll_L000199_4676
 mov r2, r19
 mov r3, r21
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_strtol
 add SP, #8
 mov r17, r0
C_tmp098179_0000000e_mystrtoll_L000199_4677
C_tmp098179_0000000e_mystrtoll_L000199_4671
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tmp098179_0000000e_mystrtoll_L000199_4684
 neg r17, r17
C_tmp098179_0000000e_mystrtoll_L000199_4684
 mov r0, r17
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Import _waitms
DAT
' Catalina Import token_parser
DAT
' Catalina Import t_char
DAT
' Catalina Import k_wait
DAT
' Catalina Import k_get
DAT
' Catalina Import _settime
DAT
' Catalina Import rtc_gettime
DAT
' Catalina Import rtc_getclock
DAT
' Catalina Import localtime
DAT
' Catalina Import time
DAT
' Catalina Import mktime
DAT
' Catalina Import errno
DAT
' Catalina Import __bad_assertion
DAT
' Catalina Import toupper
DAT
' Catalina Import __ctype
DAT
' Catalina Import fmod
DAT
' Catalina Import pow
DAT
' Catalina Import floor
DAT
' Catalina Import fabs
DAT
' Catalina Import sqrt
DAT
' Catalina Import log
DAT
' Catalina Import exp
DAT
' Catalina Import tan
DAT
' Catalina Import sin
DAT
' Catalina Import cos
DAT
' Catalina Import atan
DAT
' Catalina Import asin
DAT
' Catalina Import acos
DAT
' Catalina Import strlen
DAT
' Catalina Import memset
DAT
' Catalina Import strstr
DAT
' Catalina Import strchr
DAT
' Catalina Import strncmp
DAT
' Catalina Import strcmp
DAT
' Catalina Import strcat
DAT
' Catalina Import strncpy
DAT
' Catalina Import strcpy
DAT
' Catalina Import abs
DAT
' Catalina Import exit
DAT
' Catalina Import realloc
DAT
' Catalina Import malloc
DAT
' Catalina Import free
DAT
' Catalina Import srand
DAT
' Catalina Import rand
DAT
' Catalina Import strtol
DAT
' Catalina Import strtod
DAT
' Catalina Import ungetc
DAT
' Catalina Import ftell
DAT
' Catalina Import fseek
DAT
' Catalina Import fwrite
DAT
' Catalina Import fread
DAT
' Catalina Import fputc
DAT
' Catalina Import fgets
DAT
' Catalina Import fgetc
DAT
' Catalina Import sscanf
DAT
' Catalina Import sprintf
DAT
' Catalina Import printf
DAT
' Catalina Import fscanf
DAT
' Catalina Import fprintf
DAT
' Catalina Import fopen
DAT
' Catalina Import fflush
DAT
' Catalina Import fclose
DAT
' Catalina Import __stdout
DAT
' Catalina Import __stdin
DAT
DAT
' Catalina Export token_parser
 alignl
C_token_parser
 calld PA,#NEWF
 sub SP, #64
 calld PA,#PSHM
 long $faaa80
 rdbyte r23, r2
 cmps r23,  #65 wcz
 if_b jmp #\C_token_parser_13
 cmps r23,  #120 wcz
 if_a jmp #\C_token_parser_13
 mov r22, r23
 shl r22, #2
 mov r20, ##@C_token_parser_921_L000923-260
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_token_parser_5
 mov r22, r2
 adds r22, #1
 rdbyte r21, r22
 cmps r21,  #78 wcz
 if_b jmp #\C_token_parser_66
 cmps r21,  #84 wcz
 if_a jmp #\C_token_parser_67
 mov r22, r21
 shl r22, #2
 mov r20, ##@C_token_parser_68_L000070-312
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_token_parser_66
 cmps r21,  #66 wz
 if_z jmp #\C_token_parser_9
 cmps r21,  #67 wz
 if_z jmp #\C_token_parser_14
 jmp #\@C_token_parser_13
C_token_parser_67
 mov r22, #98
 cmps r21, r22 wz
 if_z jmp #\C_token_parser_9
 cmps r21,  #99 wz
 if_z jmp #\C_token_parser_14
 cmps r21, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r21,  #110 wcz
 if_b jmp #\C_token_parser_13
 cmps r21,  #116 wcz
 if_a jmp #\C_token_parser_13
 mov r22, r21
 shl r22, #2
 mov r20, ##@C_token_parser_73_L000075-440
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_token_parser_9
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #83 wz
 if_z jmp #\C_token_parser_12
 cmps r22,  #115 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_12
 mov r0, #218
 jmp #\@C_token_parser_1
C_token_parser_14
 mov r22, r2
 adds r22, #2
 rdbyte r19, r22
 mov r22, #79
 cmps r19, r22 wz
 if_z jmp #\C_token_parser_24
 cmps r19, r22 wcz
 if_a jmp #\C_token_parser_29
 cmps r19,  #67 wz
 if_z jmp #\C_token_parser_18
 jmp #\@C_token_parser_13
C_token_parser_29
 mov r22, #99
 cmps r19, r22 wz
 if_z jmp #\C_token_parser_18
 cmps r19, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r19,  #111 wz
 if_z jmp #\C_token_parser_24
 jmp #\@C_token_parser_13
C_token_parser_18
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_21
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_21
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #83 wz
 if_z jmp #\C_token_parser_22
 cmps r22,  #115 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_22
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #83 wz
 if_z jmp #\C_token_parser_23
 cmps r22,  #115 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_23
 mov r0, #23
 jmp #\@C_token_parser_1
C_token_parser_24
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #83 wz
 if_z jmp #\C_token_parser_27
 cmps r22,  #115 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_27
 mov r0, #222
 jmp #\@C_token_parser_1
C_token_parser_31
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #68 wz
 if_z jmp #\C_token_parser_34
 cmps r22,  #100 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_34
 mov r0, #163
 jmp #\@C_token_parser_1
C_token_parser_35
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #80 wz
 if_z jmp #\C_token_parser_38
 cmps r22,  #112 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_38
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_39
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_39
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_40
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_40
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #68 wz
 if_z jmp #\C_token_parser_41
 cmps r22,  #100 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_41
 mov r0, #145
 jmp #\@C_token_parser_1
C_token_parser_42
 mov r22, r2
 adds r22, #2
 rdbyte r17, r22
 mov r22, #73
 cmps r17, r22 wz
 if_z jmp #\C_token_parser_47
 cmps r17, r22 wcz
 if_a jmp #\C_token_parser_52
 cmps r17,  #67 wz
 if_z jmp #\C_token_parser_46
 jmp #\@C_token_parser_43
C_token_parser_52
 mov r22, #99
 cmps r17, r22 wz
 if_z jmp #\C_token_parser_46
 cmps r17, r22 wcz
 if_b jmp #\C_token_parser_43
 cmps r17,  #105 wz
 if_z jmp #\C_token_parser_47
 jmp #\@C_token_parser_43
C_token_parser_46
 mov r0, #220
 jmp #\@C_token_parser_1
C_token_parser_47
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_50
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_50
 mov r0, #221
 jmp #\@C_token_parser_1
C_token_parser_43
 mov r0, #24
 jmp #\@C_token_parser_1
C_token_parser_54
 mov r22, r2
 adds r22, #2
 rdbyte r15, r22
 mov r22, #78
 cmps r15, r22 wz
 if_z jmp #\C_token_parser_62
 cmps r15, r22 wcz
 if_a jmp #\C_token_parser_64
 cmps r15,  #65 wz
 if_z jmp #\C_token_parser_58
 jmp #\@C_token_parser_13
C_token_parser_64
 mov r22, #97
 cmps r15, r22 wz
 if_z jmp #\C_token_parser_58
 cmps r15, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r15,  #110 wz
 if_z jmp #\C_token_parser_62
 jmp #\@C_token_parser_13
C_token_parser_58
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_61
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_61
 mov r0, #223
 jmp #\@C_token_parser_1
C_token_parser_62
 mov r0, #237
 jmp #\@C_token_parser_1
C_token_parser_77
 mov r22, r2
 adds r22, #1
 rdbyte r19, r22
 mov r22, #69
 cmps r19, r22 wz
 if_z jmp #\C_token_parser_86
 cmps r19, r22 wcz
 if_a jmp #\C_token_parser_92
 cmps r19,  #65 wz
 if_z jmp #\C_token_parser_81
 jmp #\@C_token_parser_13
C_token_parser_92
 mov r22, #97
 cmps r19, r22 wz
 if_z jmp #\C_token_parser_81
 cmps r19, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r19,  #101 wz
 if_z jmp #\C_token_parser_86
 jmp #\@C_token_parser_13
C_token_parser_81
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #83 wz
 if_z jmp #\C_token_parser_84
 cmps r22,  #115 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_84
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_85
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_85
 mov r0, #182
 jmp #\@C_token_parser_1
C_token_parser_86
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_89
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_89
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #80 wz
 if_z jmp #\C_token_parser_90
 cmps r22,  #112 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_90
 mov r0, #209
 jmp #\@C_token_parser_1
C_token_parser_94
 mov r22, r2
 adds r22, #1
 rdbyte r17, r22
 cmps r17,  #83 wz
 if_z jmp #\C_token_parser_141
 mov r22, #86
 cmps r17, r22 wz
 if_z jmp #\C_token_parser_146
 cmps r17, r22 wcz
 if_a jmp #\C_token_parser_159
 mov r22, #65
 cmps r17, r22 wz
 if_z jmp #\C_token_parser_98
 cmps r17,  #68 wz
 if_z jmp #\C_token_parser_103
 cmps r17, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r17,  #72 wcz
 if_b jmp #\C_token_parser_13
 cmps r17,  #79 wcz
 if_a jmp #\C_token_parser_13
 mov r22, r17
 shl r22, #2
 mov r20, ##@C_token_parser_161_L000163-288
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_token_parser_159
 cmps r17,  #104 wcz
 if_b jmp #\C_token_parser_165
 cmps r17,  #111 wcz
 if_a jmp #\C_token_parser_166
 mov r22, r17
 shl r22, #2
 mov r20, ##@C_token_parser_167_L000169-416
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_token_parser_165
 cmps r17,  #97 wz
 if_z jmp #\C_token_parser_98
 cmps r17,  #100 wz
 if_z jmp #\C_token_parser_103
 jmp #\@C_token_parser_13
C_token_parser_166
 cmps r17,  #115 wz
 if_z jmp #\C_token_parser_141
 cmps r17,  #118 wz
 if_z jmp #\C_token_parser_146
 jmp #\@C_token_parser_13
C_token_parser_98
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #76 wz
 if_z jmp #\C_token_parser_101
 cmps r22,  #108 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_101
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #76 wz
 if_z jmp #\C_token_parser_102
 cmps r22,  #108 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_102
 mov r0, #29
 jmp #\@C_token_parser_1
C_token_parser_103
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #66 wz
 if_z jmp #\C_token_parser_106
 cmps r22,  #98 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_106
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #76 wz
 if_z jmp #\C_token_parser_107
 cmps r22,  #108 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_107
 mov r0, #233
 jmp #\@C_token_parser_1
C_token_parser_108
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #82 wz
 if_z jmp #\C_token_parser_111
 cmps r22,  #114 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_111
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #36 wz
 if_nz jmp #\C_token_parser_13
 mov r0, #240
 jmp #\@C_token_parser_1
C_token_parser_112
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_115
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_115
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #84 wz
 if_z jmp #\C_token_parser_116
 cmps r22,  #116 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_116
 mov r0, #231
 jmp #\@C_token_parser_1
C_token_parser_117
 mov r22, r2
 adds r22, #2
 rdbyte r15, r22
 mov r22, #83
 cmps r15, r22 wz
 if_z jmp #\C_token_parser_131
 cmps r15, r22 wcz
 if_a jmp #\C_token_parser_133
 mov r22, #69
 cmps r15, r22 wz
 if_z jmp #\C_token_parser_121
 cmps r15, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r15,  #79 wz
 if_z jmp #\C_token_parser_126
 jmp #\@C_token_parser_13
C_token_parser_133
 mov r22, #111
 cmps r15, r22 wz
 if_z jmp #\C_token_parser_126
 cmps r15, r22 wcz
 if_a jmp #\C_token_parser_136
 cmps r15,  #101 wz
 if_z jmp #\C_token_parser_121
 jmp #\@C_token_parser_13
C_token_parser_136
 cmps r15,  #115 wz
 if_z jmp #\C_token_parser_131
 jmp #\@C_token_parser_13
C_token_parser_121
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #65 wz
 if_z jmp #\C_token_parser_124
 cmps r22,  #97 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_124
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #82 wz
 if_z jmp #\C_token_parser_125
 cmps r22,  #114 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_125
 mov r0, #200
 jmp #\@C_token_parser_1
C_token_parser_126
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #83 wz
 if_z jmp #\C_token_parser_129
 cmps r22,  #115 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_129
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_130
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_130
 mov r0, #143
 jmp #\@C_token_parser_1
C_token_parser_131
 mov r0, #204
 jmp #\@C_token_parser_1
C_token_parser_137
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #83 wz
 if_z jmp #\C_token_parser_140
 cmps r22,  #115 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_140
 mov r0, #212
 jmp #\@C_token_parser_1
C_token_parser_141
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_144
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_144
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #71 wz
 if_z jmp #\C_token_parser_145
 cmps r22,  #103 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_145
 mov r0, #232
 jmp #\@C_token_parser_1
C_token_parser_146
 mov r22, r2
 adds r22, #2
 rdbyte r13, r22
 mov r22, #83
 cmps r13, r22 wz
 if_z jmp #\C_token_parser_152
 cmps r13, r22 wcz
 if_a jmp #\C_token_parser_154
 mov r22, #68
 cmps r13, r22 wz
 if_z jmp #\C_token_parser_150
 cmps r13, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r13,  #73 wz
 if_z jmp #\C_token_parser_151
 jmp #\@C_token_parser_13
C_token_parser_154
 mov r22, #105
 cmps r13, r22 wz
 if_z jmp #\C_token_parser_151
 cmps r13, r22 wcz
 if_a jmp #\C_token_parser_157
 cmps r13,  #100 wz
 if_z jmp #\C_token_parser_150
 jmp #\@C_token_parser_13
C_token_parser_157
 cmps r13,  #115 wz
 if_z jmp #\C_token_parser_152
 jmp #\@C_token_parser_13
C_token_parser_150
 mov r0, #151
 jmp #\@C_token_parser_1
C_token_parser_151
 mov r0, #149
 jmp #\@C_token_parser_1
C_token_parser_152
 mov r0, #150
 jmp #\@C_token_parser_1
C_token_parser_171
 mov r22, r2
 adds r22, #1
 rdbyte r15, r22
 mov r22, #73
 cmps r15, r22 wz
 if_z jmp #\C_token_parser_230
 cmps r15, r22 wcz
 if_a jmp #\C_token_parser_235
 mov r22, #65
 cmps r15, r22 wz
 if_z jmp #\C_token_parser_175
 cmps r15, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r15,  #69 wz
 if_z jmp #\C_token_parser_191
 jmp #\@C_token_parser_13
C_token_parser_235
 mov r22, #101
 cmps r15, r22 wz
 if_z jmp #\C_token_parser_191
 cmps r15, r22 wcz
 if_a jmp #\C_token_parser_238
 cmps r15,  #97 wz
 if_z jmp #\C_token_parser_175
 jmp #\@C_token_parser_13
C_token_parser_238
 cmps r15,  #105 wz
 if_z jmp #\C_token_parser_230
 jmp #\@C_token_parser_13
C_token_parser_175
 mov r22, r2
 adds r22, #2
 rdbyte r13, r22
 mov r22, #84
 cmps r13, r22 wz
 if_z jmp #\C_token_parser_179
 cmps r13, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r13,  #116 wz
 if_z jmp #\C_token_parser_179
 jmp #\@C_token_parser_13
C_token_parser_179
 mov r22, r2
 adds r22, #3
 rdbyte r11, r22
 mov r22, #69
 cmps r11, r22 wz
 if_z jmp #\C_token_parser_184
 cmps r11, r22 wcz
 if_a jmp #\C_token_parser_188
 cmps r11,  #65 wz
 if_z jmp #\C_token_parser_183
 jmp #\@C_token_parser_13
C_token_parser_188
 mov r22, #97
 cmps r11, r22 wz
 if_z jmp #\C_token_parser_183
 cmps r11, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r11,  #101 wz
 if_z jmp #\C_token_parser_184
 jmp #\@C_token_parser_13
C_token_parser_183
 mov r0, #173
 jmp #\@C_token_parser_1
C_token_parser_184
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #36 wz
 if_nz jmp #\C_token_parser_13
 mov r0, #248
 jmp #\@C_token_parser_1
C_token_parser_191
 mov r22, r2
 adds r22, #2
 rdbyte r11, r22
 mov r22, #70
 cmps r11, r22 wz
 if_z jmp #\C_token_parser_195
 cmps r11, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r11,  #102 wz
 if_z jmp #\C_token_parser_195
 jmp #\@C_token_parser_13
C_token_parser_195
 mov r22, r2
 adds r22, #3
 rdbyte r9, r22
 mov r22, #83
 cmps r9, r22 wz
 if_z jmp #\C_token_parser_209
 cmps r9, r22 wcz
 if_a jmp #\C_token_parser_225
 mov r22, #68
 cmps r9, r22 wz
 if_z jmp #\C_token_parser_199
 cmps r9, r22 wcz
 if_b jmp #\C_token_parser_196
 cmps r9,  #73 wz
 if_z jmp #\C_token_parser_204
 jmp #\@C_token_parser_196
C_token_parser_225
 mov r22, #105
 cmps r9, r22 wz
 if_z jmp #\C_token_parser_204
 cmps r9, r22 wcz
 if_a jmp #\C_token_parser_228
 cmps r9,  #100 wz
 if_z jmp #\C_token_parser_199
 jmp #\@C_token_parser_196
C_token_parser_228
 cmps r9,  #115 wz
 if_z jmp #\C_token_parser_209
 jmp #\@C_token_parser_196
C_token_parser_199
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #66 wz
 if_z jmp #\C_token_parser_202
 cmps r22,  #98 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_202
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #76 wz
 if_z jmp #\C_token_parser_203
 cmps r22,  #108 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_203
 mov r0, #189
 jmp #\@C_token_parser_1
C_token_parser_204
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_207
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_207
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #84 wz
 if_z jmp #\C_token_parser_208
 cmps r22,  #116 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_208
 mov r0, #187
 jmp #\@C_token_parser_1
C_token_parser_209
 mov r22, r2
 adds r22, #4
 rdbyte r7, r22
 mov r22, #84
 cmps r7, r22 wz
 if_z jmp #\C_token_parser_217
 cmps r7, r22 wcz
 if_a jmp #\C_token_parser_222
 cmps r7,  #78 wz
 if_z jmp #\C_token_parser_213
 jmp #\@C_token_parser_13
C_token_parser_222
 mov r22, #110
 cmps r7, r22 wz
 if_z jmp #\C_token_parser_213
 cmps r7, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r7,  #116 wz
 if_z jmp #\C_token_parser_217
 jmp #\@C_token_parser_13
C_token_parser_213
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #71 wz
 if_z jmp #\C_token_parser_216
 cmps r22,  #103 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_216
 mov r0, #188
 jmp #\@C_token_parser_1
C_token_parser_217
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #82 wz
 if_z jmp #\C_token_parser_220
 cmps r22,  #114 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_220
 mov r0, #190
 jmp #\@C_token_parser_1
C_token_parser_196
 mov r0, #186
 jmp #\@C_token_parser_1
C_token_parser_230
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #77 wz
 if_z jmp #\C_token_parser_233
 cmps r22,  #109 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_233
 mov r0, #160
 jmp #\@C_token_parser_1
C_token_parser_239
 mov r22, r2
 adds r22, #1
 rdbyte r13, r22
 mov r22, #88
 cmps r13, r22 wz
 if_z jmp #\C_token_parser_284
 cmps r13, r22 wcz
 if_a jmp #\C_token_parser_289
 cmps r13,  #76 wcz
 if_b jmp #\C_token_parser_13
 cmps r13,  #82 wcz
 if_a jmp #\C_token_parser_13
 mov r22, r13
 shl r22, #2
 mov r20, ##@C_token_parser_290_L000292-304
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_token_parser_289
 cmps r13,  #108 wcz
 if_b jmp #\C_token_parser_13
 cmps r13,  #114 wcz
 if_a jmp #\C_token_parser_294
 mov r22, r13
 shl r22, #2
 mov r20, ##@C_token_parser_295_L000297-432
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_token_parser_294
 cmps r13,  #120 wz
 if_z jmp #\C_token_parser_284
 jmp #\@C_token_parser_13
C_token_parser_243
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #83 wz
 if_z jmp #\C_token_parser_246
 cmps r22,  #115 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_246
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_247
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_247
 mov r0, #179
 jmp #\@C_token_parser_1
C_token_parser_248
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #68 wz
 if_z jmp #\C_token_parser_251
 cmps r22,  #100 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_251
 mov r0, #175
 jmp #\@C_token_parser_1
C_token_parser_252
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #70 wz
 if_z jmp #\C_token_parser_255
 cmps r22,  #102 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_255
 mov r0, #157
 jmp #\@C_token_parser_1
C_token_parser_256
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #86 wz
 if_z jmp #\C_token_parser_259
 cmps r22,  #118 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_259
 mov r0, #195
 jmp #\@C_token_parser_1
C_token_parser_260
 mov r22, r2
 adds r22, #2
 rdbyte r11, r22
 mov r22, #82
 cmps r11, r22 wz
 if_z jmp #\C_token_parser_270
 cmps r11, r22 wcz
 if_a jmp #\C_token_parser_280
 mov r22, #65
 cmps r11, r22 wz
 if_z jmp #\C_token_parser_264
 cmps r11, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r11,  #76 wz
 if_z jmp #\C_token_parser_269
 jmp #\@C_token_parser_13
C_token_parser_280
 mov r22, #108
 cmps r11, r22 wz
 if_z jmp #\C_token_parser_269
 cmps r11, r22 wcz
 if_a jmp #\C_token_parser_283
 cmps r11,  #97 wz
 if_z jmp #\C_token_parser_264
 jmp #\@C_token_parser_13
C_token_parser_283
 cmps r11,  #114 wz
 if_z jmp #\C_token_parser_270
 jmp #\@C_token_parser_13
C_token_parser_264
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #83 wz
 if_z jmp #\C_token_parser_267
 cmps r22,  #115 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_267
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_268
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_268
 mov r0, #203
 jmp #\@C_token_parser_1
C_token_parser_269
 mov r0, #206
 jmp #\@C_token_parser_1
C_token_parser_270
 mov r22, r2
 adds r22, #3
 rdbyte r9, r22
 mov r22, #79
 cmps r9, r22 wz
 if_z jmp #\C_token_parser_274
 cmps r9, r22 wcz
 if_b jmp #\C_token_parser_271
 cmps r9,  #111 wz
 if_z jmp #\C_token_parser_274
 jmp #\@C_token_parser_271
C_token_parser_274
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #82 wz
 if_z jmp #\C_token_parser_277
 cmps r22,  #114 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_277
 mov r0, #210
 jmp #\@C_token_parser_1
C_token_parser_271
 mov r0, #207
 jmp #\@C_token_parser_1
C_token_parser_284
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #80 wz
 if_z jmp #\C_token_parser_287
 cmps r22,  #112 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_287
 mov r0, #239
 jmp #\@C_token_parser_1
C_token_parser_299
 mov r22, r2
 adds r22, #1
 rdbyte r11, r22
 cmps r11,  #79 wz
 if_z jmp #\C_token_parser_316
 mov r22, #82
 cmps r11, r22 wz
 if_z jmp #\C_token_parser_320
 cmps r11, r22 wcz
 if_a jmp #\C_token_parser_325
 cmps r11,  #73 wz
 if_z jmp #\C_token_parser_303
 jmp #\@C_token_parser_13
C_token_parser_325
 mov r22, #105
 cmps r11, r22 wz
 if_z jmp #\C_token_parser_303
 cmps r11, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r11,  #111 wz
 if_z jmp #\C_token_parser_316
 cmps r11,  #114 wz
 if_z jmp #\C_token_parser_320
 jmp #\@C_token_parser_13
C_token_parser_303
 mov r22, r2
 adds r22, #2
 rdbyte r9, r22
 mov r22, #88
 cmps r9, r22 wz
 if_z jmp #\C_token_parser_312
 cmps r9, r22 wcz
 if_a jmp #\C_token_parser_314
 cmps r9,  #69 wz
 if_z jmp #\C_token_parser_307
 jmp #\@C_token_parser_13
C_token_parser_314
 mov r22, #101
 cmps r9, r22 wz
 if_z jmp #\C_token_parser_307
 cmps r9, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r9,  #120 wz
 if_z jmp #\C_token_parser_312
 jmp #\@C_token_parser_13
C_token_parser_307
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #76 wz
 if_z jmp #\C_token_parser_310
 cmps r22,  #108 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_310
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #68 wz
 if_z jmp #\C_token_parser_311
 cmps r22,  #100 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_311
 mov r0, #152
 jmp #\@C_token_parser_1
C_token_parser_312
 mov r0, #236
 jmp #\@C_token_parser_1
C_token_parser_316
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #82 wz
 if_z jmp #\C_token_parser_319
 cmps r22,  #114 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_319
 mov r0, #168
 jmp #\@C_token_parser_1
C_token_parser_320
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_323
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_323
 mov r0, #208
 jmp #\@C_token_parser_1
C_token_parser_327
 mov r22, r2
 adds r22, #1
 rdbyte r9, r22
 mov r22, #79
 cmps r9, r22 wz
 if_z jmp #\C_token_parser_335
 cmps r9, r22 wcz
 if_a jmp #\C_token_parser_350
 cmps r9,  #69 wz
 if_z jmp #\C_token_parser_331
 jmp #\@C_token_parser_13
C_token_parser_350
 mov r22, #101
 cmps r9, r22 wz
 if_z jmp #\C_token_parser_331
 cmps r9, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r9,  #111 wz
 if_z jmp #\C_token_parser_335
 jmp #\@C_token_parser_13
C_token_parser_331
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #84 wz
 if_z jmp #\C_token_parser_334
 cmps r22,  #116 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_334
 mov r0, #147
 jmp #\@C_token_parser_1
C_token_parser_335
 mov r22, r2
 adds r22, #2
 rdbyte r7, r22
 mov r22, #83
 cmps r7, r22 wz
 if_z jmp #\C_token_parser_339
 cmps r7,  #84 wz
 if_z jmp #\C_token_parser_344
 cmps r7, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r7,  #115 wz
 if_z jmp #\C_token_parser_339
 cmps r7,  #116 wz
 if_z jmp #\C_token_parser_344
 jmp #\@C_token_parser_13
C_token_parser_339
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #85 wz
 if_z jmp #\C_token_parser_342
 cmps r22,  #117 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_342
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #66 wz
 if_z jmp #\C_token_parser_343
 cmps r22,  #98 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_343
 mov r0, #177
 jmp #\@C_token_parser_1
C_token_parser_344
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #79 wz
 if_z jmp #\C_token_parser_347
 cmps r22,  #111 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_347
 mov r0, #165
 jmp #\@C_token_parser_1
C_token_parser_352
 mov r22, r2
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_355
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_355
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #88 wz
 if_z jmp #\C_token_parser_356
 cmps r22,  #120 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_356
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #36 wz
 if_nz jmp #\C_token_parser_13
 mov r0, #246
 jmp #\@C_token_parser_1
C_token_parser_357
 mov r22, r2
 adds r22, #1
 rdbyte r7, r22
 cmps r7,  #77 wz
 if_z jmp #\C_token_parser_362
 mov r22, #78
 cmps r7, r22 wz
 if_z jmp #\C_token_parser_366
 cmps r7, r22 wcz
 if_a jmp #\C_token_parser_400
 cmps r7,  #70 wz
 if_z jmp #\C_token_parser_361
 jmp #\@C_token_parser_13
C_token_parser_400
 mov r22, #102
 cmps r7, r22 wz
 if_z jmp #\C_token_parser_361
 cmps r7, r22 wcz
 if_b jmp #\C_token_parser_13
 cmps r7,  #109 wz
 if_z jmp #\C_token_parser_362
 cmps r7,  #110 wz
 if_z jmp #\C_token_parser_366
 jmp #\@C_token_parser_13
C_token_parser_361
 mov r0, #161
 jmp #\@C_token_parser_1
C_token_parser_362
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #80 wz
 if_z jmp #\C_token_parser_365
 cmps r22,  #112 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_365
 mov r0, #196
 jmp #\@C_token_parser_1
C_token_parser_366
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #80 wz
 if_z jmp #\C_token_parser_375
 cmps r22,  #83 wz
 if_z jmp #\C_token_parser_390
 mov r20, #84
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_395
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_397
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #75 wz
 if_z jmp #\C_token_parser_370
 jmp #\@C_token_parser_13
C_token_parser_397
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, #107
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_370
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #112 wz
 if_z jmp #\C_token_parser_375
 cmps r22,  #115 wz
 if_z jmp #\C_token_parser_390
 cmps r22,  #116 wz
 if_z jmp #\C_token_parser_395
 jmp #\@C_token_parser_13
C_token_parser_370
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_373
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_373
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #89 wz
 if_z jmp #\C_token_parser_374
 cmps r22,  #121 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_374
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #36 wz
 if_nz jmp #\C_token_parser_13
 mov r0, #253
 jmp #\@C_token_parser_1
C_token_parser_375
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, #85
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_379
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmps r22,  #117 wz
 if_z jmp #\C_token_parser_379
 jmp #\@C_token_parser_13
C_token_parser_379
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r20, #84
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_383
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #116 wz
 if_z jmp #\C_token_parser_383
 jmp #\@C_token_parser_13
C_token_parser_383
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r22,  #36 wz
 if_z jmp #\C_token_parser_387
 jmp #\@C_token_parser_384
C_token_parser_387
 mov r0, #25
 jmp #\@C_token_parser_1
C_token_parser_384
 mov r0, #166
 jmp #\@C_token_parser_1
C_token_parser_390
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #84 wz
 if_z jmp #\C_token_parser_393
 cmps r22,  #116 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_393
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #82 wz
 if_z jmp #\C_token_parser_394
 cmps r22,  #114 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_394
 mov r0, #228
 jmp #\@C_token_parser_1
C_token_parser_395
 mov r0, #224
 jmp #\@C_token_parser_1
C_token_parser_402
 mov r22, r2
 adds r22, #1
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, #83
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_439
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_445
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, #73
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_421
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_447
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_406
 jmp #\@C_token_parser_13
C_token_parser_447
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #79 wz
 if_z jmp #\C_token_parser_426
 jmp #\@C_token_parser_13
C_token_parser_445
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, #105
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_421
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_449
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #101 wz
 if_z jmp #\C_token_parser_406
 jmp #\@C_token_parser_13
C_token_parser_449
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, #111
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_426
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #115 wz
 if_z jmp #\C_token_parser_439
 jmp #\@C_token_parser_13
C_token_parser_406
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, #84
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_415
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_417
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, #70
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_410
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_414
 jmp #\@C_token_parser_13
C_token_parser_417
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, #110
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_414
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_420
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmps r22,  #102 wz
 if_z jmp #\C_token_parser_410
 jmp #\@C_token_parser_13
C_token_parser_420
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmps r22,  #116 wz
 if_z jmp #\C_token_parser_415
 jmp #\@C_token_parser_13
C_token_parser_410
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #84 wz
 if_z jmp #\C_token_parser_413
 cmps r22,  #116 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_413
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #36 wz
 if_nz jmp #\C_token_parser_13
 mov r0, #242
 jmp #\@C_token_parser_1
C_token_parser_414
 mov r0, #219
 jmp #\@C_token_parser_1
C_token_parser_415
 mov r0, #159
 jmp #\@C_token_parser_1
C_token_parser_421
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_424
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_424
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_425
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_425
 mov r0, #198
 jmp #\@C_token_parser_1
C_token_parser_426
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r20, #67
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_430
 cmps r22,  #70 wz
 if_z jmp #\C_token_parser_436
 cmps r22,  #71 wz
 if_z jmp #\C_token_parser_437
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #99 wz
 if_z jmp #\C_token_parser_430
 cmps r22,  #102 wz
 if_z jmp #\C_token_parser_436
 cmps r22,  #103 wz
 if_z jmp #\C_token_parser_437
 jmp #\@C_token_parser_13
C_token_parser_430
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov r20, #75
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_434
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_431
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r22,  #107 wz
 if_z jmp #\C_token_parser_434
 jmp #\@C_token_parser_431
C_token_parser_434
 mov r0, #20
 jmp #\@C_token_parser_1
C_token_parser_431
 mov r0, #156
 jmp #\@C_token_parser_1
C_token_parser_436
 mov r0, #155
 jmp #\@C_token_parser_1
C_token_parser_437
 mov r0, #214
 jmp #\@C_token_parser_1
C_token_parser_439
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_442
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_442
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #84 wz
 if_z jmp #\C_token_parser_443
 cmps r22,  #116 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_443
 mov r0, #153
 jmp #\@C_token_parser_1
C_token_parser_451
 mov r22, r2
 adds r22, #1
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, #79
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_477
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_482
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmps r22,  #73 wz
 if_z jmp #\C_token_parser_455
 cmps r22,  #75 wz
 if_z jmp #\C_token_parser_459
 jmp #\@C_token_parser_13
C_token_parser_482
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, #105
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_455
 cmps r22,  #107 wz
 if_z jmp #\C_token_parser_459
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmps r22,  #111 wz
 if_z jmp #\C_token_parser_477
 jmp #\@C_token_parser_13
C_token_parser_455
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #68 wz
 if_z jmp #\C_token_parser_458
 cmps r22,  #100 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_458
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #36 wz
 if_nz jmp #\C_token_parser_13
 mov r0, #244
 jmp #\@C_token_parser_1
C_token_parser_459
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r20, #83
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_469
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_473
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r20, #68
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_463
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #73 wz
 if_z jmp #\C_token_parser_466
 jmp #\@C_token_parser_13
C_token_parser_473
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r20, #105
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_466
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_476
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #100 wz
 if_z jmp #\C_token_parser_463
 jmp #\@C_token_parser_13
C_token_parser_476
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #115 wz
 if_z jmp #\C_token_parser_469
 jmp #\@C_token_parser_13
C_token_parser_463
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #36 wz
 if_nz jmp #\C_token_parser_13
 mov r0, #251
 jmp #\@C_token_parser_1
C_token_parser_466
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #36 wz
 if_nz jmp #\C_token_parser_13
 mov r0, #250
 jmp #\@C_token_parser_1
C_token_parser_469
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #36 wz
 if_nz jmp #\C_token_parser_13
 mov r0, #252
 jmp #\@C_token_parser_1
C_token_parser_477
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #68 wz
 if_z jmp #\C_token_parser_480
 cmps r22,  #100 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_480
 mov r0, #217
 jmp #\@C_token_parser_1
C_token_parser_484
 mov r22, r2
 adds r22, #1
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r20, #79
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_493
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_498
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_488
 jmp #\@C_token_parser_13
C_token_parser_498
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r20, #101
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_488
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #111 wz
 if_z jmp #\C_token_parser_493
 jmp #\@C_token_parser_13
C_token_parser_488
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #88 wz
 if_z jmp #\C_token_parser_491
 cmps r22,  #120 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_491
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #84 wz
 if_z jmp #\C_token_parser_492
 cmps r22,  #116 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_492
 mov r0, #170
 jmp #\@C_token_parser_1
C_token_parser_493
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #84 wz
 if_z jmp #\C_token_parser_496
 cmps r22,  #116 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_496
 mov r0, #193
 jmp #\@C_token_parser_1
C_token_parser_500
 mov r22, r2
 adds r22, #1
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r22,  #78 wcz
 if_b jmp #\C_token_parser_534
 cmps r22,  #85 wcz
 if_a jmp #\C_token_parser_535
 shl r22, #2
 mov r20, ##@C_token_parser_536_L000538-312
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_token_parser_534
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r22,  #67 wz
 if_z jmp #\C_token_parser_504
 jmp #\@C_token_parser_13
C_token_parser_535
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov r20, #99
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_504
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r22,  #110 wcz
 if_b jmp #\C_token_parser_13
 cmps r22,  #117 wcz
 if_a jmp #\C_token_parser_13
 shl r22, #2
 mov r20, ##@C_token_parser_541_L000543-440
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_token_parser_504
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #84 wz
 if_z jmp #\C_token_parser_507
 cmps r22,  #116 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_507
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #36 wz
 if_nz jmp #\C_token_parser_13
 mov r0, #247
 jmp #\@C_token_parser_1
C_token_parser_508
 mov r0, #180
 jmp #\@C_token_parser_1
C_token_parser_509
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 mov r20, #84
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_517
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_524
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_513
 jmp #\@C_token_parser_13
C_token_parser_524
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 mov r20, #101
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_513
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 cmps r22,  #116 wz
 if_z jmp #\C_token_parser_517
 jmp #\@C_token_parser_13
C_token_parser_513
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_516
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_516
 mov r0, #142
 jmp #\@C_token_parser_1
C_token_parser_517
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #73 wz
 if_z jmp #\C_token_parser_520
 cmps r22,  #105 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_520
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #79 wz
 if_z jmp #\C_token_parser_521
 cmps r22,  #111 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_521
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_522
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_522
 mov r0, #181
 jmp #\@C_token_parser_1
C_token_parser_526
 mov r0, #164
 jmp #\@C_token_parser_1
C_token_parser_527
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #84 wz
 if_z jmp #\C_token_parser_530
 cmps r22,  #116 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_530
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #80 wz
 if_z jmp #\C_token_parser_531
 cmps r22,  #112 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_531
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #85 wz
 if_z jmp #\C_token_parser_532
 cmps r22,  #117 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_532
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #84 wz
 if_z jmp #\C_token_parser_533
 cmps r22,  #116 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_533
 mov r0, #144
 jmp #\@C_token_parser_1
C_token_parser_545
 mov r22, r2
 adds r22, #1
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 mov r20, #85
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_576
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_581
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 mov r20, #73
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_554
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_583
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_549
 jmp #\@C_token_parser_13
C_token_parser_583
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 cmps r22,  #79 wz
 if_z jmp #\C_token_parser_555
 cmps r22,  #82 wz
 if_z jmp #\C_token_parser_570
 jmp #\@C_token_parser_13
C_token_parser_581
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 mov r20, #105
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_554
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_585
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 cmps r22,  #101 wz
 if_z jmp #\C_token_parser_549
 jmp #\@C_token_parser_13
C_token_parser_585
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 mov r20, #111
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_555
 cmps r22,  #114 wz
 if_z jmp #\C_token_parser_570
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 cmps r22,  #117 wz
 if_z jmp #\C_token_parser_576
 jmp #\@C_token_parser_13
C_token_parser_549
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_552
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_552
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #75 wz
 if_z jmp #\C_token_parser_553
 cmps r22,  #107 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_553
 mov r0, #191
 jmp #\@C_token_parser_1
C_token_parser_554
 mov r0, #136
 jmp #\@C_token_parser_1
C_token_parser_555
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 mov r20, #87
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_564
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_566
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 mov r20, #75
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_559
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 cmps r22,  #83 wz
 if_z jmp #\C_token_parser_563
 jmp #\@C_token_parser_13
C_token_parser_566
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 mov r20, #115
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_563
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_569
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 cmps r22,  #107 wz
 if_z jmp #\C_token_parser_559
 jmp #\@C_token_parser_13
C_token_parser_569
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 cmps r22,  #119 wz
 if_z jmp #\C_token_parser_564
 jmp #\@C_token_parser_13
C_token_parser_559
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_562
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_562
 mov r0, #192
 jmp #\@C_token_parser_1
C_token_parser_563
 mov r0, #205
 jmp #\@C_token_parser_1
C_token_parser_564
 mov r0, #215
 jmp #\@C_token_parser_1
C_token_parser_570
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #73 wz
 if_z jmp #\C_token_parser_573
 cmps r22,  #105 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_573
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_574
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_574
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #84 wz
 if_z jmp #\C_token_parser_575
 cmps r22,  #116 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_575
 mov r0, #140
 jmp #\@C_token_parser_1
C_token_parser_576
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #84 wz
 if_z jmp #\C_token_parser_579
 cmps r22,  #116 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_579
 mov r0, #148
 jmp #\@C_token_parser_1
C_token_parser_587
 mov r22, r2
 adds r22, #1
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 mov r20, #83
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_667
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_673
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 mov r20, #69
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_621
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_675
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 cmps r22,  #65 wz
 if_z jmp #\C_token_parser_591
 jmp #\@C_token_parser_13
C_token_parser_675
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 mov r20, #73
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_657
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_663
 jmp #\@C_token_parser_13
C_token_parser_673
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 mov r20, #105
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_657
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_678
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 mov r20, #97
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_591
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 cmps r22,  #101 wz
 if_z jmp #\C_token_parser_621
 jmp #\@C_token_parser_13
C_token_parser_678
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 mov r20, #110
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_663
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 cmps r22,  #115 wz
 if_z jmp #\C_token_parser_667
 jmp #\@C_token_parser_13
C_token_parser_591
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-32)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-32)
 rdlong r22, r22
 mov r20, #78
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_595
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-32)
 rdlong r22, r22
 cmps r22,  #110 wz
 if_z jmp #\C_token_parser_595
 jmp #\@C_token_parser_13
C_token_parser_595
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-36)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 mov r20, #68
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_599
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 cmps r22,  #100 wz
 if_z jmp #\C_token_parser_599
 jmp #\@C_token_parser_13
C_token_parser_599
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-40)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 mov r20, #79
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_603
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 cmps r22,  #111 wz
 if_z jmp #\C_token_parser_603
 jmp #\@C_token_parser_13
C_token_parser_603
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-44)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-44)
 rdlong r22, r22
 mov r20, #77
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_607
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-44)
 rdlong r22, r22
 cmps r22,  #109 wz
 if_z jmp #\C_token_parser_607
 jmp #\@C_token_parser_13
C_token_parser_607
 mov r22, r2
 adds r22, #6
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-48)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-48)
 rdlong r22, r22
 mov r20, #73
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_611
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-48)
 rdlong r22, r22
 cmps r22,  #105 wz
 if_z jmp #\C_token_parser_611
 jmp #\@C_token_parser_13
C_token_parser_611
 mov r22, r2
 adds r22, #7
 rdbyte r22, r22
 cmps r22,  #90 wz
 if_z jmp #\C_token_parser_614
 cmps r22,  #122 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_614
 mov r22, r2
 adds r22, #8
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_615
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_615
 mov r0, #183
 jmp #\@C_token_parser_1
C_token_parser_621
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-36)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 cmps r22,  #83 wz
 if_z jmp #\C_token_parser_630
 mov r20, #84
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_646
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_653
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 mov r20, #65
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_625
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 cmps r22,  #77 wz
 if_z jmp #\C_token_parser_629
 jmp #\@C_token_parser_13
C_token_parser_653
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 mov r20, #109
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_629
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_656
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 cmps r22,  #97 wz
 if_z jmp #\C_token_parser_625
 jmp #\@C_token_parser_13
C_token_parser_656
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 cmps r22,  #115 wz
 if_z jmp #\C_token_parser_630
 cmps r22,  #116 wz
 if_z jmp #\C_token_parser_646
 jmp #\@C_token_parser_13
C_token_parser_625
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #68 wz
 if_z jmp #\C_token_parser_628
 cmps r22,  #100 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_628
 mov r0, #172
 jmp #\@C_token_parser_1
C_token_parser_629
 mov r0, #167
 jmp #\@C_token_parser_1
C_token_parser_630
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-40)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 mov r20, #84
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_634
 cmps r22,  #85 wz
 if_z jmp #\C_token_parser_640
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 cmps r22,  #116 wz
 if_z jmp #\C_token_parser_634
 cmps r22,  #117 wz
 if_z jmp #\C_token_parser_640
 jmp #\@C_token_parser_13
C_token_parser_634
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #79 wz
 if_z jmp #\C_token_parser_637
 cmps r22,  #111 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_637
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #82 wz
 if_z jmp #\C_token_parser_638
 cmps r22,  #114 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_638
 mov r22, r2
 adds r22, #6
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_639
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_639
 mov r0, #174
 jmp #\@C_token_parser_1
C_token_parser_640
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #77 wz
 if_z jmp #\C_token_parser_643
 cmps r22,  #109 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_643
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_644
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_644
 mov r0, #158
 jmp #\@C_token_parser_1
C_token_parser_646
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #85 wz
 if_z jmp #\C_token_parser_649
 cmps r22,  #117 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_649
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #82 wz
 if_z jmp #\C_token_parser_650
 cmps r22,  #114 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_650
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_651
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_651
 mov r0, #178
 jmp #\@C_token_parser_1
C_token_parser_657
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #71 wz
 if_z jmp #\C_token_parser_660
 cmps r22,  #103 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_660
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #72 wz
 if_z jmp #\C_token_parser_661
 cmps r22,  #104 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_661
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #84 wz
 if_z jmp #\C_token_parser_662
 cmps r22,  #116 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_662
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #36 wz
 if_nz jmp #\C_token_parser_13
 mov r0, #243
 jmp #\@C_token_parser_1
C_token_parser_663
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #68 wz
 if_z jmp #\C_token_parser_666
 cmps r22,  #100 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_666
 mov r0, #225
 jmp #\@C_token_parser_1
C_token_parser_667
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_670
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_670
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #84 wz
 if_z jmp #\C_token_parser_671
 cmps r22,  #116 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_671
 mov r0, #154
 jmp #\@C_token_parser_1
C_token_parser_681
 mov r22, r2
 adds r22, #1
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-32)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-32)
 rdlong r22, r22
 cmps r22,  #80 wcz
 if_b jmp #\C_token_parser_747
 cmps r22,  #87 wcz
 if_a jmp #\C_token_parser_748
 shl r22, #2
 mov r20, ##@C_token_parser_749_L000751-320
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_token_parser_747
 mov r22, FP
 sub r22, #-(-32)
 rdlong r22, r22
 cmps r22,  #71 wz
 if_z jmp #\C_token_parser_685
 cmps r22,  #72 wz
 if_z jmp #\C_token_parser_689
 cmps r22,  #73 wz
 if_z jmp #\C_token_parser_696
 jmp #\@C_token_parser_13
C_token_parser_748
 mov r22, FP
 sub r22, #-(-32)
 rdlong r22, r22
 mov r20, #103
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_685
 cmps r22,  #104 wz
 if_z jmp #\C_token_parser_689
 cmps r22,  #105 wz
 if_z jmp #\C_token_parser_696
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-32)
 rdlong r22, r22
 cmps r22,  #112 wcz
 if_b jmp #\C_token_parser_13
 cmps r22,  #119 wcz
 if_a jmp #\C_token_parser_13
 shl r22, #2
 mov r20, ##@C_token_parser_754_L000756-448
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C_token_parser_685
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_688
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_688
 mov r0, #238
 jmp #\@C_token_parser_1
C_token_parser_689
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #65 wz
 if_z jmp #\C_token_parser_692
 cmps r22,  #97 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_692
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #82 wz
 if_z jmp #\C_token_parser_693
 cmps r22,  #114 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_693
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_694
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_694
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #68 wz
 if_z jmp #\C_token_parser_695
 cmps r22,  #100 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_695
 mov r0, #22
 jmp #\@C_token_parser_1
C_token_parser_696
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_699
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_699
 mov r0, #211
 jmp #\@C_token_parser_1
C_token_parser_700
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-36)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 mov r20, #65
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_704
 cmps r22,  #67 wz
 if_z jmp #\C_token_parser_709
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 cmps r22,  #97 wz
 if_z jmp #\C_token_parser_704
 cmps r22,  #99 wz
 if_z jmp #\C_token_parser_709
 jmp #\@C_token_parser_13
C_token_parser_704
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #67 wz
 if_z jmp #\C_token_parser_707
 cmps r22,  #99 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_707
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_708
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_708
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #36 wz
 if_nz jmp #\C_token_parser_13
 mov r0, #254
 jmp #\@C_token_parser_1
C_token_parser_709
 mov r0, #229
 jmp #\@C_token_parser_1
C_token_parser_711
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #82 wz
 if_z jmp #\C_token_parser_714
 cmps r22,  #114 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_714
 mov r0, #216
 jmp #\@C_token_parser_1
C_token_parser_715
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-40)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 cmps r22,  #79 wz
 if_z jmp #\C_token_parser_723
 mov r20, #82
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_727
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_740
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_719
 jmp #\@C_token_parser_13
C_token_parser_740
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 mov r20, #101
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_719
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 cmps r22,  #111 wz
 if_z jmp #\C_token_parser_723
 cmps r22,  #114 wz
 if_z jmp #\C_token_parser_727
 jmp #\@C_token_parser_13
C_token_parser_719
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #80 wz
 if_z jmp #\C_token_parser_722
 cmps r22,  #112 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_722
 mov r0, #171
 jmp #\@C_token_parser_1
C_token_parser_723
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #80 wz
 if_z jmp #\C_token_parser_726
 cmps r22,  #112 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_726
 mov r0, #176
 jmp #\@C_token_parser_1
C_token_parser_727
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-44)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-44)
 rdlong r22, r22
 mov r20, #73
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_732
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_738
 mov r22, FP
 sub r22, #-(-44)
 rdlong r22, r22
 cmps r22,  #36 wz
 if_z jmp #\C_token_parser_731
 jmp #\@C_token_parser_13
C_token_parser_738
 mov r22, FP
 sub r22, #-(-44)
 rdlong r22, r22
 cmps r22,  #105 wz
 if_z jmp #\C_token_parser_732
 jmp #\@C_token_parser_13
C_token_parser_731
 mov r0, #241
 jmp #\@C_token_parser_1
C_token_parser_732
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_735
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_735
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #71 wz
 if_z jmp #\C_token_parser_736
 cmps r22,  #103 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_736
 mov r22, r2
 adds r22, #6
 rdbyte r22, r22
 cmps r22,  #36 wz
 if_nz jmp #\C_token_parser_13
 mov r0, #245
 jmp #\@C_token_parser_1
C_token_parser_742
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #65 wz
 if_z jmp #\C_token_parser_745
 cmps r22,  #97 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_745
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #80 wz
 if_z jmp #\C_token_parser_746
 cmps r22,  #112 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_746
 mov r0, #235
 jmp #\@C_token_parser_1
C_token_parser_758
 mov r22, r2
 adds r22, #1
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-36)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 cmps r22,  #79 wz
 if_z jmp #\C_token_parser_794
 mov r20, #82
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_795
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_813
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 mov r20, #65
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_762
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 cmps r22,  #72 wz
 if_z jmp #\C_token_parser_771
 cmps r22,  #73 wz
 if_z jmp #\C_token_parser_776
 jmp #\@C_token_parser_13
C_token_parser_813
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 cmps r22,  #104 wz
 if_z jmp #\C_token_parser_771
 mov r20, #105
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_776
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_816
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 cmps r22,  #97 wz
 if_z jmp #\C_token_parser_762
 jmp #\@C_token_parser_13
C_token_parser_816
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 cmps r22,  #111 wz
 if_z jmp #\C_token_parser_794
 cmps r22,  #114 wz
 if_z jmp #\C_token_parser_795
 jmp #\@C_token_parser_13
C_token_parser_762
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-40)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 mov r20, #78
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_767
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_769
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 cmps r22,  #66 wz
 if_z jmp #\C_token_parser_766
 jmp #\@C_token_parser_13
C_token_parser_769
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 mov r20, #98
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_766
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 cmps r22,  #110 wz
 if_z jmp #\C_token_parser_767
 jmp #\@C_token_parser_13
C_token_parser_766
 mov r0, #230
 jmp #\@C_token_parser_1
C_token_parser_767
 mov r0, #213
 jmp #\@C_token_parser_1
C_token_parser_771
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_774
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_774
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_775
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_775
 mov r0, #162
 jmp #\@C_token_parser_1
C_token_parser_776
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-44)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-44)
 rdlong r22, r22
 mov r20, #77
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_780
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-44)
 rdlong r22, r22
 cmps r22,  #109 wz
 if_z jmp #\C_token_parser_780
 jmp #\@C_token_parser_13
C_token_parser_780
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-48)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-48)
 rdlong r22, r22
 mov r20, #69
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_784
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-48)
 rdlong r22, r22
 cmps r22,  #101 wz
 if_z jmp #\C_token_parser_784
 jmp #\@C_token_parser_13
C_token_parser_784
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-52)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-52)
 rdlong r22, r22
 mov r20, #82
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_789
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_791
 mov r22, FP
 sub r22, #-(-52)
 rdlong r22, r22
 cmps r22,  #36 wz
 if_z jmp #\C_token_parser_788
 jmp #\@C_token_parser_13
C_token_parser_791
 mov r22, FP
 sub r22, #-(-52)
 rdlong r22, r22
 cmps r22,  #114 wz
 if_z jmp #\C_token_parser_789
 jmp #\@C_token_parser_13
C_token_parser_788
 mov r0, #249
 jmp #\@C_token_parser_1
C_token_parser_789
 mov r0, #234
 jmp #\@C_token_parser_1
C_token_parser_794
 mov r0, #169
 jmp #\@C_token_parser_1
C_token_parser_795
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-48)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-48)
 rdlong r22, r22
 mov r20, #79
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_799
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-48)
 rdlong r22, r22
 cmps r22,  #111 wz
 if_z jmp #\C_token_parser_799
 jmp #\@C_token_parser_13
C_token_parser_799
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-52)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-52)
 rdlong r22, r22
 mov r20, #78
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_807
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_809
 mov r22, FP
 sub r22, #-(-52)
 rdlong r22, r22
 cmps r22,  #70 wz
 if_z jmp #\C_token_parser_803
 jmp #\@C_token_parser_13
C_token_parser_809
 mov r22, FP
 sub r22, #-(-52)
 rdlong r22, r22
 mov r20, #102
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_803
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-52)
 rdlong r22, r22
 cmps r22,  #110 wz
 if_z jmp #\C_token_parser_807
 jmp #\@C_token_parser_13
C_token_parser_803
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #70 wz
 if_z jmp #\C_token_parser_806
 cmps r22,  #102 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_806
 mov r0, #202
 jmp #\@C_token_parser_1
C_token_parser_807
 mov r0, #201
 jmp #\@C_token_parser_1
C_token_parser_817
 mov r22, r2
 adds r22, #1
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-40)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 mov r20, #83
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_828
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_842
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_821
 jmp #\@C_token_parser_13
C_token_parser_842
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 mov r20, #110
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_821
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 cmps r22,  #115 wz
 if_z jmp #\C_token_parser_828
 jmp #\@C_token_parser_13
C_token_parser_821
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #76 wz
 if_z jmp #\C_token_parser_824
 cmps r22,  #108 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_824
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #79 wz
 if_z jmp #\C_token_parser_825
 cmps r22,  #111 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_825
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #67 wz
 if_z jmp #\C_token_parser_826
 cmps r22,  #99 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_826
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #75 wz
 if_z jmp #\C_token_parser_827
 cmps r22,  #107 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_827
 mov r0, #21
 jmp #\@C_token_parser_1
C_token_parser_828
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-44)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-44)
 rdlong r22, r22
 mov r20, #82
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_837
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_839
 mov r22, FP
 sub r22, #-(-44)
 rdlong r22, r22
 cmps r22,  #73 wz
 if_z jmp #\C_token_parser_832
 jmp #\@C_token_parser_13
C_token_parser_839
 mov r22, FP
 sub r22, #-(-44)
 rdlong r22, r22
 mov r20, #105
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_832
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-44)
 rdlong r22, r22
 cmps r22,  #114 wz
 if_z jmp #\C_token_parser_837
 jmp #\@C_token_parser_13
C_token_parser_832
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_835
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_835
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #71 wz
 if_z jmp #\C_token_parser_836
 cmps r22,  #103 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_836
 mov r0, #197
 jmp #\@C_token_parser_1
C_token_parser_837
 mov r0, #28
 jmp #\@C_token_parser_1
C_token_parser_844
 mov r22, r2
 adds r22, #1
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-44)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-44)
 rdlong r22, r22
 mov r20, #65
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_848
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-44)
 rdlong r22, r22
 cmps r22,  #97 wz
 if_z jmp #\C_token_parser_848
 jmp #\@C_token_parser_13
C_token_parser_848
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-48)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-48)
 rdlong r22, r22
 mov r20, #82
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_862
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_883
 mov r22, FP
 sub r22, #-(-48)
 rdlong r22, r22
 cmps r22,  #76 wz
 if_z jmp #\C_token_parser_852
 jmp #\@C_token_parser_13
C_token_parser_883
 mov r22, FP
 sub r22, #-(-48)
 rdlong r22, r22
 mov r20, #108
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_852
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-48)
 rdlong r22, r22
 cmps r22,  #114 wz
 if_z jmp #\C_token_parser_862
 jmp #\@C_token_parser_13
C_token_parser_852
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-52)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-52)
 rdlong r22, r22
 mov r20, #76
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_856
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_853
 mov r22, FP
 sub r22, #-(-52)
 rdlong r22, r22
 cmps r22,  #108 wz
 if_z jmp #\C_token_parser_856
 jmp #\@C_token_parser_853
C_token_parser_856
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_859
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_857
C_token_parser_859
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_860
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_857
C_token_parser_860
 mov r0, #227
 jmp #\@C_token_parser_1
C_token_parser_857
C_token_parser_853
 mov r0, #226
 jmp #\@C_token_parser_1
C_token_parser_862
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-56)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-56)
 rdlong r22, r22
 mov r20, #80
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_866
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-56)
 rdlong r22, r22
 cmps r22,  #112 wz
 if_z jmp #\C_token_parser_866
 jmp #\@C_token_parser_13
C_token_parser_866
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-60)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-60)
 rdlong r22, r22
 mov r20, #84
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_870
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-60)
 rdlong r22, r22
 cmps r22,  #116 wz
 if_z jmp #\C_token_parser_870
 jmp #\@C_token_parser_13
C_token_parser_870
 mov r22, r2
 adds r22, #5
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-64)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-64)
 rdlong r22, r22
 mov r20, #82
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_874
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-64)
 rdlong r22, r22
 cmps r22,  #114 wz
 if_z jmp #\C_token_parser_874
 jmp #\@C_token_parser_13
C_token_parser_874
 mov r22, r2
 adds r22, #6
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-68)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-68)
 rdlong r22, r22
 cmps r22,  #36 wz
 if_z jmp #\C_token_parser_878
 jmp #\@C_token_parser_875
C_token_parser_878
 mov r0, #27
 jmp #\@C_token_parser_1
C_token_parser_875
 mov r0, #26
 jmp #\@C_token_parser_1
C_token_parser_886
 mov r22, r2
 adds r22, #1
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-48)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-48)
 rdlong r22, r22
 mov r20, #82
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_907
 cmps r22, r20 wcz
 if_a jmp #\C_token_parser_914
 mov r22, FP
 sub r22, #-(-48)
 rdlong r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_890
 cmps r22,  #72 wz
 if_z jmp #\C_token_parser_895
 cmps r22,  #73 wz
 if_z jmp #\C_token_parser_901
 jmp #\@C_token_parser_13
C_token_parser_914
 mov r22, FP
 sub r22, #-(-48)
 rdlong r22, r22
 mov r20, #101
 cmps r22, r20 wz
 if_z jmp #\C_token_parser_890
 cmps r22,  #104 wz
 if_z jmp #\C_token_parser_895
 cmps r22,  #105 wz
 if_z jmp #\C_token_parser_901
 cmps r22, r20 wcz
 if_b jmp #\C_token_parser_13
 mov r22, FP
 sub r22, #-(-48)
 rdlong r22, r22
 cmps r22,  #114 wz
 if_z jmp #\C_token_parser_907
 jmp #\@C_token_parser_13
C_token_parser_890
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #78 wz
 if_z jmp #\C_token_parser_893
 cmps r22,  #110 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_893
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #68 wz
 if_z jmp #\C_token_parser_894
 cmps r22,  #100 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_894
 mov r0, #185
 jmp #\@C_token_parser_1
C_token_parser_895
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #73 wz
 if_z jmp #\C_token_parser_898
 cmps r22,  #105 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_898
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #76 wz
 if_z jmp #\C_token_parser_899
 cmps r22,  #108 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_899
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_900
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_900
 mov r0, #184
 jmp #\@C_token_parser_1
C_token_parser_901
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #68 wz
 if_z jmp #\C_token_parser_904
 cmps r22,  #100 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_904
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #84 wz
 if_z jmp #\C_token_parser_905
 cmps r22,  #116 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_905
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #72 wz
 if_z jmp #\C_token_parser_906
 cmps r22,  #104 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_906
 mov r0, #199
 jmp #\@C_token_parser_1
C_token_parser_907
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #73 wz
 if_z jmp #\C_token_parser_910
 cmps r22,  #105 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_910
 mov r22, r2
 adds r22, #3
 rdbyte r22, r22
 cmps r22,  #84 wz
 if_z jmp #\C_token_parser_911
 cmps r22,  #116 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_911
 mov r22, r2
 adds r22, #4
 rdbyte r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C_token_parser_912
 cmps r22,  #101 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_912
 mov r0, #141
 jmp #\@C_token_parser_1
C_token_parser_916
 mov r22, r2
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #79 wz
 if_z jmp #\C_token_parser_919
 cmps r22,  #111 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_919
 mov r22, r2
 adds r22, #2
 rdbyte r22, r22
 cmps r22,  #82 wz
 if_z jmp #\C_token_parser_920
 cmps r22,  #114 wz
 if_nz jmp #\C_token_parser_13
C_token_parser_920
 mov r0, #194
 jmp #\@C_token_parser_1
C_token_parser_13
 mov r0, #0
C_token_parser_1
 calld PA,#POPM
 add SP, #64
 calld PA,#RETF
DAT
' Catalina Export _close
 alignl
C__close
 calld PA,#NEWF
 calld PA,#PSHM
 long $d00000
 mov r23, r2
 mov r22, r23
 shl r22, #2
 mov r20, ##@C___fdtab
 adds r22, r20
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C__close_3
 mov r0, ##-1
 jmp #\@C__close_2
C__close_3
 mov r22, r23
 shl r22, #2
 mov r20, ##@C___fdtab
 adds r22, r20
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r22, r23
 shl r22, #2
 mov r20, ##@C___fdtab
 adds r22, r20
 mov r20, ##0
 wrlong r20, r22
 mov r0, #0
C__close_2
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import free
' Catalina Import __fdtab
DAT
DAT
DAT
' Catalina Export _creat
 alignl
C__creat
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r3
 mov r21, r2
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C__unlink
 mov r2, r21
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__open
 add SP, #4
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _unlink
' Catalina Import _open
DAT
' Catalina Export _lseek
 alignl
C__lseek
 calld PA,#NEWF
 sub SP, ##512
 calld PA,#PSHM
 long $fc0000
 mov r23, r4
 mov r21, r3
 mov r19, r2
 mov r22, r23
 shl r22, #2
 mov r20, ##@C___fdtab
 adds r22, r20
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C__lseek_3
 mov r0, ##-1
 jmp #\@C__lseek_2
C__lseek_3
 cmps r19,  #0 wz
 if_nz jmp #\C__lseek_5
 mov r2, FP
 adds r2, ##(-516)
 mov r3, r21
 mov r22, r23
 shl r22, #2
 mov r20, ##@C___fdtab
 adds r22, r20
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_D_F_S__S_eek
 add SP, #8
 jmp #\@C__lseek_6
C__lseek_5
 cmps r19,  #2 wz
 if_nz jmp #\C__lseek_7
 mov r2, FP
 adds r2, ##(-516)
 mov r22, r23
 shl r22, #2
 mov r20, ##@C___fdtab
 adds r22, r20
 rdlong r22, r22
 mov r20, r22
 adds r20, #16
 rdlong r20, r20
 mov r18, r21
 mov r3, r20
 add r3, r18
 mov r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_D_F_S__S_eek
 add SP, #8
 jmp #\@C__lseek_8
C__lseek_7
 mov r2, FP
 adds r2, ##(-516)
 mov r22, r23
 shl r22, #2
 mov r20, ##@C___fdtab
 adds r22, r20
 rdlong r22, r22
 mov r20, r22
 adds r20, #24
 rdlong r20, r20
 mov r18, r21
 mov r3, r20
 add r3, r18
 mov r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_D_F_S__S_eek
 add SP, #8
C__lseek_8
C__lseek_6
 mov r22, r23
 shl r22, #2
 mov r20, ##@C___fdtab
 adds r22, r20
 rdlong r22, r22
 adds r22, #24
 rdlong r22, r22
 mov r0, r22
C__lseek_2
 calld PA,#POPM
 add SP, ##512
 calld PA,#RETF
' Catalina Import __fdtab
' Catalina Import DFS_Seek
DAT
' Catalina Export _mount
 alignl
C__mount
 calld PA,#NEWF
 sub SP, ##524
 calld PA,#PSHM
 long $f00000
 mov r23, r3
 mov r21, r2
 mov r2, FP
 adds r2, ##(-520)
 mov r3, FP
 adds r3, ##(-528)
 mov r4, FP
 adds r4, ##(-524)
 mov r22, r21
 mov r5, r22
 and r5, cviu_m1
 sub SP, #16
 mov RI, FP
 adds RI,##(-516)
 wrlong RI, --PTRA
 mov r22, r23
 and r22, cviu_m1
 mov RI, r22
 wrlong RI, --PTRA
 mov BC, #24
 add SP, #4
 calld PA,#CALA
 long @C_D_F_S__G_etP_tnS_tart
 add SP, #20
 wrlong r0, ##@C___pstart
 mov r22, ##@C___pstart
 rdlong r22, r22
 mov r20, ##$ffffffff
 cmp r22, r20 wz
 if_nz jmp #\C__mount_3
 mov r0, ##-1
 jmp #\@C__mount_2
C__mount_3
 mov r2, ##@C___vi
 mov r3, ##@C___pstart
 rdlong r3, r3
 mov r4, FP
 adds r4, ##(-516)
 mov r22, r23
 mov r5, r22
 and r5, cviu_m1
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__G_etV_olI_nfo
 add SP, #12
 cmp r0,  #0 wz
 if_z jmp #\C__mount_5
 mov r22, ##$ffffffff
 wrlong r22, ##@C___pstart
 mov r0, ##-1
 jmp #\@C__mount_2
C__mount_5
 mov r0, #0
C__mount_2
 calld PA,#POPM
 add SP, ##524
 calld PA,#RETF
' Catalina Import __vi
' Catalina Import __pstart
' Catalina Import DFS_GetVolInfo
' Catalina Import DFS_GetPtnStart
DAT
' Catalina Export _open
 alignl
C__open
 calld PA,#NEWF
 sub SP, ##512
 calld PA,#PSHM
 long $fa8000
 mov r23, r3
 mov r21, r2
 mov r15, #0
 cmps r21,  #1 wz
 if_z jmp #\C__open_3
 mov r22, r15
 and r22, cviu_m1
 or r22, #1
 mov r15, r22
C__open_3
 cmps r21,  #0 wz
 if_z jmp #\C__open_5
 mov r22, r15
 and r22, cviu_m1
 or r22, #2
 mov r15, r22
C__open_5
 mov r22, ##@C___pstart
 rdlong r22, r22
 mov r20, ##$ffffffff
 cmp r22, r20 wz
 if_nz jmp #\C__open_7
 mov r22, #0
 mov r2, r22
 mov r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__mount
 add SP, #4
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C__open_9
 mov r0, ##-1
 jmp #\@C__open_2
C__open_9
C__open_7
 mov r19, #3
 jmp #\@C__open_14
C__open_11
 cmps r19,  #63 wcz
 if_b jmp #\C__open_15
 mov r0, ##-1
 jmp #\@C__open_2
C__open_15
 adds r19, #1
C__open_14
 mov r22, r19
 shl r22, #2
 mov r20, ##@C___fdtab
 adds r22, r20
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C__open_11
 mov r2, #28
 mov BC, #4
 calld PA,#CALA
 long @C_malloc
 mov r22, r0
 mov r17, r22
 cmp r22,  #0 wz
 if_nz jmp #\C__open_17
 mov r0, ##-1
 jmp #\@C__open_2
C__open_17
 mov r2, r17
 mov r3, FP
 adds r3, ##(-516)
 mov r4, r15
 and r4, cviu_m1
 mov r5, r23
 sub SP, #16
 mov RI, ##@C___vi
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_D_F_S__O_penF_ile
 add SP, #16
 cmp r0,  #0 wz
 if_z jmp #\C__open_19
 mov r2, r17
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r0, ##-1
 jmp #\@C__open_2
C__open_19
 mov r22, r19
 shl r22, #2
 mov r20, ##@C___fdtab
 adds r22, r20
 wrlong r17, r22
 mov r0, r19
C__open_2
 calld PA,#POPM
 add SP, ##512
 calld PA,#RETF
' Catalina Import free
' Catalina Import malloc
' Catalina Import _mount
' Catalina Import __vi
' Catalina Import __pstart
' Catalina Import __fdtab
' Catalina Import DFS_OpenFile
DAT
' Catalina Export _read
 alignl
C__read
 calld PA,#NEWF
 sub SP, ##516
 calld PA,#PSHM
 long $fa8000
 mov r23, r4
 mov r21, r3
 mov r19, r2
 mov r15, #0
 cmps r23,  #0 wz
 if_nz jmp #\C__read_3
 jmp #\@C__read_6
C__read_5
 mov r2, ##@C___stdin
 mov BC, #4
 calld PA,#CALA
 long @C_catalina_getc
 mov r17, r0
 mov r22, ##-1
 cmps r17, r22 wz
 if_nz jmp #\C__read_8
 jmp #\@C__read_7
C__read_8
 cmps r17,  #13 wz
 if_nz jmp #\C__read_10
 mov r17, #10
C__read_10
 mov r22, r15
 mov r15, r22
 adds r15, #1
 adds r22, r21
 mov r20, r17
 wrbyte r20, r22
 cmps r17,  #10 wz
 if_nz jmp #\C__read_12
 jmp #\@C__read_7
C__read_12
C__read_6
 cmps r15, r19 wcz
 if_b jmp #\C__read_5
C__read_7
 mov r0, r15
 jmp #\@C__read_2
C__read_3
 mov r22, r23
 shl r22, #2
 mov r20, ##@C___fdtab
 adds r22, r20
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C__read_14
 mov r0, ##-1
 jmp #\@C__read_2
C__read_14
 mov r2, r19
 mov r3, FP
 sub r3, #-(-8)
 mov r4, r21
 mov r5, FP
 adds r5, ##(-520)
 mov r22, r23
 shl r22, #2
 mov r20, ##@C___fdtab
 adds r22, r20
 rdlong r22, r22
 sub SP, #16
 mov RI, r22
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_D_F_S__R_eadF_ile
 add SP, #16
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r0, r22
C__read_2
 calld PA,#POPM
 add SP, ##516
 calld PA,#RETF
' Catalina Import catalina_getc
' Catalina Import __fdtab
' Catalina Import DFS_ReadFile
' Catalina Import __stdin
DAT
' Catalina Export _unlink
 alignl
C__unlink
 calld PA,#NEWF
 sub SP, ##512
 calld PA,#PSHM
 long $d00000
 mov r23, r2
 mov r22, ##@C___pstart
 rdlong r22, r22
 mov r20, ##$ffffffff
 cmp r22, r20 wz
 if_nz jmp #\C__unlink_3
 mov r22, #0
 mov r2, r22
 mov r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__mount
 add SP, #4
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C__unlink_5
 mov r0, ##-1
 jmp #\@C__unlink_2
C__unlink_5
C__unlink_3
 mov r2, FP
 adds r2, ##(-516)
 mov r3, r23
 mov r4, ##@C___vi
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_D_F_S__U_nlinkF_ile
 add SP, #8
 cmp r0,  #0 wz
 if_z jmp #\C__unlink_7
 mov r0, ##-1
 jmp #\@C__unlink_2
C__unlink_7
 mov r0, #0
C__unlink_2
 calld PA,#POPM
 add SP, ##512
 calld PA,#RETF
' Catalina Import _mount
' Catalina Import __vi
' Catalina Import __pstart
' Catalina Import DFS_UnlinkFile
DAT
' Catalina Export _write
 alignl
C__write
 calld PA,#NEWF
 sub SP, ##516
 calld PA,#PSHM
 long $fa0000
 mov r23, r4
 mov r21, r3
 mov r19, r2
 mov r17, #0
 cmps r23,  #1 wz
 if_nz jmp #\C__write_3
 mov r17, #0
 jmp #\@C__write_8
C__write_5
 mov r2, ##@C___stdout
 mov r22, r17
 adds r22, r21
 rdbyte r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_catalina_putc
 add SP, #4
 adds r17, #1
C__write_8
 cmps r17, r19 wcz
 if_b jmp #\C__write_5
 mov r0, r19
 jmp #\@C__write_2
C__write_3
 cmps r23,  #2 wz
 if_nz jmp #\C__write_9
 mov r17, #0
 jmp #\@C__write_14
C__write_11
 mov r2, ##@C___stderr
 mov r22, r17
 adds r22, r21
 rdbyte r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_catalina_putc
 add SP, #4
 adds r17, #1
C__write_14
 cmps r17, r19 wcz
 if_b jmp #\C__write_11
 mov r0, r19
 jmp #\@C__write_2
C__write_9
 mov r22, r23
 shl r22, #2
 mov r20, ##@C___fdtab
 adds r22, r20
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C__write_15
 mov r0, ##-1
 jmp #\@C__write_2
C__write_15
 mov r2, r19
 mov r3, FP
 sub r3, #-(-8)
 mov r4, r21
 mov r5, FP
 adds r5, ##(-520)
 mov r22, r23
 shl r22, #2
 mov r20, ##@C___fdtab
 adds r22, r20
 rdlong r22, r22
 sub SP, #16
 mov RI, r22
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_D_F_S__W_riteF_ile
 add SP, #16
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r0, r22
C__write_2
 calld PA,#POPM
 add SP, ##516
 calld PA,#RETF
' Catalina Import catalina_putc
' Catalina Import __fdtab
' Catalina Import DFS_WriteFile
' Catalina Import __stderr
' Catalina Import __stdout
DAT
' Catalina Export abort
 alignl
C_abort
 calld PA,#NEWF
 calld PA,#PSHM
 long $400000
 mov r22, ##@C__clean
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_abort_4
 mov r22, ##@C__clean
 rdlong r22, r22
 mov BC, #0
 mov RI, r22
 calld PA,#CALI
C_abort_4
 mov r2, #6
 mov BC, #4
 calld PA,#CALA
 long @C_raise
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _clean
' Catalina Import raise
DAT
' Catalina Export abs
 alignl
C_abs
 calld PA,#PSHM
 long $800000
 cmps r2,  #0 wcz
 if_b jmp #\C_abs_5
 mov r23, r2
 jmp #\@C_abs_6
C_abs_5
 neg r23, r2
C_abs_6
 mov r0, r23
 calld PA,#POPM
 calld PA,#RETN
DAT
' Catalina Export __bad_assertion
 alignl
C___bad_assertion
 calld PA,#NEWF
 calld PA,#PSHM
 long $800000
 mov r23, r2
 mov r2, ##@C___stderr
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_fputs
 add SP, #4
 mov BC, #0
 calld PA,#CALA
 long @C_abort
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import abort
' Catalina Import fputs
' Catalina Import __stderr
DAT
DAT
 alignl
C_catalina_getc
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $d00000
 mov r23, r2
 mov r22, r23
 mov r20, ##@C___stdin
 cmp r22, r20 wz
 if_nz jmp #\C_catalina_getc_5
 mov r22, ##@C_s7hc_65fa5712_unget_count_L000002
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_be jmp #\C_catalina_getc_7
 mov r22, ##@C_s7hc_65fa5712_unget_count_L000002
 rdlong r22, r22
 subs r22, #1
 wrlong r22, ##@C_s7hc_65fa5712_unget_count_L000002
 shl r22, #2
 mov r20, ##@C_s7hc1_65fa5712_unget_buff_L000003
 adds r22, r20
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_catalina_getc_6
C_catalina_getc_7
 mov BC, #0
 calld PA,#CALA
 long @C_k_wait
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##-1
 cmps r22, r20 wz
 if_z jmp #\C_catalina_getc_6
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 and r22, #255
 mov r2, r22
 mov r3, #1
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_t_char
 add SP, #4
 jmp #\@C_catalina_getc_6
C_catalina_getc_5
 mov r22, ##-1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_catalina_getc_6
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Export catalina_ungetc
 alignl
C_catalina_ungetc
 calld PA,#PSHM
 long $500000
 mov r22, ##-1
 cmps r3, r22 wz
 if_z jmp #\C_catalina_ungetc_12
 mov r22, r2
 mov r20, ##@C___stdin
 cmp r22, r20 wz
 if_nz jmp #\C_catalina_ungetc_14
 mov r22, ##@C_s7hc_65fa5712_unget_count_L000002
 rdlong r22, r22
 cmps r22,  #10 wcz
 if_ae jmp #\C_catalina_ungetc_13
 mov r22, ##@C_s7hc_65fa5712_unget_count_L000002
 rdlong r22, r22
 mov r20, r22
 adds r20, #1
 wrlong r20, ##@C_s7hc_65fa5712_unget_count_L000002
 shl r22, #2
 mov r20, ##@C_s7hc1_65fa5712_unget_buff_L000003
 adds r22, r20
 wrlong r3, r22
 jmp #\@C_catalina_ungetc_13
C_catalina_ungetc_14
 mov r0, ##-1
 jmp #\@C_catalina_ungetc_11
C_catalina_ungetc_12
 mov r0, ##-1
 jmp #\@C_catalina_ungetc_11
C_catalina_ungetc_13
 mov r0, r3
C_catalina_ungetc_11
 calld PA,#POPM
 calld PA,#RETN
' Catalina Export catalina_fflush
 alignl
C_catalina_fflush
 calld PA,#PSHM
 long $400000
 mov r22, #0
 wrlong r22, ##@C_s7hc_65fa5712_unget_count_L000002
 mov r0, r22
 calld PA,#POPM
 calld PA,#RETN
DAT
' Catalina Import t_char
DAT
' Catalina Import k_wait
DAT
' Catalina Import __stdin
DAT
DAT
' Catalina Export catalina_putc
 alignl
C_catalina_putc
 calld PA,#NEWF
 calld PA,#PSHM
 long $f00000
 mov r23, r3
 mov r21, r2
 mov r22, r21
 mov r20, ##@C___stdout
 cmp r22, r20 wz
 if_nz jmp #\C_catalina_putc_3
 mov r2, r23
 mov r3, #1
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_t_char
 add SP, #4
 jmp #\@C_catalina_putc_4
C_catalina_putc_3
 mov r22, r21
 mov r20, ##@C___stderr
 cmp r22, r20 wz
 if_nz jmp #\C_catalina_putc_5
 mov r2, r23
 mov r3, #1
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_t_char
 add SP, #4
C_catalina_putc_5
C_catalina_putc_4
 mov r0, r23
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import t_char
' Catalina Import __stderr
' Catalina Import __stdout
DAT
DAT
DAT
' Catalina Export _clockfreq
 alignl
C__clockfreq
 rdlong r0, #$14
 calld PA,#RETN
DAT
' Catalina Export _cnt
 alignl
C__cnt
 getct r0
 calld PA,#RETN
DAT
DAT
DAT
' Catalina Export DFS_CanonicalToDir
 alignl
C_D_F_S__C_anonicalT_oD_ir
 calld PA,#NEWF
 calld PA,#PSHM
 long $f80000
 mov r23, r3
 mov r21, r2
 mov r19, r23
 mov r2, #11
 mov r3, #32
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memset
 add SP, #8
 mov r22, r23
 adds r22, #11
 mov r20, #0
 wrbyte r20, r22
 jmp #\@C_D_F_S__C_anonicalT_oD_ir_6
C_D_F_S__C_anonicalT_oD_ir_5
 rdbyte r22, r21
 cmps r22,  #97 wcz
 if_b jmp #\C_D_F_S__C_anonicalT_oD_ir_8
 cmps r22,  #122 wcz
 if_a jmp #\C_D_F_S__C_anonicalT_oD_ir_8
 mov r22, r19
 mov r19, r22
 adds r19, #1
 rdbyte r20, r21
 subs r20, #97
 adds r20, #65
 wrbyte r20, r22
 adds r21, #1
 jmp #\@C_D_F_S__C_anonicalT_oD_ir_9
C_D_F_S__C_anonicalT_oD_ir_8
 rdbyte r22, r21
 cmps r22,  #46 wz
 if_nz jmp #\C_D_F_S__C_anonicalT_oD_ir_10
 adds r21, #1
 mov r19, r23
 adds r19, #8
 jmp #\@C_D_F_S__C_anonicalT_oD_ir_11
C_D_F_S__C_anonicalT_oD_ir_10
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, r21
 mov r21, r20
 adds r21, #1
 rdbyte r20, r20
 wrbyte r20, r22
C_D_F_S__C_anonicalT_oD_ir_11
C_D_F_S__C_anonicalT_oD_ir_9
C_D_F_S__C_anonicalT_oD_ir_6
 rdbyte r22, r21
 cmps r22,  #0 wz
 if_z jmp #\C_D_F_S__C_anonicalT_oD_ir_13
 cmps r22,  #47 wz
 if_z jmp #\C_D_F_S__C_anonicalT_oD_ir_13
 mov r22, r19
 mov r20, r23
 sub r22, r20
 cmps r22,  #11 wcz
 if_b jmp #\C_D_F_S__C_anonicalT_oD_ir_5
C_D_F_S__C_anonicalT_oD_ir_13
 mov r0, r23
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import memset
DAT
' Catalina Export DFS_GetFAT
 alignl
C_D_F_S__G_etF_A_T_
 calld PA,#NEWF
 sub SP, #16
 calld PA,#PSHM
 long $faa800
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r15, #0
 mov r13, #0
 mov r11, #0
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_D_F_S__G_etF_A_T__5
 mov r0, #7
 jmp #\@C_D_F_S__G_etF_A_T__4
C_D_F_S__G_etF_A_T__5
 mov r22, #1
 mov r20, r23
 adds r20, #1
 rdbyte r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C_D_F_S__G_etF_A_T__7
 mov r15, r17
 shl r15, #1
 jmp #\@C_D_F_S__G_etF_A_T__8
C_D_F_S__G_etF_A_T__7
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #2 wz
 if_nz jmp #\C_D_F_S__G_etF_A_T__9
 mov r15, r17
 shl r15, #2
 jmp #\@C_D_F_S__G_etF_A_T__10
C_D_F_S__G_etF_A_T__9
 mov r0, ##$ffffff7
 jmp #\@C_D_F_S__G_etF_A_T__4
C_D_F_S__G_etF_A_T__10
C_D_F_S__G_etF_A_T__8
 mov r2, ##512
 mov r3, r15
 mov r4, FP
 sub r4, #-(-12)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_ldiv
 add SP, #8
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, r23
 adds r20, #40
 rdlong r20, r20
 mov r13, r22
 add r13, r20
 rdlong r22, r19
 cmp r13, r22 wz
 if_z jmp #\C_D_F_S__G_etF_A_T__11
 mov r2, #1
 mov r3, r13
 mov r4, r21
 rdbyte r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__G_etF_A_T__13
 mov r22, #0
 wrlong r22, r19
 mov r0, ##$ffffff7
 jmp #\@C_D_F_S__G_etF_A_T__4
C_D_F_S__G_etF_A_T__13
 wrlong r13, r19
C_D_F_S__G_etF_A_T__11
 mov r2, ##512
 mov r3, r15
 mov r4, FP
 sub r4, #-(-20)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_ldiv
 add SP, #8
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r15, r22
 mov r22, #1
 mov r20, r23
 adds r20, #1
 rdbyte r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C_D_F_S__G_etF_A_T__16
 mov r22, r15
 adds r22, r21
 rdbyte r22, r22
 mov r20, r15
 add r20, #1
 adds r20, r21
 rdbyte r20, r20
 shl r20, #8
 mov r11, r22
 or r11, r20
 jmp #\@C_D_F_S__G_etF_A_T__17
C_D_F_S__G_etF_A_T__16
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #2 wz
 if_nz jmp #\C_D_F_S__G_etF_A_T__18
 mov r22, r15
 adds r22, r21
 rdbyte r22, r22
 mov r20, r15
 add r20, #1
 adds r20, r21
 rdbyte r20, r20
 shl r20, #8
 or r22, r20
 mov r20, r15
 add r20, #2
 adds r20, r21
 rdbyte r20, r20
 shl r20, #16
 or r22, r20
 mov r20, r15
 add r20, #3
 adds r20, r21
 rdbyte r20, r20
 shl r20, #24
 or r22, r20
 mov r20, ##$fffffff
 mov r11, r22
 and r11, r20
 jmp #\@C_D_F_S__G_etF_A_T__19
C_D_F_S__G_etF_A_T__18
 mov r11, ##$ffffff7
C_D_F_S__G_etF_A_T__19
C_D_F_S__G_etF_A_T__17
 mov r0, r11
C_D_F_S__G_etF_A_T__4
 calld PA,#POPM
 add SP, #16
 calld PA,#RETF
' Catalina Import DFS_ReadSector
' Catalina Import ldiv
DAT
' Catalina Export DFS_GetFreeDirEnt
 alignl
C_D_F_S__G_etF_reeD_irE_nt
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $fea000
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r15, #0
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r2, r19
 mov r3, r21
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_D_F_S__O_penD_ir
 add SP, #8
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__G_etF_reeD_irE_nt_5
 mov r0, #3
 jmp #\@C_D_F_S__G_etF_reeD_irE_nt_4
C_D_F_S__G_etF_reeD_irE_nt_5
 mov r22, r19
 adds r22, #12
 rdbyte r20, r22
 or r20, #1
 wrbyte r20, r22
 mov r15, #0
C_D_F_S__G_etF_reeD_irE_nt_7
 mov r2, r17
 mov r3, r19
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_D_F_S__G_etN_ext
 add SP, #8
 mov r15, r0
 cmp r15,  #0 wz
 if_nz jmp #\C_D_F_S__G_etF_reeD_irE_nt_10
 rdbyte r22, r17
 cmps r22,  #0 wz
 if_nz jmp #\C_D_F_S__G_etF_reeD_irE_nt_10
 mov r0, #0
 jmp #\@C_D_F_S__G_etF_reeD_irE_nt_4
C_D_F_S__G_etF_reeD_irE_nt_10
 cmp r15,  #1 wz
 if_nz jmp #\C_D_F_S__G_etF_reeD_irE_nt_12
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__G_etF_reeD_irE_nt_4
C_D_F_S__G_etF_reeD_irE_nt_12
 cmp r15,  #5 wz
 if_nz jmp #\C_D_F_S__G_etF_reeD_irE_nt_14
 mov r22, r19
 adds r22, #8
 rdlong r2, r22
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_D_F_S__G_etF_reeF_A_T_
 add SP, #4
 mov r15, r0
 mov r22, ##$ffffff7
 cmp r15, r22 wz
 if_nz jmp #\C_D_F_S__G_etF_reeD_irE_nt_16
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__G_etF_reeD_irE_nt_4
C_D_F_S__G_etF_reeD_irE_nt_16
 mov r2, ##512
 mov r3, #0
 mov r22, r19
 adds r22, #8
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memset
 add SP, #8
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_D_F_S__G_etF_reeD_irE_nt_21
C_D_F_S__G_etF_reeD_irE_nt_18
 mov r2, #1
 mov r22, r23
 adds r22, #48
 rdlong r22, r22
 mov r20, r15
 sub r20, #2
 mov r18, r23
 adds r18, #20
 rdbyte r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 add r22, r0
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 mov r3, r22
 add r3, r20
 mov r22, r19
 adds r22, #8
 rdlong r4, r22
 rdbyte r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__W_riteS_ector
 add SP, #12
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__G_etF_reeD_irE_nt_22
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__G_etF_reeD_irE_nt_4
C_D_F_S__G_etF_reeD_irE_nt_22
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 add r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_D_F_S__G_etF_reeD_irE_nt_21
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, r23
 adds r20, #20
 rdbyte r20, r20
 cmp r22, r20 wcz
 if_b jmp #\C_D_F_S__G_etF_reeD_irE_nt_18
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r2, r15
 rdlong r3, r19
 mov r4, FP
 sub r4, #-(-8)
 mov r22, r19
 adds r22, #8
 rdlong r5, r22
 sub SP, #16
 mov RI, r23
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_D_F_S__S_etF_A_T_
 add SP, #16
 wrlong r15, r19
 mov r22, r19
 adds r22, #4
 mov r20, #0
 wrbyte r20, r22
 mov r22, r19
 adds r22, #5
 mov r20, #0
 wrbyte r20, r22
 mov r22, r23
 adds r22, #1
 rdbyte r13, r22
 cmps r13,  #0 wz
 if_z jmp #\C_D_F_S__G_etF_reeD_irE_nt_27
 cmps r13,  #1 wz
 if_z jmp #\C_D_F_S__G_etF_reeD_irE_nt_28
 cmps r13,  #2 wz
 if_z jmp #\C_D_F_S__G_etF_reeD_irE_nt_29
 jmp #\@C_D_F_S__G_etF_reeD_irE_nt_24
C_D_F_S__G_etF_reeD_irE_nt_27
 mov r0, #7
 jmp #\@C_D_F_S__G_etF_reeD_irE_nt_4
C_D_F_S__G_etF_reeD_irE_nt_28
 mov r15, ##$fff8
 jmp #\@C_D_F_S__G_etF_reeD_irE_nt_25
C_D_F_S__G_etF_reeD_irE_nt_29
 mov r15, ##$ffffff8
 jmp #\@C_D_F_S__G_etF_reeD_irE_nt_25
C_D_F_S__G_etF_reeD_irE_nt_24
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__G_etF_reeD_irE_nt_4
C_D_F_S__G_etF_reeD_irE_nt_25
 mov r2, r15
 rdlong r3, r19
 mov r4, FP
 sub r4, #-(-8)
 mov r22, r19
 adds r22, #8
 rdlong r5, r22
 sub SP, #16
 mov RI, r23
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_D_F_S__S_etF_A_T_
 add SP, #16
C_D_F_S__G_etF_reeD_irE_nt_14
 cmp r15,  #0 wz
 if_z jmp #\C_D_F_S__G_etF_reeD_irE_nt_7
 mov r0, ##$ffffffff
C_D_F_S__G_etF_reeD_irE_nt_4
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Import DFS_SetFAT
' Catalina Import DFS_GetFreeFAT
' Catalina Import DFS_GetNext
' Catalina Import DFS_OpenDir
' Catalina Import DFS_WriteSector
' Catalina Import memset
DAT
' Catalina Export DFS_GetFreeFAT
 alignl
C_D_F_S__G_etF_reeF_A_T_
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $ea0000
 mov r23, r3
 mov r21, r2
 mov r17, ##$ffffffff
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r19, #2
 jmp #\@C_D_F_S__G_etF_reeF_A_T__8
C_D_F_S__G_etF_reeF_A_T__5
 mov r2, r19
 mov r3, FP
 sub r3, #-(-8)
 mov r4, r21
 mov r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__G_etF_A_T_
 add SP, #12
 mov r17, r0
 cmp r17,  #0 wz
 if_nz jmp #\C_D_F_S__G_etF_reeF_A_T__9
 mov r0, r19
 jmp #\@C_D_F_S__G_etF_reeF_A_T__4
C_D_F_S__G_etF_reeF_A_T__9
 add r19, #1
C_D_F_S__G_etF_reeF_A_T__8
 mov r22, r23
 adds r22, #36
 rdlong r22, r22
 cmp r19, r22 wcz
 if_b jmp #\C_D_F_S__G_etF_reeF_A_T__5
 mov r0, ##$ffffff7
C_D_F_S__G_etF_reeF_A_T__4
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Import DFS_GetFAT
DAT
' Catalina Export DFS_GetNext
 alignl
C_D_F_S__G_etN_ext
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $fc0000
 mov r23, r4
 mov r21, r3
 mov r19, r2
 mov r22, r21
 adds r22, #5
 rdbyte r22, r22
 cmp r22,  #16 wcz
 if_b jmp #\C_D_F_S__G_etN_ext_5
 mov r22, r21
 adds r22, #5
 mov r20, #0
 wrbyte r20, r22
 mov r22, r21
 adds r22, #4
 rdbyte r20, r22
 adds r20, #1
 wrbyte r20, r22
 rdlong r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C_D_F_S__G_etN_ext_7
 mov r22, r21
 adds r22, #4
 rdbyte r22, r22
 shl r22, #4
 mov r20, r23
 adds r20, #32
 rdword r20, r20
 cmp r22, r20 wcz
 if_b jmp #\C_D_F_S__G_etN_ext_9
 mov r0, #1
 jmp #\@C_D_F_S__G_etN_ext_4
C_D_F_S__G_etN_ext_9
 mov r2, #1
 mov r22, r23
 adds r22, #44
 rdlong r22, r22
 mov r20, r21
 adds r20, #4
 rdbyte r20, r20
 mov r3, r22
 add r3, r20
 mov r22, r21
 adds r22, #8
 rdlong r4, r22
 rdbyte r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__G_etN_ext_8
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__G_etN_ext_4
C_D_F_S__G_etN_ext_7
 mov r22, r21
 adds r22, #4
 rdbyte r22, r22
 mov r20, r23
 adds r20, #20
 rdbyte r20, r20
 cmps r22, r20 wcz
 if_b jmp #\C_D_F_S__G_etN_ext_13
 mov r22, r21
 adds r22, #4
 mov r20, #0
 wrbyte r20, r22
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_D_F_S__G_etN_ext_15
 mov r0, #7
 jmp #\@C_D_F_S__G_etN_ext_4
C_D_F_S__G_etN_ext_15
 rdlong r22, r21
 mov r20, ##$fff7
 cmp r22, r20 wcz
 if_b jmp #\C_D_F_S__G_etN_ext_20
 mov r22, #1
 mov r20, r23
 adds r20, #1
 rdbyte r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_D_F_S__G_etN_ext_19
C_D_F_S__G_etN_ext_20
 rdlong r22, r21
 mov r20, ##$ffffff7
 cmp r22, r20 wcz
 if_b jmp #\C_D_F_S__G_etN_ext_17
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #2 wz
 if_nz jmp #\C_D_F_S__G_etN_ext_17
C_D_F_S__G_etN_ext_19
 mov r22, r21
 adds r22, #12
 rdbyte r22, r22
 and r22, #1
 cmps r22,  #0 wz
 if_nz jmp #\C_D_F_S__G_etN_ext_21
 mov r0, #1
 jmp #\@C_D_F_S__G_etN_ext_4
C_D_F_S__G_etN_ext_21
 mov r0, #5
 jmp #\@C_D_F_S__G_etN_ext_4
C_D_F_S__G_etN_ext_17
 rdlong r2, r21
 mov r3, FP
 sub r3, #-(-8)
 mov r22, r21
 adds r22, #8
 rdlong r4, r22
 mov r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__G_etF_A_T_
 add SP, #12
 mov r22, r0
 wrlong r22, r21
C_D_F_S__G_etN_ext_13
 mov r2, #1
 mov r22, r23
 adds r22, #48
 rdlong r22, r22
 rdlong r20, r21
 sub r20, #2
 mov r18, r23
 adds r18, #20
 rdbyte r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 add r22, r0
 mov r20, r21
 adds r20, #4
 rdbyte r20, r20
 mov r3, r22
 add r3, r20
 mov r22, r21
 adds r22, #8
 rdlong r4, r22
 rdbyte r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__G_etN_ext_23
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__G_etN_ext_4
C_D_F_S__G_etN_ext_23
C_D_F_S__G_etN_ext_8
C_D_F_S__G_etN_ext_5
 mov r2, #32
 mov r22, r21
 adds r22, #5
 rdbyte r22, r22
 shl r22, #5
 mov r20, r21
 adds r20, #8
 rdlong r20, r20
 mov r3, r22
 adds r3, r20
 mov r4, r19
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcpy
 add SP, #8
 rdbyte r22, r19
 cmps r22,  #0 wz
 if_nz jmp #\C_D_F_S__G_etN_ext_25
 mov r22, r21
 adds r22, #12
 rdbyte r22, r22
 and r22, #1
 cmps r22,  #0 wz
 if_z jmp #\C_D_F_S__G_etN_ext_27
 mov r22, r21
 adds r22, #5
 rdbyte r20, r22
 adds r20, #1
 wrbyte r20, r22
 mov r0, #0
 jmp #\@C_D_F_S__G_etN_ext_4
C_D_F_S__G_etN_ext_27
 mov r0, #1
 jmp #\@C_D_F_S__G_etN_ext_4
C_D_F_S__G_etN_ext_25
 rdbyte r22, r19
 cmps r22,  #229 wz
 if_nz jmp #\C_D_F_S__G_etN_ext_29
 mov r22, #0
 wrbyte r22, r19
 jmp #\@C_D_F_S__G_etN_ext_30
C_D_F_S__G_etN_ext_29
 mov r22, #15
 mov r20, r19
 adds r20, #11
 rdbyte r20, r20
 and r20, #15
 cmps r20, r22 wz
 if_nz jmp #\C_D_F_S__G_etN_ext_31
 mov r22, r21
 adds r22, #12
 rdbyte r22, r22
 and r22, #1
 cmps r22,  #0 wz
 if_nz jmp #\C_D_F_S__G_etN_ext_31
 mov r22, #0
 wrbyte r22, r19
 jmp #\@C_D_F_S__G_etN_ext_32
C_D_F_S__G_etN_ext_31
 rdbyte r22, r19
 cmps r22,  #5 wz
 if_nz jmp #\C_D_F_S__G_etN_ext_33
 mov r22, #229
 wrbyte r22, r19
C_D_F_S__G_etN_ext_33
C_D_F_S__G_etN_ext_32
C_D_F_S__G_etN_ext_30
 mov r22, r21
 adds r22, #5
 rdbyte r20, r22
 adds r20, #1
 wrbyte r20, r22
 mov r0, #0
C_D_F_S__G_etN_ext_4
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Import DFS_GetFAT
' Catalina Import DFS_ReadSector
' Catalina Import memcpy
DAT
' Catalina Export DFS_GetPtnStart
 alignl
C_D_F_S__G_etP_tnS_tart
 calld PA,#NEWF
 calld PA,#PSHM
 long $fea000
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov RI, FP
 add RI,#8
 wrbyte r22, RI
 mov r13, #0
 mov r22, FP
 add r22, #12
 rdlong r15, r22
 mov r22, r23
 and r22, cviu_m1
 cmps r22,  #3 wcz
 if_be jmp #\C_D_F_S__G_etP_tnS_tart_5
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__G_etP_tnS_tart_4
C_D_F_S__G_etP_tnS_tart_5
 mov r2, #1
 mov r3, #0
 mov RI, FP
 add RI, #12
 rdlong r4, RI
 mov r22, FP
 add r22, #8
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__G_etP_tnS_tart_7
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__G_etP_tnS_tart_4
C_D_F_S__G_etP_tnS_tart_7
 mov r22, r23
 and r22, cviu_m1
 shl r22, #4
 mov r20, r15
 adds r20, #446
 adds r22, r20
 mov r20, r22
 adds r20, #8
 rdbyte r20, r20
 mov r18, r22
 adds r18, #9
 rdbyte r18, r18
 shl r18, #8
 or r20, r18
 mov r18, r22
 adds r18, #10
 rdbyte r18, r18
 shl r18, #16
 or r20, r18
 adds r22, #11
 rdbyte r22, r22
 shl r22, #24
 mov r13, r20
 or r13, r22
 mov r22, r21
 cmp r22,  #0 wz
 if_z jmp #\C_D_F_S__G_etP_tnS_tart_9
 mov r22, r23
 and r22, cviu_m1
 shl r22, #4
 mov r20, r15
 adds r20, #446
 adds r22, r20
 rdbyte r22, r22
 wrbyte r22, r21
C_D_F_S__G_etP_tnS_tart_9
 mov r22, r19
 cmp r22,  #0 wz
 if_z jmp #\C_D_F_S__G_etP_tnS_tart_11
 mov r22, r23
 and r22, cviu_m1
 shl r22, #4
 mov r20, r15
 adds r20, #446
 adds r22, r20
 adds r22, #4
 rdbyte r22, r22
 wrbyte r22, r19
C_D_F_S__G_etP_tnS_tart_11
 mov r22, r17
 cmp r22,  #0 wz
 if_z jmp #\C_D_F_S__G_etP_tnS_tart_13
 mov r22, r23
 and r22, cviu_m1
 shl r22, #4
 mov r20, r15
 adds r20, #446
 adds r22, r20
 mov r20, r22
 adds r20, #12
 rdbyte r20, r20
 mov r18, r22
 adds r18, #13
 rdbyte r18, r18
 shl r18, #8
 or r20, r18
 mov r18, r22
 adds r18, #14
 rdbyte r18, r18
 shl r18, #16
 or r20, r18
 adds r22, #15
 rdbyte r22, r22
 shl r22, #24
 or r22, r20
 wrlong r22, r17
C_D_F_S__G_etP_tnS_tart_13
 mov r0, r13
C_D_F_S__G_etP_tnS_tart_4
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import DFS_ReadSector
DAT
' Catalina Export DFS_GetVolInfo
 alignl
C_D_F_S__G_etV_olI_nfo
 calld PA,#NEWF
 calld PA,#PSHM
 long $ff8000
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r15, r21
 wrbyte r23, r17
 mov r22, r17
 adds r22, #16
 wrlong r19, r22
 mov r2, #1
 mov r3, r19
 mov r4, r21
 mov r5, r23
 and r5, cviu_m1
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__G_etV_olI_nfo_5
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__G_etV_olI_nfo_4
C_D_F_S__G_etV_olI_nfo_5
 mov r22, r17
 adds r22, #20
 mov r20, r15
 adds r20, #13
 rdbyte r20, r20
 wrbyte r20, r22
 mov r22, r17
 adds r22, #22
 mov r20, r15
 adds r20, #14
 rdbyte r20, r20
 and r20, cviu_m2
 mov r18, r15
 adds r18, #15
 rdbyte r18, r18
 and r18, cviu_m2
 shl r18, #8
 or r20, r18
 wrword r20, r22
 mov r22, r17
 adds r22, #24
 mov r20, r15
 adds r20, #19
 rdbyte r20, r20
 and r20, cviu_m2
 mov r18, r15
 adds r18, #20
 rdbyte r18, r18
 and r18, cviu_m2
 shl r18, #8
 or r20, r18
 wrlong r20, r22
 mov r22, r17
 adds r22, #24
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_D_F_S__G_etV_olI_nfo_7
 mov r22, r17
 adds r22, #24
 mov r20, r15
 adds r20, #32
 rdbyte r20, r20
 mov r18, r15
 adds r18, #33
 rdbyte r18, r18
 shl r18, #8
 or r20, r18
 mov r18, r15
 adds r18, #34
 rdbyte r18, r18
 shl r18, #16
 or r20, r18
 mov r18, r15
 adds r18, #35
 rdbyte r18, r18
 shl r18, #24
 or r20, r18
 wrlong r20, r22
C_D_F_S__G_etV_olI_nfo_7
 mov r22, r17
 adds r22, #28
 mov r20, r15
 adds r20, #22
 rdbyte r20, r20
 and r20, cviu_m2
 mov r18, r15
 adds r18, #23
 rdbyte r18, r18
 and r18, cviu_m2
 shl r18, #8
 or r20, r18
 wrlong r20, r22
 mov r22, r17
 adds r22, #28
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_D_F_S__G_etV_olI_nfo_9
 mov r22, r17
 adds r22, #28
 mov r20, r15
 adds r20, #36
 rdbyte r20, r20
 mov r18, r15
 adds r18, #37
 rdbyte r18, r18
 shl r18, #8
 or r20, r18
 mov r18, r15
 adds r18, #38
 rdbyte r18, r18
 shl r18, #16
 or r20, r18
 mov r18, r15
 adds r18, #39
 rdbyte r18, r18
 shl r18, #24
 or r20, r18
 wrlong r20, r22
 mov r2, #11
 mov r3, r15
 adds r3, #71
 mov r4, r17
 adds r4, #2
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcpy
 add SP, #8
 mov r22, r17
 adds r22, #13
 mov r20, #0
 wrbyte r20, r22
 jmp #\@C_D_F_S__G_etV_olI_nfo_10
C_D_F_S__G_etV_olI_nfo_9
 mov r2, #11
 mov r3, r15
 adds r3, #43
 mov r4, r17
 adds r4, #2
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcpy
 add SP, #8
 mov r22, r17
 adds r22, #13
 mov r20, #0
 wrbyte r20, r22
C_D_F_S__G_etV_olI_nfo_10
 mov r22, r17
 adds r22, #32
 mov r20, r15
 adds r20, #17
 rdbyte r20, r20
 and r20, cviu_m2
 mov r18, r15
 adds r18, #18
 rdbyte r18, r18
 and r18, cviu_m2
 shl r18, #8
 or r20, r18
 wrword r20, r22
 mov r22, r17
 adds r22, #40
 mov r20, r17
 adds r20, #22
 rdword r20, r20
 add r20, r19
 wrlong r20, r22
 mov r22, r17
 adds r22, #32
 rdword r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_D_F_S__G_etV_olI_nfo_11
 mov r22, r17
 adds r22, #44
 mov r20, r17
 adds r20, #40
 rdlong r20, r20
 mov r18, r17
 adds r18, #28
 rdlong r18, r18
 shl r18, #1
 add r20, r18
 wrlong r20, r22
 mov r22, r17
 adds r22, #48
 mov r20, r17
 adds r20, #44
 rdlong r20, r20
 mov r18, r17
 adds r18, #32
 rdword r18, r18
 shl r18, #5
 adds r18, #511
 mov r16, ##512
 mov r0, r18
 mov r1, r16
 calld PA,#DIVS
 mov r18, r0
 add r20, r18
 wrlong r20, r22
 jmp #\@C_D_F_S__G_etV_olI_nfo_12
C_D_F_S__G_etV_olI_nfo_11
 mov r22, r17
 adds r22, #48
 mov r20, r17
 adds r20, #40
 rdlong r20, r20
 mov r18, r17
 adds r18, #28
 rdlong r18, r18
 shl r18, #1
 add r20, r18
 wrlong r20, r22
 mov r22, r17
 adds r22, #44
 mov r20, r15
 adds r20, #44
 rdbyte r20, r20
 mov r18, r15
 adds r18, #45
 rdbyte r18, r18
 shl r18, #8
 or r20, r18
 mov r18, r15
 adds r18, #46
 rdbyte r18, r18
 shl r18, #16
 or r20, r18
 mov r18, r15
 adds r18, #47
 rdbyte r18, r18
 shl r18, #24
 or r20, r18
 wrlong r20, r22
C_D_F_S__G_etV_olI_nfo_12
 mov r22, r17
 adds r22, #36
 mov r20, r17
 adds r20, #24
 rdlong r20, r20
 mov r18, r17
 adds r18, #48
 rdlong r18, r18
 sub r20, r18
 mov r18, r17
 adds r18, #20
 rdbyte r18, r18

  stalli

 qdiv r20, r18
 getqx r0

  allowi

 wrlong r0, r22
 mov r22, r17
 adds r22, #36
 rdlong r22, r22
 mov r20, ##4085
 cmp r22, r20 wcz
 if_ae jmp #\C_D_F_S__G_etV_olI_nfo_13
 mov r0, #7
 jmp #\@C_D_F_S__G_etV_olI_nfo_4
C_D_F_S__G_etV_olI_nfo_13
 mov r22, r17
 adds r22, #36
 rdlong r22, r22
 mov r20, ##$fff5
 cmp r22, r20 wcz
 if_ae jmp #\C_D_F_S__G_etV_olI_nfo_15
 mov r22, r17
 adds r22, #1
 mov r20, #1
 wrbyte r20, r22
 jmp #\@C_D_F_S__G_etV_olI_nfo_16
C_D_F_S__G_etV_olI_nfo_15
 mov r22, r17
 adds r22, #1
 mov r20, #2
 wrbyte r20, r22
C_D_F_S__G_etV_olI_nfo_16
 mov r0, #0
C_D_F_S__G_etV_olI_nfo_4
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import DFS_ReadSector
' Catalina Import memcpy
DAT
' Catalina Export div
 alignl
C_div
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $f00000
 mov r0, r3
 mov r1, r2
 calld PA,#DIVS
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 mov r0, r3
 mov r1, r2
 calld PA,#DIVS
 mov RI, FP
 sub RI, #-(-8)
 wrlong r1, RI
 mov r22, #0
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_div_6
 cmps r3, r22 wcz
 if_be jmp #\C_div_12
 mov r23, #1
 jmp #\@C_div_13
C_div_12
 mov r23, #0
C_div_13
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_be jmp #\C_div_14
 mov r21, #1
 jmp #\@C_div_15
C_div_14
 mov r21, #0
C_div_15
 cmps r23, r21 wz
 if_z jmp #\C_div_6
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 subs r22, r2
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_div_6
 mov r0, r4
 mov r1, FP
 sub r1, #-(-12)
 calld PA,#CPYB
 long 8
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
DAT
' Catalina Export DFS_OpenDir
 alignl
C_D_F_S__O_penD_ir
 calld PA,#NEWF
 sub SP, #44
 calld PA,#PSHM
 long $fe8000
 mov r23, r4
 mov r21, r3
 mov r19, r2
 mov r22, r19
 adds r22, #12
 mov r20, #0
 wrbyte r20, r22
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 cmp r22,  #0 wz
 if_z jmp #\C_D_F_S__O_penD_ir_7
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 cmp r0,  #1 wz
 if_nz jmp #\C_D_F_S__O_penD_ir_5
 rdbyte r22, r21
 cmps r22,  #47 wz
 if_nz jmp #\C_D_F_S__O_penD_ir_5
C_D_F_S__O_penD_ir_7
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #2 wz
 if_nz jmp #\C_D_F_S__O_penD_ir_8
 mov r22, r23
 adds r22, #44
 rdlong r22, r22
 wrlong r22, r19
 mov r22, r19
 adds r22, #4
 mov r20, #0
 wrbyte r20, r22
 mov r22, r19
 adds r22, #5
 mov r20, #0
 wrbyte r20, r22
 mov r2, #1
 mov r22, r23
 adds r22, #48
 rdlong r22, r22
 mov r20, r23
 adds r20, #44
 rdlong r20, r20
 sub r20, #2
 mov r18, r23
 adds r18, #20
 rdbyte r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r3, r22
 add r3, r0
 mov r22, r19
 adds r22, #8
 rdlong r4, r22
 rdbyte r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 mov r22, r0
 jmp #\@C_D_F_S__O_penD_ir_4
C_D_F_S__O_penD_ir_8
 mov r22, #0
 wrlong r22, r19
 mov r22, r19
 adds r22, #4
 mov r20, #0
 wrbyte r20, r22
 mov r22, r19
 adds r22, #5
 mov r20, #0
 wrbyte r20, r22
 mov r2, #1
 mov r22, r23
 adds r22, #44
 rdlong r3, r22
 mov r22, r19
 adds r22, #8
 rdlong r4, r22
 rdbyte r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 mov r22, r0
 jmp #\@C_D_F_S__O_penD_ir_4
C_D_F_S__O_penD_ir_5
 mov r17, r21
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #2 wz
 if_nz jmp #\C_D_F_S__O_penD_ir_10
 mov r22, r23
 adds r22, #44
 rdlong r22, r22
 wrlong r22, r19
 mov r22, r19
 adds r22, #4
 mov r20, #0
 wrbyte r20, r22
 mov r22, r19
 adds r22, #5
 mov r20, #0
 wrbyte r20, r22
 mov r2, #1
 mov r22, r23
 adds r22, #48
 rdlong r22, r22
 mov r20, r23
 adds r20, #44
 rdlong r20, r20
 sub r20, #2
 mov r18, r23
 adds r18, #20
 rdbyte r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r3, r22
 add r3, r0
 mov r22, r19
 adds r22, #8
 rdlong r4, r22
 rdbyte r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__O_penD_ir_17
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__O_penD_ir_4
C_D_F_S__O_penD_ir_10
 mov r22, #0
 wrlong r22, r19
 mov r22, r19
 adds r22, #4
 mov r20, #0
 wrbyte r20, r22
 mov r22, r19
 adds r22, #5
 mov r20, #0
 wrbyte r20, r22
 mov r2, #1
 mov r22, r23
 adds r22, #44
 rdlong r3, r22
 mov r22, r19
 adds r22, #8
 rdlong r4, r22
 rdbyte r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__O_penD_ir_17
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__O_penD_ir_4
C_D_F_S__O_penD_ir_16
 adds r17, #1
C_D_F_S__O_penD_ir_17
 rdbyte r22, r17
 cmps r22,  #47 wz
 if_nz jmp #\C_D_F_S__O_penD_ir_19
 cmps r22,  #0 wz
 if_nz jmp #\C_D_F_S__O_penD_ir_16
C_D_F_S__O_penD_ir_19
 jmp #\@C_D_F_S__O_penD_ir_21
C_D_F_S__O_penD_ir_20
 mov r2, r17
 mov r3, FP
 sub r3, #-(-48)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_D_F_S__C_anonicalT_oD_ir
 add SP, #4
 mov r22, #0
 mov RI, FP
 sub RI, #-(-36)
 wrbyte r22, RI
C_D_F_S__O_penD_ir_23
 mov r2, FP
 sub r2, #-(-36)
 mov r3, r19
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_D_F_S__G_etN_ext
 add SP, #8
 mov r15, r0
 cmp r15,  #0 wz
 if_nz jmp #\C_D_F_S__O_penD_ir_26
 mov r2, #11
 mov r3, FP
 sub r3, #-(-48)
 mov r4, FP
 sub r4, #-(-36)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcmp
 add SP, #8
 cmps r0,  #0 wz
 if_nz jmp #\C_D_F_S__O_penD_ir_23
C_D_F_S__O_penD_ir_26
 mov r2, #11
 mov r3, FP
 sub r3, #-(-48)
 mov r4, FP
 sub r4, #-(-36)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcmp
 add SP, #8
 cmps r0,  #0 wz
 if_nz jmp #\C_D_F_S__O_penD_ir_27
 mov r22, #16
 mov r20, FP
 sub r20, #-(-25)
 rdbyte r20, r20
 and r20, #16
 cmps r20, r22 wz
 if_nz jmp #\C_D_F_S__O_penD_ir_27
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #2 wz
 if_nz jmp #\C_D_F_S__O_penD_ir_30
 mov r22, FP
 sub r22, #-(-10)
 rdbyte r22, r22
 mov r20, FP
 sub r20, #-(-9)
 rdbyte r20, r20
 shl r20, #8
 or r22, r20
 mov r20, FP
 sub r20, #-(-16)
 rdbyte r20, r20
 shl r20, #16
 or r22, r20
 mov r20, FP
 sub r20, #-(-15)
 rdbyte r20, r20
 shl r20, #24
 or r22, r20
 wrlong r22, r19
 jmp #\@C_D_F_S__O_penD_ir_31
C_D_F_S__O_penD_ir_30
 mov r22, FP
 sub r22, #-(-10)
 rdbyte r22, r22
 mov r20, FP
 sub r20, #-(-9)
 rdbyte r20, r20
 shl r20, #8
 or r22, r20
 wrlong r22, r19
C_D_F_S__O_penD_ir_31
 mov r22, r19
 adds r22, #4
 mov r20, #0
 wrbyte r20, r22
 mov r22, r19
 adds r22, #5
 mov r20, #0
 wrbyte r20, r22
 mov r2, #1
 mov r22, r23
 adds r22, #48
 rdlong r22, r22
 rdlong r20, r19
 sub r20, #2
 mov r18, r23
 adds r18, #20
 rdbyte r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r3, r22
 add r3, r0
 mov r22, r19
 adds r22, #8
 rdlong r4, r22
 rdbyte r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__O_penD_ir_41
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__O_penD_ir_4
C_D_F_S__O_penD_ir_27
 mov r0, #3
 jmp #\@C_D_F_S__O_penD_ir_4
C_D_F_S__O_penD_ir_40
 adds r17, #1
C_D_F_S__O_penD_ir_41
 rdbyte r22, r17
 cmps r22,  #47 wz
 if_z jmp #\C_D_F_S__O_penD_ir_43
 cmps r22,  #0 wz
 if_nz jmp #\C_D_F_S__O_penD_ir_40
C_D_F_S__O_penD_ir_43
 rdbyte r22, r17
 cmps r22,  #47 wz
 if_nz jmp #\C_D_F_S__O_penD_ir_44
 adds r17, #1
C_D_F_S__O_penD_ir_44
C_D_F_S__O_penD_ir_21
 rdbyte r22, r17
 cmps r22,  #0 wz
 if_nz jmp #\C_D_F_S__O_penD_ir_20
 rdlong r22, r19
 cmp r22,  #0 wz
 if_nz jmp #\C_D_F_S__O_penD_ir_46
 mov r0, #3
 jmp #\@C_D_F_S__O_penD_ir_4
C_D_F_S__O_penD_ir_46
 mov r0, #0
C_D_F_S__O_penD_ir_4
 calld PA,#POPM
 add SP, #44
 calld PA,#RETF
' Catalina Import DFS_CanonicalToDir
' Catalina Import DFS_GetNext
' Catalina Import DFS_ReadSector
' Catalina Import strlen
' Catalina Import memcmp
DAT
' Catalina Export DFS_OpenFile
 alignl
C_D_F_S__O_penF_ile
 calld PA,#NEWF
 sub SP, #132
 calld PA,#PSHM
 long $ffaa80
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r2, #28
 mov r3, #0
 mov r4, r17
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memset
 add SP, #8
 mov r22, r17
 adds r22, #9
 wrbyte r21, r22
 mov r2, #64
 mov r3, r23
 mov r4, FP
 sub r4, #-(-100)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_strncpy
 add SP, #8
 mov r22, #0
 mov RI, FP
 sub RI, #-(-37)
 wrbyte r22, RI
 mov r2, FP
 sub r2, #-(-100)
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcmp
 add SP, #4
 cmps r0,  #0 wz
 if_z jmp #\C_D_F_S__O_penF_ile_9
 mov r0, #4
 jmp #\@C_D_F_S__O_penF_ile_4
C_D_F_S__O_penF_ile_8
 mov r2, FP
 sub r2, #-(-99)
 mov r3, FP
 sub r3, #-(-100)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
C_D_F_S__O_penF_ile_9
 mov r22, FP
 sub r22, #-(-100)
 rdbyte r22, r22
 cmps r22,  #47 wz
 if_z jmp #\C_D_F_S__O_penF_ile_8
 mov r15, FP
 sub r15, #-(-100)
C_D_F_S__O_penF_ile_12
 mov r22, r15
 mov r15, r22
 adds r15, #1
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_D_F_S__O_penF_ile_12
 mov r22, ##-1
 adds r15, r22
 jmp #\@C_D_F_S__O_penF_ile_16
C_D_F_S__O_penF_ile_15
 mov r22, ##-1
 adds r15, r22
C_D_F_S__O_penF_ile_16
 mov r22, r15
 mov r20, FP
 sub r20, #-(-100)
 cmp r22, r20 wcz
 if_be jmp #\C_D_F_S__O_penF_ile_18
 rdbyte r22, r15
 cmps r22,  #47 wz
 if_nz jmp #\C_D_F_S__O_penF_ile_15
C_D_F_S__O_penF_ile_18
 rdbyte r22, r15
 cmps r22,  #47 wz
 if_nz jmp #\C_D_F_S__O_penF_ile_19
 adds r15, #1
C_D_F_S__O_penF_ile_19
 mov r2, r15
 mov r3, FP
 sub r3, #-(-128)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_D_F_S__C_anonicalT_oD_ir
 add SP, #4
 mov r22, r15
 mov r20, FP
 sub r20, #-(-100)
 cmp r22, r20 wcz
 if_be jmp #\C_D_F_S__O_penF_ile_21
 mov r22, ##-1
 adds r15, r22
C_D_F_S__O_penF_ile_21
 rdbyte r22, r15
 cmps r22,  #47 wz
 if_z jmp #\C_D_F_S__O_penF_ile_25
 mov r22, r15
 mov r20, FP
 sub r20, #-(-100)
 cmp r22, r20 wz
 if_nz jmp #\C_D_F_S__O_penF_ile_23
C_D_F_S__O_penF_ile_25
 mov r22, #0
 wrbyte r22, r15
C_D_F_S__O_penF_ile_23
 mov RI, FP
 sub RI, #-(-108)
 wrlong r19, RI
 mov r22, FP
 sub r22, #-(-116)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-132)
 wrlong r22, RI
 mov r2, FP
 sub r2, #-(-116)
 mov r3, FP
 sub r3, #-(-100)
 mov RI, FP
 add RI, #8
 rdlong r4, RI
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_D_F_S__O_penD_ir
 add SP, #8
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__O_penF_ile_30
 mov r0, #3
 jmp #\@C_D_F_S__O_penF_ile_4
C_D_F_S__O_penF_ile_29
 mov r2, #11
 mov r3, FP
 sub r3, #-(-128)
 mov r4, FP
 sub r4, #-(-36)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcmp
 add SP, #8
 cmps r0,  #0 wz
 if_nz jmp #\C_D_F_S__O_penF_ile_32
 mov r22, FP
 sub r22, #-(-25)
 rdbyte r22, r22
 and r22, #16
 cmps r22,  #0 wz
 if_z jmp #\C_D_F_S__O_penF_ile_34
 mov r22, r21
 and r22, cviu_m1
 cmps r22,  #6 wz
 if_z jmp #\C_D_F_S__O_penF_ile_34
 cmps r22,  #4 wz
 if_z jmp #\C_D_F_S__O_penF_ile_34
 mov r0, #3
 jmp #\@C_D_F_S__O_penF_ile_4
C_D_F_S__O_penF_ile_34
 mov r22, FP
 sub r22, #-(-25)
 rdbyte r22, r22
 and r22, #16
 cmps r22,  #0 wz
 if_nz jmp #\C_D_F_S__O_penF_ile_37
 mov r22, r21
 and r22, cviu_m1
 cmps r22,  #6 wz
 if_z jmp #\C_D_F_S__O_penF_ile_40
 cmps r22,  #4 wz
 if_nz jmp #\C_D_F_S__O_penF_ile_37
C_D_F_S__O_penF_ile_40
 mov r0, #3
 jmp #\@C_D_F_S__O_penF_ile_4
C_D_F_S__O_penF_ile_37
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 wrlong r22, r17
 mov r22, r17
 adds r22, #24
 mov r20, #0
 wrlong r20, r22
 mov r22, FP
 sub r22, #-(-116)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_D_F_S__O_penF_ile_41
 mov r22, r17
 adds r22, #4
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 adds r20, #44
 rdlong r20, r20
 mov r18, FP
 sub r18, #-(-112)
 rdbyte r18, r18
 add r20, r18
 wrlong r20, r22
 jmp #\@C_D_F_S__O_penF_ile_42
C_D_F_S__O_penF_ile_41
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r17
 adds r20, #4
 mov r18, r22
 adds r18, #48
 rdlong r18, r18
 mov r16, FP
 sub r16, #-(-116)
 rdlong r16, r16
 sub r16, #2
 adds r22, #20
 rdbyte r22, r22

  stalli

 qmul r16, r22
 getqx r0

  allowi

 mov r22, r18
 add r22, r0
 mov r18, FP
 sub r18, #-(-112)
 rdbyte r18, r18
 add r22, r18
 wrlong r22, r20
C_D_F_S__O_penF_ile_42
 mov r22, r17
 adds r22, #8
 mov r20, FP
 sub r20, #-(-111)
 rdbyte r20, r20
 subs r20, #1
 wrbyte r20, r22
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #2 wz
 if_nz jmp #\C_D_F_S__O_penF_ile_46
 mov r22, r17
 adds r22, #20
 mov r20, FP
 sub r20, #-(-10)
 rdbyte r20, r20
 mov r18, FP
 sub r18, #-(-9)
 rdbyte r18, r18
 shl r18, #8
 or r20, r18
 mov r18, FP
 sub r18, #-(-16)
 rdbyte r18, r18
 shl r18, #16
 or r20, r18
 mov r18, FP
 sub r18, #-(-15)
 rdbyte r18, r18
 shl r18, #24
 or r20, r18
 wrlong r20, r22
 jmp #\@C_D_F_S__O_penF_ile_47
C_D_F_S__O_penF_ile_46
 mov r22, r17
 adds r22, #20
 mov r20, FP
 sub r20, #-(-10)
 rdbyte r20, r20
 mov r18, FP
 sub r18, #-(-9)
 rdbyte r18, r18
 shl r18, #8
 or r20, r18
 wrlong r20, r22
C_D_F_S__O_penF_ile_47
 mov r22, r17
 adds r22, #12
 mov r20, r17
 adds r20, #20
 rdlong r20, r20
 wrlong r20, r22
 mov r22, r17
 adds r22, #16
 mov r20, FP
 sub r20, #-(-8)
 rdbyte r20, r20
 mov r18, FP
 sub r18, #-(-7)
 rdbyte r18, r18
 shl r18, #8
 or r20, r18
 mov r18, FP
 sub r18, #-(-6)
 rdbyte r18, r18
 shl r18, #16
 or r20, r18
 mov r18, FP
 sub r18, #-(-5)
 rdbyte r18, r18
 shl r18, #24
 or r20, r18
 wrlong r20, r22
 mov r0, #0
 jmp #\@C_D_F_S__O_penF_ile_4
C_D_F_S__O_penF_ile_32
C_D_F_S__O_penF_ile_30
 mov r2, FP
 sub r2, #-(-36)
 mov r3, FP
 sub r3, #-(-116)
 mov RI, FP
 add RI, #8
 rdlong r4, RI
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_D_F_S__G_etN_ext
 add SP, #8
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__O_penF_ile_29
 mov r22, r21
 and r22, cviu_m1
 and r22, #2
 cmps r22,  #0 wz
 if_z jmp #\C_D_F_S__O_penF_ile_58
 mov r2, FP
 sub r2, #-(-36)
 mov r3, FP
 sub r3, #-(-116)
 mov r4, FP
 sub r4, #-(-100)
 mov RI, FP
 add RI, #8
 rdlong r5, RI
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__G_etF_reeD_irE_nt
 add SP, #12
 cmps r0,  #0 wz
 if_z jmp #\C_D_F_S__O_penF_ile_60
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__O_penF_ile_4
C_D_F_S__O_penF_ile_60
 mov r2, #32
 mov r3, #0
 mov r4, FP
 sub r4, #-(-36)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memset
 add SP, #8
 mov r2, #11
 mov r3, FP
 sub r3, #-(-128)
 mov r4, FP
 sub r4, #-(-36)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcpy
 add SP, #8
 mov r22, #0
 mov RI, FP
 sub RI, #-(-23)
 wrbyte r22, RI
 mov BC, #0
 calld PA,#CALA
 long @C_D_F_S__F_A_T_time
 mov r22, r0
 mov RI, FP
 sub RI, #-(-136)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-136)
 rdlong r22, r22
 and r22, #255
 mov RI, FP
 sub RI, #-(-22)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-136)
 rdlong r22, r22
 shr r22, #8
 mov RI, FP
 sub RI, #-(-136)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-136)
 rdlong r22, r22
 and r22, #255
 mov RI, FP
 sub RI, #-(-21)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-136)
 rdlong r22, r22
 shr r22, #8
 mov RI, FP
 sub RI, #-(-136)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-136)
 rdlong r22, r22
 and r22, #255
 mov RI, FP
 sub RI, #-(-20)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-136)
 rdlong r22, r22
 shr r22, #8
 mov RI, FP
 sub RI, #-(-136)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-136)
 rdlong r22, r22
 and r22, #255
 mov RI, FP
 sub RI, #-(-19)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-20)
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-18)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-19)
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-17)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-22)
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-14)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-21)
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-13)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-20)
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-19)
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-11)
 wrbyte r22, RI
 mov r22, r21
 and r22, cviu_m1
 cmps r22,  #6 wz
 if_nz jmp #\C_D_F_S__O_penF_ile_79
 mov r22, FP
 sub r22, #-(-25)
 rdbyte r22, r22
 or r22, #16
 mov RI, FP
 sub RI, #-(-25)
 wrbyte r22, RI
C_D_F_S__O_penF_ile_79
 mov r2, r19
 mov RI, FP
 add RI, #8
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_D_F_S__G_etF_reeF_A_T_
 add SP, #4
 mov r13, r0
 mov r22, r13
 and r22, #255
 mov RI, FP
 sub RI, #-(-10)
 wrbyte r22, RI
 mov r22, ##$ff00
 and r22, r13
 shr r22, #8
 mov RI, FP
 sub RI, #-(-9)
 wrbyte r22, RI
 mov r22, ##$ff0000
 and r22, r13
 shr r22, #16
 mov RI, FP
 sub RI, #-(-16)
 wrbyte r22, RI
 mov r22, ##$ff000000
 and r22, r13
 shr r22, #24
 mov RI, FP
 sub RI, #-(-15)
 wrbyte r22, RI
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 wrlong r22, r17
 mov r22, r17
 adds r22, #24
 mov r20, #0
 wrlong r20, r22
 mov r22, FP
 sub r22, #-(-116)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_D_F_S__O_penF_ile_86
 mov r22, r17
 adds r22, #4
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 adds r20, #44
 rdlong r20, r20
 mov r18, FP
 sub r18, #-(-112)
 rdbyte r18, r18
 add r20, r18
 wrlong r20, r22
 jmp #\@C_D_F_S__O_penF_ile_87
C_D_F_S__O_penF_ile_86
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r17
 adds r20, #4
 mov r18, r22
 adds r18, #48
 rdlong r18, r18
 mov r16, FP
 sub r16, #-(-116)
 rdlong r16, r16
 sub r16, #2
 adds r22, #20
 rdbyte r22, r22

  stalli

 qmul r16, r22
 getqx r0

  allowi

 mov r22, r18
 add r22, r0
 mov r18, FP
 sub r18, #-(-112)
 rdbyte r18, r18
 add r22, r18
 wrlong r22, r20
C_D_F_S__O_penF_ile_87
 mov r22, r17
 adds r22, #8
 mov r20, FP
 sub r20, #-(-111)
 rdbyte r20, r20
 subs r20, #1
 wrbyte r20, r22
 mov r22, r17
 adds r22, #20
 wrlong r13, r22
 mov r22, r17
 adds r22, #12
 wrlong r13, r22
 mov r22, r17
 adds r22, #16
 mov r20, #0
 wrlong r20, r22
 mov r2, #1
 mov r22, r17
 adds r22, #4
 rdlong r3, r22
 mov r4, r19
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__O_penF_ile_91
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__O_penF_ile_4
C_D_F_S__O_penF_ile_91
 mov r2, #32
 mov r3, FP
 sub r3, #-(-36)
 mov r22, FP
 sub r22, #-(-111)
 rdbyte r22, r22
 shl r22, #5
 subs r22, #32
 mov r4, r22
 adds r4, r19
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcpy
 add SP, #8
 mov r2, #1
 mov r22, r17
 adds r22, #4
 rdlong r3, r22
 mov r4, r19
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__W_riteS_ector
 add SP, #12
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__O_penF_ile_94
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__O_penF_ile_4
C_D_F_S__O_penF_ile_94
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #1
 rdbyte r11, r22
 cmps r11,  #0 wz
 if_z jmp #\C_D_F_S__O_penF_ile_99
 cmps r11,  #1 wz
 if_z jmp #\C_D_F_S__O_penF_ile_100
 cmps r11,  #2 wz
 if_z jmp #\C_D_F_S__O_penF_ile_101
 jmp #\@C_D_F_S__O_penF_ile_96
C_D_F_S__O_penF_ile_99
 mov r0, #7
 jmp #\@C_D_F_S__O_penF_ile_4
C_D_F_S__O_penF_ile_100
 mov r13, ##$fff8
 jmp #\@C_D_F_S__O_penF_ile_97
C_D_F_S__O_penF_ile_101
 mov r13, ##$ffffff8
 jmp #\@C_D_F_S__O_penF_ile_97
C_D_F_S__O_penF_ile_96
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__O_penF_ile_4
C_D_F_S__O_penF_ile_97
 mov r22, #0
 mov RI, FP
 sub RI, #-(-136)
 wrlong r22, RI
 mov r2, r13
 mov r22, r17
 adds r22, #20
 rdlong r3, r22
 mov r4, FP
 sub r4, #-(-136)
 mov r5, r19
 sub SP, #16
 calld PA,#PSHF
 long 8
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_D_F_S__S_etF_A_T_
 add SP, #16
 mov r22, r21
 and r22, cviu_m1
 cmps r22,  #6 wz
 if_nz jmp #\C_D_F_S__O_penF_ile_102
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #48
 rdlong r20, r20
 mov r18, r17
 adds r18, #20
 rdlong r18, r18
 sub r18, #2
 adds r22, #20
 rdbyte r22, r22

  stalli

 qmul r18, r22
 getqx r0

  allowi

 mov r7, r20
 add r7, r0
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #20
 rdbyte r22, r22
 add r22, r7
 mov r9, r22
 sub r9, #1
 mov r22, FP
 sub r22, #-(-132)
 rdlong r22, r22
 cmp r22,  #2 wcz
 if_a jmp #\C_D_F_S__O_penF_ile_104
 mov r22, #0
 mov RI, FP
 sub RI, #-(-132)
 wrlong r22, RI
C_D_F_S__O_penF_ile_104
 mov r2, ##512
 mov r3, #0
 mov r4, r19
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memset
 add SP, #8
 jmp #\@C_D_F_S__O_penF_ile_109
C_D_F_S__O_penF_ile_106
 mov r2, #1
 mov r3, r9
 mov r4, r19
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__W_riteS_ector
 add SP, #12
 sub r9, #1
C_D_F_S__O_penF_ile_109
 cmp r9, r7 wcz
 if_a jmp #\C_D_F_S__O_penF_ile_106
 mov r2, #11
 mov r3, ##@C_D_F_S__O_penF_ile_110_L000111
 mov r4, FP
 sub r4, #-(-36)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcpy
 add SP, #8
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrbyte r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-7)
 wrbyte r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-6)
 wrbyte r22, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-5)
 wrbyte r22, RI
 mov r2, #32
 mov r3, FP
 sub r3, #-(-36)
 mov r4, r19
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcpy
 add SP, #8
 mov r2, #11
 mov r3, ##@C_D_F_S__O_penF_ile_116_L000117
 mov r4, FP
 sub r4, #-(-36)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcpy
 add SP, #8
 mov r22, FP
 sub r22, #-(-132)
 rdlong r22, r22
 and r22, #255
 mov RI, FP
 sub RI, #-(-10)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-132)
 rdlong r22, r22
 mov r20, ##$ff00
 and r22, r20
 shr r22, #8
 mov RI, FP
 sub RI, #-(-9)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-132)
 rdlong r22, r22
 mov r20, ##$ff0000
 and r22, r20
 shr r22, #16
 mov RI, FP
 sub RI, #-(-16)
 wrbyte r22, RI
 mov r22, FP
 sub r22, #-(-132)
 rdlong r22, r22
 mov r20, ##$ff000000
 and r22, r20
 shr r22, #24
 mov RI, FP
 sub RI, #-(-15)
 wrbyte r22, RI
 mov r22, #32
 mov r2, r22
 mov r3, FP
 sub r3, #-(-36)
 mov r4, r19
 adds r4, #32
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcpy
 add SP, #8
 mov r2, #1
 mov r3, r7
 mov r4, r19
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__W_riteS_ector
 add SP, #12
C_D_F_S__O_penF_ile_102
 mov r0, #0
 jmp #\@C_D_F_S__O_penF_ile_4
C_D_F_S__O_penF_ile_58
 mov r0, #3
C_D_F_S__O_penF_ile_4
 calld PA,#POPM
 add SP, #132
 calld PA,#RETF
' Catalina Import DFS_SetFAT
' Catalina Import DFS_GetFreeFAT
' Catalina Import DFS_FATtime
' Catalina Import DFS_GetFreeDirEnt
' Catalina Import DFS_CanonicalToDir
' Catalina Import DFS_GetNext
' Catalina Import DFS_OpenDir
' Catalina Import DFS_WriteSector
' Catalina Import DFS_ReadSector
' Catalina Import memset
' Catalina Import strcmp
' Catalina Import memcmp
' Catalina Import strncpy
' Catalina Import strcpy
' Catalina Import memcpy
DAT
DAT
 alignl
C_sicg_65fa5713_gnum_L000001
 calld PA,#PSHM
 long $f00000
 rdbyte r22, r4
 cmps r22,  #42 wz
 if_nz jmp #\C_sicg_65fa5713_gnum_L000001_3
 rdlong r22, r2
 adds r22, #4
 wrlong r22, r2
 mov r20, ##-4
 adds r22, r20
 rdlong r22, r22
 wrlong r22, r3
 adds r4, #1
 jmp #\@C_sicg_65fa5713_gnum_L000001_4
C_sicg_65fa5713_gnum_L000001_3
 mov r23, #0
 jmp #\@C_sicg_65fa5713_gnum_L000001_6
C_sicg_65fa5713_gnum_L000001_5
 mov r22, #10

  stalli

 qmul r22, r23
 getqx r0

  allowi

 mov r23, r0
 adds r23, r21
 adds r4, #1
C_sicg_65fa5713_gnum_L000001_6
 rdbyte r22, r4
 subs r22, #48
 mov r21, r22
 cmps r22,  #0 wcz
 if_b jmp #\C_sicg_65fa5713_gnum_L000001_8
 cmps r21,  #9 wcz
 if_be jmp #\C_sicg_65fa5713_gnum_L000001_5
C_sicg_65fa5713_gnum_L000001_8
 wrlong r23, r3
C_sicg_65fa5713_gnum_L000001_4
 mov r0, r4
 calld PA,#POPM
 calld PA,#RETN
 alignl
C_sicg1_65fa5713_o_print_L000009
 calld PA,#NEWF
 sub SP, #12
 calld PA,#PSHM
 long $faa800
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r15, r23
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 mov r13, r22
 and r13, #96
 mov r22, #32
 cmps r13, r22 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_14
 cmps r13, r22 wcz
 if_b jmp #\C_sicg1_65fa5713_o_print_L000009_11
 cmps r13,  #64 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_17
 jmp #\@C_sicg1_65fa5713_o_print_L000009_11
C_sicg1_65fa5713_o_print_L000009_14
 cmps r17,  #0 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_15
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #4
 wrlong r20, r22
 mov r22, ##-4
 adds r22, r20
 rdlong r22, r22
 shl r22, #16
 sar r22, #16
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 jmp #\@C_sicg1_65fa5713_o_print_L000009_12
C_sicg1_65fa5713_o_print_L000009_15
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #4
 wrlong r20, r22
 mov r22, ##-4
 adds r22, r20
 rdlong r22, r22
 and r22, cviu_m2
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_sicg1_65fa5713_o_print_L000009_12
C_sicg1_65fa5713_o_print_L000009_17
 cmps r17,  #0 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_18
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #4
 wrlong r20, r22
 mov r22, ##-4
 adds r22, r20
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 jmp #\@C_sicg1_65fa5713_o_print_L000009_12
C_sicg1_65fa5713_o_print_L000009_18
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #4
 wrlong r20, r22
 mov r22, ##-4
 adds r22, r20
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_sicg1_65fa5713_o_print_L000009_12
C_sicg1_65fa5713_o_print_L000009_11
 cmps r17,  #0 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_20
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #4
 wrlong r20, r22
 mov r22, ##-4
 adds r22, r20
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 jmp #\@C_sicg1_65fa5713_o_print_L000009_12
C_sicg1_65fa5713_o_print_L000009_20
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #4
 wrlong r20, r22
 mov r22, ##-4
 adds r22, r20
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_sicg1_65fa5713_o_print_L000009_12
 cmps r17,  #0 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_23
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_sicg1_65fa5713_o_print_L000009_25
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, #45
 wrbyte r20, r22
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 neg r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 jmp #\@C_sicg1_65fa5713_o_print_L000009_26
C_sicg1_65fa5713_o_print_L000009_25
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 and r22, #2
 cmps r22,  #0 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_27
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, #43
 wrbyte r20, r22
 jmp #\@C_sicg1_65fa5713_o_print_L000009_28
C_sicg1_65fa5713_o_print_L000009_27
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 and r22, #4
 cmps r22,  #0 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_29
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, #32
 wrbyte r20, r22
C_sicg1_65fa5713_o_print_L000009_29
C_sicg1_65fa5713_o_print_L000009_28
C_sicg1_65fa5713_o_print_L000009_26
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_sicg1_65fa5713_o_print_L000009_23
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 and r22, #8
 cmps r22,  #0 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_31
 mov r22, r21
 and r22, cviu_m1
 cmps r22,  #111 wz
 if_nz jmp #\C_sicg1_65fa5713_o_print_L000009_31
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, #48
 wrbyte r20, r22
C_sicg1_65fa5713_o_print_L000009_31
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_sicg1_65fa5713_o_print_L000009_33
 cmps r19,  #0 wz
 if_nz jmp #\C_sicg1_65fa5713_o_print_L000009_34
 mov r0, r23
 jmp #\@C_sicg1_65fa5713_o_print_L000009_10
C_sicg1_65fa5713_o_print_L000009_33
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 and r22, #8
 cmps r22,  #0 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_40
 mov r22, r21
 and r22, cviu_m1
 cmps r22,  #120 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_39
 cmps r22,  #88 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_39
C_sicg1_65fa5713_o_print_L000009_40
 mov r22, r21
 and r22, cviu_m1
 cmps r22,  #112 wz
 if_nz jmp #\C_sicg1_65fa5713_o_print_L000009_37
C_sicg1_65fa5713_o_print_L000009_39
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, #48
 wrbyte r20, r22
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, r21
 and r20, cviu_m1
 cmps r20,  #88 wz
 if_nz jmp #\C_sicg1_65fa5713_o_print_L000009_42
 mov r11, #88
 jmp #\@C_sicg1_65fa5713_o_print_L000009_43
C_sicg1_65fa5713_o_print_L000009_42
 mov r11, #120
C_sicg1_65fa5713_o_print_L000009_43
 mov r20, r11
 wrbyte r20, r22
C_sicg1_65fa5713_o_print_L000009_37
C_sicg1_65fa5713_o_print_L000009_34
 mov r11, r21
 and r11, cviu_m1
 mov r22, #105
 cmps r11, r22 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_49
 cmps r11, r22 wcz
 if_a jmp #\C_sicg1_65fa5713_o_print_L000009_52
 mov r22, #88
 cmps r11, r22 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_50
 cmps r11, r22 wcz
 if_b jmp #\C_sicg1_65fa5713_o_print_L000009_44
 cmps r11,  #98 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_47
 cmps r11,  #100 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_49
 jmp #\@C_sicg1_65fa5713_o_print_L000009_44
C_sicg1_65fa5713_o_print_L000009_52
 mov r22, #111
 cmps r11, r22 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_48
 cmps r11,  #112 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_50
 cmps r11, r22 wcz
 if_b jmp #\C_sicg1_65fa5713_o_print_L000009_44
 cmps r11,  #117 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_49
 cmps r11,  #120 wz
 if_z jmp #\C_sicg1_65fa5713_o_print_L000009_50
 jmp #\@C_sicg1_65fa5713_o_print_L000009_44
C_sicg1_65fa5713_o_print_L000009_47
 mov r22, #2
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 jmp #\@C_sicg1_65fa5713_o_print_L000009_45
C_sicg1_65fa5713_o_print_L000009_48
 mov r22, #8
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 jmp #\@C_sicg1_65fa5713_o_print_L000009_45
C_sicg1_65fa5713_o_print_L000009_49
 mov r22, #10
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 jmp #\@C_sicg1_65fa5713_o_print_L000009_45
C_sicg1_65fa5713_o_print_L000009_50
 mov r22, #16
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
C_sicg1_65fa5713_o_print_L000009_44
C_sicg1_65fa5713_o_print_L000009_45
 mov r2, r19
 mov r3, r23
 mov RI, FP
 sub RI, #-(-16)
 rdlong r4, RI
 mov RI, FP
 sub RI, #-(-8)
 rdlong r5, RI
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C__i_compute
 add SP, #12
 mov r23, r0
 mov r22, r21
 and r22, cviu_m1
 cmps r22,  #88 wz
 if_nz jmp #\C_sicg1_65fa5713_o_print_L000009_55
 jmp #\@C_sicg1_65fa5713_o_print_L000009_58
C_sicg1_65fa5713_o_print_L000009_57
 rdbyte r2, r15
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 mov r22, r0
 wrbyte r22, r15
 adds r15, #1
C_sicg1_65fa5713_o_print_L000009_58
 mov r22, r15
 mov r20, r23
 cmp r22, r20 wz
 if_nz jmp #\C_sicg1_65fa5713_o_print_L000009_57
C_sicg1_65fa5713_o_print_L000009_55
 mov r0, r23
C_sicg1_65fa5713_o_print_L000009_10
 calld PA,#POPM
 add SP, #12
 calld PA,#RETF
' Catalina Export _doprnt
 alignl
C__doprnt
 calld PA,#NEWF
 sub SP, ##1060
 calld PA,#PSHM
 long $feaa80
 mov r23, r4
 mov RI, FP
 add RI, #12
 wrlong r3, RI
 mov r21, r2
 mov r13, #0
 jmp #\@C__doprnt_62
C__doprnt_61
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #37 wz
 if_z jmp #\C__doprnt_64
 mov r2, r21
 mov RI, FP
 sub RI, #-(-8)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_putc
 add SP, #4
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C__doprnt_66
 cmps r13,  #0 wz
 if_z jmp #\C__doprnt_69
 neg r22, r13
 mov RI, ##-1056
 adds RI, FP
 wrlong r22, RI
 jmp #\@C__doprnt_70
C__doprnt_69
 mov r22, ##-1
 mov RI, ##-1056
 adds RI, FP
 wrlong r22, RI
C__doprnt_70
 mov r22, ##-1056
 adds r22, FP
 rdlong r0, r22
 jmp #\@C__doprnt_60
C__doprnt_66
 adds r13, #1
 jmp #\@C__doprnt_62
C__doprnt_64
 mov r15, #0
C__doprnt_71
 rdbyte r22, r23
 mov RI, ##-1056
 adds RI, FP
 wrlong r22, RI
 mov r22, ##-1056
 adds r22, FP
 rdlong r22, r22
 mov r20, #32
 cmps r22, r20 wz
 if_z jmp #\C__doprnt_79
 cmps r22,  #35 wz
 if_z jmp #\C__doprnt_80
 cmps r22, r20 wcz
 if_b jmp #\C__doprnt_74
 mov r22, ##-1056
 adds r22, FP
 rdlong r22, r22
 cmps r22,  #43 wz
 if_z jmp #\C__doprnt_78
 cmps r22,  #45 wz
 if_z jmp #\C__doprnt_77
 cmps r22,  #48 wz
 if_z jmp #\C__doprnt_81
 jmp #\@C__doprnt_74
C__doprnt_77
 or r15, #1
 jmp #\@C__doprnt_75
C__doprnt_78
 or r15, #2
 jmp #\@C__doprnt_75
C__doprnt_79
 or r15, #4
 jmp #\@C__doprnt_75
C__doprnt_80
 or r15, #8
 jmp #\@C__doprnt_75
C__doprnt_81
 or r15, #16
 jmp #\@C__doprnt_75
C__doprnt_74
 mov r22, ##4096
 or r15, r22
 jmp #\@C__doprnt_72
C__doprnt_75
 adds r23, #1
C__doprnt_72
 mov r22, ##4096
 and r22, r15
 cmps r22,  #0 wz
 if_z jmp #\C__doprnt_71
 mov RI, FP
 sub RI, #-(-20)
 wrlong r23, RI
 mov r2, FP
 add r2, #12
 mov r3, FP
 sub r3, #-(-12)
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sicg_65fa5713_gnum_L000001
 add SP, #8
 mov r23, r0
 mov r22, r23
 mov r20, FP
 sub r20, #-(-20)
 rdlong r20, r20
 cmp r22, r20 wz
 if_z jmp #\C__doprnt_83
 or r15, #256
C__doprnt_83
 rdbyte r22, r23
 cmps r22,  #46 wz
 if_nz jmp #\C__doprnt_85
 adds r23, #1
 mov RI, FP
 sub RI, #-(-20)
 wrlong r23, RI
 mov r2, FP
 add r2, #12
 mov r3, FP
 sub r3, #-(-16)
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sicg_65fa5713_gnum_L000001
 add SP, #8
 mov r23, r0
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_b jmp #\C__doprnt_87
 mov r22, ##512
 or r15, r22
C__doprnt_87
C__doprnt_85
 mov r22, #0
 mov r20, r15
 and r20, #256
 cmps r20, r22 wz
 if_z jmp #\C__doprnt_89
 mov r20, FP
 sub r20, #-(-12)
 rdlong r20, r20
 cmps r20, r22 wcz
 if_ae jmp #\C__doprnt_89
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 neg r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 or r15, #1
C__doprnt_89
 mov r22, r15
 and r22, #256
 cmps r22,  #0 wz
 if_nz jmp #\C__doprnt_91
 mov r22, #0
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
C__doprnt_91
 mov r22, r15
 and r22, #2
 cmps r22,  #0 wz
 if_z jmp #\C__doprnt_93
 mov r22, ##-5
 and r15, r22
C__doprnt_93
 mov r22, r15
 and r22, #1
 cmps r22,  #0 wz
 if_z jmp #\C__doprnt_95
 mov r22, ##-17
 and r15, r22
C__doprnt_95
 mov r11, ##-1052
 adds r11, FP
 mov r19, ##-1052
 adds r19, FP
 rdbyte r22, r23
 mov RI, ##-1056
 adds RI, FP
 wrlong r22, RI
 mov r22, ##-1056
 adds r22, FP
 rdlong r22, r22
 mov r20, #104
 cmps r22, r20 wz
 if_z jmp #\C__doprnt_100
 cmps r22, r20 wcz
 if_a jmp #\C__doprnt_104
 mov r22, ##-1056
 adds r22, FP
 rdlong r22, r22
 cmps r22,  #76 wz
 if_z jmp #\C__doprnt_102
 jmp #\@C__doprnt_97
C__doprnt_104
 mov r22, ##-1056
 adds r22, FP
 rdlong r22, r22
 cmps r22,  #108 wz
 if_z jmp #\C__doprnt_101
 jmp #\@C__doprnt_97
C__doprnt_100
 or r15, #32
 adds r23, #1
 jmp #\@C__doprnt_98
C__doprnt_101
 or r15, #64
 adds r23, #1
 jmp #\@C__doprnt_98
C__doprnt_102
 or r15, #128
 adds r23, #1
C__doprnt_97
C__doprnt_98
 mov r22, r23
 mov r23, r22
 adds r23, #1
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov RI, ##-1060
 adds RI, FP
 wrlong r22, RI
 mov r22, ##-1060
 adds r22, FP
 rdlong r22, r22
 mov r20, #88
 cmps r22, r20 wz
 if_z jmp #\C__doprnt_129
 cmps r22, r20 wcz
 if_a jmp #\C__doprnt_148
 mov r22, ##-1060
 adds r22, FP
 rdlong r22, r22
 cmps r22,  #69 wz
 if_z jmp #\C__doprnt_141
 cmps r22,  #70 wz
 if_z jmp #\C__doprnt_141
 cmps r22,  #71 wz
 if_z jmp #\C__doprnt_138
 jmp #\@C__doprnt_105
C__doprnt_148
 mov r22, ##-1060
 adds r22, FP
 rdlong r22, r22
 cmps r22,  #98 wcz
 if_b jmp #\C__doprnt_105
 cmps r22,  #120 wcz
 if_a jmp #\C__doprnt_105
 shl r22, #2
 mov r20, ##@C__doprnt_149_L000151-392
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C__doprnt_105
 mov r2, r21
 mov RI, FP
 sub RI, #-(-8)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_putc
 add SP, #4
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C__doprnt_108
 cmps r13,  #0 wz
 if_z jmp #\C__doprnt_111
 neg r22, r13
 mov RI, ##-1064
 adds RI, FP
 wrlong r22, RI
 jmp #\@C__doprnt_112
C__doprnt_111
 mov r22, ##-1
 mov RI, ##-1064
 adds RI, FP
 wrlong r22, RI
C__doprnt_112
 mov r22, ##-1064
 adds r22, FP
 rdlong r0, r22
 jmp #\@C__doprnt_60
C__doprnt_108
 adds r13, #1
 jmp #\@C__doprnt_62
C__doprnt_113
 mov r22, r15
 and r22, #32
 cmps r22,  #0 wz
 if_z jmp #\C__doprnt_114
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 adds r22, #4
 mov RI, FP
 add RI,#12
 wrlong r22, RI
 mov r20, ##-4
 adds r22, r20
 rdlong r22, r22
 mov r20, r13
 wrword r20, r22
 jmp #\@C__doprnt_62
C__doprnt_114
 mov r22, r15
 and r22, #64
 cmps r22,  #0 wz
 if_z jmp #\C__doprnt_116
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 adds r22, #4
 mov RI, FP
 add RI,#12
 wrlong r22, RI
 mov r20, ##-4
 adds r22, r20
 rdlong r22, r22
 wrlong r13, r22
 jmp #\@C__doprnt_62
C__doprnt_116
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 adds r22, #4
 mov RI, FP
 add RI,#12
 wrlong r22, RI
 mov r20, ##-4
 adds r22, r20
 rdlong r22, r22
 wrlong r13, r22
 jmp #\@C__doprnt_62
C__doprnt_118
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 adds r22, #4
 mov RI, FP
 add RI,#12
 wrlong r22, RI
 mov r20, ##-4
 adds r22, r20
 rdlong r11, r22
 mov r22, r11
 cmp r22,  #0 wz
 if_nz jmp #\C__doprnt_119
 mov r11, ##@C__doprnt_121_L000122
C__doprnt_119
 mov r19, r11
 jmp #\@C__doprnt_124
C__doprnt_123
 rdbyte r22, r19
 cmps r22,  #0 wz
 if_nz jmp #\C__doprnt_126
 jmp #\@C__doprnt_106
C__doprnt_126
 adds r19, #1
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 subs r22, #1
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
C__doprnt_124
 mov r22, #0
 mov r20, FP
 sub r20, #-(-16)
 rdlong r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C__doprnt_123
 mov r20, ##512
 and r20, r15
 cmps r20, r22 wz
 if_z jmp #\C__doprnt_123
 jmp #\@C__doprnt_106
C__doprnt_128
C__doprnt_129
 mov r22, ##512
 and r22, r15
 cmps r22,  #0 wz
 if_nz jmp #\C__doprnt_130
 mov r22, #1
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 jmp #\@C__doprnt_131
C__doprnt_130
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #112 wz
 if_z jmp #\C__doprnt_132
 mov r22, ##-17
 and r15, r22
C__doprnt_132
C__doprnt_131
 mov r2, #0
 mov RI, FP
 sub RI, #-(-16)
 rdlong r3, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r4, r22
 and r4, cviu_m1
 mov r5, r19
 sub SP, #16
 mov RI, r15
 wrlong RI, --PTRA
 mov RI, FP
 add RI, #12
 wrlong RI, --PTRA
 mov BC, #24
 add SP, #4
 calld PA,#CALA
 long @C_sicg1_65fa5713_o_print_L000009
 add SP, #20
 mov r19, r0
 jmp #\@C__doprnt_106
C__doprnt_134
 mov r22, ##1024
 or r15, r22
 mov r22, ##512
 and r22, r15
 cmps r22,  #0 wz
 if_nz jmp #\C__doprnt_135
 mov r22, #1
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 jmp #\@C__doprnt_136
C__doprnt_135
 mov r22, ##-17
 and r15, r22
C__doprnt_136
 mov r2, #1
 mov RI, FP
 sub RI, #-(-16)
 rdlong r3, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r4, r22
 and r4, cviu_m1
 mov r5, r19
 sub SP, #16
 mov RI, r15
 wrlong RI, --PTRA
 mov RI, FP
 add RI, #12
 wrlong RI, --PTRA
 mov BC, #24
 add SP, #4
 calld PA,#CALA
 long @C_sicg1_65fa5713_o_print_L000009
 add SP, #20
 mov r19, r0
 jmp #\@C__doprnt_106
C__doprnt_137
 mov r22, r19
 mov r19, r22
 adds r19, #1
 mov r20, FP
 add r20, #12
 rdlong r20, r20
 adds r20, #4
 mov RI, FP
 add RI,#12
 wrlong r20, RI
 mov r18, ##-4
 adds r20, r18
 rdlong r20, r20
 wrbyte r20, r22
 jmp #\@C__doprnt_106
C__doprnt_138
 mov r22, #0
 mov r20, ##512
 and r20, r15
 cmps r20, r22 wz
 if_z jmp #\C__doprnt_139
 mov r20, FP
 sub r20, #-(-16)
 rdlong r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C__doprnt_139
 mov r22, #1
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
C__doprnt_139
C__doprnt_141
 mov r22, ##512
 and r22, r15
 cmps r22,  #0 wz
 if_nz jmp #\C__doprnt_142
 mov r22, #6
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
C__doprnt_142
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r20, ##1025
 cmp r22, r20 wcz
 if_b jmp #\C__doprnt_144
 mov r22, ##1024
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
C__doprnt_144
 mov r22, ##1024
 or r15, r22
 mov RI, FP
 sub RI, #-(-16)
 rdlong r2, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r3, r22
 and r3, cviu_m1
 mov r4, r19
 mov r5, r15
 sub SP, #16
 mov RI, FP
 add RI, #12
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C__f_print
 add SP, #16
 mov r19, r0
 jmp #\@C__doprnt_106
C__doprnt_146
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 adds r22, #4
 mov RI, FP
 add RI,#12
 wrlong r22, RI
 mov r20, ##-4
 adds r22, r20
 rdlong r22, r22
 mov RI, FP
 add RI,#12
 wrlong r22, RI
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 adds r22, #4
 mov RI, FP
 add RI,#12
 wrlong r22, RI
 adds r22, r20
 rdlong r23, r22
 jmp #\@C__doprnt_62
C__doprnt_106
 mov r7, #32
 mov r22, r15
 and r22, #16
 cmps r22,  #0 wz
 if_z jmp #\C__doprnt_153
 mov r7, #48
C__doprnt_153
 mov r22, r19
 mov r20, r11
 sub r22, r20
 mov r17, r22
 mov r22, #0
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 mov r22, r15
 and r22, #16
 cmps r22,  #0 wz
 if_z jmp #\C__doprnt_155
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #120 wz
 if_z jmp #\C__doprnt_159
 cmps r22,  #88 wz
 if_nz jmp #\C__doprnt_158
C__doprnt_159
 mov r22, r15
 and r22, #8
 cmps r22,  #0 wz
 if_nz jmp #\C__doprnt_162
C__doprnt_158
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #112 wz
 if_z jmp #\C__doprnt_162
 mov r22, ##1024
 and r22, r15
 cmps r22,  #0 wz
 if_z jmp #\C__doprnt_155
 rdbyte r22, r11
 cmps r22,  #43 wz
 if_z jmp #\C__doprnt_162
 cmps r22,  #45 wz
 if_z jmp #\C__doprnt_162
 cmps r22,  #32 wz
 if_nz jmp #\C__doprnt_155
C__doprnt_162
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
C__doprnt_155
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 subs r22, r17
 mov r9, r22
 cmps r22,  #0 wcz
 if_be jmp #\C__doprnt_163
 mov r22, r15
 and r22, #1
 cmps r22,  #0 wz
 if_nz jmp #\C__doprnt_165
 adds r13, r9
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C__doprnt_167
 mov r22, ##1024
 and r22, r15
 cmps r22,  #0 wz
 if_z jmp #\C__doprnt_169
 subs r17, #1
 adds r13, #1
 mov r2, r21
 mov r22, r11
 mov r11, r22
 adds r11, #1
 rdbyte r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_putc
 add SP, #4
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C__doprnt_170
 cmps r13,  #0 wz
 if_z jmp #\C__doprnt_174
 neg r22, r13
 mov RI, ##-1064
 adds RI, FP
 wrlong r22, RI
 jmp #\@C__doprnt_175
C__doprnt_174
 mov r22, ##-1
 mov RI, ##-1064
 adds RI, FP
 wrlong r22, RI
C__doprnt_175
 mov r22, ##-1064
 adds r22, FP
 rdlong r0, r22
 jmp #\@C__doprnt_60
C__doprnt_169
 subs r17, #2
 adds r13, #2
 mov r2, r21
 mov r22, r11
 mov r11, r22
 adds r11, #1
 rdbyte r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_putc
 add SP, #4
 mov r20, ##-1
 cmps r0, r20 wz
 if_z jmp #\C__doprnt_178
 mov r2, r21
 mov r22, r11
 mov r11, r22
 adds r11, #1
 rdbyte r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_putc
 add SP, #4
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C__doprnt_176
C__doprnt_178
 cmps r13,  #0 wz
 if_z jmp #\C__doprnt_180
 neg r22, r13
 mov RI, ##-1064
 adds RI, FP
 wrlong r22, RI
 jmp #\@C__doprnt_181
C__doprnt_180
 mov r22, ##-1
 mov RI, ##-1064
 adds RI, FP
 wrlong r22, RI
C__doprnt_181
 mov r22, ##-1064
 adds r22, FP
 rdlong r0, r22
 jmp #\@C__doprnt_60
C__doprnt_176
C__doprnt_170
C__doprnt_167
C__doprnt_182
 mov r2, r21
 mov r3, r7
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_putc
 add SP, #4
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C__doprnt_185
 cmps r13,  #0 wz
 if_z jmp #\C__doprnt_188
 neg r22, r13
 mov RI, ##-1064
 adds RI, FP
 wrlong r22, RI
 jmp #\@C__doprnt_189
C__doprnt_188
 mov r22, ##-1
 mov RI, ##-1064
 adds RI, FP
 wrlong r22, RI
C__doprnt_189
 mov r22, ##-1064
 adds r22, FP
 rdlong r0, r22
 jmp #\@C__doprnt_60
C__doprnt_185
 mov r22, r9
 subs r22, #1
 mov r9, r22
 cmps r22,  #0 wz
 if_nz jmp #\C__doprnt_182
C__doprnt_165
C__doprnt_163
 adds r13, r17
 jmp #\@C__doprnt_191
C__doprnt_190
 mov r2, r21
 mov r22, r11
 mov r11, r22
 adds r11, #1
 rdbyte r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_putc
 add SP, #4
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C__doprnt_193
 cmps r13,  #0 wz
 if_z jmp #\C__doprnt_196
 neg r22, r13
 mov RI, ##-1064
 adds RI, FP
 wrlong r22, RI
 jmp #\@C__doprnt_197
C__doprnt_196
 mov r22, ##-1
 mov RI, ##-1064
 adds RI, FP
 wrlong r22, RI
C__doprnt_197
 mov r22, ##-1064
 adds r22, FP
 rdlong r0, r22
 jmp #\@C__doprnt_60
C__doprnt_193
C__doprnt_191
 mov r22, r17
 subs r22, #1
 mov r17, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C__doprnt_190
 cmps r9,  #0 wcz
 if_be jmp #\C__doprnt_201
 adds r13, r9
 jmp #\@C__doprnt_201
C__doprnt_200
 mov r2, r21
 mov r3, r7
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_putc
 add SP, #4
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C__doprnt_203
 cmps r13,  #0 wz
 if_z jmp #\C__doprnt_206
 neg r22, r13
 mov RI, ##-1064
 adds RI, FP
 wrlong r22, RI
 jmp #\@C__doprnt_207
C__doprnt_206
 mov r22, ##-1
 mov RI, ##-1064
 adds RI, FP
 wrlong r22, RI
C__doprnt_207
 mov r22, ##-1064
 adds r22, FP
 rdlong r0, r22
 jmp #\@C__doprnt_60
C__doprnt_203
C__doprnt_201
 mov r22, r9
 subs r22, #1
 mov r9, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C__doprnt_200
C__doprnt_62
 mov r22, r23
 mov r23, r22
 adds r23, #1
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 cmps r22,  #0 wz
 if_nz jmp #\C__doprnt_61
 mov r0, r13
C__doprnt_60
 calld PA,#POPM
 add SP, ##1060
 calld PA,#RETF
' Catalina Import _f_print
' Catalina Import _i_compute
' Catalina Import putc
' Catalina Import toupper
DAT
DAT
 alignl
C_sh1s_65fa5714_o_collect_L000003
 calld PA,#NEWF
 calld PA,#PSHM
 long $faa800
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r15, r17
 mov r11, r23
 and r11, cviu_m1
 mov r22, #105
 cmps r11, r22 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_8
 cmps r11, r22 wcz
 if_a jmp #\C_sh1s_65fa5714_o_collect_L000003_13
 mov r22, #88
 cmps r11, r22 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_8
 cmps r11, r22 wcz
 if_b jmp #\C_sh1s_65fa5714_o_collect_L000003_5
 cmps r11,  #98 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_11
 cmps r11,  #100 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_9
 jmp #\@C_sh1s_65fa5714_o_collect_L000003_5
C_sh1s_65fa5714_o_collect_L000003_13
 mov r22, #111
 cmps r11, r22 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_10
 cmps r11,  #112 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_8
 cmps r11, r22 wcz
 if_b jmp #\C_sh1s_65fa5714_o_collect_L000003_5
 cmps r11,  #117 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_9
 cmps r11,  #120 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_8
 jmp #\@C_sh1s_65fa5714_o_collect_L000003_5
C_sh1s_65fa5714_o_collect_L000003_8
 mov r13, #16
 jmp #\@C_sh1s_65fa5714_o_collect_L000003_6
C_sh1s_65fa5714_o_collect_L000003_9
 mov r13, #10
 jmp #\@C_sh1s_65fa5714_o_collect_L000003_6
C_sh1s_65fa5714_o_collect_L000003_10
 mov r13, #8
 jmp #\@C_sh1s_65fa5714_o_collect_L000003_6
C_sh1s_65fa5714_o_collect_L000003_11
 mov r13, #2
C_sh1s_65fa5714_o_collect_L000003_5
C_sh1s_65fa5714_o_collect_L000003_6
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 cmps r22,  #45 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_18
 cmps r22,  #43 wz
 if_nz jmp #\C_sh1s_65fa5714_o_collect_L000003_16
C_sh1s_65fa5714_o_collect_L000003_18
 mov r22, r15
 mov r15, r22
 adds r15, #1
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 wrbyte r20, r22
 mov r22, r21
 subs r22, #1
 mov r21, r22
 cmps r22,  #0 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_19
 mov RI, FP
 add RI, #12
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov RI, FP
 add RI,#8
 wrlong r0, RI
C_sh1s_65fa5714_o_collect_L000003_19
C_sh1s_65fa5714_o_collect_L000003_16
 cmps r21,  #0 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_21
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 cmps r22,  #48 wz
 if_nz jmp #\C_sh1s_65fa5714_o_collect_L000003_21
 cmps r13,  #16 wz
 if_nz jmp #\C_sh1s_65fa5714_o_collect_L000003_21
 mov r22, r15
 mov r15, r22
 adds r15, #1
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 wrbyte r20, r22
 mov r22, r21
 subs r22, #1
 mov r21, r22
 cmps r22,  #0 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_23
 mov RI, FP
 add RI, #12
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov RI, FP
 add RI,#8
 wrlong r0, RI
C_sh1s_65fa5714_o_collect_L000003_23
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 cmps r22,  #120 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_25
 cmps r22,  #88 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_25
 mov r22, r23
 and r22, cviu_m1
 cmps r22,  #105 wz
 if_nz jmp #\C_sh1s_65fa5714_o_collect_L000003_36
 mov r13, #8
 jmp #\@C_sh1s_65fa5714_o_collect_L000003_36
C_sh1s_65fa5714_o_collect_L000003_25
 cmps r21,  #0 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_36
 mov r22, r15
 mov r15, r22
 adds r15, #1
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 wrbyte r20, r22
 mov r22, r21
 subs r22, #1
 mov r21, r22
 cmps r22,  #0 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_36
 mov RI, FP
 add RI, #12
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov RI, FP
 add RI,#8
 wrlong r0, RI
 jmp #\@C_sh1s_65fa5714_o_collect_L000003_36
C_sh1s_65fa5714_o_collect_L000003_21
 mov r22, r23
 and r22, cviu_m1
 cmps r22,  #105 wz
 if_nz jmp #\C_sh1s_65fa5714_o_collect_L000003_36
 mov r13, #10
 jmp #\@C_sh1s_65fa5714_o_collect_L000003_36
C_sh1s_65fa5714_o_collect_L000003_35
 cmps r13,  #10 wz
 if_nz jmp #\C_sh1s_65fa5714_o_collect_L000003_42
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 subs r22, #48
 cmp r22,  #10 wcz
 if_b jmp #\C_sh1s_65fa5714_o_collect_L000003_45
C_sh1s_65fa5714_o_collect_L000003_42
 cmps r13,  #16 wz
 if_nz jmp #\C_sh1s_65fa5714_o_collect_L000003_44
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, ##@C___ctype+1
 adds r22, r20
 rdbyte r22, r22
 and r22, #68
 cmps r22,  #0 wz
 if_nz jmp #\C_sh1s_65fa5714_o_collect_L000003_45
C_sh1s_65fa5714_o_collect_L000003_44
 cmps r13,  #8 wz
 if_nz jmp #\C_sh1s_65fa5714_o_collect_L000003_47
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 subs r20, #48
 cmp r20,  #10 wcz
 if_ae jmp #\C_sh1s_65fa5714_o_collect_L000003_47
 cmps r22,  #56 wcz
 if_b jmp #\C_sh1s_65fa5714_o_collect_L000003_45
C_sh1s_65fa5714_o_collect_L000003_47
 cmps r13,  #2 wz
 if_nz jmp #\C_sh1s_65fa5714_o_collect_L000003_37
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 subs r20, #48
 cmp r20,  #10 wcz
 if_ae jmp #\C_sh1s_65fa5714_o_collect_L000003_37
 cmps r22,  #50 wcz
 if_ae jmp #\C_sh1s_65fa5714_o_collect_L000003_37
C_sh1s_65fa5714_o_collect_L000003_45
 mov r22, r15
 mov r15, r22
 adds r15, #1
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 wrbyte r20, r22
 mov r22, r21
 subs r22, #1
 mov r21, r22
 cmps r22,  #0 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_39
 mov RI, FP
 add RI, #12
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov RI, FP
 add RI,#8
 wrlong r0, RI
C_sh1s_65fa5714_o_collect_L000003_39
C_sh1s_65fa5714_o_collect_L000003_36
 cmps r21,  #0 wz
 if_nz jmp #\C_sh1s_65fa5714_o_collect_L000003_35
C_sh1s_65fa5714_o_collect_L000003_37
 cmps r21,  #0 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_50
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, ##-1
 cmps r22, r20 wz
 if_z jmp #\C_sh1s_65fa5714_o_collect_L000003_50
 mov RI, FP
 add RI, #12
 rdlong r2, RI
 mov RI, FP
 add RI, #8
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_ungetc
 add SP, #4
C_sh1s_65fa5714_o_collect_L000003_50
 mov r22, r23
 and r22, cviu_m1
 cmps r22,  #105 wz
 if_nz jmp #\C_sh1s_65fa5714_o_collect_L000003_52
 mov r13, #0
C_sh1s_65fa5714_o_collect_L000003_52
 wrlong r13, r19
 mov r22, #0
 wrbyte r22, r15
 mov r22, ##-1
 mov r0, r15
 adds r0, r22
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_sh1s1_65fa5714_f_collect_L000054
 calld PA,#NEWF
 calld PA,#PSHM
 long $faa000
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r15, r17
 mov r13, #0
 cmps r23,  #45 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_58
 cmps r23,  #43 wz
 if_nz jmp #\C_sh1s1_65fa5714_f_collect_L000054_62
C_sh1s1_65fa5714_f_collect_L000054_58
 mov r22, r15
 mov r15, r22
 adds r15, #1
 mov r20, r23
 wrbyte r20, r22
 mov r22, r19
 subs r22, #1
 mov r19, r22
 cmps r22,  #0 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_62
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r23, r0
 jmp #\@C_sh1s1_65fa5714_f_collect_L000054_62
C_sh1s1_65fa5714_f_collect_L000054_61
 adds r13, #1
 mov r22, r15
 mov r15, r22
 adds r15, #1
 mov r20, r23
 wrbyte r20, r22
 mov r22, r19
 subs r22, #1
 mov r19, r22
 cmps r22,  #0 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_64
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r23, r0
C_sh1s1_65fa5714_f_collect_L000054_64
C_sh1s1_65fa5714_f_collect_L000054_62
 cmps r19,  #0 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_66
 mov r22, r23
 subs r22, #48
 cmp r22,  #10 wcz
 if_b jmp #\C_sh1s1_65fa5714_f_collect_L000054_61
C_sh1s1_65fa5714_f_collect_L000054_66
 cmps r19,  #0 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_67
 cmps r23,  #46 wz
 if_nz jmp #\C_sh1s1_65fa5714_f_collect_L000054_67
 mov r22, r15
 mov r15, r22
 adds r15, #1
 mov r20, r23
 wrbyte r20, r22
 mov r22, r19
 subs r22, #1
 mov r19, r22
 cmps r22,  #0 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_72
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r23, r0
 jmp #\@C_sh1s1_65fa5714_f_collect_L000054_72
C_sh1s1_65fa5714_f_collect_L000054_71
 adds r13, #1
 mov r22, r15
 mov r15, r22
 adds r15, #1
 mov r20, r23
 wrbyte r20, r22
 mov r22, r19
 subs r22, #1
 mov r19, r22
 cmps r22,  #0 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_74
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r23, r0
C_sh1s1_65fa5714_f_collect_L000054_74
C_sh1s1_65fa5714_f_collect_L000054_72
 cmps r19,  #0 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_76
 mov r22, r23
 subs r22, #48
 cmp r22,  #10 wcz
 if_b jmp #\C_sh1s1_65fa5714_f_collect_L000054_71
C_sh1s1_65fa5714_f_collect_L000054_76
C_sh1s1_65fa5714_f_collect_L000054_67
 cmps r13,  #0 wz
 if_nz jmp #\C_sh1s1_65fa5714_f_collect_L000054_77
 cmps r19,  #0 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_79
 mov r22, ##-1
 cmps r23, r22 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_79
 mov r2, r21
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_ungetc
 add SP, #4
C_sh1s1_65fa5714_f_collect_L000054_79
 mov r22, ##-1
 mov r0, r17
 adds r0, r22
 jmp #\@C_sh1s1_65fa5714_f_collect_L000054_55
C_sh1s1_65fa5714_f_collect_L000054_77
 mov r13, #0
 cmps r19,  #0 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_81
 cmps r23,  #101 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_83
 cmps r23,  #69 wz
 if_nz jmp #\C_sh1s1_65fa5714_f_collect_L000054_81
C_sh1s1_65fa5714_f_collect_L000054_83
 mov r22, r15
 mov r15, r22
 adds r15, #1
 mov r20, r23
 wrbyte r20, r22
 mov r22, r19
 subs r22, #1
 mov r19, r22
 cmps r22,  #0 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_84
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r23, r0
C_sh1s1_65fa5714_f_collect_L000054_84
 cmps r19,  #0 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_92
 cmps r23,  #43 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_88
 cmps r23,  #45 wz
 if_nz jmp #\C_sh1s1_65fa5714_f_collect_L000054_92
C_sh1s1_65fa5714_f_collect_L000054_88
 mov r22, r15
 mov r15, r22
 adds r15, #1
 mov r20, r23
 wrbyte r20, r22
 mov r22, r19
 subs r22, #1
 mov r19, r22
 cmps r22,  #0 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_92
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r23, r0
 jmp #\@C_sh1s1_65fa5714_f_collect_L000054_92
C_sh1s1_65fa5714_f_collect_L000054_91
 adds r13, #1
 mov r22, r15
 mov r15, r22
 adds r15, #1
 mov r20, r23
 wrbyte r20, r22
 mov r22, r19
 subs r22, #1
 mov r19, r22
 cmps r22,  #0 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_94
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r23, r0
C_sh1s1_65fa5714_f_collect_L000054_94
C_sh1s1_65fa5714_f_collect_L000054_92
 cmps r19,  #0 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_96
 mov r22, r23
 subs r22, #48
 cmp r22,  #10 wcz
 if_b jmp #\C_sh1s1_65fa5714_f_collect_L000054_91
C_sh1s1_65fa5714_f_collect_L000054_96
 cmps r13,  #0 wz
 if_nz jmp #\C_sh1s1_65fa5714_f_collect_L000054_97
 cmps r19,  #0 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_99
 mov r22, ##-1
 cmps r23, r22 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_99
 mov r2, r21
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_ungetc
 add SP, #4
C_sh1s1_65fa5714_f_collect_L000054_99
 mov r22, ##-1
 mov r0, r17
 adds r0, r22
 jmp #\@C_sh1s1_65fa5714_f_collect_L000054_55
C_sh1s1_65fa5714_f_collect_L000054_97
C_sh1s1_65fa5714_f_collect_L000054_81
 cmps r19,  #0 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_101
 mov r22, ##-1
 cmps r23, r22 wz
 if_z jmp #\C_sh1s1_65fa5714_f_collect_L000054_101
 mov r2, r21
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_ungetc
 add SP, #4
C_sh1s1_65fa5714_f_collect_L000054_101
 mov r22, #0
 wrbyte r22, r15
 mov r22, ##-1
 mov r0, r15
 adds r0, r22
C_sh1s1_65fa5714_f_collect_L000054_55
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export _doscan
 alignl
C__doscan
 calld PA,#NEWF
 sub SP, ##808
 calld PA,#PSHM
 long $feaa80
 mov r23, r4
 mov r21, r3
 mov r19, r2
 mov r22, #0
 mov RI, FP
 sub RI, #-(-268)
 wrlong r22, RI
 mov r11, #0
 mov r22, #0
 mov RI, FP
 sub RI, #-(-264)
 wrlong r22, RI
 rdbyte r22, r21
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_107
 mov r0, #0
 jmp #\@C__doscan_103
C__doscan_106
 rdbyte r22, r21
 mov r20, ##@C___ctype+1
 adds r22, r20
 rdbyte r22, r22
 and r22, #8
 cmps r22,  #0 wz
 if_z jmp #\C__doscan_109
 jmp #\@C__doscan_113
C__doscan_112
 adds r21, #1
C__doscan_113
 rdbyte r22, r21
 mov r20, ##@C___ctype+1
 adds r22, r20
 rdbyte r22, r22
 and r22, #8
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_112
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r15, r0
 adds r11, #1
 jmp #\@C__doscan_117
C__doscan_116
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r15, r0
 adds r11, #1
C__doscan_117
 mov r22, ##@C___ctype+1
 adds r22, r15
 rdbyte r22, r22
 and r22, #8
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_116
 mov r22, ##-1
 cmps r15, r22 wz
 if_z jmp #\C__doscan_120
 mov r2, r23
 mov r3, r15
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_ungetc
 add SP, #4
C__doscan_120
 subs r11, #1
C__doscan_109
 rdbyte r22, r21
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_122
 jmp #\@C__doscan_108
C__doscan_122
 rdbyte r22, r21
 cmps r22,  #37 wz
 if_z jmp #\C__doscan_124
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r15, r0
 adds r11, #1
 mov r22, r21
 mov r21, r22
 adds r21, #1
 rdbyte r22, r22
 cmps r15, r22 wz
 if_z jmp #\C__doscan_107
 mov r22, ##-1
 cmps r15, r22 wz
 if_z jmp #\C__doscan_128
 mov r2, r23
 mov r3, r15
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_ungetc
 add SP, #4
C__doscan_128
 subs r11, #1
 jmp #\@C__doscan_108
C__doscan_124
 adds r21, #1
 rdbyte r22, r21
 cmps r22,  #37 wz
 if_nz jmp #\C__doscan_130
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r15, r0
 adds r11, #1
 cmps r15,  #37 wz
 if_nz jmp #\C__doscan_108
 adds r21, #1
 jmp #\@C__doscan_107
C__doscan_130
 mov r9, #0
 rdbyte r22, r21
 cmps r22,  #42 wz
 if_nz jmp #\C__doscan_134
 adds r21, #1
 mov r22, ##2048
 or r9, r22
C__doscan_134
 rdbyte r22, r21
 subs r22, #48
 cmp r22,  #10 wcz
 if_ae jmp #\C__doscan_136
 or r9, #256
 mov r13, #0
 jmp #\@C__doscan_141
C__doscan_138
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #10

  stalli

 qmul r20, r13
 getqx r0

  allowi

 rdbyte r22, r22
 add r22, r0
 mov r13, r22
 sub r13, #48
C__doscan_141
 rdbyte r22, r21
 subs r22, #48
 cmp r22,  #10 wcz
 if_b jmp #\C__doscan_138
C__doscan_136
 rdbyte r22, r21
 mov RI, ##-804
 adds RI, FP
 wrlong r22, RI
 mov r22, ##-804
 adds r22, FP
 rdlong r22, r22
 mov r20, #104
 cmps r22, r20 wz
 if_z jmp #\C__doscan_145
 cmps r22, r20 wcz
 if_a jmp #\C__doscan_149
 mov r22, ##-804
 adds r22, FP
 rdlong r22, r22
 cmps r22,  #76 wz
 if_z jmp #\C__doscan_147
 jmp #\@C__doscan_142
C__doscan_149
 mov r22, ##-804
 adds r22, FP
 rdlong r22, r22
 cmps r22,  #108 wz
 if_z jmp #\C__doscan_146
 jmp #\@C__doscan_142
C__doscan_145
 or r9, #32
 adds r21, #1
 jmp #\@C__doscan_143
C__doscan_146
 or r9, #64
 adds r21, #1
 jmp #\@C__doscan_143
C__doscan_147
 or r9, #128
 adds r21, #1
C__doscan_142
C__doscan_143
 rdbyte r7, r21
 cmps r7,  #99 wz
 if_z jmp #\C__doscan_150
 cmps r7,  #91 wz
 if_z jmp #\C__doscan_150
 cmps r7,  #110 wz
 if_z jmp #\C__doscan_150
C__doscan_152
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r15, r0
 adds r11, #1
 mov r22, ##@C___ctype+1
 adds r22, r15
 rdbyte r22, r22
 and r22, #8
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_152
 mov r22, ##-1
 cmps r15, r22 wz
 if_nz jmp #\C__doscan_151
 jmp #\@C__doscan_108
C__doscan_150
 cmps r7,  #110 wz
 if_z jmp #\C__doscan_158
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r15, r0
 mov r22, ##-1
 cmps r15, r22 wz
 if_nz jmp #\C__doscan_160
 jmp #\@C__doscan_108
C__doscan_160
 adds r11, #1
C__doscan_158
C__doscan_151
 cmps r7,  #88 wcz
 if_b jmp #\C__doscan_302
 cmps r7,  #105 wcz
 if_a jmp #\C__doscan_303
 mov r22, r7
 shl r22, #2
 mov r20, ##@C__doscan_304_L000306-352
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C__doscan_302
 cmps r7,  #69 wz
 if_z jmp #\C__doscan_286
 cmps r7,  #71 wz
 if_z jmp #\C__doscan_286
 jmp #\@C__doscan_162
C__doscan_303
 cmps r7,  #110 wcz
 if_b jmp #\C__doscan_162
 cmps r7,  #120 wcz
 if_a jmp #\C__doscan_162
 mov r22, r7
 shl r22, #2
 mov r20, ##@C__doscan_308_L000310-440
 adds r22, r20
 rdlong RI, r22
 jmp RI
DAT
C__doscan_162
 mov r22, FP
 sub r22, #-(-264)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_167
 mov r22, ##-1
 cmps r15, r22 wz
 if_z jmp #\C__doscan_165
C__doscan_167
 mov r22, FP
 sub r22, #-(-268)
 rdlong r22, r22
 mov RI, ##-808
 adds RI, FP
 wrlong r22, RI
 jmp #\@C__doscan_166
C__doscan_165
 mov r22, ##-1
 mov RI, ##-808
 adds RI, FP
 wrlong r22, RI
C__doscan_166
 mov r22, ##-808
 adds r22, FP
 rdlong r0, r22
 jmp #\@C__doscan_103
C__doscan_168
 mov r22, ##2048
 and r22, r9
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_163
 mov r22, r9
 and r22, #32
 cmps r22,  #0 wz
 if_z jmp #\C__doscan_171
 mov r22, r19
 adds r22, #4
 mov r19, r22
 mov r20, ##-4
 adds r22, r20
 rdlong r22, r22
 mov r20, r11
 wrword r20, r22
 jmp #\@C__doscan_163
C__doscan_171
 mov r22, r9
 and r22, #64
 cmps r22,  #0 wz
 if_z jmp #\C__doscan_173
 mov r22, r19
 adds r22, #4
 mov r19, r22
 mov r20, ##-4
 adds r22, r20
 rdlong r22, r22
 wrlong r11, r22
 jmp #\@C__doscan_163
C__doscan_173
 mov r22, r19
 adds r22, #4
 mov r19, r22
 mov r20, ##-4
 adds r22, r20
 rdlong r22, r22
 wrlong r11, r22
 jmp #\@C__doscan_163
C__doscan_175
C__doscan_176
 mov r22, r9
 and r22, #256
 cmps r22,  #0 wz
 if_z jmp #\C__doscan_179
 mov r22, ##512
 cmp r13, r22 wcz
 if_be jmp #\C__doscan_177
C__doscan_179
 mov r13, ##512
C__doscan_177
 cmp r13,  #0 wz
 if_nz jmp #\C__doscan_180
 mov r22, FP
 sub r22, #-(-268)
 rdlong r0, r22
 jmp #\@C__doscan_103
C__doscan_180
 mov r2, FP
 adds r2, ##(-784)
 mov r3, FP
 adds r3, ##(-788)
 mov r4, r13
 mov r22, r7
 mov r5, r22
 and r5, cviu_m1
 sub SP, #16
 mov RI, r23
 wrlong RI, --PTRA
 mov RI, r15
 wrlong RI, --PTRA
 mov BC, #24
 add SP, #4
 calld PA,#CALA
 long @C_sh1s_65fa5714_o_collect_L000003
 add SP, #20
 mov r17, r0
 mov r20, ##-784
 adds r20, FP
 cmp r17, r20 wcz
 if_b jmp #\C__doscan_185
 cmp r17, r20 wz
 if_nz jmp #\C__doscan_182
 rdbyte r22, r17
 cmps r22,  #45 wz
 if_z jmp #\C__doscan_185
 cmps r22,  #43 wz
 if_nz jmp #\C__doscan_182
C__doscan_185
 mov r22, FP
 sub r22, #-(-268)
 rdlong r0, r22
 jmp #\@C__doscan_103
C__doscan_182
 mov r22, r17
 mov r20, ##-784
 adds r20, FP
 sub r22, r20
 adds r11, r22
 mov r22, ##2048
 and r22, r9
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_163
 cmps r7,  #100 wz
 if_z jmp #\C__doscan_190
 cmps r7,  #105 wz
 if_nz jmp #\C__doscan_188
C__doscan_190
 mov RI, FP
 adds RI, ##(-788)
 rdlong r2, RI
 mov r3, FP
 adds r3, ##(-796)
 mov r4, FP
 adds r4, ##(-784)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_strtol
 add SP, #8
 mov r22, r0
 mov RI, ##-792
 adds RI, FP
 wrlong r22, RI
 jmp #\@C__doscan_189
C__doscan_188
 mov RI, FP
 adds RI, ##(-788)
 rdlong r2, RI
 mov r3, FP
 adds r3, ##(-796)
 mov r4, FP
 adds r4, ##(-784)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_strtoul
 add SP, #8
 mov RI, ##-792
 adds RI, FP
 wrlong r0, RI
C__doscan_189
 mov r22, r9
 and r22, #64
 cmps r22,  #0 wz
 if_z jmp #\C__doscan_191
 mov r22, r19
 adds r22, #4
 mov r19, r22
 mov r20, ##-4
 adds r22, r20
 rdlong r22, r22
 mov r20, ##-792
 adds r20, FP
 rdlong r20, r20
 wrlong r20, r22
 jmp #\@C__doscan_163
C__doscan_191
 mov r22, r9
 and r22, #32
 cmps r22,  #0 wz
 if_z jmp #\C__doscan_193
 mov r22, r19
 adds r22, #4
 mov r19, r22
 mov r20, ##-4
 adds r22, r20
 rdlong r22, r22
 mov r20, ##-792
 adds r20, FP
 rdlong r20, r20
 wrword r20, r22
 jmp #\@C__doscan_163
C__doscan_193
 mov r22, r19
 adds r22, #4
 mov r19, r22
 mov r20, ##-4
 adds r22, r20
 rdlong r22, r22
 mov r20, ##-792
 adds r20, FP
 rdlong r20, r20
 wrlong r20, r22
 jmp #\@C__doscan_163
C__doscan_195
 mov r22, r9
 and r22, #256
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_196
 mov r13, #1
C__doscan_196
 mov r22, ##2048
 and r22, r9
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_198
 mov r22, r19
 adds r22, #4
 mov r19, r22
 mov r20, ##-4
 adds r22, r20
 rdlong r17, r22
C__doscan_198
 cmp r13,  #0 wz
 if_nz jmp #\C__doscan_203
 mov r22, FP
 sub r22, #-(-268)
 rdlong r0, r22
 jmp #\@C__doscan_103
C__doscan_202
 mov r22, ##2048
 and r22, r9
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_205
 mov r22, r17
 mov r17, r22
 adds r17, #1
 mov r20, r15
 wrbyte r20, r22
C__doscan_205
 mov r22, r13
 sub r22, #1
 mov r13, r22
 cmp r22,  #0 wz
 if_z jmp #\C__doscan_207
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r15, r0
 adds r11, #1
C__doscan_207
C__doscan_203
 cmp r13,  #0 wz
 if_z jmp #\C__doscan_209
 mov r22, ##-1
 cmps r15, r22 wz
 if_nz jmp #\C__doscan_202
C__doscan_209
 cmp r13,  #0 wz
 if_z jmp #\C__doscan_163
 mov r22, ##-1
 cmps r15, r22 wz
 if_z jmp #\C__doscan_212
 mov r2, r23
 mov r3, r15
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_ungetc
 add SP, #4
C__doscan_212
 subs r11, #1
 jmp #\@C__doscan_163
C__doscan_214
 mov r22, r9
 and r22, #256
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_215
 mov r13, ##$ffff
C__doscan_215
 mov r22, ##2048
 and r22, r9
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_217
 mov r22, r19
 adds r22, #4
 mov r19, r22
 mov r20, ##-4
 adds r22, r20
 rdlong r17, r22
C__doscan_217
 cmp r13,  #0 wz
 if_nz jmp #\C__doscan_222
 mov r22, FP
 sub r22, #-(-268)
 rdlong r0, r22
 jmp #\@C__doscan_103
C__doscan_221
 mov r22, ##2048
 and r22, r9
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_225
 mov r22, r17
 mov r17, r22
 adds r17, #1
 mov r20, r15
 wrbyte r20, r22
C__doscan_225
 mov r22, r13
 sub r22, #1
 mov r13, r22
 cmp r22,  #0 wz
 if_z jmp #\C__doscan_227
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r15, r0
 adds r11, #1
C__doscan_227
C__doscan_222
 cmp r13,  #0 wz
 if_z jmp #\C__doscan_230
 mov r22, ##-1
 cmps r15, r22 wz
 if_z jmp #\C__doscan_230
 mov r22, ##@C___ctype+1
 adds r22, r15
 rdbyte r22, r22
 and r22, #8
 cmps r22,  #0 wz
 if_z jmp #\C__doscan_221
C__doscan_230
 mov r22, ##2048
 and r22, r9
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_231
 mov r22, #0
 wrbyte r22, r17
C__doscan_231
 cmp r13,  #0 wz
 if_z jmp #\C__doscan_163
 mov r22, ##-1
 cmps r15, r22 wz
 if_z jmp #\C__doscan_235
 mov r2, r23
 mov r3, r15
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_ungetc
 add SP, #4
C__doscan_235
 subs r11, #1
 jmp #\@C__doscan_163
C__doscan_237
 mov r22, r9
 and r22, #256
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_238
 mov r13, ##$ffff
C__doscan_238
 cmp r13,  #0 wz
 if_nz jmp #\C__doscan_240
 mov r22, FP
 sub r22, #-(-268)
 rdlong r0, r22
 jmp #\@C__doscan_103
C__doscan_240
 mov r22, r21
 adds r22, #1
 mov r21, r22
 rdbyte r22, r22
 cmps r22,  #94 wz
 if_nz jmp #\C__doscan_242
 mov r22, #1
 mov RI, FP
 sub RI, #-(-272)
 wrlong r22, RI
 adds r21, #1
 jmp #\@C__doscan_243
C__doscan_242
 mov r22, #0
 mov RI, FP
 sub RI, #-(-272)
 wrlong r22, RI
C__doscan_243
 mov r17, FP
 sub r17, #-(-260)
 jmp #\@C__doscan_247
C__doscan_244
 mov r22, #0
 wrbyte r22, r17
 adds r17, #1
C__doscan_247
 mov r22, r17
 mov r20, FP
 sub r20, #-(-4)
 cmp r22, r20 wcz
 if_b jmp #\C__doscan_244
 rdbyte r22, r21
 cmps r22,  #93 wz
 if_nz jmp #\C__doscan_252
 mov r22, r21
 mov r21, r22
 adds r21, #1
 rdbyte r22, r22
 mov r20, FP
 sub r20, #-(-260)
 adds r22, r20
 mov r20, #1
 wrbyte r20, r22
 jmp #\@C__doscan_252
C__doscan_251
 mov r22, r21
 mov r21, r22
 adds r21, #1
 rdbyte r22, r22
 mov r20, FP
 sub r20, #-(-260)
 adds r22, r20
 mov r20, #1
 wrbyte r20, r22
 rdbyte r22, r21
 cmps r22,  #45 wz
 if_nz jmp #\C__doscan_254
 adds r21, #1
 rdbyte r22, r21
 cmps r22,  #0 wz
 if_z jmp #\C__doscan_256
 cmps r22,  #93 wz
 if_z jmp #\C__doscan_256
 mov r20, ##-2
 adds r20, r21
 rdbyte r20, r20
 cmps r22, r20 wcz
 if_b jmp #\C__doscan_256
 mov r22, ##-2
 adds r22, r21
 rdbyte r22, r22
 adds r22, #1
 mov RI, ##-812
 adds RI, FP
 wrlong r22, RI
 jmp #\@C__doscan_261
C__doscan_258
 mov r22, ##-812
 adds r22, FP
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-260)
 adds r22, r20
 mov r20, #1
 wrbyte r20, r22
 mov r22, ##-812
 adds r22, FP
 rdlong r22, r22
 adds r22, #1
 mov RI, ##-812
 adds RI, FP
 wrlong r22, RI
C__doscan_261
 mov r22, ##-812
 adds r22, FP
 rdlong r22, r22
 rdbyte r20, r21
 cmps r22, r20 wcz
 if_be jmp #\C__doscan_258
 adds r21, #1
 jmp #\@C__doscan_257
C__doscan_256
 mov r22, #1
 mov RI, FP
 sub RI, #-(-215)
 wrbyte r22, RI
C__doscan_257
C__doscan_254
C__doscan_252
 rdbyte r22, r21
 cmps r22,  #0 wz
 if_z jmp #\C__doscan_263
 cmps r22,  #93 wz
 if_nz jmp #\C__doscan_251
C__doscan_263
 mov r22, #0
 rdbyte r20, r21
 cmps r20, r22 wz
 if_z jmp #\C__doscan_266
 mov r20, FP
 sub r20, #-(-260)
 adds r20, r15
 rdbyte r20, r20
 mov r18, FP
 sub r18, #-(-272)
 rdlong r18, r18
 xor r20, r18
 cmps r20, r22 wz
 if_nz jmp #\C__doscan_264
C__doscan_266
 mov r22, ##-1
 cmps r15, r22 wz
 if_z jmp #\C__doscan_267
 mov r2, r23
 mov r3, r15
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_ungetc
 add SP, #4
C__doscan_267
 mov r22, FP
 sub r22, #-(-268)
 rdlong r0, r22
 jmp #\@C__doscan_103
C__doscan_264
 mov r22, ##2048
 and r22, r9
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_269
 mov r22, r19
 adds r22, #4
 mov r19, r22
 mov r20, ##-4
 adds r22, r20
 rdlong r17, r22
C__doscan_269
C__doscan_271
 mov r22, ##2048
 and r22, r9
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_274
 mov r22, r17
 mov r17, r22
 adds r17, #1
 mov r20, r15
 wrbyte r20, r22
C__doscan_274
 mov r22, r13
 sub r22, #1
 mov r13, r22
 cmp r22,  #0 wz
 if_z jmp #\C__doscan_276
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r15, r0
 adds r11, #1
C__doscan_276
 cmp r13,  #0 wz
 if_z jmp #\C__doscan_279
 mov r22, ##-1
 cmps r15, r22 wz
 if_z jmp #\C__doscan_279
 mov r22, FP
 sub r22, #-(-260)
 adds r22, r15
 rdbyte r22, r22
 mov r20, FP
 sub r20, #-(-272)
 rdlong r20, r20
 xor r22, r20
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_271
C__doscan_279
 cmp r13,  #0 wz
 if_z jmp #\C__doscan_280
 mov r22, ##-1
 cmps r15, r22 wz
 if_z jmp #\C__doscan_282
 mov r2, r23
 mov r3, r15
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_ungetc
 add SP, #4
C__doscan_282
 subs r11, #1
C__doscan_280
 mov r22, ##2048
 and r22, r9
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_163
 mov r22, #0
 wrbyte r22, r17
 jmp #\@C__doscan_163
C__doscan_286
 mov r22, r9
 and r22, #256
 cmps r22,  #0 wz
 if_z jmp #\C__doscan_289
 mov r22, ##512
 cmp r13, r22 wcz
 if_be jmp #\C__doscan_287
C__doscan_289
 mov r13, ##512
C__doscan_287
 cmp r13,  #0 wz
 if_nz jmp #\C__doscan_290
 mov r22, FP
 sub r22, #-(-268)
 rdlong r0, r22
 jmp #\@C__doscan_103
C__doscan_290
 mov r2, FP
 adds r2, ##(-784)
 mov r3, r13
 mov r4, r23
 mov r5, r15
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_sh1s1_65fa5714_f_collect_L000054
 add SP, #12
 mov r17, r0
 mov r20, ##-784
 adds r20, FP
 cmp r17, r20 wcz
 if_b jmp #\C__doscan_295
 cmp r17, r20 wz
 if_nz jmp #\C__doscan_292
 rdbyte r22, r17
 cmps r22,  #45 wz
 if_z jmp #\C__doscan_295
 cmps r22,  #43 wz
 if_nz jmp #\C__doscan_292
C__doscan_295
 mov r22, FP
 sub r22, #-(-268)
 rdlong r0, r22
 jmp #\@C__doscan_103
C__doscan_292
 mov r22, r17
 mov r20, ##-784
 adds r20, FP
 sub r22, r20
 adds r11, r22
 mov r22, ##2048
 and r22, r9
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_163
 mov r2, FP
 adds r2, ##(-796)
 mov r3, FP
 adds r3, ##(-784)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strtod
 add SP, #4
 mov RI, ##-800
 adds RI, FP
 wrlong r0, RI
 mov r22, r9
 and r22, #128
 cmps r22,  #0 wz
 if_z jmp #\C__doscan_298
 mov r22, r19
 adds r22, #4
 mov r19, r22
 mov r20, ##-4
 adds r22, r20
 rdlong r22, r22
 mov r20, ##-800
 adds r20, FP
 rdlong r20, r20
 wrlong r20, r22
 jmp #\@C__doscan_163
C__doscan_298
 mov r22, r9
 and r22, #64
 cmps r22,  #0 wz
 if_z jmp #\C__doscan_300
 mov r22, r19
 adds r22, #4
 mov r19, r22
 mov r20, ##-4
 adds r22, r20
 rdlong r22, r22
 mov r20, ##-800
 adds r20, FP
 rdlong r20, r20
 wrlong r20, r22
 jmp #\@C__doscan_163
C__doscan_300
 mov r22, r19
 adds r22, #4
 mov r19, r22
 mov r20, ##-4
 adds r22, r20
 rdlong r22, r22
 mov r20, ##-800
 adds r20, FP
 rdlong r20, r20
 wrlong r20, r22
C__doscan_163
 mov r22, FP
 sub r22, #-(-264)
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 sub RI, #-(-264)
 wrlong r22, RI
 mov r22, ##2048
 and r22, r9
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_312
 cmps r7,  #110 wz
 if_z jmp #\C__doscan_312
 mov r22, FP
 sub r22, #-(-268)
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 sub RI, #-(-268)
 wrlong r22, RI
C__doscan_312
 adds r21, #1
C__doscan_107
 jmp #\@C__doscan_106
C__doscan_108
 mov r22, FP
 sub r22, #-(-264)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C__doscan_317
 mov r22, ##-1
 cmps r15, r22 wz
 if_z jmp #\C__doscan_315
C__doscan_317
 mov r22, FP
 sub r22, #-(-268)
 rdlong r22, r22
 mov RI, ##-804
 adds RI, FP
 wrlong r22, RI
 jmp #\@C__doscan_316
C__doscan_315
 mov r22, ##-1
 mov RI, ##-804
 adds RI, FP
 wrlong r22, RI
C__doscan_316
 mov r22, ##-804
 adds r22, FP
 rdlong r0, r22
C__doscan_103
 calld PA,#POPM
 add SP, ##808
 calld PA,#RETF
' Catalina Import __ctype
' Catalina Import strtoul
' Catalina Import strtol
' Catalina Import strtod
' Catalina Import ungetc
' Catalina Import getc
DAT
 alignl
C_s7j8_65fa5712_wait100ms_L000003
 calld PA,#NEWF
 calld PA,#PSHM
 long $540000
 mov BC, #0
 calld PA,#CALA
 long @C__cnt
 mov r22, r0
 mov BC, #0
 calld PA,#CALA
 long @C__clockfreq
 mov r20, r0
 mov r18, #10

  stalli

 qdiv r20, r18
 getqx r0

  allowi

 mov r2, r22
 add r2, r0
 mov BC, #4
 calld PA,#CALA
 long @C__waitcnt
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export DFS_ReadSector
 alignl
C_D_F_S__R_eadS_ector
 calld PA,#NEWF
 calld PA,#PSHM
 long $eaa000
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r15, #0
C_D_F_S__R_eadS_ector_6
 mov r2, r19
 mov r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_sd_sectread
 add SP, #4
 mov r13, r0
 cmps r0,  #0 wz
 if_nz jmp #\C_D_F_S__R_eadS_ector_10
 jmp #\@C_D_F_S__R_eadS_ector_8
C_D_F_S__R_eadS_ector_10
 mov BC, #0
 calld PA,#CALA
 long @C_s7j8_65fa5712_wait100ms_L000003
 adds r15, #1
 cmps r15,  #10 wcz
 if_b jmp #\C_D_F_S__R_eadS_ector_6
C_D_F_S__R_eadS_ector_8
 mov r0, r13
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import sd_sectread
' Catalina Import _cnt
' Catalina Import _waitcnt
' Catalina Import _clockfreq
DAT
' Catalina Export DFS_ReadFile
 alignl
C_D_F_S__R_eadF_ile
 calld PA,#NEWF
 sub SP, #44
 calld PA,#PSHM
 long $ffaa00
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r15, #0
 mov r13, #0
 mov r11, #0
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #16
 rdlong r20, r20
 adds r22, #24
 rdlong r22, r22
 mov RI, r20
 sub RI, r22
 mov r22, RI
 cmp r17, r22 wcz
 if_be jmp #\C_D_F_S__R_eadF_ile_5
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #16
 rdlong r20, r20
 adds r22, #24
 rdlong r22, r22
 mov r17, r20
 sub r17, r22
C_D_F_S__R_eadF_ile_5
 mov r15, r17
 mov r22, #0
 wrlong r22, r19
 jmp #\@C_D_F_S__R_eadF_ile_8
C_D_F_S__R_eadF_ile_7
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r22
 mov r18, r20
 adds r18, #20
 rdbyte r18, r18
 mov r2, r18
 shl r2, #9
 mov r16, r22
 adds r16, #24
 rdlong r16, r16
 mov r3, r16
 mov r4, FP
 sub r4, #-(-16)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_div
 add SP, #8
 mov r2, ##512
 mov RI, FP
 sub RI, #-(-12)
 rdlong r3, RI
 mov r4, FP
 sub r4, #-(-24)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_div
 add SP, #8
 adds r20, #48
 rdlong r20, r20
 adds r22, #20
 rdlong r22, r22
 sub r22, #2

  stalli

 qmul r22, r18
 getqx r0

  allowi

 mov r22, r20
 add r22, r0
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20
 mov r11, r22
 add r11, r20
 mov r2, ##512
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #24
 rdlong r22, r22
 mov r3, r22
 mov r4, FP
 sub r4, #-(-32)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_div
 add SP, #8
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_D_F_S__R_eadF_ile_11
 mov r2, #1
 mov r3, r11
 mov r4, r23
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 mov r13, r0
 mov r22, ##512
 mov r2, r22
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 adds r20, #24
 rdlong r20, r20
 mov r3, r20
 mov r4, FP
 sub r4, #-(-40)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_div
 add SP, #8
 mov r20, FP
 sub r20, #-(-36)
 rdlong r20, r20
 subs r22, r20
 mov r9, r22
 mov r22, r9
 and r22, cviu_m2
 cmp r15, r22 wcz
 if_b jmp #\C_D_F_S__R_eadF_ile_15
 mov r22, r9
 and r22, cviu_m2
 mov r2, r22
 mov r20, ##512
 subs r22, r20
 neg r22, r22
 mov r3, r22
 adds r3, r23
 mov r4, r21
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcpy
 add SP, #8
 mov r22, r9
 and r22, cviu_m2
 mov r20, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r20, RI
 adds r21, r22
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #24
 rdlong r18, r22
 add r20, r18
 wrlong r20, r22
 mov r22, r9
 and r22, cviu_m2
 sub r15, r22
 jmp #\@C_D_F_S__R_eadF_ile_12
C_D_F_S__R_eadF_ile_15
 mov r2, r15
 mov r22, ##512
 mov r20, r9
 and r20, cviu_m2
 subs r22, r20
 mov r3, r22
 adds r3, r23
 mov r4, r21
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcpy
 add SP, #8
 adds r21, r15
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #24
 rdlong r20, r22
 add r20, r15
 wrlong r20, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r15, RI
 mov r15, #0
 jmp #\@C_D_F_S__R_eadF_ile_12
C_D_F_S__R_eadF_ile_11
 mov r22, ##512
 cmp r15, r22 wcz
 if_b jmp #\C_D_F_S__R_eadF_ile_17
 mov r2, #1
 mov r3, r11
 mov r4, r21
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 mov r13, r0
 mov r22, ##512
 sub r15, r22
 mov r20, ##512
 adds r21, r20
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 adds r20, #24
 rdlong r18, r20
 add r22, r18
 wrlong r22, r20
 mov r22, ##512
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_D_F_S__R_eadF_ile_18
C_D_F_S__R_eadF_ile_17
 mov r2, #1
 mov r3, r11
 mov r4, r23
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 mov r13, r0
 mov r2, r15
 mov r3, r23
 mov r4, r21
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcpy
 add SP, #8
 adds r21, r15
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #24
 rdlong r20, r22
 add r20, r15
 wrlong r20, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r15, RI
 mov r15, #0
C_D_F_S__R_eadF_ile_18
C_D_F_S__R_eadF_ile_12
 rdlong r22, r19
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 add r22, r20
 wrlong r22, r19
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #20
 rdbyte r20, r20
 mov r2, r20
 shl r2, #9
 adds r22, #24
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 sub r22, r20
 mov r3, r22
 mov r4, FP
 sub r4, #-(-40)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_div
 add SP, #8
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #20
 rdbyte r20, r20
 mov r2, r20
 shl r2, #9
 adds r22, #24
 rdlong r22, r22
 mov r3, r22
 mov r4, FP
 sub r4, #-(-48)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_div
 add SP, #8
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-48)
 rdlong r20, r20
 cmps r22, r20 wz
 if_z jmp #\C_D_F_S__R_eadF_ile_19
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r22, r22
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_D_F_S__R_eadF_ile_21
 mov r0, #7
 jmp #\@C_D_F_S__R_eadF_ile_4
C_D_F_S__R_eadF_ile_21
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, #1
 rdlong r18, r22
 adds r18, #1
 rdbyte r18, r18
 cmps r18, r20 wz
 if_nz jmp #\C_D_F_S__R_eadF_ile_26
 adds r22, #20
 rdlong r22, r22
 mov r20, ##$fff8
 cmp r22, r20 wcz
 if_ae jmp #\C_D_F_S__R_eadF_ile_25
C_D_F_S__R_eadF_ile_26
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #1
 rdbyte r20, r20
 cmps r20,  #2 wz
 if_nz jmp #\C_D_F_S__R_eadF_ile_23
 adds r22, #20
 rdlong r22, r22
 mov r20, ##$ffffff8
 cmp r22, r20 wcz
 if_b jmp #\C_D_F_S__R_eadF_ile_23
C_D_F_S__R_eadF_ile_25
 mov r13, #1
 jmp #\@C_D_F_S__R_eadF_ile_24
C_D_F_S__R_eadF_ile_23
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #20
 rdlong r2, r20
 mov r3, FP
 sub r3, #-(-8)
 mov r4, r23
 rdlong r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__G_etF_A_T_
 add SP, #12
 mov r22, r0
 wrlong r22, r20
C_D_F_S__R_eadF_ile_24
C_D_F_S__R_eadF_ile_19
C_D_F_S__R_eadF_ile_8
 mov r22, #0
 cmp r15, r22 wz
 if_z jmp #\C_D_F_S__R_eadF_ile_27
 cmp r13, r22 wz
 if_z jmp #\C_D_F_S__R_eadF_ile_7
C_D_F_S__R_eadF_ile_27
 mov r0, r13
C_D_F_S__R_eadF_ile_4
 calld PA,#POPM
 add SP, #44
 calld PA,#RETF
' Catalina Import DFS_GetFAT
' Catalina Import DFS_ReadSector
' Catalina Import div
' Catalina Import memcpy
DAT
' Catalina Export DFS_Seek
 alignl
C_D_F_S__S_eek
 calld PA,#NEWF
 sub SP, #44
 calld PA,#PSHM
 long $fe0000
 mov r23, r4
 mov r21, r3
 mov r19, r2
 mov r17, #0
 mov r22, r23
 adds r22, #24
 rdlong r22, r22
 cmp r21, r22 wz
 if_nz jmp #\C_D_F_S__S_eek_5
 jmp #\@C_D_F_S__S_eek_4
C_D_F_S__S_eek_5
 mov r22, r23
 adds r22, #16
 rdlong r22, r22
 cmp r21, r22 wcz
 if_be jmp #\C_D_F_S__S_eek_7
 mov r22, r23
 adds r22, #16
 rdlong r21, r22
C_D_F_S__S_eek_7
 cmp r21,  #0 wz
 if_nz jmp #\C_D_F_S__S_eek_9
 mov r22, r23
 adds r22, #20
 mov r20, r23
 adds r20, #12
 rdlong r20, r20
 wrlong r20, r22
 mov r22, r23
 adds r22, #24
 mov r20, #0
 wrlong r20, r22
 jmp #\@C_D_F_S__S_eek_4
C_D_F_S__S_eek_9
 mov r22, r23
 adds r22, #24
 rdlong r22, r22
 cmp r21, r22 wcz
 if_ae jmp #\C_D_F_S__S_eek_11
 mov r22, r23
 adds r22, #20
 mov r20, r23
 adds r20, #12
 rdlong r20, r20
 wrlong r20, r22
 mov r22, r23
 adds r22, #24
 mov r20, #0
 wrlong r20, r22
C_D_F_S__S_eek_11
 rdlong r22, r23
 adds r22, #20
 rdbyte r22, r22
 mov r2, r22
 shl r2, #9
 mov r22, r23
 adds r22, #24
 rdlong r22, r22
 mov r3, r22
 mov r4, FP
 sub r4, #-(-16)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_div
 add SP, #8
 rdlong r22, r23
 adds r22, #20
 rdbyte r22, r22
 mov r2, r22
 shl r2, #9
 mov r22, r23
 adds r22, #24
 rdlong r22, r22
 add r22, r21
 mov r3, r22
 mov r4, FP
 sub r4, #-(-24)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_div
 add SP, #8
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20
 cmps r22, r20 wz
 if_nz jmp #\C_D_F_S__S_eek_13
 mov r22, r23
 adds r22, #24
 wrlong r21, r22
 jmp #\@C_D_F_S__S_eek_14
C_D_F_S__S_eek_13
 rdlong r22, r23
 adds r22, #20
 rdbyte r22, r22
 mov r2, r22
 shl r2, #9
 mov r22, r23
 adds r22, #24
 rdlong r20, r22
 mov r3, r20
 mov r4, FP
 sub r4, #-(-32)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_div
 add SP, #8
 mov r20, FP
 sub r20, #-(-32)
 rdlong r20, r20
 rdlong r18, r23
 adds r18, #20
 rdbyte r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, r0
 shl r20, #9
 wrlong r20, r22
 rdlong r22, r23
 adds r22, #20
 rdbyte r22, r22
 mov r2, r22
 shl r2, #9
 mov r3, r21
 mov r4, FP
 sub r4, #-(-40)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_div
 add SP, #8
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 mov r17, r22
 jmp #\@C_D_F_S__S_eek_16
C_D_F_S__S_eek_15
 mov r22, r23
 adds r22, #20
 rdlong r2, r22
 mov r3, FP
 sub r3, #-(-8)
 mov r4, r19
 rdlong r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__G_etF_A_T_
 add SP, #12
 mov r20, r0
 wrlong r20, r22
 mov r22, r23
 adds r22, #20
 rdlong r22, r22
 mov r20, ##$ffffff7
 cmp r22, r20 wz
 if_nz jmp #\C_D_F_S__S_eek_18
 mov r22, r23
 adds r22, #24
 mov r20, #0
 wrlong r20, r22
 mov r22, r23
 adds r22, #20
 mov r20, r23
 adds r20, #12
 rdlong r20, r20
 wrlong r20, r22
 jmp #\@C_D_F_S__S_eek_4
C_D_F_S__S_eek_18
 mov r22, r23
 adds r22, #24
 rdlong r20, r22
 rdlong r18, r23
 adds r18, #20
 rdbyte r18, r18
 shl r18, #9
 add r20, r18
 wrlong r20, r22
C_D_F_S__S_eek_16
 rdlong r22, r23
 adds r22, #20
 rdbyte r22, r22
 mov r2, r22
 shl r2, #9
 mov r22, r23
 adds r22, #24
 rdlong r22, r22
 mov r3, r22
 mov r4, FP
 sub r4, #-(-48)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_div
 add SP, #8
 mov r22, FP
 sub r22, #-(-48)
 rdlong r22, r22
 mov r20, r17
 and r20, cviu_m2
 cmps r22, r20 wz
 if_nz jmp #\C_D_F_S__S_eek_15
 mov r22, r23
 adds r22, #24
 wrlong r21, r22
C_D_F_S__S_eek_14
C_D_F_S__S_eek_4
 calld PA,#POPM
 add SP, #44
 calld PA,#RETF
' Catalina Import DFS_GetFAT
' Catalina Import div
DAT
' Catalina Export DFS_SetFAT
 alignl
C_D_F_S__S_etF_A_T_
 calld PA,#NEWF
 sub SP, #16
 calld PA,#PSHM
 long $fea800
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r15, #0
 mov r11, #0
 mov r13, #0
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_D_F_S__S_etF_A_T__5
 mov r0, #7
 jmp #\@C_D_F_S__S_etF_A_T__4
C_D_F_S__S_etF_A_T__5
 mov r22, #1
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 adds r20, #1
 rdbyte r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C_D_F_S__S_etF_A_T__7
 mov r15, r19
 shl r15, #1
 mov r22, ##$ffff
 and r17, r22
 jmp #\@C_D_F_S__S_etF_A_T__8
C_D_F_S__S_etF_A_T__7
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #2 wz
 if_nz jmp #\C_D_F_S__S_etF_A_T__9
 mov r15, r19
 shl r15, #2
 mov r22, ##$fffffff
 and r17, r22
 jmp #\@C_D_F_S__S_etF_A_T__10
C_D_F_S__S_etF_A_T__9
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__S_etF_A_T__4
C_D_F_S__S_etF_A_T__10
C_D_F_S__S_etF_A_T__8
 mov r2, ##512
 mov r3, r15
 mov r4, FP
 sub r4, #-(-12)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_ldiv
 add SP, #8
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 adds r20, #40
 rdlong r20, r20
 mov r11, r22
 add r11, r20
 rdlong r22, r21
 cmp r11, r22 wz
 if_z jmp #\C_D_F_S__S_etF_A_T__11
 mov r2, #1
 mov r3, r11
 mov r4, r23
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__S_etF_A_T__13
 mov r22, #0
 wrlong r22, r21
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__S_etF_A_T__4
C_D_F_S__S_etF_A_T__13
 wrlong r11, r21
C_D_F_S__S_etF_A_T__11
 mov r2, ##512
 mov r3, r15
 mov r4, FP
 sub r4, #-(-20)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_ldiv
 add SP, #8
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r15, r22
 mov r22, #1
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 adds r20, #1
 rdbyte r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C_D_F_S__S_etF_A_T__16
 mov r22, r15
 adds r22, r23
 mov r20, r17
 and r20, #255
 wrbyte r20, r22
 mov r22, r15
 add r22, #1
 adds r22, r23
 mov r20, ##$ff00
 and r20, r17
 shr r20, #8
 wrbyte r20, r22
 mov r2, #1
 rdlong r3, r21
 mov r4, r23
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__W_riteS_ector
 add SP, #12
 mov r13, r0
 cmp r13,  #0 wz
 if_nz jmp #\C_D_F_S__S_etF_A_T__17
 mov r2, #1
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r21
 mov r18, r22
 adds r18, #28
 rdlong r18, r18
 mov r3, r20
 add r3, r18
 mov r4, r23
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__W_riteS_ector
 add SP, #12
 mov r13, r0
 jmp #\@C_D_F_S__S_etF_A_T__17
C_D_F_S__S_etF_A_T__16
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #2 wz
 if_nz jmp #\C_D_F_S__S_etF_A_T__20
 mov r22, r15
 adds r22, r23
 mov r20, r17
 and r20, #255
 wrbyte r20, r22
 mov r22, r15
 add r22, #1
 adds r22, r23
 mov r20, ##$ff00
 and r20, r17
 shr r20, #8
 wrbyte r20, r22
 mov r22, r15
 add r22, #2
 adds r22, r23
 mov r20, ##$ff0000
 and r20, r17
 shr r20, #16
 wrbyte r20, r22
 mov r22, r15
 add r22, #3
 adds r22, r23
 rdbyte r20, r22
 and r20, #240
 mov r18, ##$f000000
 and r18, r17
 shr r18, #24
 or r20, r18
 wrbyte r20, r22
 mov r2, #1
 rdlong r3, r21
 mov r4, r23
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__W_riteS_ector
 add SP, #12
 mov r13, r0
 cmp r13,  #0 wz
 if_nz jmp #\C_D_F_S__S_etF_A_T__21
 mov r2, #1
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r21
 mov r18, r22
 adds r18, #28
 rdlong r18, r18
 mov r3, r20
 add r3, r18
 mov r4, r23
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__W_riteS_ector
 add SP, #12
 mov r13, r0
 jmp #\@C_D_F_S__S_etF_A_T__21
C_D_F_S__S_etF_A_T__20
 mov r13, ##$ffffffff
C_D_F_S__S_etF_A_T__21
C_D_F_S__S_etF_A_T__17
 mov r0, r13
C_D_F_S__S_etF_A_T__4
 calld PA,#POPM
 add SP, #16
 calld PA,#RETF
' Catalina Import DFS_WriteSector
' Catalina Import DFS_ReadSector
' Catalina Import ldiv
DAT
' Catalina Export DFS_FATtime
 alignl
C_D_F_S__F_A_T_time
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $d40000
 mov r2, ##0
 mov BC, #4
 calld PA,#CALA
 long @C_time
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r2, FP
 sub r2, #-(-8)
 mov BC, #4
 calld PA,#CALA
 long @C_gmtime
 mov r23, r0
 mov r22, r23
 adds r22, #20
 rdlong r22, r22
 cmps r22,  #100 wcz
 if_ae jmp #\C_D_F_S__F_A_T_time_3
 mov r0, ##$34210820
 jmp #\@C_D_F_S__F_A_T_time_2
C_D_F_S__F_A_T_time_3
 mov r22, #1
 mov r20, r23
 adds r20, #20
 rdlong r20, r20
 subs r20, #80
 shl r20, #25
 mov r18, r23
 adds r18, #16
 rdlong r18, r18
 adds r18, #1
 shl r18, #21
 or r20, r18
 mov r18, r23
 adds r18, #12
 rdlong r18, r18
 shl r18, #16
 or r20, r18
 mov r18, r23
 adds r18, #8
 rdlong r18, r18
 shl r18, #11
 or r20, r18
 mov r18, r23
 adds r18, #4
 rdlong r18, r18
 shl r18, #5
 or r20, r18
 rdlong r18, r23
 mov RI, r18
 shr RI, r22
 mov r22, RI
 mov r0, r20
 or r0, r22
C_D_F_S__F_A_T_time_2
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Import gmtime
' Catalina Import time
DAT
' Catalina Export DFS_UnlinkFile
 alignl
C_D_F_S__U_nlinkF_ile
 calld PA,#NEWF
 sub SP, #36
 calld PA,#PSHM
 long $fa0000
 mov r23, r4
 mov r21, r3
 mov r19, r2
 mov RI, FP
 sub RI, #-(-40)
 wrlong r19, RI
 mov r22, #0
 mov RI, FP
 sub RI, #-(-36)
 wrlong r22, RI
 mov r17, #0
 mov r2, FP
 sub r2, #-(-32)
 mov r3, r19
 mov r4, #1
 mov r5, r21
 sub SP, #16
 mov RI, r23
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_D_F_S__O_penF_ile
 add SP, #16
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__U_nlinkF_ile_5
 mov r0, #3
 jmp #\@C_D_F_S__U_nlinkF_ile_4
C_D_F_S__U_nlinkF_ile_5
 mov r2, #1
 mov RI, FP
 sub RI, #-(-28)
 rdlong r3, RI
 mov r4, r19
 rdbyte r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__U_nlinkF_ile_7
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__U_nlinkF_ile_4
C_D_F_S__U_nlinkF_ile_7
 mov r22, FP
 sub r22, #-(-24)
 rdbyte r22, r22
 shl r22, #5
 adds r22, r19
 mov r20, #229
 wrbyte r20, r22
 mov r2, #1
 mov RI, FP
 sub RI, #-(-28)
 rdlong r3, RI
 mov r4, r19
 rdbyte r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__W_riteS_ector
 add SP, #12
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__U_nlinkF_ile_15
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__U_nlinkF_ile_4
C_D_F_S__U_nlinkF_ile_14
 mov r22, FP
 sub r22, #-(-20)
 rdlong r17, r22
 mov RI, FP
 sub RI, #-(-20)
 rdlong r2, RI
 mov r3, FP
 sub r3, #-(-36)
 mov r4, r19
 mov r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__G_etF_A_T_
 add SP, #12
 mov r22, r0
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 mov r2, #0
 mov r3, r17
 mov r4, FP
 sub r4, #-(-36)
 mov r5, r19
 sub SP, #16
 mov RI, r23
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_D_F_S__S_etF_A_T_
 add SP, #16
C_D_F_S__U_nlinkF_ile_15
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_D_F_S__U_nlinkF_ile_25
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov r20, ##4087
 cmp r22, r20 wcz
 if_ae jmp #\C_D_F_S__U_nlinkF_ile_28
C_D_F_S__U_nlinkF_ile_25
 mov r22, #1
 mov r20, r23
 adds r20, #1
 rdbyte r20, r20
 cmps r20, r22 wz
 if_nz jmp #\C_D_F_S__U_nlinkF_ile_27
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov r20, ##$fff7
 cmp r22, r20 wcz
 if_ae jmp #\C_D_F_S__U_nlinkF_ile_28
C_D_F_S__U_nlinkF_ile_27
 mov r22, r23
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #2 wz
 if_nz jmp #\C_D_F_S__U_nlinkF_ile_29
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov r20, ##$ffffff7
 cmp r22, r20 wcz
 if_ae jmp #\C_D_F_S__U_nlinkF_ile_28
C_D_F_S__U_nlinkF_ile_29
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_D_F_S__U_nlinkF_ile_14
C_D_F_S__U_nlinkF_ile_28
 mov r0, #0
C_D_F_S__U_nlinkF_ile_4
 calld PA,#POPM
 add SP, #36
 calld PA,#RETF
' Catalina Import DFS_SetFAT
' Catalina Import DFS_GetFAT
' Catalina Import DFS_OpenFile
' Catalina Import DFS_WriteSector
' Catalina Import DFS_ReadSector
DAT
 alignl
C_sgcc_65fa5712_wait100ms_L000003
 calld PA,#NEWF
 calld PA,#PSHM
 long $540000
 mov BC, #0
 calld PA,#CALA
 long @C__cnt
 mov r22, r0
 mov BC, #0
 calld PA,#CALA
 long @C__clockfreq
 mov r20, r0
 mov r18, #10

  stalli

 qdiv r20, r18
 getqx r0

  allowi

 mov r2, r22
 add r2, r0
 mov BC, #4
 calld PA,#CALA
 long @C__waitcnt
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export DFS_WriteSector
 alignl
C_D_F_S__W_riteS_ector
 calld PA,#NEWF
 calld PA,#PSHM
 long $eaa000
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r15, #0
C_D_F_S__W_riteS_ector_6
 mov r2, r19
 mov r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_sd_sectwrite
 add SP, #4
 mov r13, r0
 cmps r0,  #0 wz
 if_nz jmp #\C_D_F_S__W_riteS_ector_10
 jmp #\@C_D_F_S__W_riteS_ector_8
C_D_F_S__W_riteS_ector_10
 mov BC, #0
 calld PA,#CALA
 long @C_sgcc_65fa5712_wait100ms_L000003
 adds r15, #1
 cmps r15,  #10 wcz
 if_b jmp #\C_D_F_S__W_riteS_ector_6
C_D_F_S__W_riteS_ector_8
 mov r0, r13
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import sd_sectwrite
' Catalina Import _cnt
' Catalina Import _waitcnt
' Catalina Import _clockfreq
DAT
' Catalina Export DFS_WriteFile
 alignl
C_D_F_S__W_riteF_ile
 calld PA,#NEWF
 sub SP, #48
 calld PA,#PSHM
 long $ffaa80
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r15, #0
 mov r13, #0
 mov r11, #0
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #9
 rdbyte r22, r22
 and r22, #2
 cmps r22,  #0 wz
 if_nz jmp #\C_D_F_S__W_riteF_ile_5
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__W_riteF_ile_4
C_D_F_S__W_riteF_ile_5
 mov r15, r17
 mov r22, #0
 wrlong r22, r19
 jmp #\@C_D_F_S__W_riteF_ile_8
C_D_F_S__W_riteF_ile_7
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r22
 mov r18, r20
 adds r18, #20
 rdbyte r18, r18
 mov r2, r18
 shl r2, #9
 mov r16, r22
 adds r16, #24
 rdlong r16, r16
 mov r3, r16
 mov r4, FP
 sub r4, #-(-16)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_div
 add SP, #8
 mov r2, ##512
 mov RI, FP
 sub RI, #-(-12)
 rdlong r3, RI
 mov r4, FP
 sub r4, #-(-24)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_div
 add SP, #8
 adds r20, #48
 rdlong r20, r20
 adds r22, #20
 rdlong r22, r22
 sub r22, #2

  stalli

 qmul r22, r18
 getqx r0

  allowi

 mov r22, r20
 add r22, r0
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20
 mov r11, r22
 add r11, r20
 mov r2, ##512
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #24
 rdlong r22, r22
 mov r3, r22
 mov r4, FP
 sub r4, #-(-32)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_div
 add SP, #8
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_D_F_S__W_riteF_ile_11
 mov r2, #1
 mov r3, r11
 mov r4, r23
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 mov r13, r0
 mov r2, ##512
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #24
 rdlong r22, r22
 mov r3, r22
 mov r4, FP
 sub r4, #-(-40)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_div
 add SP, #8
 mov r22, FP
 sub r22, #-(-36)
 rdlong r22, r22
 mov r9, r22
 mov r22, ##512
 mov r20, r9
 and r20, cviu_m2
 subs r22, r20
 cmp r15, r22 wcz
 if_b jmp #\C_D_F_S__W_riteF_ile_15
 mov r22, r9
 and r22, cviu_m2
 mov r20, ##512
 subs r20, r22
 mov r2, r20
 mov r3, r21
 mov r4, r22
 adds r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcpy
 add SP, #8
 cmp r13,  #0 wz
 if_nz jmp #\C_D_F_S__W_riteF_ile_17
 mov r2, #1
 mov r3, r11
 mov r4, r23
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__W_riteS_ector
 add SP, #12
 mov r13, r0
C_D_F_S__W_riteF_ile_17
 mov r22, ##512
 mov r20, r9
 and r20, cviu_m2
 subs r22, r20
 mov r20, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r20, RI
 adds r21, r22
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #24
 rdlong r18, r22
 add r20, r18
 wrlong r20, r22
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #16
 rdlong r20, r20
 adds r22, #24
 rdlong r22, r22
 cmp r20, r22 wcz
 if_ae jmp #\C_D_F_S__W_riteF_ile_19
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #16
 adds r22, #24
 rdlong r22, r22
 wrlong r22, r20
C_D_F_S__W_riteF_ile_19
 mov r22, ##512
 mov r20, r9
 and r20, cviu_m2
 subs r22, r20
 sub r15, r22
 jmp #\@C_D_F_S__W_riteF_ile_12
C_D_F_S__W_riteF_ile_15
 mov r2, r15
 mov r3, r21
 mov r22, r9
 and r22, cviu_m2
 mov r4, r22
 adds r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcpy
 add SP, #8
 cmp r13,  #0 wz
 if_nz jmp #\C_D_F_S__W_riteF_ile_21
 mov r2, #1
 mov r3, r11
 mov r4, r23
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__W_riteS_ector
 add SP, #12
 mov r13, r0
C_D_F_S__W_riteF_ile_21
 adds r21, r15
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #24
 rdlong r20, r22
 add r20, r15
 wrlong r20, r22
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #16
 rdlong r20, r20
 adds r22, #24
 rdlong r22, r22
 cmp r20, r22 wcz
 if_ae jmp #\C_D_F_S__W_riteF_ile_23
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #16
 adds r22, #24
 rdlong r22, r22
 wrlong r22, r20
C_D_F_S__W_riteF_ile_23
 mov RI, FP
 sub RI, #-(-8)
 wrlong r15, RI
 mov r15, #0
 jmp #\@C_D_F_S__W_riteF_ile_12
C_D_F_S__W_riteF_ile_11
 mov r22, ##512
 cmp r15, r22 wcz
 if_b jmp #\C_D_F_S__W_riteF_ile_25
 mov r2, #1
 mov r3, r11
 mov r4, r21
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__W_riteS_ector
 add SP, #12
 mov r13, r0
 mov r22, ##512
 sub r15, r22
 mov r20, ##512
 adds r21, r20
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 adds r20, #24
 rdlong r18, r20
 add r22, r18
 wrlong r22, r20
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #16
 rdlong r20, r20
 adds r22, #24
 rdlong r22, r22
 cmp r20, r22 wcz
 if_ae jmp #\C_D_F_S__W_riteF_ile_27
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #16
 adds r22, #24
 rdlong r22, r22
 wrlong r22, r20
C_D_F_S__W_riteF_ile_27
 mov r22, ##512
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_D_F_S__W_riteF_ile_26
C_D_F_S__W_riteF_ile_25
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #24
 rdlong r20, r20
 adds r22, #16
 rdlong r22, r22
 cmp r20, r22 wcz
 if_ae jmp #\C_D_F_S__W_riteF_ile_29
 mov r2, #1
 mov r3, r11
 mov r4, r23
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 mov r13, r0
 cmp r13,  #0 wz
 if_nz jmp #\C_D_F_S__W_riteF_ile_30
 mov r2, r15
 mov r3, r21
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_memcpy
 add SP, #8
 mov r2, #1
 mov r3, r11
 mov r4, r23
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__W_riteS_ector
 add SP, #12
 mov r13, r0
 jmp #\@C_D_F_S__W_riteF_ile_30
C_D_F_S__W_riteF_ile_29
 mov r2, #1
 mov r3, r11
 mov r4, r21
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__W_riteS_ector
 add SP, #12
 mov r13, r0
C_D_F_S__W_riteF_ile_30
 adds r21, r15
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #24
 rdlong r20, r22
 add r20, r15
 wrlong r20, r22
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #16
 rdlong r20, r20
 adds r22, #24
 rdlong r22, r22
 cmp r20, r22 wcz
 if_ae jmp #\C_D_F_S__W_riteF_ile_33
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #16
 adds r22, #24
 rdlong r22, r22
 wrlong r22, r20
C_D_F_S__W_riteF_ile_33
 mov RI, FP
 sub RI, #-(-8)
 wrlong r15, RI
 mov r15, #0
C_D_F_S__W_riteF_ile_26
C_D_F_S__W_riteF_ile_12
 rdlong r22, r19
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 add r22, r20
 wrlong r22, r19
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #20
 rdbyte r20, r20
 mov r2, r20
 shl r2, #9
 adds r22, #24
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 sub r22, r20
 mov r3, r22
 mov r4, FP
 sub r4, #-(-40)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_div
 add SP, #8
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #20
 rdbyte r20, r20
 mov r2, r20
 shl r2, #9
 adds r22, #24
 rdlong r22, r22
 mov r3, r22
 mov r4, FP
 sub r4, #-(-48)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_div
 add SP, #8
 mov r22, FP
 sub r22, #-(-40)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-48)
 rdlong r20, r20
 cmps r22, r20 wz
 if_z jmp #\C_D_F_S__W_riteF_ile_35
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #20
 rdlong r9, r20
 rdlong r2, r20
 mov r3, FP
 sub r3, #-(-8)
 mov r4, r23
 rdlong r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__G_etF_A_T_
 add SP, #12
 mov r22, r0
 wrlong r22, r20
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r22, r22
 adds r22, #1
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_D_F_S__W_riteF_ile_37
 mov r0, #7
 jmp #\@C_D_F_S__W_riteF_ile_4
C_D_F_S__W_riteF_ile_37
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, #1
 rdlong r18, r22
 adds r18, #1
 rdbyte r18, r18
 cmps r18, r20 wz
 if_nz jmp #\C_D_F_S__W_riteF_ile_42
 adds r22, #20
 rdlong r22, r22
 mov r20, ##$fff8
 cmp r22, r20 wcz
 if_ae jmp #\C_D_F_S__W_riteF_ile_41
C_D_F_S__W_riteF_ile_42
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #1
 rdbyte r20, r20
 cmps r20,  #2 wz
 if_nz jmp #\C_D_F_S__W_riteF_ile_39
 adds r22, #20
 rdlong r22, r22
 mov r20, ##$ffffff8
 cmp r22, r20 wcz
 if_b jmp #\C_D_F_S__W_riteF_ile_39
C_D_F_S__W_riteF_ile_41
 mov r2, r23
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_D_F_S__G_etF_reeF_A_T_
 add SP, #4
 mov r7, r0
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, ##$ffffff7
 cmp r7, r22 wz
 if_nz jmp #\C_D_F_S__W_riteF_ile_43
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__W_riteF_ile_4
C_D_F_S__W_riteF_ile_43
 mov r2, r7
 mov r3, r9
 mov r4, FP
 sub r4, #-(-8)
 mov r5, r23
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r22, r22
 sub SP, #16
 mov RI, r22
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_D_F_S__S_etF_A_T_
 add SP, #16
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #20
 wrlong r7, r22
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r22, r22
 adds r22, #1
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-52)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-52)
 rdlong r22, r22
 cmps r22,  #1 wz
 if_z jmp #\C_D_F_S__W_riteF_ile_48
 cmps r22,  #2 wz
 if_z jmp #\C_D_F_S__W_riteF_ile_49
 jmp #\@C_D_F_S__W_riteF_ile_45
C_D_F_S__W_riteF_ile_48
 mov r7, ##$fff8
 jmp #\@C_D_F_S__W_riteF_ile_46
C_D_F_S__W_riteF_ile_49
 mov r7, ##$ffffff8
 jmp #\@C_D_F_S__W_riteF_ile_46
C_D_F_S__W_riteF_ile_45
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__W_riteF_ile_4
C_D_F_S__W_riteF_ile_46
 mov r2, r7
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #20
 rdlong r3, r20
 mov r4, FP
 sub r4, #-(-8)
 mov r5, r23
 rdlong r22, r22
 sub SP, #16
 mov RI, r22
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C_D_F_S__S_etF_A_T_
 add SP, #16
 mov r13, #0
C_D_F_S__W_riteF_ile_39
C_D_F_S__W_riteF_ile_35
C_D_F_S__W_riteF_ile_8
 mov r22, #0
 cmp r15, r22 wz
 if_z jmp #\C_D_F_S__W_riteF_ile_50
 cmp r13, r22 wz
 if_z jmp #\C_D_F_S__W_riteF_ile_7
C_D_F_S__W_riteF_ile_50
 mov r2, #1
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #4
 rdlong r3, r20
 mov r4, r23
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__R_eadS_ector
 add SP, #12
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__W_riteF_ile_51
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__W_riteF_ile_4
C_D_F_S__W_riteF_ile_51
 mov BC, #0
 calld PA,#CALA
 long @C_D_F_S__F_A_T_time
 mov r15, r0
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #8
 rdbyte r22, r22
 shl r22, #5
 adds r22, r23
 adds r22, #22
 mov r20, r15
 and r20, #255
 wrbyte r20, r22
 mov r22, #8
 shr r15, r22
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #8
 rdbyte r22, r22
 shl r22, #5
 adds r22, r23
 adds r22, #23
 mov r20, r15
 and r20, #255
 wrbyte r20, r22
 mov r22, #8
 shr r15, r22
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #8
 rdbyte r22, r22
 shl r22, #5
 adds r22, r23
 adds r22, #24
 mov r20, r15
 and r20, #255
 wrbyte r20, r22
 mov r22, #8
 shr r15, r22
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 adds r22, #8
 rdbyte r22, r22
 shl r22, #5
 adds r22, r23
 adds r22, #25
 mov r20, r15
 and r20, #255
 wrbyte r20, r22
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #8
 rdbyte r20, r20
 shl r20, #5
 adds r20, r23
 adds r20, #28
 adds r22, #16
 rdlong r22, r22
 and r22, #255
 wrbyte r22, r20
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, #8
 mov r18, r22
 adds r18, #8
 rdbyte r18, r18
 shl r18, #5
 adds r18, r23
 adds r18, #29
 adds r22, #16
 rdlong r22, r22
 mov r16, ##$ff00
 and r22, r16
 shr r22, r20
 wrbyte r22, r18
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, #16
 mov r18, r22
 adds r18, #8
 rdbyte r18, r18
 shl r18, #5
 adds r18, r23
 adds r18, #30
 adds r22, #16
 rdlong r22, r22
 mov r16, ##$ff0000
 and r22, r16
 shr r22, r20
 wrbyte r22, r18
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #8
 rdbyte r20, r20
 shl r20, #5
 adds r20, r23
 adds r20, #31
 adds r22, #16
 rdlong r22, r22
 mov r18, ##$ff000000
 and r22, r18
 shr r22, #24
 wrbyte r22, r20
 mov r2, #1
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, r22
 adds r20, #4
 rdlong r3, r20
 mov r4, r23
 rdlong r22, r22
 rdbyte r5, r22
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_D_F_S__W_riteS_ector
 add SP, #12
 cmp r0,  #0 wz
 if_z jmp #\C_D_F_S__W_riteF_ile_53
 mov r0, ##$ffffffff
 jmp #\@C_D_F_S__W_riteF_ile_4
C_D_F_S__W_riteF_ile_53
 mov r0, r13
C_D_F_S__W_riteF_ile_4
 calld PA,#POPM
 add SP, #48
 calld PA,#RETF
' Catalina Import DFS_FATtime
' Catalina Import DFS_SetFAT
' Catalina Import DFS_GetFreeFAT
' Catalina Import DFS_GetFAT
' Catalina Import DFS_WriteSector
' Catalina Import DFS_ReadSector
' Catalina Import div
' Catalina Import memcpy
DAT
DAT
 alignl
C_siic_65fa5697__calls_L000003
 calld PA,#NEWF
 calld PA,#PSHM
 long $d00000
 mov r23, ##@C___funccnt
 rdlong r23, r23
 jmp #\@C_siic_65fa5697__calls_L000003_6
C_siic_65fa5697__calls_L000003_5
 mov r22, r23
 shl r22, #2
 mov r20, ##@C___functab
 adds r22, r20
 rdlong r22, r22
 mov BC, #0
 mov RI, r22
 calld PA,#CALI
C_siic_65fa5697__calls_L000003_6
 mov r22, r23
 subs r22, #1
 mov r23, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_siic_65fa5697__calls_L000003_5
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export exit
 alignl
C_exit
 calld PA,#NEWF
 calld PA,#PSHM
 long $c00000
 mov r23, r2
 mov BC, #0
 calld PA,#CALA
 long @C_siic_65fa5697__calls_L000003
 mov r22, ##@C__clean
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_exit_9
 mov r22, ##@C__clean
 rdlong r22, r22
 mov BC, #0
 mov RI, r22
 calld PA,#CALI
C_exit_9
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C__exit
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _exit
DAT
DAT
' Catalina Export fclose
 alignl
C_fclose
 calld PA,#NEWF
 calld PA,#PSHM
 long $fc0000
 mov r23, r2
 mov r19, #0
 mov r21, #0
C_fclose_4
 mov r22, r23
 mov r20, r21
 shl r20, #2
 mov r18, ##@C___iotab
 adds r20, r18
 rdlong r20, r20
 cmp r22, r20 wz
 if_nz jmp #\C_fclose_8
 mov r22, r21
 shl r22, #2
 mov r20, ##@C___iotab
 adds r22, r20
 mov r20, ##0
 wrlong r20, r22
 jmp #\@C_fclose_6
C_fclose_8
 adds r21, #1
 cmps r21,  #64 wcz
 if_b jmp #\C_fclose_4
C_fclose_6
 cmps r21,  #64 wcz
 if_b jmp #\C_fclose_10
 mov r0, ##-1
 jmp #\@C_fclose_3
C_fclose_10
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_fflush
 cmps r0,  #0 wz
 if_z jmp #\C_fclose_12
 mov r19, ##-1
C_fclose_12
 mov r22, r23
 adds r22, #4
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C__close
 cmps r0,  #0 wz
 if_z jmp #\C_fclose_14
 mov r19, ##-1
C_fclose_14
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 and r22, #8
 cmps r22,  #0 wz
 if_z jmp #\C_fclose_16
 mov r22, r23
 adds r22, #16
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_fclose_16
 mov r22, r23
 adds r22, #16
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_fclose_16
 mov r20, ##@C___stdin
 cmp r23, r20 wz
 if_z jmp #\C_fclose_18
 mov r20, ##@C___stdout
 cmp r23, r20 wz
 if_z jmp #\C_fclose_18
 mov r20, ##@C___stderr
 cmp r23, r20 wz
 if_z jmp #\C_fclose_18
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_free
C_fclose_18
 mov r0, r19
C_fclose_3
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _close
' Catalina Import free
' Catalina Import fflush
' Catalina Import __stderr
' Catalina Import __stdout
' Catalina Import __stdin
' Catalina Import __iotab
DAT
' Catalina Export fflush
 alignl
C_fflush
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $ff0000
 mov r23, r2
 mov r17, #0
 mov r22, r23
 cmp r22,  #0 wz
 if_nz jmp #\C_fflush_2
 mov r21, #0
C_fflush_4
 mov r22, r21
 shl r22, #2
 mov r20, ##@C___iotab
 adds r22, r20
 rdlong r22, r22
 mov r20, r22
 cmp r20,  #0 wz
 if_z jmp #\C_fflush_8
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_fflush
 cmps r0,  #0 wz
 if_z jmp #\C_fflush_8
 mov r17, ##-1
C_fflush_8
 adds r21, #1
 cmps r21,  #64 wcz
 if_b jmp #\C_fflush_4
 mov r0, r17
 jmp #\@C_fflush_1
C_fflush_2
 mov r22, r23
 adds r22, #16
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_fflush_12
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 mov r20, #0
 mov r18, r22
 and r18, #128
 cmps r18, r20 wz
 if_nz jmp #\C_fflush_10
 and r22, #256
 cmps r22, r20 wz
 if_nz jmp #\C_fflush_10
C_fflush_12
 mov r0, #0
 jmp #\@C_fflush_1
C_fflush_10
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 and r22, #128
 cmps r22,  #0 wz
 if_z jmp #\C_fflush_13
 mov r22, #0
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, r23
 adds r22, #16
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_fflush_15
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 and r22, #4
 cmps r22,  #0 wz
 if_nz jmp #\C_fflush_15
 rdlong r22, r23
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
C_fflush_15
 mov r22, #0
 wrlong r22, r23
 mov r2, #1
 mov RI, FP
 sub RI, #-(-12)
 rdlong r3, RI
 mov r22, r23
 adds r22, #4
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__lseek
 add SP, #8
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 and r22, #2
 cmps r22,  #0 wz
 if_z jmp #\C_fflush_17
 mov r22, r23
 adds r22, #8
 rdlong r20, r22
 mov r18, ##-385
 and r20, r18
 wrlong r20, r22
C_fflush_17
 mov r22, r23
 adds r22, #20
 mov r20, r23
 adds r20, #16
 rdlong r20, r20
 wrlong r20, r22
 mov r0, #0
 jmp #\@C_fflush_1
C_fflush_13
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 and r22, #4
 cmps r22,  #0 wz
 if_z jmp #\C_fflush_19
 mov r0, #0
 jmp #\@C_fflush_1
C_fflush_19
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 and r22, #1
 cmps r22,  #0 wz
 if_z jmp #\C_fflush_21
 mov r22, r23
 adds r22, #8
 rdlong r20, r22
 mov r18, ##-257
 and r20, r18
 wrlong r20, r22
C_fflush_21
 mov r22, r23
 adds r22, #20
 mov r20, r23
 adds r20, #16
 rdlong r18, r22
 rdlong r16, r20
 sub r18, r16
 mov r19, r18
 rdlong r20, r20
 wrlong r20, r22
 cmps r19,  #0 wcz
 if_a jmp #\C_fflush_23
 mov r0, #0
 jmp #\@C_fflush_1
C_fflush_23
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 mov r20, ##512
 and r22, r20
 cmps r22,  #0 wz
 if_z jmp #\C_fflush_25
 mov r2, #2
 mov r3, #0
 mov r22, r23
 adds r22, #4
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__lseek
 add SP, #8
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C_fflush_27
 mov r22, r23
 adds r22, #8
 rdlong r20, r22
 or r20, #32
 wrlong r20, r22
 mov r0, ##-1
 jmp #\@C_fflush_1
C_fflush_27
C_fflush_25
 mov r2, r19
 mov r22, r23
 adds r22, #16
 rdlong r3, r22
 mov r22, r23
 adds r22, #4
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__write
 add SP, #8
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, #0
 wrlong r22, r23
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r19, r22 wz
 if_nz jmp #\C_fflush_29
 mov r0, #0
 jmp #\@C_fflush_1
C_fflush_29
 mov r22, r23
 adds r22, #8
 rdlong r20, r22
 or r20, #32
 wrlong r20, r22
 mov r0, ##-1
C_fflush_1
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
' Catalina Export __cleanup
 alignl
C___cleanup
 calld PA,#RETN
' Catalina Import _lseek
' Catalina Import _write
' Catalina Import __iotab
DAT
' Catalina Export fgetc
 alignl
C_fgetc
 calld PA,#NEWF
 calld PA,#PSHM
 long $c00000
 mov r23, r2
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import getc
DAT
' Catalina Export fgets
 alignl
C_fgets
 calld PA,#NEWF
 calld PA,#PSHM
 long $fa8000
 mov r23, r4
 mov r21, r3
 mov r19, r2
 mov r15, r23
 jmp #\@C_fgets_3
C_fgets_2
 mov r22, r15
 mov r15, r22
 adds r15, #1
 mov r20, r17
 wrbyte r20, r22
 cmps r17,  #10 wz
 if_nz jmp #\C_fgets_5
 jmp #\@C_fgets_4
C_fgets_5
C_fgets_3
 mov r22, r21
 subs r22, #1
 mov r21, r22
 cmps r22,  #0 wcz
 if_be jmp #\C_fgets_7
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r17, r0
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C_fgets_2
C_fgets_7
C_fgets_4
 mov r22, ##-1
 cmps r17, r22 wz
 if_nz jmp #\C_fgets_8
 mov r22, r19
 adds r22, #8
 rdlong r22, r22
 and r22, #16
 cmps r22,  #0 wz
 if_z jmp #\C_fgets_10
 mov r22, r15
 mov r20, r23
 cmp r22, r20 wz
 if_nz jmp #\C_fgets_11
 mov r0, ##0
 jmp #\@C_fgets_1
C_fgets_10
 mov r0, ##0
 jmp #\@C_fgets_1
C_fgets_11
C_fgets_8
 mov r22, #0
 wrbyte r22, r15
 mov r0, r23
C_fgets_1
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import getc
DAT
DAT
 alignl
C___fillbuf
 calld PA,#NEWF
 calld PA,#PSHM
 long $f40000
 mov r23, r2
 mov r22, #0
 wrlong r22, r23
 mov r22, r23
 adds r22, #4
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C___fillbuf_6
 mov r0, ##-1
 jmp #\@C___fillbuf_3
C___fillbuf_6
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 and r22, #48
 cmps r22,  #0 wz
 if_z jmp #\C___fillbuf_8
 mov r0, ##-1
 jmp #\@C___fillbuf_3
C___fillbuf_8
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 and r22, #1
 cmps r22,  #0 wz
 if_nz jmp #\C___fillbuf_10
 mov r22, r23
 adds r22, #8
 rdlong r20, r22
 or r20, #32
 wrlong r20, r22
 mov r0, ##-1
 jmp #\@C___fillbuf_3
C___fillbuf_10
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 and r22, #256
 cmps r22,  #0 wz
 if_z jmp #\C___fillbuf_12
 mov r22, r23
 adds r22, #8
 rdlong r20, r22
 or r20, #32
 wrlong r20, r22
 mov r0, ##-1
 jmp #\@C___fillbuf_3
C___fillbuf_12
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 and r22, #128
 cmps r22,  #0 wz
 if_nz jmp #\C___fillbuf_14
 mov r22, r23
 adds r22, #8
 rdlong r20, r22
 or r20, #128
 wrlong r20, r22
C___fillbuf_14
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 and r22, #4
 cmps r22,  #0 wz
 if_nz jmp #\C___fillbuf_16
 mov r22, r23
 adds r22, #16
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C___fillbuf_16
 mov r2, ##512
 mov BC, #4
 calld PA,#CALA
 long @C_malloc
 mov r20, r23
 adds r20, #16
 wrlong r0, r20
 mov r22, r23
 adds r22, #16
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C___fillbuf_18
 mov r22, r23
 adds r22, #8
 rdlong r20, r22
 or r20, #4
 wrlong r20, r22
 jmp #\@C___fillbuf_19
C___fillbuf_18
 mov r22, r23
 adds r22, #8
 rdlong r20, r22
 or r20, #8
 wrlong r20, r22
 mov r22, r23
 adds r22, #12
 mov r20, ##512
 wrlong r20, r22
C___fillbuf_19
C___fillbuf_16
 mov r21, #0
C___fillbuf_20
 mov r22, r21
 shl r22, #2
 mov r20, ##@C___iotab
 adds r22, r20
 rdlong r22, r22
 mov r20, r22
 cmp r20,  #0 wz
 if_z jmp #\C___fillbuf_24
 adds r22, #8
 rdlong r22, r22
 and r22, #64
 cmps r22,  #0 wz
 if_z jmp #\C___fillbuf_24
 mov r22, r21
 shl r22, #2
 mov r20, ##@C___iotab
 adds r22, r20
 rdlong r22, r22
 adds r22, #8
 rdlong r22, r22
 and r22, #256
 cmps r22,  #0 wz
 if_z jmp #\C___fillbuf_26
 mov r22, r21
 shl r22, #2
 mov r20, ##@C___iotab
 adds r22, r20
 rdlong r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_fflush
C___fillbuf_26
C___fillbuf_24
 adds r21, #1
 cmps r21,  #64 wcz
 if_b jmp #\C___fillbuf_20
 mov r22, r23
 adds r22, #16
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C___fillbuf_28
 mov r22, r23
 adds r22, #16
 mov r20, r23
 adds r20, #4
 rdlong r20, r20
 mov r18, ##@C___fillbuf_ch_L000005
 adds r20, r18
 wrlong r20, r22
 mov r22, r23
 adds r22, #12
 mov r20, #1
 wrlong r20, r22
C___fillbuf_28
 mov r22, r23
 adds r22, #20
 mov r20, r23
 adds r20, #16
 rdlong r20, r20
 wrlong r20, r22
 mov r22, r23
 adds r22, #12
 rdlong r2, r22
 mov r22, r23
 adds r22, #16
 rdlong r3, r22
 mov r22, r23
 adds r22, #4
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__read
 add SP, #8
 wrlong r0, r23
 rdlong r22, r23
 cmps r22,  #0 wcz
 if_a jmp #\C___fillbuf_30
 rdlong r22, r23
 cmps r22,  #0 wz
 if_nz jmp #\C___fillbuf_32
 mov r22, r23
 adds r22, #8
 rdlong r20, r22
 or r20, #16
 wrlong r20, r22
 jmp #\@C___fillbuf_33
C___fillbuf_32
 mov r22, r23
 adds r22, #8
 rdlong r20, r22
 or r20, #32
 wrlong r20, r22
C___fillbuf_33
 mov r0, ##-1
 jmp #\@C___fillbuf_3
C___fillbuf_30
 rdlong r22, r23
 subs r22, #1
 wrlong r22, r23
 mov r22, r23
 adds r22, #20
 rdlong r20, r22
 mov r18, r20
 adds r18, #1
 wrlong r18, r22
 rdbyte r0, r20
C___fillbuf_3
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _read
' Catalina Import malloc
' Catalina Import fflush
' Catalina Import __iotab
DAT
 alignl
C_sbjo_65fa5715_N_anO_rI_nf_L000001
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $f80000
 mov r23, r4
 mov r21, r3
 mov r19, r2
 mov RI, FP
 sub RI, #-(-8)
 wrlong r23, RI
 mov r22, ##$7f800000
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 and r20, r22
 cmp r20, r22 wz
 if_nz jmp #\C_sbjo_65fa5715_N_anO_rI_nf_L000001_3
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##$7fffff
 and r22, r20
 cmp r22,  #0 wz
 if_nz jmp #\C_sbjo_65fa5715_N_anO_rI_nf_L000001_5
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##$80000000
 and r22, r20
 cmp r22,  #0 wz
 if_z jmp #\C_sbjo_65fa5715_N_anO_rI_nf_L000001_7
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #45
 wrbyte r20, r22
 jmp #\@C_sbjo_65fa5715_N_anO_rI_nf_L000001_8
C_sbjo_65fa5715_N_anO_rI_nf_L000001_7
 mov r22, r19
 and r22, #2
 cmps r22,  #0 wz
 if_z jmp #\C_sbjo_65fa5715_N_anO_rI_nf_L000001_9
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #43
 wrbyte r20, r22
C_sbjo_65fa5715_N_anO_rI_nf_L000001_9
C_sbjo_65fa5715_N_anO_rI_nf_L000001_8
 mov r2, ##@C_sbjo_65fa5715_N_anO_rI_nf_L000001_11_L000012
 mov r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
 mov r0, r21
 adds r0, #3
 jmp #\@C_sbjo_65fa5715_N_anO_rI_nf_L000001_2
C_sbjo_65fa5715_N_anO_rI_nf_L000001_5
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##$80000000
 and r22, r20
 cmp r22,  #0 wz
 if_z jmp #\C_sbjo_65fa5715_N_anO_rI_nf_L000001_13
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #45
 wrbyte r20, r22
 jmp #\@C_sbjo_65fa5715_N_anO_rI_nf_L000001_14
C_sbjo_65fa5715_N_anO_rI_nf_L000001_13
 mov r22, r19
 and r22, #2
 cmps r22,  #0 wz
 if_z jmp #\C_sbjo_65fa5715_N_anO_rI_nf_L000001_15
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #43
 wrbyte r20, r22
C_sbjo_65fa5715_N_anO_rI_nf_L000001_15
C_sbjo_65fa5715_N_anO_rI_nf_L000001_14
 mov r2, ##@C_sbjo_65fa5715_N_anO_rI_nf_L000001_17_L000018
 mov r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
 mov r0, r21
 adds r0, #3
 jmp #\@C_sbjo_65fa5715_N_anO_rI_nf_L000001_2
C_sbjo_65fa5715_N_anO_rI_nf_L000001_3
 mov r0, ##0
C_sbjo_65fa5715_N_anO_rI_nf_L000001_2
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
 alignl
C_sbjo3_65fa5715__pfloat_L000019
 calld PA,#NEWF
 sub SP, #92
 calld PA,#PSHM
 long $faa000
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r2, r17
 mov r3, r21
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sbjo_65fa5715_N_anO_rI_nf_L000001
 add SP, #8
 mov r15, r0
 mov r22, r0
 cmp r22,  #0 wz
 if_z jmp #\C_sbjo3_65fa5715__pfloat_L000019_21
 mov r0, r15
 jmp #\@C_sbjo3_65fa5715__pfloat_L000019_20
C_sbjo3_65fa5715__pfloat_L000019_21
 mov r2, FP
 sub r2, #-(-96)
 mov r3, FP
 sub r3, #-(-12)
 mov r4, FP
 sub r4, #-(-8)
 mov r5, r19
 sub SP, #16
 mov RI, r23
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C__fcvt
 add SP, #16
 mov r15, r0
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_sbjo3_65fa5715__pfloat_L000019_23
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #45
 wrbyte r20, r22
 jmp #\@C_sbjo3_65fa5715__pfloat_L000019_24
C_sbjo3_65fa5715__pfloat_L000019_23
 mov r22, r17
 and r22, #2
 cmps r22,  #0 wz
 if_z jmp #\C_sbjo3_65fa5715__pfloat_L000019_25
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #43
 wrbyte r20, r22
 jmp #\@C_sbjo3_65fa5715__pfloat_L000019_26
C_sbjo3_65fa5715__pfloat_L000019_25
 mov r22, r17
 and r22, #4
 cmps r22,  #0 wz
 if_z jmp #\C_sbjo3_65fa5715__pfloat_L000019_27
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #32
 wrbyte r20, r22
C_sbjo3_65fa5715__pfloat_L000019_27
C_sbjo3_65fa5715__pfloat_L000019_26
C_sbjo3_65fa5715__pfloat_L000019_24
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_a jmp #\C_sbjo3_65fa5715__pfloat_L000019_29
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #48
 wrbyte r20, r22
C_sbjo3_65fa5715__pfloat_L000019_29
 mov r22, FP
 sub r22, #-(-8)
 rdlong r13, r22
 jmp #\@C_sbjo3_65fa5715__pfloat_L000019_34
C_sbjo3_65fa5715__pfloat_L000019_31
 rdbyte r22, r15
 cmps r22,  #0 wz
 if_z jmp #\C_sbjo3_65fa5715__pfloat_L000019_35
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, r15
 mov r15, r20
 adds r15, #1
 rdbyte r20, r20
 wrbyte r20, r22
 jmp #\@C_sbjo3_65fa5715__pfloat_L000019_36
C_sbjo3_65fa5715__pfloat_L000019_35
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #48
 wrbyte r20, r22
C_sbjo3_65fa5715__pfloat_L000019_36
 subs r13, #1
C_sbjo3_65fa5715__pfloat_L000019_34
 cmps r13,  #0 wcz
 if_a jmp #\C_sbjo3_65fa5715__pfloat_L000019_31
 mov r13, r19
 mov r22, #0
 cmps r19, r22 wcz
 if_a jmp #\C_sbjo3_65fa5715__pfloat_L000019_39
 mov r20, r17
 and r20, #8
 cmps r20, r22 wz
 if_z jmp #\C_sbjo3_65fa5715__pfloat_L000019_41
C_sbjo3_65fa5715__pfloat_L000019_39
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #46
 wrbyte r20, r22
 jmp #\@C_sbjo3_65fa5715__pfloat_L000019_41
C_sbjo3_65fa5715__pfloat_L000019_40
 mov r22, r13
 subs r22, #1
 mov r13, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_sbjo3_65fa5715__pfloat_L000019_43
 jmp #\@C_sbjo3_65fa5715__pfloat_L000019_46
C_sbjo3_65fa5715__pfloat_L000019_43
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #48
 wrbyte r20, r22
C_sbjo3_65fa5715__pfloat_L000019_41
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 cmps r22,  #0 wcz
 if_be jmp #\C_sbjo3_65fa5715__pfloat_L000019_40
 jmp #\@C_sbjo3_65fa5715__pfloat_L000019_46
C_sbjo3_65fa5715__pfloat_L000019_45
 rdbyte r22, r15
 cmps r22,  #0 wz
 if_z jmp #\C_sbjo3_65fa5715__pfloat_L000019_48
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, r15
 mov r15, r20
 adds r15, #1
 rdbyte r20, r20
 wrbyte r20, r22
 jmp #\@C_sbjo3_65fa5715__pfloat_L000019_49
C_sbjo3_65fa5715__pfloat_L000019_48
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #48
 wrbyte r20, r22
C_sbjo3_65fa5715__pfloat_L000019_49
C_sbjo3_65fa5715__pfloat_L000019_46
 mov r22, r13
 subs r22, #1
 mov r13, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_sbjo3_65fa5715__pfloat_L000019_45
 mov r0, r21
C_sbjo3_65fa5715__pfloat_L000019_20
 calld PA,#POPM
 add SP, #92
 calld PA,#RETF
 alignl
C_sbjo4_65fa5715__pscien_L000050
 calld PA,#NEWF
 sub SP, #92
 calld PA,#PSHM
 long $fe8000
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r2, r17
 mov r3, r21
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sbjo_65fa5715_N_anO_rI_nf_L000001
 add SP, #8
 mov r15, r0
 mov r22, r0
 cmp r22,  #0 wz
 if_z jmp #\C_sbjo4_65fa5715__pscien_L000050_52
 mov r0, r15
 jmp #\@C_sbjo4_65fa5715__pscien_L000050_51
C_sbjo4_65fa5715__pscien_L000050_52
 mov r2, FP
 sub r2, #-(-96)
 mov r3, FP
 sub r3, #-(-12)
 mov r4, FP
 sub r4, #-(-8)
 mov r5, r19
 adds r5, #1
 sub SP, #16
 mov RI, r23
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C__ecvt
 add SP, #16
 mov r15, r0
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_sbjo4_65fa5715__pscien_L000050_54
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #45
 wrbyte r20, r22
 jmp #\@C_sbjo4_65fa5715__pscien_L000050_55
C_sbjo4_65fa5715__pscien_L000050_54
 mov r22, r17
 and r22, #2
 cmps r22,  #0 wz
 if_z jmp #\C_sbjo4_65fa5715__pscien_L000050_56
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #43
 wrbyte r20, r22
 jmp #\@C_sbjo4_65fa5715__pscien_L000050_57
C_sbjo4_65fa5715__pscien_L000050_56
 mov r22, r17
 and r22, #4
 cmps r22,  #0 wz
 if_z jmp #\C_sbjo4_65fa5715__pscien_L000050_58
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #32
 wrbyte r20, r22
C_sbjo4_65fa5715__pscien_L000050_58
C_sbjo4_65fa5715__pscien_L000050_57
C_sbjo4_65fa5715__pscien_L000050_55
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, r15
 mov r15, r20
 adds r15, #1
 rdbyte r20, r20
 wrbyte r20, r22
 mov r22, #0
 cmps r19, r22 wcz
 if_a jmp #\C_sbjo4_65fa5715__pscien_L000050_62
 mov r20, r17
 and r20, #8
 cmps r20, r22 wz
 if_z jmp #\C_sbjo4_65fa5715__pscien_L000050_64
C_sbjo4_65fa5715__pscien_L000050_62
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #46
 wrbyte r20, r22
 jmp #\@C_sbjo4_65fa5715__pscien_L000050_64
C_sbjo4_65fa5715__pscien_L000050_63
 rdbyte r22, r15
 cmps r22,  #0 wz
 if_z jmp #\C_sbjo4_65fa5715__pscien_L000050_66
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, r15
 mov r15, r20
 adds r15, #1
 rdbyte r20, r20
 wrbyte r20, r22
 jmp #\@C_sbjo4_65fa5715__pscien_L000050_67
C_sbjo4_65fa5715__pscien_L000050_66
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #48
 wrbyte r20, r22
C_sbjo4_65fa5715__pscien_L000050_67
C_sbjo4_65fa5715__pscien_L000050_64
 mov r22, r19
 subs r22, #1
 mov r19, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_sbjo4_65fa5715__pscien_L000050_63
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #101
 wrbyte r20, r22
 mov r22, ##@C_sbjo4_65fa5715__pscien_L000050_70_L000071
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_z jmp #\C_sbjo4_65fa5715__pscien_L000050_68
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 subs r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_sbjo4_65fa5715__pscien_L000050_68
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_sbjo4_65fa5715__pscien_L000050_72
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #45
 wrbyte r20, r22
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 neg r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_sbjo4_65fa5715__pscien_L000050_73
C_sbjo4_65fa5715__pscien_L000050_72
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #43
 wrbyte r20, r22
C_sbjo4_65fa5715__pscien_L000050_73
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #100 wcz
 if_b jmp #\C_sbjo4_65fa5715__pscien_L000050_74
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 mov r18, #100
 mov r0, r20
 mov r1, r18
 calld PA,#DIVS
 mov r20, r0
 adds r20, #48
 wrbyte r20, r22
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, #100
 mov r0, r22
 mov r1, r20
 calld PA,#DIVS
 mov RI, FP
 sub RI, #-(-8)
 wrlong r1, RI
C_sbjo4_65fa5715__pscien_L000050_74
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 mov r18, #10
 mov r0, r20
 mov r1, r18
 calld PA,#DIVS
 mov r20, r0
 adds r20, #48
 wrbyte r20, r22
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 mov r18, #10
 mov r0, r20
 mov r1, r18
 calld PA,#DIVS
 mov r20, r1
 adds r20, #48
 wrbyte r20, r22
 mov r0, r21
C_sbjo4_65fa5715__pscien_L000050_51
 calld PA,#POPM
 add SP, #92
 calld PA,#RETF
 alignl
C_sbjo6_65fa5715__gcvt_L000076
 calld PA,#NEWF
 sub SP, #96
 calld PA,#PSHM
 long $feaa80
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r9, r21
 mov r2, r17
 mov r3, r19
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sbjo_65fa5715_N_anO_rI_nf_L000001
 add SP, #8
 mov r15, r0
 mov r22, r0
 cmp r22,  #0 wz
 if_z jmp #\C_sbjo6_65fa5715__gcvt_L000076_78
 mov r0, r15
 jmp #\@C_sbjo6_65fa5715__gcvt_L000076_77
C_sbjo6_65fa5715__gcvt_L000076_78
 mov r2, FP
 sub r2, #-(-96)
 mov r3, FP
 sub r3, #-(-12)
 mov r4, FP
 sub r4, #-(-8)
 mov r5, r21
 sub SP, #16
 mov RI, r23
 wrlong RI, --PTRA
 mov BC, #20
 add SP, #4
 calld PA,#CALA
 long @C__ecvt
 add SP, #16
 mov r15, r0
 mov r13, r19
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_sbjo6_65fa5715__gcvt_L000076_80
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, #45
 wrbyte r20, r22
 jmp #\@C_sbjo6_65fa5715__gcvt_L000076_81
C_sbjo6_65fa5715__gcvt_L000076_80
 mov r22, r17
 and r22, #2
 cmps r22,  #0 wz
 if_z jmp #\C_sbjo6_65fa5715__gcvt_L000076_82
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, #43
 wrbyte r20, r22
 jmp #\@C_sbjo6_65fa5715__gcvt_L000076_83
C_sbjo6_65fa5715__gcvt_L000076_82
 mov r22, r17
 and r22, #4
 cmps r22,  #0 wz
 if_z jmp #\C_sbjo6_65fa5715__gcvt_L000076_84
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, #32
 wrbyte r20, r22
C_sbjo6_65fa5715__gcvt_L000076_84
C_sbjo6_65fa5715__gcvt_L000076_83
C_sbjo6_65fa5715__gcvt_L000076_81
 mov r22, r17
 and r22, #8
 cmps r22,  #0 wz
 if_nz jmp #\C_sbjo6_65fa5715__gcvt_L000076_86
 mov r11, r9
 subs r11, #1
 jmp #\@C_sbjo6_65fa5715__gcvt_L000076_91
C_sbjo6_65fa5715__gcvt_L000076_88
 subs r9, #1
 subs r11, #1
C_sbjo6_65fa5715__gcvt_L000076_91
 cmps r11,  #0 wcz
 if_be jmp #\C_sbjo6_65fa5715__gcvt_L000076_92
 mov r22, r11
 adds r22, r15
 rdbyte r22, r22
 cmps r22,  #48 wz
 if_z jmp #\C_sbjo6_65fa5715__gcvt_L000076_88
C_sbjo6_65fa5715__gcvt_L000076_92
C_sbjo6_65fa5715__gcvt_L000076_86
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##-3
 cmps r22, r20 wcz
 if_b jmp #\C_sbjo6_65fa5715__gcvt_L000076_95
 mov r20, r21
 adds r20, #1
 cmps r22, r20 wcz
 if_b jmp #\C_sbjo6_65fa5715__gcvt_L000076_93
C_sbjo6_65fa5715__gcvt_L000076_95
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 subs r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, r15
 mov r15, r20
 adds r15, #1
 rdbyte r20, r20
 wrbyte r20, r22
 cmps r9,  #1 wcz
 if_a jmp #\C_sbjo6_65fa5715__gcvt_L000076_98
 mov r22, r17
 and r22, #8
 cmps r22,  #0 wz
 if_z jmp #\C_sbjo6_65fa5715__gcvt_L000076_100
C_sbjo6_65fa5715__gcvt_L000076_98
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, #46
 wrbyte r20, r22
 jmp #\@C_sbjo6_65fa5715__gcvt_L000076_100
C_sbjo6_65fa5715__gcvt_L000076_99
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, r15
 mov r15, r20
 adds r15, #1
 rdbyte r20, r20
 wrbyte r20, r22
C_sbjo6_65fa5715__gcvt_L000076_100
 mov r22, r9
 subs r22, #1
 mov r9, r22
 cmps r22,  #0 wcz
 if_a jmp #\C_sbjo6_65fa5715__gcvt_L000076_99
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, #101
 wrbyte r20, r22
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_sbjo6_65fa5715__gcvt_L000076_102
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, #45
 wrbyte r20, r22
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 neg r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_sbjo6_65fa5715__gcvt_L000076_103
C_sbjo6_65fa5715__gcvt_L000076_102
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, #43
 wrbyte r20, r22
C_sbjo6_65fa5715__gcvt_L000076_103
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #100 wcz
 if_ae jmp #\C_sbjo6_65fa5715__gcvt_L000076_107
 mov r20, ##-100
 cmps r22, r20 wcz
 if_a jmp #\C_sbjo6_65fa5715__gcvt_L000076_105
C_sbjo6_65fa5715__gcvt_L000076_107
 mov r7, #3
 jmp #\@C_sbjo6_65fa5715__gcvt_L000076_106
C_sbjo6_65fa5715__gcvt_L000076_105
 mov r7, #2
C_sbjo6_65fa5715__gcvt_L000076_106
 adds r13, r7
 mov r22, #0
 wrbyte r22, r13
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #100 wcz
 if_ae jmp #\C_sbjo6_65fa5715__gcvt_L000076_115
 mov r20, ##-100
 cmps r22, r20 wcz
 if_a jmp #\C_sbjo6_65fa5715__gcvt_L000076_113
C_sbjo6_65fa5715__gcvt_L000076_115
 mov r22, #3
 mov RI, FP
 sub RI, #-(-100)
 wrlong r22, RI
 jmp #\@C_sbjo6_65fa5715__gcvt_L000076_114
C_sbjo6_65fa5715__gcvt_L000076_113
 mov r22, #2
 mov RI, FP
 sub RI, #-(-100)
 wrlong r22, RI
C_sbjo6_65fa5715__gcvt_L000076_114
 mov r22, FP
 sub r22, #-(-100)
 rdlong r11, r22
 jmp #\@C_sbjo6_65fa5715__gcvt_L000076_111
C_sbjo6_65fa5715__gcvt_L000076_108
 mov r22, ##-1
 adds r22, r13
 mov r13, r22
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 mov r18, #10
 mov r0, r20
 mov r1, r18
 calld PA,#DIVS
 mov r20, r1
 adds r20, #48
 wrbyte r20, r22
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, #10
 mov r0, r22
 mov r1, r20
 calld PA,#DIVS
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 subs r11, #1
C_sbjo6_65fa5715__gcvt_L000076_111
 cmps r11,  #0 wcz
 if_a jmp #\C_sbjo6_65fa5715__gcvt_L000076_108
 mov r0, r19
 jmp #\@C_sbjo6_65fa5715__gcvt_L000076_77
C_sbjo6_65fa5715__gcvt_L000076_93
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_a jmp #\C_sbjo6_65fa5715__gcvt_L000076_116
 rdbyte r22, r15
 cmps r22,  #48 wz
 if_z jmp #\C_sbjo6_65fa5715__gcvt_L000076_121
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, #48
 wrbyte r20, r22
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, #46
 wrbyte r20, r22
 jmp #\@C_sbjo6_65fa5715__gcvt_L000076_121
C_sbjo6_65fa5715__gcvt_L000076_120
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, #48
 wrbyte r20, r22
C_sbjo6_65fa5715__gcvt_L000076_121
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_b jmp #\C_sbjo6_65fa5715__gcvt_L000076_120
C_sbjo6_65fa5715__gcvt_L000076_116
 mov r11, #1
 jmp #\@C_sbjo6_65fa5715__gcvt_L000076_126
C_sbjo6_65fa5715__gcvt_L000076_123
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, r15
 mov r15, r20
 adds r15, #1
 rdbyte r20, r20
 wrbyte r20, r22
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r11, r22 wz
 if_nz jmp #\C_sbjo6_65fa5715__gcvt_L000076_127
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, #46
 wrbyte r20, r22
C_sbjo6_65fa5715__gcvt_L000076_127
 adds r11, #1
C_sbjo6_65fa5715__gcvt_L000076_126
 cmps r11, r9 wcz
 if_be jmp #\C_sbjo6_65fa5715__gcvt_L000076_123
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r11, r22 wcz
 if_a jmp #\C_sbjo6_65fa5715__gcvt_L000076_129
 jmp #\@C_sbjo6_65fa5715__gcvt_L000076_132
C_sbjo6_65fa5715__gcvt_L000076_131
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, #48
 wrbyte r20, r22
C_sbjo6_65fa5715__gcvt_L000076_132
 mov r22, r11
 mov r11, r22
 adds r11, #1
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 cmps r22, r20 wcz
 if_be jmp #\C_sbjo6_65fa5715__gcvt_L000076_131
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, #46
 wrbyte r20, r22
C_sbjo6_65fa5715__gcvt_L000076_129
 mov r22, ##-1
 adds r22, r13
 rdbyte r22, r22
 cmps r22,  #46 wz
 if_nz jmp #\C_sbjo6_65fa5715__gcvt_L000076_134
 mov r22, r17
 and r22, #8
 cmps r22,  #0 wz
 if_nz jmp #\C_sbjo6_65fa5715__gcvt_L000076_134
 mov r22, ##-1
 adds r13, r22
C_sbjo6_65fa5715__gcvt_L000076_134
 mov r22, #0
 wrbyte r22, r13
 mov r0, r19
C_sbjo6_65fa5715__gcvt_L000076_77
 calld PA,#POPM
 add SP, #96
 calld PA,#RETF
' Catalina Export _f_print
 alignl
C__f_print
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $faa000
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r15, r21
 mov r22, r23
 and r22, #128
 cmps r22,  #0 wz
 if_z jmp #\C__f_print_137
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #4
 wrlong r20, r22
 mov r22, ##-4
 adds r22, r20
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C__f_print_138
C__f_print_137
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 rdlong r20, r22
 adds r20, #4
 wrlong r20, r22
 mov r22, ##-4
 adds r22, r20
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C__f_print_138
 mov r13, r19
 and r13, cviu_m1
 mov r22, #69
 cmps r13, r22 wz
 if_z jmp #\C__f_print_143
 cmps r13,  #70 wz
 if_z jmp #\C__f_print_142
 cmps r13,  #71 wz
 if_z jmp #\C__f_print_144
 cmps r13, r22 wcz
 if_b jmp #\C__f_print_139
 cmps r13,  #101 wz
 if_z jmp #\C__f_print_143
 cmps r13,  #102 wz
 if_z jmp #\C__f_print_142
 cmps r13,  #103 wz
 if_z jmp #\C__f_print_144
 jmp #\@C__f_print_139
C__f_print_142
 mov r2, r23
 mov r3, r17
 mov r4, r21
 mov RI, FP
 sub RI, #-(-8)
 rdlong r5, RI
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_sbjo3_65fa5715__pfloat_L000019
 add SP, #12
 mov r21, r0
 jmp #\@C__f_print_140
C__f_print_143
 mov r2, r23
 mov r3, r17
 mov r4, r21
 mov RI, FP
 sub RI, #-(-8)
 rdlong r5, RI
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_sbjo4_65fa5715__pscien_L000050
 add SP, #12
 mov r21, r0
 jmp #\@C__f_print_140
C__f_print_144
 mov r2, r23
 mov r3, r21
 mov r4, r17
 mov RI, FP
 sub RI, #-(-8)
 rdlong r5, RI
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_sbjo6_65fa5715__gcvt_L000076
 add SP, #12
 mov r21, r0
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 adds r21, r0
C__f_print_139
C__f_print_140
 mov r22, r19
 and r22, cviu_m1
 cmps r22,  #69 wz
 if_z jmp #\C__f_print_148
 cmps r22,  #71 wz
 if_nz jmp #\C__f_print_146
C__f_print_148
 jmp #\@C__f_print_150
C__f_print_149
 adds r15, #1
C__f_print_150
 rdbyte r22, r15
 cmps r22,  #0 wz
 if_z jmp #\C__f_print_152
 cmps r22,  #101 wz
 if_nz jmp #\C__f_print_149
C__f_print_152
 rdbyte r22, r15
 cmps r22,  #101 wz
 if_nz jmp #\C__f_print_147
 mov r22, #69
 wrbyte r22, r15
 jmp #\@C__f_print_147
C__f_print_146
 mov r22, r19
 and r22, cviu_m1
 cmps r22,  #70 wz
 if_nz jmp #\C__f_print_155
 jmp #\@C__f_print_158
C__f_print_157
 rdbyte r22, r15
 subs r22, #97
 cmp r22,  #26 wcz
 if_ae jmp #\C__f_print_160
 rdbyte r2, r15
 mov BC, #4
 calld PA,#CALA
 long @C_toupper
 mov r22, r0
 wrbyte r22, r15
C__f_print_160
 adds r15, #1
C__f_print_158
 rdbyte r22, r15
 cmps r22,  #0 wz
 if_nz jmp #\C__f_print_157
C__f_print_155
C__f_print_147
 mov r0, r21
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Import _fcvt
' Catalina Import _ecvt
' Catalina Import toupper
' Catalina Import strlen
' Catalina Import strcpy
DAT
DAT
 alignl
C_sip0_65fa5715_do_write_L000003
 calld PA,#NEWF
 calld PA,#PSHM
 long $ea8000
 mov r23, r4
 mov r21, r3
 mov r19, r2
 jmp #\@C_sip0_65fa5715_do_write_L000003_6
C_sip0_65fa5715_do_write_L000003_5
 subs r19, r17
 adds r21, r17
C_sip0_65fa5715_do_write_L000003_6
 mov r2, r19
 mov r3, r21
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__write
 add SP, #8
 mov r17, r0
 cmps r0,  #0 wcz
 if_be jmp #\C_sip0_65fa5715_do_write_L000003_8
 cmps r17, r19 wcz
 if_b jmp #\C_sip0_65fa5715_do_write_L000003_5
C_sip0_65fa5715_do_write_L000003_8
 cmps r17,  #0 wcz
 if_be jmp #\C_sip0_65fa5715_do_write_L000003_10
 mov r15, #1
 jmp #\@C_sip0_65fa5715_do_write_L000003_11
C_sip0_65fa5715_do_write_L000003_10
 mov r15, #0
C_sip0_65fa5715_do_write_L000003_11
 mov r0, r15
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_sip01_65fa5715_get_buf_L000012
 calld PA,#NEWF
 calld PA,#PSHM
 long $400000
 mov r2, ##512
 mov BC, #4
 calld PA,#CALA
 long @C_malloc
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export __flushbuf
 alignl
C___flushbuf
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $f40000
 mov r23, r3
 mov r21, r2
 mov r22, ##@C___cleanup
 wrlong r22, ##@C__clean
 mov r22, r21
 adds r22, #4
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C___flushbuf_15
 mov r0, ##-1
 jmp #\@C___flushbuf_14
C___flushbuf_15
 mov r22, r21
 adds r22, #8
 rdlong r22, r22
 and r22, #2
 cmps r22,  #0 wz
 if_nz jmp #\C___flushbuf_17
 mov r0, ##-1
 jmp #\@C___flushbuf_14
C___flushbuf_17
 mov r22, r21
 adds r22, #8
 rdlong r22, r22
 mov r20, #0
 mov r18, r22
 and r18, #128
 cmps r18, r20 wz
 if_z jmp #\C___flushbuf_19
 and r22, #16
 cmps r22, r20 wz
 if_nz jmp #\C___flushbuf_19
 mov r0, ##-1
 jmp #\@C___flushbuf_14
C___flushbuf_19
 mov r22, r21
 adds r22, #8
 rdlong r20, r22
 mov r18, ##-129
 and r20, r18
 wrlong r20, r22
 mov r22, r21
 adds r22, #8
 rdlong r20, r22
 or r20, #256
 wrlong r20, r22
 mov r22, r21
 adds r22, #8
 rdlong r22, r22
 and r22, #4
 cmps r22,  #0 wz
 if_nz jmp #\C___flushbuf_21
 mov r22, r21
 adds r22, #16
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C___flushbuf_23
 mov r22, r21
 mov r20, ##@C___stdout
 cmp r22, r20 wz
 if_nz jmp #\C___flushbuf_25
 mov r2, ##@C___stdout+4
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C__isatty
 cmps r0,  #0 wz
 if_z jmp #\C___flushbuf_25
 mov BC, #0
 calld PA,#CALA
 long @C_sip01_65fa5715_get_buf_L000012
 mov r20, r21
 adds r20, #16
 wrlong r0, r20
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C___flushbuf_28
 mov r22, r21
 adds r22, #8
 rdlong r20, r22
 or r20, #4
 wrlong r20, r22
 jmp #\@C___flushbuf_26
C___flushbuf_28
 mov r22, r21
 adds r22, #8
 rdlong r20, r22
 or r20, #72
 wrlong r20, r22
 mov r22, r21
 adds r22, #12
 mov r20, ##512
 wrlong r20, r22
 mov r22, ##-1
 wrlong r22, r21
 jmp #\@C___flushbuf_26
C___flushbuf_25
 mov BC, #0
 calld PA,#CALA
 long @C_sip01_65fa5715_get_buf_L000012
 mov r20, r21
 adds r20, #16
 wrlong r0, r20
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C___flushbuf_30
 mov r22, r21
 adds r22, #8
 rdlong r20, r22
 or r20, #4
 wrlong r20, r22
 jmp #\@C___flushbuf_31
C___flushbuf_30
 mov r22, r21
 adds r22, #8
 rdlong r20, r22
 or r20, #8
 wrlong r20, r22
 mov r22, r21
 adds r22, #12
 mov r20, ##512
 wrlong r20, r22
 mov r22, r21
 adds r22, #8
 rdlong r22, r22
 and r22, #64
 cmps r22,  #0 wz
 if_nz jmp #\C___flushbuf_32
 mov r22, #511
 wrlong r22, r21
 jmp #\@C___flushbuf_33
C___flushbuf_32
 mov r22, ##-1
 wrlong r22, r21
C___flushbuf_33
C___flushbuf_31
C___flushbuf_26
 mov r22, r21
 adds r22, #20
 mov r20, r21
 adds r20, #16
 rdlong r20, r20
 wrlong r20, r22
C___flushbuf_23
C___flushbuf_21
 mov r22, r21
 adds r22, #8
 rdlong r22, r22
 and r22, #4
 cmps r22,  #0 wz
 if_z jmp #\C___flushbuf_34
 mov r22, r23
 mov RI, FP
 sub RI, #-(-8)
 wrbyte r22, RI
 mov r22, #0
 wrlong r22, r21
 mov r22, r21
 adds r22, #8
 rdlong r22, r22
 mov r20, ##512
 and r22, r20
 cmps r22,  #0 wz
 if_z jmp #\C___flushbuf_36
 mov r2, #2
 mov r3, #0
 mov r22, r21
 adds r22, #4
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__lseek
 add SP, #8
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C___flushbuf_38
 mov r22, r21
 adds r22, #8
 rdlong r20, r22
 or r20, #32
 wrlong r20, r22
 mov r0, ##-1
 jmp #\@C___flushbuf_14
C___flushbuf_38
C___flushbuf_36
 mov r2, #1
 mov r3, FP
 sub r3, #-(-8)
 mov r22, r21
 adds r22, #4
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__write
 add SP, #8
 cmps r0,  #1 wz
 if_z jmp #\C___flushbuf_40
 mov r22, r21
 adds r22, #8
 rdlong r20, r22
 or r20, #32
 wrlong r20, r22
 mov r0, ##-1
 jmp #\@C___flushbuf_14
C___flushbuf_40
 mov r22, r23
 mov r0, r22
 and r0, cviu_m1
 jmp #\@C___flushbuf_14
C___flushbuf_34
 mov r22, r21
 adds r22, #8
 rdlong r22, r22
 and r22, #64
 cmps r22,  #0 wz
 if_z jmp #\C___flushbuf_42
 mov r22, r21
 adds r22, #20
 rdlong r20, r22
 mov r18, r20
 adds r18, #1
 wrlong r18, r22
 mov r22, r23
 wrbyte r22, r20
 cmps r23,  #10 wz
 if_z jmp #\C___flushbuf_46
 rdlong r22, r21
 mov r20, r21
 adds r20, #12
 rdlong r20, r20
 neg r20, r20
 cmps r22, r20 wz
 if_nz jmp #\C___flushbuf_43
C___flushbuf_46
 rdlong r22, r21
 neg r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, r21
 adds r22, #20
 mov r20, r21
 adds r20, #16
 rdlong r20, r20
 wrlong r20, r22
 mov r22, #0
 wrlong r22, r21
 mov r22, r21
 adds r22, #8
 rdlong r22, r22
 mov r20, ##512
 and r22, r20
 cmps r22,  #0 wz
 if_z jmp #\C___flushbuf_47
 mov r2, #2
 mov r3, #0
 mov r22, r21
 adds r22, #4
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__lseek
 add SP, #8
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C___flushbuf_49
 mov r22, r21
 adds r22, #8
 rdlong r20, r22
 or r20, #32
 wrlong r20, r22
 mov r0, ##-1
 jmp #\@C___flushbuf_14
C___flushbuf_49
C___flushbuf_47
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov r22, r21
 adds r22, #16
 rdlong r3, r22
 mov r22, r21
 adds r22, #4
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sip0_65fa5715_do_write_L000003
 add SP, #8
 cmps r0,  #0 wz
 if_nz jmp #\C___flushbuf_43
 mov r22, r21
 adds r22, #8
 rdlong r20, r22
 or r20, #32
 wrlong r20, r22
 mov r0, ##-1
 jmp #\@C___flushbuf_14
C___flushbuf_42
 mov r22, r21
 adds r22, #20
 rdlong r22, r22
 mov r20, r21
 adds r20, #16
 rdlong r20, r20
 sub r22, r20
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, r21
 adds r22, #12
 rdlong r22, r22
 subs r22, #1
 wrlong r22, r21
 mov r22, r21
 adds r22, #20
 mov r20, r21
 adds r20, #16
 rdlong r20, r20
 adds r20, #1
 wrlong r20, r22
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_be jmp #\C___flushbuf_53
 mov r22, r21
 adds r22, #8
 rdlong r22, r22
 mov r20, ##512
 and r22, r20
 cmps r22,  #0 wz
 if_z jmp #\C___flushbuf_55
 mov r2, #2
 mov r3, #0
 mov r22, r21
 adds r22, #4
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__lseek
 add SP, #8
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C___flushbuf_57
 mov r22, r21
 adds r22, #8
 rdlong r20, r22
 or r20, #32
 wrlong r20, r22
 mov r0, ##-1
 jmp #\@C___flushbuf_14
C___flushbuf_57
C___flushbuf_55
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov r22, r21
 adds r22, #16
 rdlong r3, r22
 mov r22, r21
 adds r22, #4
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_sip0_65fa5715_do_write_L000003
 add SP, #8
 cmps r0,  #0 wz
 if_nz jmp #\C___flushbuf_59
 mov r22, r21
 adds r22, #16
 rdlong r22, r22
 mov r20, r23
 wrbyte r20, r22
 mov r22, r21
 adds r22, #8
 rdlong r20, r22
 or r20, #32
 wrlong r20, r22
 mov r0, ##-1
 jmp #\@C___flushbuf_14
C___flushbuf_59
C___flushbuf_53
 mov r22, r21
 adds r22, #16
 rdlong r22, r22
 mov r20, r23
 wrbyte r20, r22
C___flushbuf_43
 mov r22, r23
 mov r0, r22
 and r0, cviu_m1
C___flushbuf_14
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Import _clean
' Catalina Import _isatty
' Catalina Import _write
' Catalina Import _lseek
' Catalina Import __cleanup
' Catalina Import malloc
' Catalina Import __stdout
DAT
' Catalina Export fopen
 alignl
C_fopen
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $faaa80
 mov r23, r3
 mov r21, r2
 mov r11, #0
 mov r9, #0
 mov r17, ##0
 mov r15, #0
 mov r19, #0
 jmp #\@C_fopen_7
C_fopen_4
 cmps r19,  #63 wcz
 if_b jmp #\C_fopen_8
 mov r0, ##0
 jmp #\@C_fopen_3
C_fopen_8
 adds r19, #1
C_fopen_7
 mov r22, r19
 shl r22, #2
 mov r20, ##@C___iotab
 adds r22, r20
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_fopen_4
 mov r22, r21
 mov r21, r22
 adds r21, #1
 rdbyte r7, r22
 mov r22, #114
 cmps r7, r22 wz
 if_z jmp #\C_fopen_13
 cmps r7, r22 wcz
 if_a jmp #\C_fopen_17
 cmps r7,  #97 wz
 if_z jmp #\C_fopen_15
 jmp #\@C_fopen_10
C_fopen_17
 cmps r7,  #119 wz
 if_z jmp #\C_fopen_14
 jmp #\@C_fopen_10
C_fopen_13
 or r15, #129
 mov r11, #0
 jmp #\@C_fopen_19
C_fopen_14
 or r15, #258
 mov r11, #1
 mov r9, #48
 jmp #\@C_fopen_19
C_fopen_15
 mov r22, ##770
 or r15, r22
 mov r11, #1
 or r9, #80
 jmp #\@C_fopen_19
C_fopen_10
 mov r0, ##0
 jmp #\@C_fopen_3
C_fopen_18
 mov r22, r21
 mov r21, r22
 adds r21, #1
 rdbyte r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, #43
 cmps r22, r20 wz
 if_z jmp #\C_fopen_25
 cmps r22, r20 wcz
 if_b jmp #\C_fopen_20
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #98 wz
 if_z jmp #\C_fopen_19
 jmp #\@C_fopen_20
C_fopen_25
 mov r11, #2
 or r15, #3
C_fopen_19
 rdbyte r22, r21
 cmps r22,  #0 wz
 if_nz jmp #\C_fopen_18
C_fopen_20
 mov r22, r9
 and r22, #32
 cmps r22,  #0 wz
 if_nz jmp #\C_fopen_29
 mov r2, r11
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__open
 add SP, #4
 mov r13, r0
 mov r20, #0
 cmps r0, r20 wcz
 if_ae jmp #\C_fopen_27
 mov r22, r9
 and r22, #16
 cmps r22, r20 wz
 if_z jmp #\C_fopen_27
C_fopen_29
 mov r2, #438
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__creat
 add SP, #4
 mov r13, r0
 mov r20, #0
 cmps r0, r20 wcz
 if_be jmp #\C_fopen_30
 mov r22, r15
 or r22, #1
 cmps r22, r20 wz
 if_z jmp #\C_fopen_30
 mov r2, r13
 mov BC, #4
 calld PA,#CALA
 long @C__close
 mov r2, r11
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__open
 add SP, #4
 mov r13, r0
C_fopen_30
C_fopen_27
 cmps r13,  #0 wcz
 if_ae jmp #\C_fopen_32
 mov r0, ##0
 jmp #\@C_fopen_3
C_fopen_32
 mov r2, #24
 mov BC, #4
 calld PA,#CALA
 long @C_malloc
 mov r17, r0
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_fopen_34
 mov r2, r13
 mov BC, #4
 calld PA,#CALA
 long @C__close
 mov r0, ##0
 jmp #\@C_fopen_3
C_fopen_34
 mov r22, #3
 mov r20, r15
 and r20, #3
 cmps r20, r22 wz
 if_nz jmp #\C_fopen_36
 mov r22, ##-385
 and r15, r22
C_fopen_36
 mov r22, #0
 wrlong r22, r17
 mov r22, r17
 adds r22, #4
 wrlong r13, r22
 mov r22, r17
 adds r22, #8
 wrlong r15, r22
 mov r22, r17
 adds r22, #16
 mov r20, ##0
 wrlong r20, r22
 mov r22, r19
 shl r22, #2
 mov r20, ##@C___iotab
 adds r22, r20
 wrlong r17, r22
 mov r0, r17
C_fopen_3
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Import _close
' Catalina Import _creat
' Catalina Import _open
' Catalina Import malloc
' Catalina Import __iotab
DAT
' Catalina Export fprintf
 alignl
C_fprintf
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $400000
 mov RI, FP
 add RI, #8
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r2, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r3, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r4, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r5, BC
 mov r22, FP
 add r22, #16
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov RI, FP
 add RI, #8
 rdlong r2, RI
 mov RI, FP
 sub RI, #-(-8)
 rdlong r3, RI
 mov RI, FP
 add RI, #12
 rdlong r4, RI
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__doprnt
 add SP, #8
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r0, r22
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
' Catalina Import _doprnt
DAT
' Catalina Export fputc
 alignl
C_fputc
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r3
 mov r21, r2
 mov r2, r21
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_putc
 add SP, #4
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import putc
DAT
' Catalina Export fputs
 alignl
C_fputs
 calld PA,#NEWF
 calld PA,#PSHM
 long $f80000
 mov r23, r3
 mov r21, r2
 mov r19, #0
 jmp #\@C_fputs_3
C_fputs_2
 mov r2, r21
 mov r22, r23
 mov r23, r22
 adds r23, #1
 rdbyte r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_putc
 add SP, #4
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C_fputs_5
 mov r0, ##-1
 jmp #\@C_fputs_1
C_fputs_5
 adds r19, #1
C_fputs_3
 rdbyte r22, r23
 cmps r22,  #0 wz
 if_nz jmp #\C_fputs_2
 mov r0, r19
C_fputs_1
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import putc
DAT
' Catalina Export fread
 alignl
C_fread
 calld PA,#NEWF
 calld PA,#PSHM
 long $faaa00
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r15, r23
 mov r9, #0
 cmp r21,  #0 wz
 if_z jmp #\C_fread_2
 jmp #\@C_fread_5
C_fread_4
 mov r11, r21
C_fread_7
 mov r2, r17
 mov BC, #4
 calld PA,#CALA
 long @C_getc
 mov r13, r0
 mov r20, ##-1
 cmps r0, r20 wz
 if_z jmp #\C_fread_10
 mov r22, r15
 mov r15, r22
 adds r15, #1
 mov r20, r13
 wrbyte r20, r22
 jmp #\@C_fread_11
C_fread_10
 mov r0, r9
 jmp #\@C_fread_1
C_fread_11
 mov r22, r11
 sub r22, #1
 mov r11, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_fread_7
 add r9, #1
C_fread_5
 cmp r9, r19 wcz
 if_b jmp #\C_fread_4
C_fread_2
 mov r0, r9
C_fread_1
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import getc
DAT
' Catalina Export fscanf
 alignl
C_fscanf
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $400000
 mov RI, FP
 add RI, #8
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r2, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r3, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r4, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r5, BC
 mov r22, FP
 add r22, #16
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov RI, FP
 sub RI, #-(-8)
 rdlong r2, RI
 mov RI, FP
 add RI, #12
 rdlong r3, RI
 mov RI, FP
 add RI, #8
 rdlong r4, RI
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__doscan
 add SP, #8
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r0, r22
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
' Catalina Import _doscan
DAT
' Catalina Export fseek
 alignl
C_fseek
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $fe0000
 mov r23, r4
 mov r21, r3
 mov r19, r2
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, r23
 adds r22, #8
 rdlong r20, r22
 mov r18, ##-49
 and r20, r18
 wrlong r20, r22
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 and r22, #128
 cmps r22,  #0 wz
 if_z jmp #\C_fseek_2
 cmps r19,  #1 wz
 if_nz jmp #\C_fseek_4
 mov r22, r23
 adds r22, #16
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_fseek_4
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 and r22, #4
 cmps r22,  #0 wz
 if_nz jmp #\C_fseek_4
 rdlong r22, r23
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_fseek_4
 mov r22, #0
 wrlong r22, r23
 jmp #\@C_fseek_3
C_fseek_2
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 and r22, #256
 cmps r22,  #0 wz
 if_z jmp #\C_fseek_6
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_fflush
C_fseek_6
C_fseek_3
 mov r2, r19
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r3, r21
 subs r3, r22
 mov r22, r23
 adds r22, #4
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__lseek
 add SP, #8
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 mov r20, #0
 mov r18, r22
 and r18, #1
 cmps r18, r20 wz
 if_z jmp #\C_fseek_8
 and r22, #2
 cmps r22, r20 wz
 if_z jmp #\C_fseek_8
 mov r22, r23
 adds r22, #8
 rdlong r20, r22
 mov r18, ##-385
 and r20, r18
 wrlong r20, r22
C_fseek_8
 mov r22, r23
 adds r22, #20
 mov r20, r23
 adds r20, #16
 rdlong r20, r20
 wrlong r20, r22
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, ##-1
 cmps r22, r20 wz
 if_nz jmp #\C_fseek_11
 mov r17, ##-1
 jmp #\@C_fseek_12
C_fseek_11
 mov r17, #0
C_fseek_12
 mov r0, r17
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
' Catalina Import _lseek
' Catalina Import fflush
DAT
' Catalina Export ftell
 alignl
C_ftell
 calld PA,#NEWF
 calld PA,#PSHM
 long $fc0000
 mov r23, r2
 mov r19, #0
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 and r22, #128
 cmps r22,  #0 wz
 if_z jmp #\C_ftell_2
 rdlong r22, r23
 neg r19, r22
 jmp #\@C_ftell_3
C_ftell_2
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 mov r20, #0
 mov r18, r22
 and r18, #256
 cmps r18, r20 wz
 if_z jmp #\C_ftell_4
 mov r18, r23
 adds r18, #16
 rdlong r18, r18
 cmp r18,  #0 wz
 if_z jmp #\C_ftell_4
 and r22, #4
 cmps r22, r20 wz
 if_nz jmp #\C_ftell_4
 mov r22, r23
 adds r22, #20
 rdlong r22, r22
 mov r20, r23
 adds r20, #16
 rdlong r20, r20
 sub r22, r20
 mov r19, r22
 jmp #\@C_ftell_5
C_ftell_4
 mov r19, #0
C_ftell_5
C_ftell_3
 mov r2, #1
 mov r3, #0
 mov r22, r23
 adds r22, #4
 rdlong r4, r22
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__lseek
 add SP, #8
 mov r21, r0
 mov r22, ##-1
 cmps r21, r22 wz
 if_nz jmp #\C_ftell_6
 mov r0, r21
 jmp #\@C_ftell_1
C_ftell_6
 adds r21, r19
 mov r0, r21
C_ftell_1
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _lseek
DAT
' Catalina Export fwrite
 alignl
C_fwrite
 calld PA,#NEWF
 calld PA,#PSHM
 long $faa800
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r15, r23
 mov r11, #0
 cmp r21,  #0 wz
 if_z jmp #\C_fwrite_2
 jmp #\@C_fwrite_5
C_fwrite_4
 mov r13, r21
C_fwrite_7
 mov r2, r17
 rdbyte r3, r15
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_putc
 add SP, #4
 mov r20, ##-1
 cmps r0, r20 wz
 if_nz jmp #\C_fwrite_10
 mov r0, r11
 jmp #\@C_fwrite_1
C_fwrite_10
 adds r15, #1
 mov r22, r13
 sub r22, #1
 mov r13, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_fwrite_7
 add r11, #1
C_fwrite_5
 cmp r11, r19 wcz
 if_b jmp #\C_fwrite_4
C_fwrite_2
 mov r0, r11
C_fwrite_1
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import putc
DAT
' Catalina Export getc
 alignl
C_getc
 calld PA,#NEWF
 calld PA,#PSHM
 long $d40000
 mov r23, r2
 rdlong r22, r23
 subs r22, #1
 wrlong r22, r23
 cmps r22,  #0 wcz
 if_b jmp #\C_getc_2
 mov r22, r23
 adds r22, #20
 rdlong r20, r22
 mov r18, r20
 adds r18, #1
 wrlong r18, r22
 rdbyte r0, r20
 jmp #\@C_getc_1
C_getc_2
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C___fillbuf
 mov r22, r0
C_getc_1
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import __fillbuf
DAT
' Catalina Export rtc_getclock
 alignl
C_rtc_getclock
 calld PA,#NEWF
 calld PA,#PSHM
 long $400000
 mov r2, #0
 mov r3, #46
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__long_service
 add SP, #4
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _long_service
DAT
DAT
 alignl
C_getenv
 calld PA,#NEWF
 calld PA,#PSHM
 long $faa000
 mov r23, r2
 mov r22, ##@C_getenv_eaddr_L000007
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_getenv_8






 mov r0, ##ENVIRON






 mov r22, r0
 wrlong r22, ##@C_getenv_eaddr_L000007
 mov r22, ##@C_getenv_eaddr_L000007
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_getenv_12
 mov r21, ##@C_getenv_eaddr_L000007
 rdlong r21, r21
 jmp #\@C_getenv_15
C_getenv_17
 adds r21, #1
C_getenv_18
 rdbyte r22, r21
 cmps r22,  #10 wz
 if_nz jmp #\C_getenv_17
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #0
 wrbyte r20, r22
C_getenv_15
 rdbyte r22, r21
 cmps r22,  #0 wz
 if_nz jmp #\C_getenv_18
 mov r13, #0
C_getenv_20
 mov r22, r21
 mov r21, r22
 adds r21, #1
 mov r20, #0
 wrbyte r20, r22
 adds r13, #1
 cmps r13,  #3 wcz
 if_b jmp #\C_getenv_20
 mov r21, ##@C_getenv_eaddr_L000007
 rdlong r21, r21
 jmp #\@C_getenv_25
C_getenv_24
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 add r22, #1
 adds r21, r22
C_getenv_25
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 cmp r0,  #0 wz
 if_nz jmp #\C_getenv_24
C_getenv_12
C_getenv_8
 mov r22, ##@C_getenv_eaddr_L000007
 rdlong r22, r22
 cmp r22,  #0 wz
 if_z jmp #\C_getenv_27
 mov r21, ##@C_getenv_eaddr_L000007
 rdlong r21, r21
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r15, r0
 jmp #\@C_getenv_30
C_getenv_29
 mov r2, #61
 mov r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strchr
 add SP, #4
 mov r19, r0
 mov r22, r19
 cmp r22,  #0 wz
 if_z jmp #\C_getenv_32
 mov r22, r15
 adds r22, r21
 rdbyte r22, r22
 cmps r22,  #61 wz
 if_nz jmp #\C_getenv_34
 mov r2, r15
 mov r3, r21
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_strncmp
 add SP, #8
 cmps r0,  #0 wz
 if_nz jmp #\C_getenv_34
 mov r0, r19
 adds r0, #1
 jmp #\@C_getenv_3
C_getenv_34
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 adds r22, r19
 mov r21, r22
 adds r21, #1
 jmp #\@C_getenv_33
C_getenv_32
 mov r22, r17
 adds r22, #1
 adds r21, r22
C_getenv_33
C_getenv_30
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r17, r0
 cmps r0,  #0 wcz
 if_a jmp #\C_getenv_29
C_getenv_27
 mov r2, ##@C_getenv_38_L000039
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcmp
 add SP, #4
 cmps r0,  #0 wz
 if_nz jmp #\C_getenv_36
 mov r0, ##@C_getenv_timezone_L000005
 jmp #\@C_getenv_3
C_getenv_36
 mov r0, ##0
C_getenv_3
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import strlen
' Catalina Import strchr
' Catalina Import strncmp
' Catalina Import strcmp
DAT
DAT
DAT
 alignl
C__getticks
 calld PA,#NEWF
 sub SP, #12
 calld PA,#PSHM
 long $f00000
 mov r23, r3
 mov r21, r2
 mov r0, FP
 sub r0, #-(-12)
 mov r1, ##@C__getticks_3_L000004
 calld PA,#CPYB
 long 8
 mov r22, FP
 sub r22, #-(-12)
 mov r20, ##16777215
 mov r2, r22
 and r2, r20
 mov r3, ##-67
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__sys_plugin
 add SP, #4
 mov RI, FP
 sub RI, #-(-16)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 wrlong r22, r23
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 wrlong r22, r21
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r0, r22
 calld PA,#POPM
 add SP, #12
 calld PA,#RETF
' Catalina Import _sys_plugin
DAT
' Catalina Export rtc_gettime
 alignl
C_rtc_gettime
 calld PA,#NEWF
 calld PA,#PSHM
 long $400000
 mov r2, #0
 mov r3, #48
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__long_service
 add SP, #4
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _long_service
DAT
DAT
DAT
DAT
 alignl
C_gmtime
 calld PA,#PSHM
 long $fea800
 mov r23, ##@C_gmtime_br_time_L000003
 rdlong r15, r2
 mov r17, ##1970
 mov r22, ##$15180

  stalli

 qdiv r15, r22
 getqy r1

  allowi

 mov r21, r1

  stalli

 qdiv r15, r22
 getqx r0

  allowi

 mov r19, r0
 mov r22, #60

  stalli

 qdiv r21, r22
 getqy r1

  allowi

 mov r22, r1
 wrlong r22, r23
 mov r22, r23
 adds r22, #4
 mov r20, ##3600

  stalli

 qdiv r21, r20
 getqy r1

  allowi

 mov r20, #60

  stalli

 qdiv r1, r20
 getqx r0

  allowi

 mov r20, r0
 wrlong r20, r22
 mov r22, r23
 adds r22, #8
 mov r20, ##3600

  stalli

 qdiv r21, r20
 getqx r0

  allowi

 mov r20, r0
 wrlong r20, r22
 mov r22, r23
 adds r22, #24
 mov r20, r19
 add r20, #4
 mov r18, #7

  stalli

 qdiv r20, r18
 getqy r1

  allowi

 mov r20, r1
 wrlong r20, r22
 jmp #\@C_gmtime_5
C_gmtime_4
 mov r22, #0
 mov r20, #4
 mov r0, r17
 mov r1, r20
 calld PA,#DIVS
 cmps r1, r22 wz
 if_nz jmp #\C_gmtime_9
 mov r20, #100
 mov r0, r17
 mov r1, r20
 calld PA,#DIVS
 cmps r1, r22 wz
 if_nz jmp #\C_gmtime_11
 mov r20, #400
 mov r0, r17
 mov r1, r20
 calld PA,#DIVS
 cmps r1, r22 wz
 if_nz jmp #\C_gmtime_9
C_gmtime_11
 mov r13, #366
 jmp #\@C_gmtime_10
C_gmtime_9
 mov r13, #365
C_gmtime_10
 mov r22, r13
 sub r19, r22
 adds r17, #1
C_gmtime_5
 mov r22, #0
 mov r20, #4
 mov r0, r17
 mov r1, r20
 calld PA,#DIVS
 cmps r1, r22 wz
 if_nz jmp #\C_gmtime_12
 mov r20, #100
 mov r0, r17
 mov r1, r20
 calld PA,#DIVS
 cmps r1, r22 wz
 if_nz jmp #\C_gmtime_14
 mov r20, #400
 mov r0, r17
 mov r1, r20
 calld PA,#DIVS
 cmps r1, r22 wz
 if_nz jmp #\C_gmtime_12
C_gmtime_14
 mov r13, #366
 jmp #\@C_gmtime_13
C_gmtime_12
 mov r13, #365
C_gmtime_13
 mov r22, r13
 cmp r19, r22 wcz
 if_ae jmp #\C_gmtime_4
 mov r22, r23
 adds r22, #20
 mov r20, ##1900
 subs r20, r17
 neg r20, r20
 wrlong r20, r22
 mov r22, r23
 adds r22, #28
 mov r20, r19
 wrlong r20, r22
 mov r22, r23
 adds r22, #16
 mov r20, #0
 wrlong r20, r22
 jmp #\@C_gmtime_16
C_gmtime_15
 mov r22, #0
 mov r20, #4
 mov r0, r17
 mov r1, r20
 calld PA,#DIVS
 cmps r1, r22 wz
 if_nz jmp #\C_gmtime_20
 mov r20, #100
 mov r0, r17
 mov r1, r20
 calld PA,#DIVS
 cmps r1, r22 wz
 if_nz jmp #\C_gmtime_22
 mov r20, #400
 mov r0, r17
 mov r1, r20
 calld PA,#DIVS
 cmps r1, r22 wz
 if_nz jmp #\C_gmtime_20
C_gmtime_22
 mov r11, #1
 jmp #\@C_gmtime_21
C_gmtime_20
 mov r11, #0
C_gmtime_21
 mov r22, r23
 adds r22, #16
 rdlong r22, r22
 shl r22, #2
 mov r20, #48

  stalli

 qmul r20, r11
 getqx r0

  allowi

 mov r20, ##@C__ytab
 adds r20, r0
 adds r22, r20
 rdlong r22, r22
 sub r19, r22
 mov r22, r23
 adds r22, #16
 rdlong r20, r22
 adds r20, #1
 wrlong r20, r22
C_gmtime_16
 mov r22, #0
 mov r20, #4
 mov r0, r17
 mov r1, r20
 calld PA,#DIVS
 cmps r1, r22 wz
 if_nz jmp #\C_gmtime_23
 mov r20, #100
 mov r0, r17
 mov r1, r20
 calld PA,#DIVS
 cmps r1, r22 wz
 if_nz jmp #\C_gmtime_25
 mov r20, #400
 mov r0, r17
 mov r1, r20
 calld PA,#DIVS
 cmps r1, r22 wz
 if_nz jmp #\C_gmtime_23
C_gmtime_25
 mov r11, #1
 jmp #\@C_gmtime_24
C_gmtime_23
 mov r11, #0
C_gmtime_24
 mov r22, r23
 adds r22, #16
 rdlong r22, r22
 shl r22, #2
 mov r20, #48

  stalli

 qmul r20, r11
 getqx r0

  allowi

 mov r20, ##@C__ytab
 adds r20, r0
 adds r22, r20
 rdlong r22, r22
 cmp r19, r22 wcz
 if_ae jmp #\C_gmtime_15
 mov r22, r23
 adds r22, #12
 mov r20, r19
 add r20, #1
 wrlong r20, r22
 mov r22, r23
 adds r22, #32
 mov r20, #0
 wrlong r20, r22
 mov r0, r23
 calld PA,#POPM
 calld PA,#RETN
' Catalina Import _ytab
DAT
' Catalina Export _i_compute
 alignl
C__i_compute
 calld PA,#NEWF
 calld PA,#PSHM
 long $faa000
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r22, r21

  stalli

 qdiv r23, r22
 getqy r1

  allowi

 mov r15, r1

  stalli

 qdiv r23, r22
 getqx r0

  allowi

 mov r23, r0
 cmp r23,  #0 wz
 if_nz jmp #\C__i_compute_4
 cmps r17,  #1 wcz
 if_be jmp #\C__i_compute_2
C__i_compute_4
 mov r2, r17
 subs r2, #1
 mov r3, r19
 mov r4, r21
 mov r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C__i_compute
 add SP, #12
 mov r19, r0
C__i_compute_2
 mov r22, r19
 mov r19, r22
 adds r19, #1
 cmps r15,  #9 wcz
 if_be jmp #\C__i_compute_6
 mov r20, r15
 subs r20, #10
 mov r13, r20
 adds r13, #97
 jmp #\@C__i_compute_7
C__i_compute_6
 mov r13, r15
 adds r13, #48
C__i_compute_7
 mov r20, r13
 wrbyte r20, r22
 mov r0, r19
 calld PA,#POPM
 calld PA,#RETF
DAT
' Catalina Export _isatty
 alignl
C__isatty
 calld PA,#PSHM
 long $400000
 mov r22, ##@C___stdin+4
 rdlong r22, r22
 cmps r2, r22 wz
 if_z jmp #\C__isatty_8
 mov r22, ##@C___stdout+4
 rdlong r22, r22
 cmps r2, r22 wz
 if_z jmp #\C__isatty_8
 mov r22, ##@C___stderr+4
 rdlong r22, r22
 cmps r2, r22 wz
 if_nz jmp #\C__isatty_2
C__isatty_8
 mov r0, #1
 jmp #\@C__isatty_1
C__isatty_2
 mov r0, #0
C__isatty_1
 calld PA,#POPM
 calld PA,#RETN
' Catalina Import __stderr
' Catalina Import __stdout
' Catalina Import __stdin
DAT
' Catalina Export k_get
 alignl
C_k_get
 calld PA,#NEWF
 calld PA,#PSHM
 long $400000
 mov r2, #0
 mov r3, #11
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__short_service
 add SP, #4
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _short_service
DAT
' Catalina Export k_wait
 alignl
C_k_wait
 calld PA,#NEWF
 calld PA,#PSHM
 long $400000
 mov r2, #0
 mov r3, #12
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__short_service
 add SP, #4
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _short_service
DAT
' Catalina Export ldiv
 alignl
C_ldiv
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $f00000
 mov r0, r3
 mov r1, r2
 calld PA,#DIVS
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 mov r0, r3
 mov r1, r2
 calld PA,#DIVS
 mov RI, FP
 sub RI, #-(-8)
 wrlong r1, RI
 mov r22, #0
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 cmps r20, r22 wz
 if_z jmp #\C_ldiv_6
 cmps r3, r22 wcz
 if_be jmp #\C_ldiv_12
 mov r23, #1
 jmp #\@C_ldiv_13
C_ldiv_12
 mov r23, #0
C_ldiv_13
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_be jmp #\C_ldiv_14
 mov r21, #1
 jmp #\@C_ldiv_15
C_ldiv_14
 mov r21, #0
C_ldiv_15
 cmps r23, r21 wz
 if_z jmp #\C_ldiv_6
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 adds r22, #1
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 subs r22, r2
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_ldiv_6
 mov r0, r4
 mov r1, FP
 sub r1, #-(-12)
 calld PA,#CPYB
 long 8
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
DAT
DAT
DAT
' Catalina Export _malloc_first_present
 alignl
C__malloc_first_present
 calld PA,#PSHM
 long $f00000
 mov r22, r2
 shl r22, #2
 mov r20, ##@C__malloc_free_list
 mov r23, r22
 adds r23, r20
 jmp #\@C__malloc_first_present_7
C__malloc_first_present_4
 rdlong r22, r23
 mov r21, r22
 cmp r22,  #0 wz
 if_z jmp #\C__malloc_first_present_9
 rdlong r22, r21
 wrlong r22, r23
 rdlong r22, r23
 cmp r22,  #0 wz
 if_z jmp #\C__malloc_first_present_11
 rdlong r22, r23
 adds r22, #4
 mov r20, ##0
 wrlong r20, r22
C__malloc_first_present_11
 mov r0, r21
 jmp #\@C__malloc_first_present_3
C__malloc_first_present_9
 adds r23, #4
C__malloc_first_present_7
 mov r22, r23
 mov r20, ##@C__malloc_free_list+84
 cmp r22, r20 wcz
 if_b jmp #\C__malloc_first_present_4
 mov r0, ##0
C__malloc_first_present_3
 calld PA,#POPM
 calld PA,#RETN
' Catalina Import _malloc_free_list
DAT
' Catalina Export _malloc_link_free_chunk
 alignl
C__malloc_link_free_chunk
 calld PA,#PSHM
 long $f80000
 mov r23, ##@C__malloc_free_list
 mov r22, ##-8
 adds r22, r2
 rdlong r22, r22
 mov r21, r22
 sub r21, #8
C__malloc_link_free_chunk_4
 shr r21, #1
 adds r23, #4
 cmp r21,  #8 wcz
 if_ae jmp #\C__malloc_link_free_chunk_4
 mov r22, ##-4
 adds r22, r23
 mov r23, r22
 rdlong r19, r22
 mov r22, r2
 adds r22, #4
 mov r20, ##0
 wrlong r20, r22
 wrlong r19, r2
 mov r22, r19
 cmp r22,  #0 wz
 if_z jmp #\C__malloc_link_free_chunk_7
 mov r22, r19
 adds r22, #4
 wrlong r2, r22
C__malloc_link_free_chunk_7
 wrlong r2, r23
 mov r0, #0
 calld PA,#POPM
 calld PA,#RETN
' Catalina Import _malloc_free_list
DAT
' Catalina Export localtime
 alignl
C_localtime
 calld PA,#NEWF
 calld PA,#PSHM
 long $fd0000
 mov r23, r2
 mov BC, #0
 calld PA,#CALA
 long @C__tzset
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_gmtime
 mov r21, r0
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, ##@C__timezone
 rdlong r18, r18
 mov r16, #60
 mov r0, r18
 mov r1, r16
 calld PA,#DIVS
 subs r20, r0
 wrlong r20, r22
 rdlong r22, r21
 mov r20, ##@C__timezone
 rdlong r20, r20
 mov r18, #60
 mov r0, r20
 mov r1, r18
 calld PA,#DIVS
 subs r22, r1
 wrlong r22, r21
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_mktime
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C__dstget
 mov r19, r0
 cmp r19,  #0 wz
 if_z jmp #\C_localtime_2
 mov r22, r21
 adds r22, #4
 rdlong r20, r22
 mov r18, #60

  stalli

 qdiv r19, r18
 getqx r0

  allowi

 add r20, r0
 wrlong r20, r22
 rdlong r22, r21
 mov r20, #60

  stalli

 qdiv r19, r20
 getqy r1

  allowi

 add r22, r1
 wrlong r22, r21
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_mktime
C_localtime_2
 mov r0, r21
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _timezone
' Catalina Import _dstget
' Catalina Import _tzset
' Catalina Import gmtime
' Catalina Import mktime
DAT
' Catalina Export _malloc_search_free_list
 alignl
C__malloc_search_free_list
 calld PA,#PSHM
 long $d00000
 mov r22, r3
 shl r22, #2
 mov r20, ##@C__malloc_free_list
 adds r22, r20
 rdlong r23, r22
 jmp #\@C__malloc_search_free_list_7
C__malloc_search_free_list_4
 mov r22, ##-8
 adds r22, r23
 rdlong r22, r22
 sub r22, #8
 cmp r22, r2 wcz
 if_b jmp #\C__malloc_search_free_list_8
 mov r0, r23
 jmp #\@C__malloc_search_free_list_3
C__malloc_search_free_list_8
 rdlong r23, r23
C__malloc_search_free_list_7
 mov r22, r23
 cmp r22,  #0 wz
 if_nz jmp #\C__malloc_search_free_list_4
 mov r0, ##0
C__malloc_search_free_list_3
 calld PA,#POPM
 calld PA,#RETN
' Catalina Import _malloc_free_list
DAT
' Catalina Export _malloc_unlink_free_chunk
 alignl
C__malloc_unlink_free_chunk
 calld PA,#PSHM
 long $ea0000
 rdlong r23, r2
 mov r22, r2
 adds r22, #4
 rdlong r21, r22
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C__malloc_unlink_free_chunk_4
 mov r19, ##@C__malloc_free_list-4
 mov r22, ##-8
 adds r22, r2
 rdlong r22, r22
 mov r17, r22
 sub r17, #8
C__malloc_unlink_free_chunk_7
 shr r17, #1
 adds r19, #4
 cmp r17,  #8 wcz
 if_ae jmp #\C__malloc_unlink_free_chunk_7
 wrlong r23, r19
 jmp #\@C__malloc_unlink_free_chunk_5
C__malloc_unlink_free_chunk_4
 wrlong r23, r21
C__malloc_unlink_free_chunk_5
 mov r22, r23
 cmp r22,  #0 wz
 if_z jmp #\C__malloc_unlink_free_chunk_10
 mov r22, r23
 adds r22, #4
 wrlong r21, r22
C__malloc_unlink_free_chunk_10
 mov r0, #0
 calld PA,#POPM
 calld PA,#RETN
' Catalina Import _malloc_free_list
DAT
' Catalina Export free
 alignl
C_free
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $f00000
 mov r23, r2
 mov BC, #0
 calld PA,#CALA
 long @C__memory_lock
 mov r22, r23
 cmp r22,  #0 wz
 if_nz jmp #\C_free_4
 mov BC, #0
 calld PA,#CALA
 long @C__memory_unlock
 jmp #\@C_free_3
C_free_4
 mov r21, r23
 mov r22, ##-4
 adds r22, r21
 rdlong r22, r22
 mov r20, r22
 and r20, #1
 cmps r20,  #0 wz
 if_nz jmp #\C_free_8
 and r22, #2
 cmp r22,  #0 wz
 if_z jmp #\C_free_6
C_free_8
 mov BC, #0
 calld PA,#CALA
 long @C__memory_unlock
 jmp #\@C_free_3
C_free_6
 mov r22, ##-8
 adds r22, r21
 rdlong r22, r22
 sub r22, #8
 cmp r22,  #256 wcz
 if_a jmp #\C_free_9
 mov r22, ##-8
 adds r22, r21
 rdlong r22, r22
 sub r22, #8
 shr r22, #3
 sub r22, #1
 shl r22, #2
 mov r20, ##@C__malloc_store
 adds r22, r20
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdlong r22, r22
 wrlong r22, r21
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 wrlong r21, r22
 mov r22, ##-4
 adds r22, r21
 rdlong r20, r22
 or r20, #2
 wrlong r20, r22
 jmp #\@C_free_10
C_free_9
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C__malloc_do_free
C_free_10
 mov BC, #0
 calld PA,#CALA
 long @C__memory_unlock
C_free_3
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Export _malloc_do_free
 alignl
C__malloc_do_free
 calld PA,#NEWF
 calld PA,#PSHM
 long $fa8000
 mov r23, r2
 mov r22, ##-4
 adds r22, r23
 rdlong r20, r22
 or r20, #1
 wrlong r20, r22
 mov r22, r23
 mov r20, ##@C_ml_last
 rdlong r20, r20
 cmp r22, r20 wz
 if_nz jmp #\C__malloc_do_free_15
 mov r21, #1
 jmp #\@C__malloc_do_free_16
C__malloc_do_free_15
 mov r21, #0
C__malloc_do_free_16
 cmps r21,  #0 wz
 if_nz jmp #\C__malloc_do_free_12
 mov r22, ##-8
 adds r22, r23
 rdlong r22, r22
 mov r19, r22
 adds r19, r23
 mov r22, ##-4
 adds r22, r19
 rdlong r22, r22
 and r22, #1
 cmps r22,  #0 wz
 if_z jmp #\C__malloc_do_free_17
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C__malloc_unlink_free_chunk
 mov r2, r19
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__malloc_combine_chunks
 add SP, #4
C__malloc_do_free_17
C__malloc_do_free_12
 mov r22, ##-4
 adds r22, r23
 rdlong r22, r22
 mov r20, ##$fffffffc
 and r22, r20
 cmp r22,  #0 wz
 if_nz jmp #\C__malloc_do_free_22
 mov r19, #1
 jmp #\@C__malloc_do_free_23
C__malloc_do_free_22
 mov r19, #0
C__malloc_do_free_23
 cmps r19,  #0 wz
 if_nz jmp #\C__malloc_do_free_19
 mov r22, ##-4
 adds r22, r23
 rdlong r22, r22
 mov r20, ##$fffffffc
 and r22, r20
 mov r17, r22
 mov r22, ##-4
 adds r22, r17
 rdlong r22, r22
 and r22, #1
 cmps r22,  #0 wz
 if_z jmp #\C__malloc_do_free_24
 mov r2, r17
 mov BC, #4
 calld PA,#CALA
 long @C__malloc_unlink_free_chunk
 mov r2, r23
 mov r3, r17
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__malloc_combine_chunks
 add SP, #4
 mov r23, r17
C__malloc_do_free_24
C__malloc_do_free_19
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C__malloc_link_free_chunk
 mov r17, #0
 cmps r17,  #0 wz
 if_z jmp #\C__malloc_do_free_27
 cmps r17,  #1 wz
 if_z jmp #\C__malloc_do_free_27
 jmp #\@C__malloc_do_free_26
C__malloc_do_free_26
C__malloc_do_free_27
 mov r15, #0
 cmps r15,  #0 wz
 if_z jmp #\C__malloc_do_free_32
 cmps r15,  #1 wz
 if_z jmp #\C__malloc_do_free_32
 jmp #\@C__malloc_do_free_31
C__malloc_do_free_31
C__malloc_do_free_32
 mov r0, #0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _memory_unlock
' Catalina Import _memory_lock
' Catalina Import _malloc_store
' Catalina Import _malloc_combine_chunks
' Catalina Import ml_last
' Catalina Import _malloc_unlink_free_chunk
' Catalina Import _malloc_link_free_chunk
DAT
' Catalina Export malloc
 alignl
C_malloc
 calld PA,#NEWF
 calld PA,#PSHM
 long $fe8000
 mov r23, r2
 mov BC, #0
 calld PA,#CALA
 long @C__memory_lock
 cmp r23,  #0 wz
 if_nz jmp #\C_malloc_4
 mov BC, #0
 calld PA,#CALA
 long @C__memory_unlock
 mov r0, ##0
 jmp #\@C_malloc_3
C_malloc_4
 cmp r23,  #8 wcz
 if_ae jmp #\C_malloc_6
 mov r23, #8
 jmp #\@C_malloc_7
C_malloc_6
 mov r22, r23
 add r22, #7
 mov r20, ##$fffffff8
 mov r23, r22
 and r23, r20
C_malloc_7
 cmp r23,  #256 wcz
 if_a jmp #\C_malloc_8
 mov r22, r23
 shr r22, #3
 sub r22, #1
 shl r22, #2
 mov r20, ##@C__malloc_store
 mov r17, r22
 adds r17, r20
 rdlong r22, r17
 mov r21, r22
 cmp r22,  #0 wz
 if_z jmp #\C_malloc_10
 rdlong r22, r21
 wrlong r22, r17
 mov r22, ##-4
 adds r22, r21
 rdlong r20, r22
 mov r18, ##$fffffffd
 and r20, r18
 wrlong r20, r22
 mov BC, #0
 calld PA,#CALA
 long @C__memory_unlock
 mov r0, r21
 jmp #\@C_malloc_3
C_malloc_10
C_malloc_8
 mov r17, r23
 mov r19, #0
C_malloc_12
 mov r22, #1
 shr r17, r22
 adds r19, #1
 cmp r17,  #8 wcz
 if_ae jmp #\C_malloc_12
 cmps r19,  #21 wcz
 if_b jmp #\C_malloc_15
 mov BC, #0
 calld PA,#CALA
 long @C__memory_unlock
 mov r0, ##0
 jmp #\@C_malloc_3
C_malloc_15
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C__malloc_first_present
 mov r21, r0
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C_malloc_17
 mov r22, #8
 shl r22, r19
 add r22, #8
 add r22, #64
 sub r22, #1
 mov r20, ##$ffffffc0
 mov r15, r22
 and r15, r20
 mov r22, ##@C_ml_last
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_malloc_19
 mov r2, #0
 mov BC, #4
 calld PA,#CALA
 long @C__sbrk
 mov r17, r0
 mov r20, r17
 add r20, #7
 mov r18, ##$fffffff8
 and r20, r18
 mov r22, r20
 sub r22, r17
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C__sbrk
C_malloc_19
 mov r22, r15
 cmps r22,  #0 wcz
 if_ae jmp #\C_malloc_21
 mov r17, ##$ffffffff
 jmp #\@C_malloc_22
C_malloc_21
 mov r2, r15
 mov BC, #4
 calld PA,#CALA
 long @C__sbrk
 mov r17, r0
C_malloc_22
 mov r22, r17
 mov r20, ##$ffffffff
 cmp r22, r20 wz
 if_nz jmp #\C_malloc_23
 mov r15, r23
 add r15, #8
 mov r22, r15
 cmps r22,  #0 wcz
 if_b jmp #\C_malloc_25
 mov r2, r15
 mov BC, #4
 calld PA,#CALA
 long @C__sbrk
 mov r17, r0
C_malloc_25
C_malloc_23
 mov r22, r17
 mov r20, ##$ffffffff
 cmp r22, r20 wz
 if_nz jmp #\C_malloc_27
 mov BC, #0
 calld PA,#CALA
 long @C__malloc_sell_out
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C__malloc_first_present
 mov r21, r0
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C_malloc_18
 mov r2, r23
 mov r3, r19
 subs r3, #1
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__malloc_search_free_list
 add SP, #4
 mov r21, r0
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C_malloc_31
 mov BC, #0
 calld PA,#CALA
 long @C__memory_unlock
 mov r0, ##0
 jmp #\@C_malloc_3
C_malloc_31
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C__malloc_unlink_free_chunk
 jmp #\@C_malloc_18
C_malloc_27
 mov r2, r15
 mov r3, r17
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__malloc_create_chunk
 add SP, #4
 mov r21, r0
C_malloc_17
C_malloc_18
 mov r22, ##-4
 adds r22, r21
 rdlong r20, r22
 mov r18, ##$fffffffe
 and r20, r18
 wrlong r20, r22
 add r23, #8
 mov r22, r23
 add r22, #8
 add r22, #64
 mov r20, ##-8
 adds r20, r21
 rdlong r20, r20
 sub r20, #8
 cmp r22, r20 wcz
 if_a jmp #\C_malloc_33
 mov r2, r23
 mov r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__malloc_truncate
 add SP, #4
C_malloc_33
 mov BC, #0
 calld PA,#CALA
 long @C__memory_unlock
 mov r0, r21
C_malloc_3
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export malloc_defragment
 alignl
C_malloc_defragment
 calld PA,#NEWF
 mov BC, #0
 calld PA,#CALA
 long @C__memory_lock
 mov BC, #0
 calld PA,#CALA
 long @C__malloc_sell_out
 mov BC, #0
 calld PA,#CALA
 long @C__memory_unlock
 mov r0, ##0
 calld PA,#RETF
' Catalina Import _memory_unlock
' Catalina Import _memory_lock
' Catalina Import _malloc_store
' Catalina Import _malloc_sell_out
' Catalina Import _sbrk
' Catalina Import _malloc_create_chunk
' Catalina Import _malloc_truncate
' Catalina Import ml_last
' Catalina Import _malloc_search_free_list
' Catalina Import _malloc_first_present
' Catalina Import _malloc_unlink_free_chunk
DAT
' Catalina Export realloc
 alignl
C_realloc
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $feaa00
 mov r23, r3
 mov r21, r2
 mov BC, #0
 calld PA,#CALA
 long @C__memory_lock
 mov r22, r23
 cmp r22,  #0 wz
 if_nz jmp #\C_realloc_4
 mov BC, #0
 calld PA,#CALA
 long @C__memory_unlock
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_malloc
 mov r22, r0
 jmp #\@C_realloc_3
C_realloc_4
 cmp r21,  #0 wz
 if_nz jmp #\C_realloc_6
 mov BC, #0
 calld PA,#CALA
 long @C__memory_unlock
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov r0, ##0
 jmp #\@C_realloc_3
C_realloc_6
 mov r19, r23
 cmp r21,  #8 wcz
 if_ae jmp #\C_realloc_8
 mov r21, #8
 jmp #\@C_realloc_9
C_realloc_8
 mov r22, r21
 add r22, #7
 mov r20, ##$fffffff8
 mov r21, r22
 and r21, r20
C_realloc_9
 mov r22, ##-4
 adds r22, r19
 rdlong r22, r22
 and r22, #2
 cmp r22,  #0 wz
 if_z jmp #\C_realloc_10
 mov r22, ##-8
 adds r22, r19
 rdlong r22, r22
 sub r22, #8
 shr r22, #3
 sub r22, #1
 shl r22, #2
 mov r20, ##@C__malloc_store
 adds r22, r20
 rdlong r13, r22
 mov r11, ##0
 jmp #\@C_realloc_13
C_realloc_12
 mov r11, r13
 rdlong r13, r13
C_realloc_13
 mov r22, r19
 mov r20, r13
 cmp r22, r20 wz
 if_nz jmp #\C_realloc_12
 rdlong r13, r13
 mov r22, r11
 cmp r22,  #0 wz
 if_nz jmp #\C_realloc_15
 mov r22, ##-8
 adds r22, r19
 rdlong r22, r22
 sub r22, #8
 shr r22, #3
 sub r22, #1
 shl r22, #2
 mov r20, ##@C__malloc_store
 adds r22, r20
 wrlong r13, r22
 jmp #\@C_realloc_16
C_realloc_15
 wrlong r13, r11
C_realloc_16
 mov r22, ##-4
 adds r22, r19
 rdlong r20, r22
 mov r18, ##$fffffffd
 and r20, r18
 wrlong r20, r22
C_realloc_10
 mov r22, ##-4
 adds r22, r19
 rdlong r22, r22
 and r22, #1
 cmps r22,  #0 wz
 if_z jmp #\C_realloc_17
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C__malloc_unlink_free_chunk
 mov r22, ##-4
 adds r22, r19
 rdlong r20, r22
 mov r18, ##$fffffffe
 and r20, r18
 wrlong r20, r22
C_realloc_17
 mov r22, ##-8
 adds r22, r19
 rdlong r22, r22
 mov r15, r22
 sub r15, #8
 cmp r21, r15 wcz
 if_be jmp #\C_realloc_19
 mov r22, r19
 mov r20, ##@C_ml_last
 rdlong r20, r20
 cmp r22, r20 wz
 if_nz jmp #\C_realloc_22
 mov r13, #1
 jmp #\@C_realloc_23
C_realloc_22
 mov r13, #0
C_realloc_23
 mov r22, #0
 cmps r13, r22 wz
 if_nz jmp #\C_realloc_19
 mov r20, ##-8
 mov r18, r19
 adds r18, r20
 rdlong r18, r18
 mov r17, r18
 adds r17, r19
 mov r18, ##-4
 adds r18, r17
 rdlong r18, r18
 and r18, #1
 cmps r18, r22 wz
 if_z jmp #\C_realloc_19
 mov r22, r15
 add r22, #8
 adds r20, r17
 rdlong r20, r20
 sub r20, #8
 add r22, r20
 cmp r21, r22 wcz
 if_a jmp #\C_realloc_19
 mov r2, r17
 mov BC, #4
 calld PA,#CALA
 long @C__malloc_unlink_free_chunk
 mov r2, r17
 mov r3, r19
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__malloc_combine_chunks
 add SP, #4
 mov r22, ##-8
 adds r22, r19
 rdlong r22, r22
 mov r15, r22
 sub r15, #8
C_realloc_19
 cmp r21, r15 wcz
 if_be jmp #\C_realloc_24
 mov r9, r23
 mov BC, #0
 calld PA,#CALA
 long @C__memory_unlock
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_malloc
 mov r11, r0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_realloc_29
 mov r0, ##0
 jmp #\@C_realloc_3
C_realloc_28
 mov r22, r11
 mov r11, r22
 adds r11, #1
 mov r20, r9
 mov r9, r20
 adds r9, #1
 rdbyte r20, r20
 wrbyte r20, r22
C_realloc_29
 mov r22, r15
 mov r15, r22
 sub r15, #1
 cmp r22,  #0 wz
 if_nz jmp #\C_realloc_28
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_free
 mov BC, #0
 calld PA,#CALA
 long @C__memory_lock
 mov BC, #0
 calld PA,#CALA
 long @C__memory_unlock
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 jmp #\@C_realloc_3
C_realloc_24
 add r21, #8
 mov r22, r21
 add r22, #8
 add r22, #64
 mov r20, ##-8
 adds r20, r19
 rdlong r20, r20
 sub r20, #8
 cmp r22, r20 wcz
 if_a jmp #\C_realloc_31
 mov r2, r21
 mov r3, r19
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__malloc_truncate
 add SP, #4
C_realloc_31
 mov BC, #0
 calld PA,#CALA
 long @C__memory_unlock
 mov r0, r23
C_realloc_3
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Import _memory_unlock
' Catalina Import _memory_lock
' Catalina Import _malloc_store
' Catalina Import _malloc_combine_chunks
' Catalina Import _malloc_truncate
' Catalina Import ml_last
' Catalina Import _malloc_unlink_free_chunk
' Catalina Import malloc
' Catalina Import free
DAT
' Catalina Export _malloc_sell_out
 alignl
C__malloc_sell_out
 calld PA,#NEWF
 calld PA,#PSHM
 long $f40000
 mov r23, ##@C__malloc_store
 jmp #\@C__malloc_sell_out_7
C__malloc_sell_out_4
 rdlong r21, r23
 jmp #\@C__malloc_sell_out_10
C__malloc_sell_out_9
 rdlong r22, r21
 wrlong r22, r23
 mov r22, ##-4
 adds r22, r21
 rdlong r20, r22
 mov r18, ##$fffffffd
 and r20, r18
 wrlong r20, r22
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C__malloc_do_free
 rdlong r21, r23
C__malloc_sell_out_10
 mov r22, r21
 cmp r22,  #0 wz
 if_nz jmp #\C__malloc_sell_out_9
 adds r23, #4
C__malloc_sell_out_7
 mov r22, r23
 mov r20, ##@C__malloc_store+128
 cmp r22, r20 wcz
 if_b jmp #\C__malloc_sell_out_4
 mov r0, #0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _malloc_store
' Catalina Import _malloc_do_free
DAT
' Catalina Export memcmp
 alignl
C_memcmp
 calld PA,#PSHM
 long $f00000
 mov r23, r4
 mov r21, r3
 cmp r2,  #0 wz
 if_z jmp #\C_memcmp_2
 add r2, #1
 jmp #\@C_memcmp_5
C_memcmp_4
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, r21
 mov r21, r20
 adds r21, #1
 rdbyte r22, r22
 rdbyte r20, r20
 cmps r22, r20 wz
 if_nz jmp #\C_memcmp_7
 jmp #\@C_memcmp_5
C_memcmp_7
 mov r22, ##-1
 mov r20, r23
 adds r20, r22
 mov r23, r20
 adds r22, r21
 mov r21, r22
 rdbyte r20, r20
 rdbyte r22, r22
 mov r0, r20
 subs r0, r22
 jmp #\@C_memcmp_1
C_memcmp_5
 mov r22, r2
 sub r22, #1
 mov r2, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_memcmp_4
C_memcmp_2
 mov r0, #0
C_memcmp_1
 calld PA,#POPM
 calld PA,#RETN
DAT
' Catalina Export memcpy
 alignl
C_memcpy
 calld PA,#PSHM
 long $f00000
 mov r23, r4
 mov r21, r3
 cmp r2,  #0 wz
 if_z jmp #\C_memcpy_2
 add r2, #1
 jmp #\@C_memcpy_5
C_memcpy_4
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, r21
 mov r21, r20
 adds r21, #1
 rdbyte r20, r20
 wrbyte r20, r22
C_memcpy_5
 mov r22, r2
 sub r22, #1
 mov r2, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_memcpy_4
C_memcpy_2
 mov r0, r4
 calld PA,#POPM
 calld PA,#RETN
DAT
' Catalina Export _memory_get_lock
 alignl
C__memory_get_lock
 rdlong r0,##MEM_LOCK
 calld PA,#RETN
' Catalina Export _memory_set_lock
 alignl
C__memory_set_lock
 mov RI,##MEM_LOCK
 rdlong r0,RI
 wrlong r2,RI
 calld PA,#RETN
' Catalina Export _memory_lock
 alignl
C__memory_lock
 mov RI,##MEM_LOCK
 rdlong r2,RI
 cmps r2, #0 wc
 if_c jmp #@C__memory_lock_1
C__memory_lock_0
        bith    lockbits, r2 wcz
 if_nz  locktry r2 wc
 if_nc_and_nz  bitl lockbits, r2
 if_c_and_nz  jmp #@C__memory_lock_1
C__memory_lock_2
 jmp #@C__memory_lock_0
C__memory_lock_1
 calld PA,#RETN
' Catalina Export _memory_unlock
 alignl
C__memory_unlock
 mov RI,##MEM_LOCK
 rdlong r2,RI wc
 if_c jmp #@C__memory_unlock_1
 lockrel r2
 bitl lockbits, r2
C__memory_unlock_1
 calld PA,#RETN
DAT
' Catalina Export memset
 alignl
C_memset
 calld PA,#PSHM
 long $d00000
 mov r23, r4
 cmp r2,  #0 wz
 if_z jmp #\C_memset_2
 add r2, #1
 jmp #\@C_memset_5
C_memset_4
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, r3
 wrbyte r20, r22
C_memset_5
 mov r22, r2
 sub r22, #1
 mov r2, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_memset_4
C_memset_2
 mov r0, r4
 calld PA,#POPM
 calld PA,#RETN
DAT
DAT
 alignl
C_slaon_65fa569c_parseZ_oneN_ame_L000045
 calld PA,#PSHM
 long $d00000
 mov r23, #0
 rdbyte r22, r2
 cmps r22,  #58 wz
 if_nz jmp #\C_slaon_65fa569c_parseZ_oneN_ame_L000045_50
 mov r0, ##0
 jmp #\@C_slaon_65fa569c_parseZ_oneN_ame_L000045_46
C_slaon_65fa569c_parseZ_oneN_ame_L000045_49
 cmps r23,  #10 wcz
 if_ae jmp #\C_slaon_65fa569c_parseZ_oneN_ame_L000045_52
 mov r22, r3
 mov r3, r22
 adds r3, #1
 rdbyte r20, r2
 wrbyte r20, r22
C_slaon_65fa569c_parseZ_oneN_ame_L000045_52
 adds r2, #1
 adds r23, #1
C_slaon_65fa569c_parseZ_oneN_ame_L000045_50
 rdbyte r22, r2
 cmps r22,  #0 wz
 if_z jmp #\C_slaon_65fa569c_parseZ_oneN_ame_L000045_57
 mov r20, r22
 subs r20, #48
 cmp r20,  #10 wcz
 if_b jmp #\C_slaon_65fa569c_parseZ_oneN_ame_L000045_57
 cmps r22,  #44 wz
 if_z jmp #\C_slaon_65fa569c_parseZ_oneN_ame_L000045_57
 cmps r22,  #45 wz
 if_z jmp #\C_slaon_65fa569c_parseZ_oneN_ame_L000045_57
 cmps r22,  #43 wz
 if_nz jmp #\C_slaon_65fa569c_parseZ_oneN_ame_L000045_49
C_slaon_65fa569c_parseZ_oneN_ame_L000045_57
 cmps r23,  #3 wcz
 if_ae jmp #\C_slaon_65fa569c_parseZ_oneN_ame_L000045_58
 mov r0, ##0
 jmp #\@C_slaon_65fa569c_parseZ_oneN_ame_L000045_46
C_slaon_65fa569c_parseZ_oneN_ame_L000045_58
 mov r22, #0
 wrbyte r22, r3
 mov r0, r2
C_slaon_65fa569c_parseZ_oneN_ame_L000045_46
 calld PA,#POPM
 calld PA,#RETN
 alignl
C_slaoo_65fa569c_parseT_ime_L000060
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $f80000
 mov r23, #0
 mov r21, r3
 mov r22, r2
 cmp r22,  #0 wz
 if_z jmp #\C_slaoo_65fa569c_parseT_ime_L000060_63
 rdbyte r19, r2
 jmp #\@C_slaoo_65fa569c_parseT_ime_L000060_64
C_slaoo_65fa569c_parseT_ime_L000060_63
 mov r19, #0
C_slaoo_65fa569c_parseT_ime_L000060_64
 mov r22, r19
 mov RI, FP
 sub RI, #-(-8)
 wrbyte r22, RI
 mov r22, r2
 cmp r22,  #0 wz
 if_z jmp #\C_slaoo_65fa569c_parseT_ime_L000060_65
 mov r22, #85
 wrbyte r22, r2
C_slaoo_65fa569c_parseT_ime_L000060_65
 mov r22, #0
 wrlong r22, r4
 jmp #\@C_slaoo_65fa569c_parseT_ime_L000060_68
C_slaoo_65fa569c_parseT_ime_L000060_67
 mov r22, r3
 mov r3, r22
 adds r3, #1
 mov r20, #10

  stalli

 qmul r20, r23
 getqx r0

  allowi

 rdbyte r22, r22
 subs r22, #48
 mov r23, r0
 adds r23, r22
C_slaoo_65fa569c_parseT_ime_L000060_68
 rdbyte r22, r3
 cmps r22,  #48 wcz
 if_b jmp #\C_slaoo_65fa569c_parseT_ime_L000060_70
 cmps r22,  #57 wcz
 if_be jmp #\C_slaoo_65fa569c_parseT_ime_L000060_67
C_slaoo_65fa569c_parseT_ime_L000060_70
 mov r22, r21
 mov r20, r3
 cmp r22, r20 wz
 if_nz jmp #\C_slaoo_65fa569c_parseT_ime_L000060_71
 mov r0, ##0
 jmp #\@C_slaoo_65fa569c_parseT_ime_L000060_61
C_slaoo_65fa569c_parseT_ime_L000060_71
 cmps r23,  #0 wcz
 if_b jmp #\C_slaoo_65fa569c_parseT_ime_L000060_75
 cmps r23,  #24 wcz
 if_b jmp #\C_slaoo_65fa569c_parseT_ime_L000060_73
C_slaoo_65fa569c_parseT_ime_L000060_75
 mov r0, ##0
 jmp #\@C_slaoo_65fa569c_parseT_ime_L000060_61
C_slaoo_65fa569c_parseT_ime_L000060_73
 mov r22, #60

  stalli

 qmul r22, r23
 getqx r0

  allowi


  stalli

 qmul r22, r0
 getqx r0

  allowi

 wrlong r0, r4
 rdbyte r22, r3
 cmps r22,  #58 wz
 if_nz jmp #\C_slaoo_65fa569c_parseT_ime_L000060_76
 adds r3, #1
 mov r23, #0
 jmp #\@C_slaoo_65fa569c_parseT_ime_L000060_79
C_slaoo_65fa569c_parseT_ime_L000060_78
 mov r22, r3
 mov r3, r22
 adds r3, #1
 mov r20, #10

  stalli

 qmul r20, r23
 getqx r0

  allowi

 rdbyte r22, r22
 subs r22, #48
 mov r23, r0
 adds r23, r22
C_slaoo_65fa569c_parseT_ime_L000060_79
 rdbyte r22, r3
 cmps r22,  #48 wcz
 if_b jmp #\C_slaoo_65fa569c_parseT_ime_L000060_81
 cmps r22,  #57 wcz
 if_be jmp #\C_slaoo_65fa569c_parseT_ime_L000060_78
C_slaoo_65fa569c_parseT_ime_L000060_81
 mov r22, r21
 mov r20, r3
 cmp r22, r20 wz
 if_nz jmp #\C_slaoo_65fa569c_parseT_ime_L000060_82
 mov r0, ##0
 jmp #\@C_slaoo_65fa569c_parseT_ime_L000060_61
C_slaoo_65fa569c_parseT_ime_L000060_82
 cmps r23,  #0 wcz
 if_b jmp #\C_slaoo_65fa569c_parseT_ime_L000060_86
 cmps r23,  #60 wcz
 if_b jmp #\C_slaoo_65fa569c_parseT_ime_L000060_84
C_slaoo_65fa569c_parseT_ime_L000060_86
 mov r0, ##0
 jmp #\@C_slaoo_65fa569c_parseT_ime_L000060_61
C_slaoo_65fa569c_parseT_ime_L000060_84
 rdlong r22, r4
 mov r20, #60

  stalli

 qmul r20, r23
 getqx r0

  allowi

 adds r22, r0
 wrlong r22, r4
 rdbyte r22, r3
 cmps r22,  #58 wz
 if_nz jmp #\C_slaoo_65fa569c_parseT_ime_L000060_87
 adds r3, #1
 mov r23, #0
 jmp #\@C_slaoo_65fa569c_parseT_ime_L000060_90
C_slaoo_65fa569c_parseT_ime_L000060_89
 mov r22, r3
 mov r3, r22
 adds r3, #1
 mov r20, #10

  stalli

 qmul r20, r23
 getqx r0

  allowi

 rdbyte r22, r22
 subs r22, #48
 mov r23, r0
 adds r23, r22
C_slaoo_65fa569c_parseT_ime_L000060_90
 rdbyte r22, r3
 cmps r22,  #48 wcz
 if_b jmp #\C_slaoo_65fa569c_parseT_ime_L000060_92
 cmps r22,  #57 wcz
 if_be jmp #\C_slaoo_65fa569c_parseT_ime_L000060_89
C_slaoo_65fa569c_parseT_ime_L000060_92
 mov r22, r21
 mov r20, r3
 cmp r22, r20 wz
 if_nz jmp #\C_slaoo_65fa569c_parseT_ime_L000060_93
 mov r0, ##0
 jmp #\@C_slaoo_65fa569c_parseT_ime_L000060_61
C_slaoo_65fa569c_parseT_ime_L000060_93
 cmps r23,  #0 wcz
 if_b jmp #\C_slaoo_65fa569c_parseT_ime_L000060_97
 cmps r23,  #60 wcz
 if_b jmp #\C_slaoo_65fa569c_parseT_ime_L000060_95
C_slaoo_65fa569c_parseT_ime_L000060_97
 mov r0, ##0
 jmp #\@C_slaoo_65fa569c_parseT_ime_L000060_61
C_slaoo_65fa569c_parseT_ime_L000060_95
 rdlong r22, r4
 adds r22, r23
 wrlong r22, r4
C_slaoo_65fa569c_parseT_ime_L000060_87
C_slaoo_65fa569c_parseT_ime_L000060_76
 mov r22, r2
 cmp r22,  #0 wz
 if_z jmp #\C_slaoo_65fa569c_parseT_ime_L000060_98
 mov r22, FP
 sub r22, #-(-8)
 rdbyte r22, r22
 wrbyte r22, r2
 mov r22, r2
 adds r22, #16
 rdlong r20, r4
 wrlong r20, r22
C_slaoo_65fa569c_parseT_ime_L000060_98
 mov r0, r3
C_slaoo_65fa569c_parseT_ime_L000060_61
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
DAT
 alignl
C_slaop_65fa569c_parseD_ate_L000100
 calld PA,#NEWF
 sub SP, #24
 calld PA,#PSHM
 long $fa8000
 mov r21, #0
 mov r19, #0
 mov r0, FP
 sub r0, #-(-28)
 mov r1, ##@C_slaop_65fa569c_parseD_ate_L000100_102_L000103
 calld PA,#CPYB
 long 24
 rdbyte r22, r3
 cmps r22,  #77 wz
 if_z jmp #\C_slaop_65fa569c_parseD_ate_L000100_104
 rdbyte r22, r3
 cmps r22,  #74 wz
 if_nz jmp #\C_slaop_65fa569c_parseD_ate_L000100_106
 mov r22, r4
 mov r4, r22
 adds r4, #1
 mov r20, r3
 mov r3, r20
 adds r3, #1
 rdbyte r20, r20
 wrbyte r20, r22
 mov r17, #74
 jmp #\@C_slaop_65fa569c_parseD_ate_L000100_107
C_slaop_65fa569c_parseD_ate_L000100_106
 mov r17, #90
C_slaop_65fa569c_parseD_ate_L000100_107
 mov r23, r3
 jmp #\@C_slaop_65fa569c_parseD_ate_L000100_109
C_slaop_65fa569c_parseD_ate_L000100_108
 mov r22, r3
 mov r20, #10

  stalli

 qmul r20, r21
 getqx r0

  allowi

 rdbyte r20, r22
 subs r20, #48
 mov r21, r0
 adds r21, r20
 mov r20, r4
 mov r4, r20
 adds r4, #1
 mov r3, r22
 adds r3, #1
 rdbyte r22, r22
 wrbyte r22, r20
C_slaop_65fa569c_parseD_ate_L000100_109
 rdbyte r22, r3
 cmps r22,  #48 wcz
 if_b jmp #\C_slaop_65fa569c_parseD_ate_L000100_111
 cmps r22,  #57 wcz
 if_be jmp #\C_slaop_65fa569c_parseD_ate_L000100_108
C_slaop_65fa569c_parseD_ate_L000100_111
 mov r22, r23
 mov r20, r3
 cmp r22, r20 wz
 if_nz jmp #\C_slaop_65fa569c_parseD_ate_L000100_112
 mov r0, ##0
 jmp #\@C_slaop_65fa569c_parseD_ate_L000100_101
C_slaop_65fa569c_parseD_ate_L000100_112
 mov r22, r17
 and r22, cviu_m1
 cmps r22,  #74 wz
 if_nz jmp #\C_slaop_65fa569c_parseD_ate_L000100_118
 mov r15, #1
 jmp #\@C_slaop_65fa569c_parseD_ate_L000100_119
C_slaop_65fa569c_parseD_ate_L000100_118
 mov r15, #0
C_slaop_65fa569c_parseD_ate_L000100_119
 cmps r21, r15 wcz
 if_b jmp #\C_slaop_65fa569c_parseD_ate_L000100_117
 cmps r21,  #365 wcz
 if_be jmp #\C_slaop_65fa569c_parseD_ate_L000100_114
C_slaop_65fa569c_parseD_ate_L000100_117
 mov r0, ##0
 jmp #\@C_slaop_65fa569c_parseD_ate_L000100_101
C_slaop_65fa569c_parseD_ate_L000100_114
 wrbyte r17, r2
 mov r22, r2
 adds r22, #4
 wrlong r21, r22
 mov r0, r3
 jmp #\@C_slaop_65fa569c_parseD_ate_L000100_101
C_slaop_65fa569c_parseD_ate_L000100_104
 mov r17, #77
C_slaop_65fa569c_parseD_ate_L000100_120
 mov r22, r4
 mov r4, r22
 adds r4, #1
 mov r20, r3
 mov r3, r20
 adds r3, #1
 rdbyte r20, r20
 wrbyte r20, r22
 mov r23, r3
 mov r21, #0
 jmp #\@C_slaop_65fa569c_parseD_ate_L000100_124
C_slaop_65fa569c_parseD_ate_L000100_123
 mov r22, r3
 mov r20, #10

  stalli

 qmul r20, r21
 getqx r0

  allowi

 rdbyte r20, r22
 subs r20, #48
 mov r21, r0
 adds r21, r20
 mov r20, r4
 mov r4, r20
 adds r4, #1
 mov r3, r22
 adds r3, #1
 rdbyte r22, r22
 wrbyte r22, r20
C_slaop_65fa569c_parseD_ate_L000100_124
 rdbyte r22, r3
 cmps r22,  #48 wcz
 if_b jmp #\C_slaop_65fa569c_parseD_ate_L000100_126
 cmps r22,  #57 wcz
 if_be jmp #\C_slaop_65fa569c_parseD_ate_L000100_123
C_slaop_65fa569c_parseD_ate_L000100_126
 mov r22, r23
 mov r20, r3
 cmp r22, r20 wz
 if_nz jmp #\C_slaop_65fa569c_parseD_ate_L000100_127
 mov r0, ##0
 jmp #\@C_slaop_65fa569c_parseD_ate_L000100_101
C_slaop_65fa569c_parseD_ate_L000100_127
 mov r22, r19
 shl r22, #3
 mov r20, FP
 sub r20, #-(-28)
 adds r20, r22
 rdlong r20, r20
 cmps r21, r20 wcz
 if_b jmp #\C_slaop_65fa569c_parseD_ate_L000100_132
 mov r20, FP
 sub r20, #-(-24)
 adds r22, r20
 rdlong r22, r22
 cmps r21, r22 wcz
 if_be jmp #\C_slaop_65fa569c_parseD_ate_L000100_129
C_slaop_65fa569c_parseD_ate_L000100_132
 mov r0, ##0
 jmp #\@C_slaop_65fa569c_parseD_ate_L000100_101
C_slaop_65fa569c_parseD_ate_L000100_129
 mov r22, r19
 shl r22, #2
 mov r20, r2
 adds r20, #4
 adds r22, r20
 wrlong r21, r22
 adds r19, #1
 cmps r19,  #3 wcz
 if_ae jmp #\C_slaop_65fa569c_parseD_ate_L000100_133
 rdbyte r22, r3
 cmps r22,  #46 wz
 if_z jmp #\C_slaop_65fa569c_parseD_ate_L000100_120
C_slaop_65fa569c_parseD_ate_L000100_133
 cmps r19,  #3 wz
 if_z jmp #\C_slaop_65fa569c_parseD_ate_L000100_134
 mov r0, ##0
 jmp #\@C_slaop_65fa569c_parseD_ate_L000100_101
C_slaop_65fa569c_parseD_ate_L000100_134
 mov r22, #0
 wrbyte r22, r4
 wrbyte r17, r2
 mov r0, r3
C_slaop_65fa569c_parseD_ate_L000100_101
 calld PA,#POPM
 add SP, #24
 calld PA,#RETF
 alignl
C_slaor_65fa569c_parseR_ule_L000136
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $f80000
 mov r23, r3
 mov r21, r2
 mov r2, ##@C_slao2_65fa569c_dststart_L000005
 mov r3, r21
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_slaop_65fa569c_parseD_ate_L000100
 add SP, #8
 mov r21, r0
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_slaor_65fa569c_parseR_ule_L000136_138
 mov r0, ##0
 jmp #\@C_slaor_65fa569c_parseR_ule_L000136_137
C_slaor_65fa569c_parseR_ule_L000136_138
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 adds r23, r0
 rdbyte r22, r21
 cmps r22,  #47 wz
 if_nz jmp #\C_slaor_65fa569c_parseR_ule_L000136_140
 mov r22, r21
 adds r22, #1
 mov r21, r22
 mov r19, r22
 mov r2, ##@C_slao2_65fa569c_dststart_L000005
 mov r3, r21
 mov r4, FP
 sub r4, #-(-8)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_slaoo_65fa569c_parseT_ime_L000060
 add SP, #8
 mov r21, r0
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_slaor_65fa569c_parseR_ule_L000136_145
 mov r0, ##0
 jmp #\@C_slaor_65fa569c_parseR_ule_L000136_137
C_slaor_65fa569c_parseR_ule_L000136_144
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, r19
 mov r19, r20
 adds r19, #1
 rdbyte r20, r20
 wrbyte r20, r22
C_slaor_65fa569c_parseR_ule_L000136_145
 mov r22, r21
 mov r20, r19
 cmp r22, r20 wz
 if_nz jmp #\C_slaor_65fa569c_parseR_ule_L000136_144
C_slaor_65fa569c_parseR_ule_L000136_140
 rdbyte r22, r21
 cmps r22,  #44 wz
 if_z jmp #\C_slaor_65fa569c_parseR_ule_L000136_147
 mov r0, ##0
 jmp #\@C_slaor_65fa569c_parseR_ule_L000136_137
C_slaor_65fa569c_parseR_ule_L000136_147
 adds r21, #1
 mov r2, ##@C_slao3_65fa569c_dstend_L000006
 mov r3, r21
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_slaop_65fa569c_parseD_ate_L000100
 add SP, #8
 mov r21, r0
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_slaor_65fa569c_parseR_ule_L000136_149
 mov r0, ##0
 jmp #\@C_slaor_65fa569c_parseR_ule_L000136_137
C_slaor_65fa569c_parseR_ule_L000136_149
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 adds r23, r0
 rdbyte r22, r21
 cmps r22,  #47 wz
 if_nz jmp #\C_slaor_65fa569c_parseR_ule_L000136_151
 mov r22, r21
 adds r22, #1
 mov r21, r22
 mov r19, r22
 mov r2, ##@C_slao3_65fa569c_dstend_L000006
 mov r3, r21
 mov r4, FP
 sub r4, #-(-8)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_slaoo_65fa569c_parseT_ime_L000060
 add SP, #8
 mov r21, r0
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_slaor_65fa569c_parseR_ule_L000136_156
 mov r0, ##0
 jmp #\@C_slaor_65fa569c_parseR_ule_L000136_137
C_slaor_65fa569c_parseR_ule_L000136_155
C_slaor_65fa569c_parseR_ule_L000136_156
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, r19
 mov r19, r20
 adds r19, #1
 rdbyte r20, r20
 wrbyte r20, r22
 mov r22, r20
 and r22, cviu_m1
 cmps r22,  #0 wz
 if_nz jmp #\C_slaor_65fa569c_parseR_ule_L000136_155
C_slaor_65fa569c_parseR_ule_L000136_151
 rdbyte r22, r21
 cmps r22,  #0 wz
 if_z jmp #\C_slaor_65fa569c_parseR_ule_L000136_158
 mov r0, ##0
 jmp #\@C_slaor_65fa569c_parseR_ule_L000136_137
C_slaor_65fa569c_parseR_ule_L000136_158
 mov r0, r21
C_slaor_65fa569c_parseR_ule_L000136_137
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
DAT
 alignl
C_slaos_65fa569c_parseT_Z__L000160
 calld PA,#NEWF
 sub SP, #12
 calld PA,#PSHM
 long $f00000
 mov r23, r2
 mov r22, ##3600
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, #1
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 mov r22, r23
 cmp r22,  #0 wz
 if_nz jmp #\C_slaos_65fa569c_parseT_Z__L000160_166
 jmp #\@C_slaos_65fa569c_parseT_Z__L000160_161
C_slaos_65fa569c_parseT_Z__L000160_166
 rdbyte r22, r23
 cmps r22,  #58 wz
 if_nz jmp #\C_slaos_65fa569c_parseT_Z__L000160_168
 jmp #\@C_slaos_65fa569c_parseT_Z__L000160_161
C_slaos_65fa569c_parseT_Z__L000160_168
 mov r2, r23
 mov r3, ##@C_slaos_65fa569c_parseT_Z__L000160_lastT_Z__L000163
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcmp
 add SP, #4
 cmps r0,  #0 wz
 if_nz jmp #\C_slaos_65fa569c_parseT_Z__L000160_170
 jmp #\@C_slaos_65fa569c_parseT_Z__L000160_161
C_slaos_65fa569c_parseT_Z__L000160_170
 mov r22, ##@C__tzname
 rdlong r22, r22
 mov r20, #0
 wrbyte r20, r22
 mov r22, ##@C__tzname+4
 rdlong r22, r22
 mov r20, #0
 wrbyte r20, r22
 mov r22, #85
 wrbyte r22, ##@C_slao2_65fa569c_dststart_L000005
 mov r22, ##7200
 wrlong r22, ##@C_slao2_65fa569c_dststart_L000005+16
 mov r22, #85
 wrbyte r22, ##@C_slao3_65fa569c_dstend_L000006
 mov r22, ##7200
 wrlong r22, ##@C_slao3_65fa569c_dstend_L000006+16
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 cmp r0,  #240 wcz
 if_be jmp #\C_slaos_65fa569c_parseT_Z__L000160_175
 jmp #\@C_slaos_65fa569c_parseT_Z__L000160_161
C_slaos_65fa569c_parseT_Z__L000160_175
 mov r2, r23
 mov r3, ##@C_slaos_65fa569c_parseT_Z__L000160_lastT_Z__L000163
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_strcpy
 add SP, #4
 mov r2, r23
 mov r3, ##@C_slaos_65fa569c_parseT_Z__L000160_buffer_L000165
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_slaon_65fa569c_parseZ_oneN_ame_L000045
 add SP, #4
 mov r23, r0
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_slaos_65fa569c_parseT_Z__L000160_177
 jmp #\@C_slaos_65fa569c_parseT_Z__L000160_161
C_slaos_65fa569c_parseT_Z__L000160_177
 rdbyte r22, r23
 cmps r22,  #45 wz
 if_nz jmp #\C_slaos_65fa569c_parseT_Z__L000160_179
 mov r22, ##-1
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 adds r23, #1
 jmp #\@C_slaos_65fa569c_parseT_Z__L000160_180
C_slaos_65fa569c_parseT_Z__L000160_179
 rdbyte r22, r23
 cmps r22,  #43 wz
 if_nz jmp #\C_slaos_65fa569c_parseT_Z__L000160_181
 adds r23, #1
C_slaos_65fa569c_parseT_Z__L000160_181
C_slaos_65fa569c_parseT_Z__L000160_180
 mov r2, ##0
 mov r3, r23
 mov r4, FP
 sub r4, #-(-8)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_slaoo_65fa569c_parseT_ime_L000060
 add SP, #8
 mov r23, r0
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_slaos_65fa569c_parseT_Z__L000160_183
 jmp #\@C_slaos_65fa569c_parseT_Z__L000160_161
C_slaos_65fa569c_parseT_Z__L000160_183
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-16)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 wrlong r22, ##@C__timezone
 mov r2, #10
 mov r3, ##@C_slaos_65fa569c_parseT_Z__L000160_buffer_L000165
 mov r4, ##@C__tzname
 rdlong r4, r4
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_strncpy
 add SP, #8
 rdbyte r22, r23
 cmps r22,  #0 wz
 if_z jmp #\C_slaos_65fa569c_parseT_Z__L000160_188
 mov r21, #1
 jmp #\@C_slaos_65fa569c_parseT_Z__L000160_189
C_slaos_65fa569c_parseT_Z__L000160_188
 mov r21, #0
C_slaos_65fa569c_parseT_Z__L000160_189
 wrlong r21, ##@C__daylight
 cmps r21,  #0 wz
 if_nz jmp #\C_slaos_65fa569c_parseT_Z__L000160_185
 jmp #\@C_slaos_65fa569c_parseT_Z__L000160_161
C_slaos_65fa569c_parseT_Z__L000160_185
 mov r22, ##@C_slaos_65fa569c_parseT_Z__L000160_buffer_L000165
 mov r20, #0
 wrbyte r20, ##@C_slaos_65fa569c_parseT_Z__L000160_buffer_L000165
 mov r2, r23
 mov r3, r22
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_slaon_65fa569c_parseZ_oneN_ame_L000045
 add SP, #4
 mov r23, r0
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_slaos_65fa569c_parseT_Z__L000160_190
 jmp #\@C_slaos_65fa569c_parseT_Z__L000160_161
C_slaos_65fa569c_parseT_Z__L000160_190
 mov r2, #10
 mov r3, ##@C_slaos_65fa569c_parseT_Z__L000160_buffer_L000165
 mov r4, ##@C__tzname+4
 rdlong r4, r4
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_strncpy
 add SP, #8
 mov r22, #0
 wrbyte r22, ##@C_slaos_65fa569c_parseT_Z__L000160_buffer_L000165
 rdbyte r22, r23
 cmps r22,  #0 wz
 if_z jmp #\C_slaos_65fa569c_parseT_Z__L000160_193
 cmps r22,  #44 wz
 if_z jmp #\C_slaos_65fa569c_parseT_Z__L000160_193
 mov r2, ##0
 mov r3, r23
 mov r4, FP
 sub r4, #-(-12)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_slaoo_65fa569c_parseT_ime_L000060
 add SP, #8
 mov r23, r0
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_slaos_65fa569c_parseT_Z__L000160_195
 jmp #\@C_slaos_65fa569c_parseT_Z__L000160_161
C_slaos_65fa569c_parseT_Z__L000160_195
C_slaos_65fa569c_parseT_Z__L000160_193
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 wrlong r22, ##@C__dst_off
 rdbyte r22, r23
 cmps r22,  #0 wz
 if_z jmp #\C_slaos_65fa569c_parseT_Z__L000160_197
 rdbyte r22, r23
 cmps r22,  #44 wz
 if_z jmp #\C_slaos_65fa569c_parseT_Z__L000160_199
 jmp #\@C_slaos_65fa569c_parseT_Z__L000160_161
C_slaos_65fa569c_parseT_Z__L000160_199
 adds r23, #1
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 cmp r0,  #120 wcz
 if_be jmp #\C_slaos_65fa569c_parseT_Z__L000160_201
 jmp #\@C_slaos_65fa569c_parseT_Z__L000160_161
C_slaos_65fa569c_parseT_Z__L000160_201
 mov r2, r23
 mov r3, ##@C_slaos_65fa569c_parseT_Z__L000160_buffer_L000165
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_slaor_65fa569c_parseR_ule_L000136
 add SP, #4
 mov r23, r0
 mov r22, r0
 cmp r22,  #0 wz
 if_nz jmp #\C_slaos_65fa569c_parseT_Z__L000160_203
C_slaos_65fa569c_parseT_Z__L000160_203
C_slaos_65fa569c_parseT_Z__L000160_197
C_slaos_65fa569c_parseT_Z__L000160_161
 calld PA,#POPM
 add SP, #12
 calld PA,#RETF
' Catalina Export _tzset
 alignl
C__tzset
 calld PA,#NEWF
 calld PA,#PSHM
 long $400000
 mov r2, ##@C__tzset_206_L000207
 mov BC, #4
 calld PA,#CALA
 long @C_getenv
 mov r22, r0
 mov r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C_slaos_65fa569c_parseT_Z__L000160
 mov r22, ##@C__tzname
 rdlong r22, r22
 wrlong r22, ##@C_tzname
 mov r22, ##@C__tzname+4
 rdlong r22, r22
 wrlong r22, ##@C_tzname+4
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_slao10_65fa569c_last_sunday_L000210
 calld PA,#PSHM
 long $d40000
 mov r22, r2
 adds r22, #28
 rdlong r22, r22
 mov r20, r2
 adds r20, #24
 rdlong r20, r20
 subs r22, r20
 adds r22, #420
 mov r20, #7
 mov r0, r22
 mov r1, r20
 calld PA,#DIVS
 mov r23, r1
 cmps r3,  #58 wcz
 if_b jmp #\C_slao10_65fa569c_last_sunday_L000210_212
 mov r22, r2
 adds r22, #20
 rdlong r22, r22
 mov r20, ##1900
 adds r22, r20
 mov r20, #0
 mov r18, #4
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_slao10_65fa569c_last_sunday_L000210_212
 mov r18, #100
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_slao10_65fa569c_last_sunday_L000210_214
 mov r18, #400
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_slao10_65fa569c_last_sunday_L000210_212
C_slao10_65fa569c_last_sunday_L000210_214
 adds r3, #1
C_slao10_65fa569c_last_sunday_L000210_212
 cmps r3, r23 wcz
 if_ae jmp #\C_slao10_65fa569c_last_sunday_L000210_215
 mov r0, r23
 jmp #\@C_slao10_65fa569c_last_sunday_L000210_211
C_slao10_65fa569c_last_sunday_L000210_215
 mov r22, r3
 subs r22, r23
 mov r20, #7
 mov r0, r22
 mov r1, r20
 calld PA,#DIVS
 mov r0, r3
 subs r0, r1
C_slao10_65fa569c_last_sunday_L000210_211
 calld PA,#POPM
 calld PA,#RETN
 alignl
C_slao11_65fa569c_date_of_L000217
 calld PA,#NEWF
 sub SP, #12
 calld PA,#PSHM
 long $fe8000
 mov r22, r2
 adds r22, #20
 rdlong r22, r22
 mov r20, ##1900
 adds r22, r20
 mov r20, #0
 mov r18, #4
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_slao11_65fa569c_date_of_L000217_220
 mov r18, #100
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_slao11_65fa569c_date_of_L000217_222
 mov r18, #400
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_slao11_65fa569c_date_of_L000217_220
C_slao11_65fa569c_date_of_L000217_222
 mov r17, #1
 jmp #\@C_slao11_65fa569c_date_of_L000217_221
C_slao11_65fa569c_date_of_L000217_220
 mov r17, #0
C_slao11_65fa569c_date_of_L000217_221
 mov r19, r17
 rdbyte r22, r3
 cmps r22,  #77 wz
 if_z jmp #\C_slao11_65fa569c_date_of_L000217_223
 rdbyte r22, r3
 cmps r22,  #74 wz
 if_nz jmp #\C_slao11_65fa569c_date_of_L000217_226
 cmps r19,  #0 wz
 if_z jmp #\C_slao11_65fa569c_date_of_L000217_226
 mov r22, r3
 adds r22, #4
 rdlong r22, r22
 cmps r22,  #58 wcz
 if_ae jmp #\C_slao11_65fa569c_date_of_L000217_226
 mov r15, #1
 jmp #\@C_slao11_65fa569c_date_of_L000217_227
C_slao11_65fa569c_date_of_L000217_226
 mov r15, #0
C_slao11_65fa569c_date_of_L000217_227
 mov r22, r3
 adds r22, #4
 rdlong r22, r22
 mov r0, r22
 subs r0, r15
 jmp #\@C_slao11_65fa569c_date_of_L000217_218
C_slao11_65fa569c_date_of_L000217_223
 mov r23, #0
 mov r21, #1
 jmp #\@C_slao11_65fa569c_date_of_L000217_229
C_slao11_65fa569c_date_of_L000217_228
 mov r22, r21
 shl r22, #2
 subs r22, #4
 mov r20, #48

  stalli

 qmul r20, r19
 getqx r0

  allowi

 mov r20, ##@C__ytab
 adds r20, r0
 adds r22, r20
 rdlong r22, r22
 adds r23, r22
 adds r21, #1
C_slao11_65fa569c_date_of_L000217_229
 mov r22, r3
 adds r22, #4
 rdlong r22, r22
 cmps r21, r22 wcz
 if_b jmp #\C_slao11_65fa569c_date_of_L000217_228
 mov r22, #7
 mov r20, r2
 adds r20, #24
 rdlong r20, r20
 mov r18, r2
 adds r18, #28
 rdlong r18, r18
 subs r20, r18
 adds r20, #420
 mov r0, r20
 mov r1, r22
 calld PA,#DIVS
 mov r20, r23
 adds r20, r1
 mov r0, r20
 mov r1, r22
 calld PA,#DIVS
 mov RI, FP
 sub RI, #-(-8)
 wrlong r1, RI
 mov RI, FP
 sub RI, #-(-12)
 wrlong r23, RI
 mov r20, r3
 adds r20, #12
 rdlong r20, r20
 mov r18, FP
 sub r18, #-(-8)
 rdlong r18, r18
 subs r20, r18
 adds r20, #7
 mov r0, r20
 mov r1, r22
 calld PA,#DIVS
 mov RI, FP
 sub RI, #-(-16)
 wrlong r1, RI
 mov r20, r3
 adds r20, #8
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, r0
 subs r22, #7
 mov r20, FP
 sub r20, #-(-16)
 rdlong r20, r20
 adds r22, r20
 adds r23, r22
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, r21
 shl r20, #2
 mov r18, #48

  stalli

 qmul r18, r19
 getqx r0

  allowi

 mov r18, ##@C__ytab
 adds r18, r0
 adds r20, r18
 rdlong r20, r20
 adds r22, r20
 cmps r23, r22 wcz
 if_b jmp #\C_slao11_65fa569c_date_of_L000217_231
 subs r23, #7
C_slao11_65fa569c_date_of_L000217_231
 mov r0, r23
C_slao11_65fa569c_date_of_L000217_218
 calld PA,#POPM
 add SP, #12
 calld PA,#RETF
' Catalina Export _dstget
 alignl
C__dstget
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $fea000
 mov r23, r2
 mov r21, ##@C_slao2_65fa569c_dststart_L000005
 mov r19, ##@C_slao3_65fa569c_dstend_L000006
 mov r13, #0
 mov r22, ##@C__daylight
 rdlong r22, r22
 mov r20, ##-1
 cmps r22, r20 wz
 if_nz jmp #\C__dstget_234
 mov BC, #0
 calld PA,#CALA
 long @C__tzset
C__dstget_234
 mov r22, r23
 adds r22, #32
 mov r20, ##@C__daylight
 rdlong r20, r20
 wrlong r20, r22
 mov r22, ##@C__daylight
 rdlong r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C__dstget_236
 mov r0, #0
 jmp #\@C__dstget_233
C__dstget_236
 rdbyte r22, r21
 cmps r22,  #85 wz
 if_z jmp #\C__dstget_238
 mov r2, r23
 mov r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_slao11_65fa569c_date_of_L000217
 add SP, #4
 mov r17, r0
 jmp #\@C__dstget_239
C__dstget_238
 mov r2, r23
 mov r3, #89
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_slao10_65fa569c_last_sunday_L000210
 add SP, #4
 mov r17, r0
C__dstget_239
 rdbyte r22, r19
 cmps r22,  #85 wz
 if_z jmp #\C__dstget_240
 mov r2, r23
 mov r3, r19
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_slao11_65fa569c_date_of_L000217
 add SP, #4
 mov r15, r0
 jmp #\@C__dstget_241
C__dstget_240
 mov r2, r23
 mov r3, #272
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_slao10_65fa569c_last_sunday_L000210
 add SP, #4
 mov r15, r0
C__dstget_241
 cmps r17, r15 wcz
 if_ae jmp #\C__dstget_242
 mov r22, r23
 adds r22, #28
 rdlong r22, r22
 cmps r22, r17 wcz
 if_be jmp #\C__dstget_243
 cmps r22, r15 wcz
 if_ae jmp #\C__dstget_243
 mov r13, #1
 jmp #\@C__dstget_243
C__dstget_242
 mov r22, r23
 adds r22, #28
 rdlong r22, r22
 cmps r22, r17 wcz
 if_a jmp #\C__dstget_248
 cmps r22, r15 wcz
 if_ae jmp #\C__dstget_246
C__dstget_248
 mov r13, #1
C__dstget_246
C__dstget_243
 cmps r13,  #0 wz
 if_nz jmp #\C__dstget_249
 mov r22, r23
 adds r22, #28
 rdlong r22, r22
 cmps r22, r17 wz
 if_z jmp #\C__dstget_251
 cmps r22, r15 wz
 if_nz jmp #\C__dstget_249
C__dstget_251
 mov r22, r23
 adds r22, #28
 rdlong r22, r22
 cmps r22, r17 wz
 if_nz jmp #\C__dstget_252
 mov r22, r21
 adds r22, #16
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C__dstget_253
C__dstget_252
 mov r22, r19
 adds r22, #16
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C__dstget_253
 mov r22, #60
 mov r20, #60
 mov r18, r23
 adds r18, #8
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, r23
 adds r20, #4
 rdlong r20, r20
 adds r20, r0

  stalli

 qmul r22, r20
 getqx r0

  allowi

 rdlong r22, r23
 adds r22, r0
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, r23
 adds r22, #28
 rdlong r22, r22
 cmps r22, r17 wz
 if_nz jmp #\C__dstget_257
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C__dstget_256
C__dstget_257
 mov r22, r23
 adds r22, #28
 rdlong r22, r22
 cmps r22, r15 wz
 if_nz jmp #\C__dstget_254
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C__dstget_254
C__dstget_256
 mov r13, #1
C__dstget_254
C__dstget_249
 cmps r13,  #0 wz
 if_z jmp #\C__dstget_258
 mov r22, ##@C__dst_off
 rdlong r22, r22
 mov r0, r22
 jmp #\@C__dstget_233
C__dstget_258
 mov r22, r23
 adds r22, #32
 mov r20, #0
 wrlong r20, r22
 mov r0, #0
C__dstget_233
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
' Catalina Import _ytab
' Catalina Import strlen
' Catalina Import strcmp
' Catalina Import strncpy
' Catalina Import strcpy
' Catalina Import getenv
DAT
DAT
DAT
DAT
' Catalina Export mktime
 alignl
C_mktime
 calld PA,#NEWF
 sub SP, #24
 calld PA,#PSHM
 long $ffaa80
 mov r23, r2
 mov r22, r23
 adds r22, #4
 rdlong r20, r22
 rdlong r18, r23
 mov r16, #60
 mov r0, r18
 mov r1, r16
 calld PA,#DIVS
 adds r20, r0
 wrlong r20, r22
 rdlong r22, r23
 mov r20, #60
 mov r0, r22
 mov r1, r20
 calld PA,#DIVS
 wrlong r1, r23
 rdlong r22, r23
 cmps r22,  #0 wcz
 if_ae jmp #\C_mktime_2
 rdlong r22, r23
 adds r22, #60
 wrlong r22, r23
 mov r22, r23
 adds r22, #4
 rdlong r20, r22
 subs r20, #1
 wrlong r20, r22
C_mktime_2
 mov r22, r23
 adds r22, #8
 rdlong r20, r22
 mov r18, r23
 adds r18, #4
 rdlong r18, r18
 mov r16, #60
 mov r0, r18
 mov r1, r16
 calld PA,#DIVS
 adds r20, r0
 wrlong r20, r22
 mov r22, r23
 adds r22, #4
 rdlong r20, r22
 mov r18, #60
 mov r0, r20
 mov r1, r18
 calld PA,#DIVS
 wrlong r1, r22
 mov r22, r23
 adds r22, #4
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_mktime_4
 mov r22, r23
 adds r22, #4
 rdlong r20, r22
 adds r20, #60
 wrlong r20, r22
 mov r22, r23
 adds r22, #8
 rdlong r20, r22
 subs r20, #1
 wrlong r20, r22
C_mktime_4
 mov r22, r23
 adds r22, #8
 mov r20, #24
 rdlong r18, r22
 mov r0, r18
 mov r1, r20
 calld PA,#DIVS
 mov r21, r0
 rdlong r18, r22
 mov r0, r18
 mov r1, r20
 calld PA,#DIVS
 wrlong r1, r22
 mov r22, r23
 adds r22, #8
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_mktime_6
 mov r22, r23
 adds r22, #8
 rdlong r20, r22
 adds r20, #24
 wrlong r20, r22
 subs r21, #1
C_mktime_6
 mov r22, r23
 adds r22, #20
 rdlong r20, r22
 mov r18, r23
 adds r18, #16
 rdlong r18, r18
 mov r16, #12
 mov r0, r18
 mov r1, r16
 calld PA,#DIVS
 adds r20, r0
 wrlong r20, r22
 mov r22, r23
 adds r22, #16
 rdlong r20, r22
 mov r18, #12
 mov r0, r20
 mov r1, r18
 calld PA,#DIVS
 wrlong r1, r22
 mov r22, r23
 adds r22, #16
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_mktime_8
 mov r22, r23
 adds r22, #16
 rdlong r20, r22
 adds r20, #12
 wrlong r20, r22
 mov r22, r23
 adds r22, #20
 rdlong r20, r22
 subs r20, #1
 wrlong r20, r22
C_mktime_8
 mov r22, r23
 adds r22, #12
 rdlong r22, r22
 subs r22, #1
 adds r21, r22
 jmp #\@C_mktime_11
C_mktime_10
 mov r22, r23
 adds r22, #20
 rdlong r22, r22
 mov r20, ##1900
 adds r22, r20
 subs r22, #1
 mov r20, #0
 mov r18, #4
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_mktime_14
 mov r18, #100
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_mktime_16
 mov r18, #400
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_mktime_14
C_mktime_16
 mov r22, #366
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_mktime_15
C_mktime_14
 mov r22, #365
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_mktime_15
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 adds r21, r22
 mov r22, r23
 adds r22, #20
 rdlong r20, r22
 subs r20, #1
 wrlong r20, r22
C_mktime_11
 cmps r21,  #0 wcz
 if_b jmp #\C_mktime_10
 jmp #\@C_mktime_18
C_mktime_17
 mov r22, r23
 adds r22, #20
 rdlong r22, r22
 mov r20, ##1900
 adds r22, r20
 mov r20, #0
 mov r18, #4
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_mktime_22
 mov r18, #100
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_mktime_24
 mov r18, #400
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_mktime_22
C_mktime_24
 mov r22, #366
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_mktime_23
C_mktime_22
 mov r22, #365
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_mktime_23
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 subs r21, r22
 mov r22, r23
 adds r22, #20
 rdlong r20, r22
 adds r20, #1
 wrlong r20, r22
C_mktime_18
 mov r22, r23
 adds r22, #20
 rdlong r22, r22
 mov r20, ##1900
 adds r22, r20
 mov r20, #0
 mov r18, #4
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_mktime_25
 mov r18, #100
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_mktime_27
 mov r18, #400
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_mktime_25
C_mktime_27
 mov r22, #366
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_mktime_26
C_mktime_25
 mov r22, #365
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_mktime_26
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r21, r22 wcz
 if_ae jmp #\C_mktime_17
 jmp #\@C_mktime_29
C_mktime_28
 mov r22, r23
 adds r22, #20
 rdlong r22, r22
 mov r20, ##1900
 adds r22, r20
 mov r20, #0
 mov r18, #4
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_mktime_33
 mov r18, #100
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_mktime_35
 mov r18, #400
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_mktime_33
C_mktime_35
 mov r22, #1
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 jmp #\@C_mktime_34
C_mktime_33
 mov r22, #0
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
C_mktime_34
 mov r22, r23
 adds r22, #16
 rdlong r22, r22
 shl r22, #2
 mov r20, #48
 mov r18, FP
 sub r18, #-(-12)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C__ytab
 adds r20, r0
 adds r22, r20
 rdlong r22, r22
 subs r21, r22
 mov r22, r23
 adds r22, #16
 rdlong r20, r22
 adds r20, #1
 wrlong r20, r22
 cmps r20,  #12 wz
 if_nz jmp #\C_mktime_36
 mov r22, r23
 adds r22, #16
 mov r20, #0
 wrlong r20, r22
 mov r22, r23
 adds r22, #20
 rdlong r20, r22
 adds r20, #1
 wrlong r20, r22
C_mktime_36
C_mktime_29
 mov r22, r23
 adds r22, #20
 rdlong r22, r22
 mov r20, ##1900
 adds r22, r20
 mov r20, #0
 mov r18, #4
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_mktime_38
 mov r18, #100
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_mktime_40
 mov r18, #400
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 cmps r1, r20 wz
 if_nz jmp #\C_mktime_38
C_mktime_40
 mov r22, #1
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 jmp #\@C_mktime_39
C_mktime_38
 mov r22, #0
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
C_mktime_39
 mov r22, r23
 adds r22, #16
 rdlong r22, r22
 shl r22, #2
 mov r20, #48
 mov r18, FP
 sub r18, #-(-12)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C__ytab
 adds r20, r0
 adds r22, r20
 rdlong r22, r22
 cmps r21, r22 wcz
 if_ae jmp #\C_mktime_28
 mov r22, r23
 adds r22, #12
 mov r20, r21
 adds r20, #1
 wrlong r20, r22
 mov BC, #0
 calld PA,#CALA
 long @C__tzset
 mov r19, ##1970
 mov r22, r23
 adds r22, #20
 rdlong r22, r22
 mov r20, ##1900
 subs r20, r19
 neg r20, r20
 cmps r22, r20 wcz
 if_ae jmp #\C_mktime_41
 mov r0, ##$ffffffff
 jmp #\@C_mktime_1
C_mktime_41
 mov r15, #0
 mov r21, #0
 mov r9, #0
 mov r22, r23
 adds r22, #20
 rdlong r22, r22
 mov r20, ##1900
 mov r17, r22
 adds r17, r20
 mov r22, ##5883516
 mov r20, r17
 subs r20, r19
 cmps r22, r20 wcz
 if_ae jmp #\C_mktime_43
 adds r9, #1
C_mktime_43
 mov r22, r17
 subs r22, r19
 mov r20, #365

  stalli

 qmul r20, r22
 getqx r0

  allowi

 mov r21, r0
 mov r20, ##2147483647
 subs r20, r21
 mov r18, #4
 mov r0, r22
 mov r1, r18
 calld PA,#DIVS
 mov r22, r0
 adds r22, #1
 cmps r20, r22 wcz
 if_ae jmp #\C_mktime_45
 adds r9, #1
C_mktime_45
 mov r22, #4
 mov r0, r17
 mov r1, r22
 calld PA,#DIVS
 mov r22, r1
 cmps r22,  #0 wz
 if_z jmp #\C_mktime_48
 mov r20, #4
 mov r0, r19
 mov r1, r20
 calld PA,#DIVS
 cmps r22, r1 wcz
 if_ae jmp #\C_mktime_48
 mov r22, #1
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
 jmp #\@C_mktime_49
C_mktime_48
 mov r22, #0
 mov RI, FP
 sub RI, #-(-16)
 wrlong r22, RI
C_mktime_49
 mov r22, r17
 subs r22, r19
 mov r20, #4
 mov r0, r22
 mov r1, r20
 calld PA,#DIVS
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 adds r22, r0
 adds r21, r22
 mov r22, #100
 mov r0, r17
 mov r1, r22
 calld PA,#DIVS
 mov r22, r1
 cmps r22,  #0 wz
 if_z jmp #\C_mktime_51
 mov r20, #100
 mov r0, r19
 mov r1, r20
 calld PA,#DIVS
 cmps r22, r1 wcz
 if_ae jmp #\C_mktime_51
 mov r22, #1
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 jmp #\@C_mktime_52
C_mktime_51
 mov r22, #0
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
C_mktime_52
 mov r22, r17
 subs r22, r19
 mov r20, #100
 mov r0, r22
 mov r1, r20
 calld PA,#DIVS
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 adds r22, r0
 subs r21, r22
 mov r22, #400
 mov r0, r17
 mov r1, r22
 calld PA,#DIVS
 mov r22, r1
 cmps r22,  #0 wz
 if_z jmp #\C_mktime_54
 mov r20, #400
 mov r0, r19
 mov r1, r20
 calld PA,#DIVS
 cmps r22, r1 wcz
 if_ae jmp #\C_mktime_54
 mov r22, #1
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 jmp #\@C_mktime_55
C_mktime_54
 mov r22, #0
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
C_mktime_55
 mov r22, r17
 subs r22, r19
 mov r20, #400
 mov r0, r22
 mov r1, r20
 calld PA,#DIVS
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 adds r22, r0
 adds r21, r22
 mov r22, #0
 mov r13, r22
 mov r11, r22
 jmp #\@C_mktime_57
C_mktime_56
 mov r22, #0
 mov r20, #4
 mov r0, r17
 mov r1, r20
 calld PA,#DIVS
 cmps r1, r22 wz
 if_nz jmp #\C_mktime_60
 mov r20, #100
 mov r0, r17
 mov r1, r20
 calld PA,#DIVS
 cmps r1, r22 wz
 if_nz jmp #\C_mktime_62
 mov r20, #400
 mov r0, r17
 mov r1, r20
 calld PA,#DIVS
 cmps r1, r22 wz
 if_nz jmp #\C_mktime_60
C_mktime_62
 mov r22, #1
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 jmp #\@C_mktime_61
C_mktime_60
 mov r22, #0
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
C_mktime_61
 mov r22, r13
 shl r22, #2
 mov r20, #48
 mov r18, FP
 sub r18, #-(-28)
 rdlong r18, r18

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##@C__ytab
 adds r20, r0
 adds r22, r20
 rdlong r22, r22
 adds r11, r22
 adds r13, #1
C_mktime_57
 mov r22, r23
 adds r22, #16
 rdlong r22, r22
 cmps r13, r22 wcz
 if_b jmp #\C_mktime_56
 mov r22, r23
 adds r22, #12
 rdlong r22, r22
 subs r22, #1
 adds r11, r22
 mov r22, r21
 adds r22, r11
 cmps r22,  #0 wcz
 if_ae jmp #\C_mktime_63
 adds r9, #1
C_mktime_63
 adds r21, r11
 mov r22, r23
 adds r22, #28
 wrlong r11, r22
 mov r22, r23
 adds r22, #24
 mov r20, r21
 adds r20, #4
 mov r18, #7
 mov r0, r20
 mov r1, r18
 calld PA,#DIVS
 wrlong r1, r22
 mov r22, #60
 mov r20, r23
 adds r20, #8
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r20, r23
 adds r20, #4
 rdlong r20, r20
 adds r20, r0

  stalli

 qmul r22, r20
 getqx r0

  allowi

 rdlong r22, r23
 adds r22, r0
 mov r15, r22
 mov r22, ##$ffffffff
 sub r22, r15
 mov r20, ##$15180

  stalli

 qdiv r22, r20
 getqx r0

  allowi

 mov r22, r21
 cmp r0, r22 wcz
 if_ae jmp #\C_mktime_65
 adds r9, #1
C_mktime_65
 mov r22, ##86400

  stalli

 qmul r22, r21
 getqx r0

  allowi

 mov r22, r0
 add r15, r22
 mov r22, ##@C__timezone
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_be jmp #\C_mktime_70
 mov r20, ##$ffffffff
 mov RI, r20
 sub RI, r22
 mov r22, RI
 cmp r22, r15 wcz
 if_b jmp #\C_mktime_69
C_mktime_70
 mov r22, ##@C__timezone
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_mktime_67
 neg r22, r22
 cmp r15, r22 wcz
 if_ae jmp #\C_mktime_67
C_mktime_69
 adds r9, #1
C_mktime_67
 mov r22, ##@C__timezone
 rdlong r22, r22
 add r15, r22
 mov r22, r23
 adds r22, #32
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_mktime_71
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C__dstget
 mov r7, r0
 jmp #\@C_mktime_72
C_mktime_71
 mov r22, r23
 adds r22, #32
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_mktime_73
 mov r22, ##@C__dst_off
 rdlong r22, r22
 mov r7, r22
 jmp #\@C_mktime_74
C_mktime_73
 mov r7, #0
C_mktime_74
C_mktime_72
 cmp r7, r15 wcz
 if_be jmp #\C_mktime_75
 adds r9, #1
C_mktime_75
 sub r15, r7
 cmps r9,  #0 wz
 if_z jmp #\C_mktime_77
 mov r0, ##$ffffffff
 jmp #\@C_mktime_1
C_mktime_77
 cmp r15, r15 wz
 if_z jmp #\C_mktime_79
 mov r0, ##$ffffffff
 jmp #\@C_mktime_1
C_mktime_79
 mov r0, r15
C_mktime_1
 calld PA,#POPM
 add SP, #24
 calld PA,#RETF
' Catalina Import _dst_off
' Catalina Import _timezone
' Catalina Import _dstget
' Catalina Import _tzset
' Catalina Import _ytab
DAT
' Catalina Export modf
 alignl
C_modf
 calld PA,#NEWF
 sub SP, #16
 calld PA,#PSHM
 long $d50000
 mov RI, FP
 sub RI, #-(-8)
 wrlong r3, RI
 mov RI, FP
 sub RI, #-(-12)
 wrlong r3, RI
 mov r22, #255
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 shr r20, #23
 and r20, #255
 mov r18, r20
 sub r18, #127
 mov RI, FP
 sub RI, #-(-16)
 wrlong r18, RI
 cmp r20, r22 wz
 if_nz jmp #\C_modf_2
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##$807fffff
 and r22, r20
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##$ff800000
 and r22, r20
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##$7fffff
 and r22, r20
 cmp r22,  #0 wz
 if_z jmp #\C_modf_3
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, ##$807fffff
 and r22, r20
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, ##$ff800000
 and r22, r20
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 jmp #\@C_modf_3
C_modf_2
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_modf_6
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, ##$807fffff
 and r22, r20
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, ##$ff800000
 and r22, r20
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 jmp #\@C_modf_7
C_modf_6
 mov r22, ##8388607
 mov r20, FP
 sub r20, #-(-16)
 rdlong r20, r20
 sar r22, r20
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 cmps r22,  #23 wcz
 if_ae jmp #\C_modf_11
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_modf_12
 mov r23, #1
 jmp #\@C_modf_13
C_modf_12
 mov r23, #0
C_modf_13
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##$7fffff
 and r22, r20
 mov r20, r23
 and r22, r20
 cmp r22,  #0 wz
 if_z jmp #\C_modf_8
C_modf_11
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##$807fffff
 and r22, r20
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##$ff800000
 and r22, r20
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_modf_9
C_modf_8
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, ##$7fffff
 mov r18, ##$ff800000
 and r18, r22
 and r22, r20
 mov r16, FP
 sub r16, #-(-20)
 rdlong r16, r16
 xor r16, all_1s
 and r22, r16
 and r22, r20
 and r22, r20
 or r22, r18
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-12)
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FSUB
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
C_modf_9
C_modf_7
C_modf_3
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 wrlong r22, r2
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#POPM
 add SP, #16
 calld PA,#RETF
DAT
' Catalina Export _malloc_combine_chunks
 alignl
C__malloc_combine_chunks
 calld PA,#PSHM
 long $f40000
 mov r22, ##-8
 adds r22, r2
 rdlong r22, r22
 mov r23, r22
 adds r23, r2
 mov r22, ##-8
 adds r22, r3
 mov r20, r23
 mov r18, r3
 sub r20, r18
 wrlong r20, r22
 mov r22, r2
 mov r20, ##@C_ml_last
 rdlong r20, r20
 cmp r22, r20 wz
 if_nz jmp #\C__malloc_combine_chunks_7
 mov r21, #1
 jmp #\@C__malloc_combine_chunks_8
C__malloc_combine_chunks_7
 mov r21, #0
C__malloc_combine_chunks_8
 cmps r21,  #0 wz
 if_nz jmp #\C__malloc_combine_chunks_4
 mov r22, ##-4
 adds r22, r23
 rdlong r20, r22
 and r20, #3
 adds r20, r3
 wrlong r20, r22
C__malloc_combine_chunks_4
 mov r22, ##@C_ml_last
 rdlong r22, r22
 mov r20, r2
 cmp r22, r20 wz
 if_nz jmp #\C__malloc_combine_chunks_9
 wrlong r3, ##@C_ml_last
C__malloc_combine_chunks_9
 mov r0, #0
 calld PA,#POPM
 calld PA,#RETN
' Catalina Import ml_last
DAT
' Catalina Export _malloc_create_chunk
 alignl
C__malloc_create_chunk
 calld PA,#NEWF
 calld PA,#PSHM
 long $fe0000
 mov r23, r3
 mov r21, r2
 mov r17, ##@C_ml_last
 rdlong r17, r17
 mov r19, r23
 adds r19, #8
 mov r22, r19
 adds r22, #4
 mov r20, ##0
 wrlong r20, r22
 mov r22, ##0
 wrlong r22, r19
 mov r22, ##-4
 adds r22, r19
 mov r20, ##0
 wrlong r20, r22
 mov r22, ##-8
 adds r22, r19
 mov r20, #0
 wrlong r20, r22
 mov r22, ##-4
 adds r22, r19
 rdlong r20, r22
 or r20, #1
 wrlong r20, r22
 mov r22, ##-4
 adds r22, r19
 rdlong r20, r22
 and r20, #3
 adds r20, r17
 wrlong r20, r22
 wrlong r19, ##@C_ml_last
 mov r22, ##-8
 adds r22, r19
 mov r20, r21
 adds r20, r19
 mov r18, r19
 sub r20, r18
 wrlong r20, r22
 mov r22, r17
 cmp r22,  #0 wz
 if_z jmp #\C__malloc_create_chunk_4
 mov r22, ##-4
 adds r22, r17
 rdlong r22, r22
 and r22, #1
 cmps r22,  #0 wz
 if_z jmp #\C__malloc_create_chunk_4
 mov r2, r17
 mov BC, #4
 calld PA,#CALA
 long @C__malloc_unlink_free_chunk
 mov r2, r19
 mov r3, r17
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__malloc_combine_chunks
 add SP, #4
 mov r19, r17
C__malloc_create_chunk_4
 mov r0, r19
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _malloc_unlink_free_chunk
' Catalina Import _malloc_combine_chunks
' Catalina Import ml_last
DAT
' Catalina Export printf
 alignl
C_printf
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $400000
 mov RI, FP
 add RI, #8
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r2, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r3, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r4, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r5, BC
 mov r22, FP
 add r22, #12
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r2, ##@C___stdout
 mov RI, FP
 sub RI, #-(-8)
 rdlong r3, RI
 mov RI, FP
 add RI, #8
 rdlong r4, RI
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__doprnt
 add SP, #8
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r0, r22
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
' Catalina Import _doprnt
' Catalina Import __stdout
DAT
' Catalina Export _malloc_truncate
 alignl
C__malloc_truncate
 calld PA,#NEWF
 calld PA,#PSHM
 long $fe8000
 mov r23, r3
 mov r21, r2
 mov r19, r21
 adds r19, r23
 mov r22, ##-8
 adds r22, r23
 rdlong r22, r22
 mov r17, r22
 adds r17, r23
 mov r22, r19
 adds r22, #4
 mov r20, ##0
 wrlong r20, r22
 mov r22, ##0
 wrlong r22, r19
 mov r22, ##-4
 adds r22, r19
 mov r20, ##0
 wrlong r20, r22
 mov r22, ##-8
 adds r22, r19
 mov r20, #0
 wrlong r20, r22
 mov r22, ##-4
 adds r22, r19
 rdlong r20, r22
 or r20, #1
 wrlong r20, r22
 mov r22, ##-4
 adds r22, r19
 rdlong r20, r22
 and r20, #3
 adds r20, r23
 wrlong r20, r22
 mov r22, ##-8
 adds r22, r19
 mov r20, r17
 mov r18, r19
 sub r20, r18
 wrlong r20, r22
 mov r22, r23
 mov r20, ##@C_ml_last
 rdlong r20, r20
 cmp r22, r20 wz
 if_nz jmp #\C__malloc_truncate_7
 mov r15, #1
 jmp #\@C__malloc_truncate_8
C__malloc_truncate_7
 mov r15, #0
C__malloc_truncate_8
 cmps r15,  #0 wz
 if_nz jmp #\C__malloc_truncate_4
 mov r22, ##-4
 adds r22, r17
 rdlong r20, r22
 and r20, #3
 adds r20, r19
 wrlong r20, r22
 mov r22, ##-4
 adds r22, r17
 rdlong r22, r22
 and r22, #1
 cmps r22,  #0 wz
 if_z jmp #\C__malloc_truncate_5
 mov r2, r17
 mov BC, #4
 calld PA,#CALA
 long @C__malloc_unlink_free_chunk
 mov r2, r17
 mov r3, r19
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__malloc_combine_chunks
 add SP, #4
 jmp #\@C__malloc_truncate_5
C__malloc_truncate_4
 wrlong r19, ##@C_ml_last
C__malloc_truncate_5
 mov r22, ##-8
 adds r22, r23
 mov r20, r19
 mov r18, r23
 sub r20, r18
 wrlong r20, r22
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C__malloc_link_free_chunk
 mov r0, #0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _malloc_link_free_chunk
' Catalina Import _malloc_unlink_free_chunk
' Catalina Import _malloc_combine_chunks
' Catalina Import ml_last
DAT
' Catalina Export putc
 alignl
C_putc
 calld PA,#NEWF
 calld PA,#PSHM
 long $f40000
 mov r23, r3
 mov r21, r2
 rdlong r22, r21
 subs r22, #1
 wrlong r22, r21
 cmps r22,  #0 wcz
 if_b jmp #\C_putc_2
 mov r22, r21
 adds r22, #20
 rdlong r20, r22
 mov r18, r20
 adds r18, #1
 wrlong r18, r22
 mov r22, r23
 wrbyte r22, r20
 mov r0, r22
 and r0, cviu_m1
 jmp #\@C_putc_1
C_putc_2
 mov r2, r21
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C___flushbuf
 add SP, #4
 mov r22, r0
C_putc_1
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import __flushbuf
DAT
DAT
 alignl
C_raise
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $d00000
 mov r23, r2
 cmps r23,  #0 wcz
 if_b jmp #\C_raise_5
 cmps r23,  #16 wcz
 if_be jmp #\C_raise_3
C_raise_5
 mov r0, ##-1
 jmp #\@C_raise_2
C_raise_3
 mov r22, r23
 shl r22, #2
 mov r20, ##@C_shpc_65fa5696__sig_handler_L000001
 adds r22, r20
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmp r22,  #1 wz
 if_z jmp #\C_raise_6
 mov r2, r23
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov BC, #4
 mov RI, r22
 calld PA,#CALI
C_raise_6
 cmps r23,  #6 wz
 if_nz jmp #\C_raise_8
 mov r2, ##-1
 mov BC, #4
 calld PA,#CALA
 long @C_exit
 jmp #\@C_raise_9
C_raise_8
 mov r0, #0
 jmp #\@C_raise_2
C_raise_9
 mov r0, #0
C_raise_2
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Export signal
 alignl
C_signal
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $500000
 cmps r3,  #0 wcz
 if_b jmp #\C_signal_13
 cmps r3,  #16 wcz
 if_be jmp #\C_signal_11
C_signal_13
 mov r0, ##$ffffffff
 jmp #\@C_signal_10
C_signal_11
 mov r22, r3
 shl r22, #2
 mov r20, ##@C_shpc_65fa5696__sig_handler_L000001
 adds r22, r20
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, r2
 cmp r22,  #0 wz
 if_nz jmp #\C_signal_14
 mov r22, r3
 shl r22, #2
 mov r20, ##@C_shpc_65fa5696__sig_handler_L000001
 adds r22, r20
 mov r20, ##$1
 wrlong r20, r22
 jmp #\@C_signal_15
C_signal_14
 mov r22, r3
 shl r22, #2
 mov r20, ##@C_shpc_65fa5696__sig_handler_L000001
 adds r22, r20
 wrlong r2, r22
C_signal_15
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
C_signal_10
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Import exit
DAT
DAT
 alignl
C_rand
 calld PA,#PSHM
 long $540000
 mov r22, ##@C_si08_65fa5697_next_L000003
 mov r20, ##$41c64e6d
 rdlong r18, r22

  stalli

 qmul r20, r18
 getqx r0

  allowi

 mov r20, ##12345
 add r20, r0
 wrlong r20, ##@C_si08_65fa5697_next_L000003
 rdlong r22, r22
 shr r22, #16
 mov r20, ##32767
 and r22, r20
 mov r0, r22
 calld PA,#POPM
 calld PA,#RETN
' Catalina Export srand
 alignl
C_srand
 wrlong r2, ##@C_si08_65fa5697_next_L000003
 calld PA,#RETN
DAT
' Catalina Export _sbrk
 alignl
C__sbrk
 rdlong r0, ##@sbrkval
 mov r1, r2
 cmps r1, #0 wcz
 if_a add r1, #3
 andn r1, #3
 rdlong r3, ##@sbrkval
 adds r1, r3
 rdlong r3, ##@sbrkbeg
 cmp r1, r3 wcz
 if_b jmp #C__sbrk_L1
 wrlong r1, ##@sbrkval
 jmp #C__sbrk_L2
C__sbrk_L1
 rdlong r0, ##@sbrkerr
C__sbrk_L2
 calld PA,#RETN
DAT
' Catalina Export sbrk
' Catalina Import _memory_lock
' Catalina Import _memory_unlock
 alignl
C_sbrk
 mov r3,r2
 calld PA,#CALA
 long @C__memory_lock
 mov r2,r3
 calld PA,#CALA
 long @C__sbrk
 mov r3,r0
 calld PA,#CALA
 long @C__memory_unlock
 mov r0,r3
 calld PA,#RETN
DAT
' Catalina Export sd_sectread
 alignl
C_sd_sectread
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r3
 mov r21, r2
 mov r2, r21
 mov r22, r23
 mov r3, r22
 mov r4, #40
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__long_service_2
 add SP, #8
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _long_service_2
DAT
' Catalina Export sd_sectwrite
 alignl
C_sd_sectwrite
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r3
 mov r21, r2
 mov r2, r21
 mov r22, r23
 mov r3, r22
 mov r4, #41
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__long_service_2
 add SP, #8
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _long_service_2
DAT
' Catalina Export _settime
 alignl
C__settime
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $d00000
 mov r23, r2
 mov RI, FP
 sub RI, #-(-8)
 wrlong r23, RI
 mov r22, FP
 sub r22, #-(-8)
 mov r20, ##16777215
 mov r2, r22
 and r2, r20
 mov r3, ##-47
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__sys_plugin
 add SP, #4
 mov r22, r0
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Import _sys_plugin
DAT
' Catalina Export sprintf
 alignl
C_sprintf
 calld PA,#NEWF
 sub SP, #32
 calld PA,#PSHM
 long $400000
 mov RI, FP
 add RI, #8
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r2, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r3, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r4, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r5, BC
 mov r22, FP
 add r22, #16
 mov RI, FP
 sub RI, #-(-32)
 wrlong r22, RI
 mov r22, ##-1
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 mov r22, #262
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, ##32767
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 mov r2, FP
 sub r2, #-(-28)
 mov RI, FP
 sub RI, #-(-32)
 rdlong r3, RI
 mov RI, FP
 add RI, #12
 rdlong r4, RI
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__doprnt
 add SP, #8
 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r2, FP
 sub r2, #-(-28)
 mov r3, #0
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_putc
 add SP, #4
 mov r22, FP
 sub r22, #-(-36)
 rdlong r0, r22
 calld PA,#POPM
 add SP, #32
 calld PA,#RETF
' Catalina Import _doprnt
' Catalina Import putc
DAT
' Catalina Export sscanf
 alignl
C_sscanf
 calld PA,#NEWF
 sub SP, #32
 calld PA,#PSHM
 long $400000
 mov RI, FP
 add RI, #8
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r2, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r3, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r4, BC
 sub BC, #4
 cmp BC, RI wcz
 if_ae wrlong r5, BC
 mov r22, FP
 add r22, #16
 mov RI, FP
 sub RI, #-(-32)
 wrlong r22, RI
 mov r22, ##-1
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 mov r22, #133
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov RI, FP
 add RI, #8
 rdlong r2, RI
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r22, r0
 mov RI, FP
 sub RI, #-(-28)
 wrlong r22, RI
 mov RI, FP
 sub RI, #-(-32)
 rdlong r2, RI
 mov RI, FP
 add RI, #12
 rdlong r3, RI
 mov r4, FP
 sub r4, #-(-28)
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C__doscan
 add SP, #8
 mov RI, FP
 sub RI, #-(-36)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-36)
 rdlong r0, r22
 calld PA,#POPM
 add SP, #32
 calld PA,#RETF
' Catalina Import _doscan
' Catalina Import strlen
DAT
' Catalina Export strcat
 alignl
C_strcat
 calld PA,#PSHM
 long $d00000
 mov r23, r3
C_strcat_2
 mov r22, r23
 mov r23, r22
 adds r23, #1
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_strcat_2
 mov r22, ##-1
 adds r23, r22
C_strcat_5
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, r2
 mov r2, r20
 adds r2, #1
 rdbyte r20, r20
 wrbyte r20, r22
 mov r22, r20
 and r22, cviu_m1
 cmps r22,  #0 wz
 if_nz jmp #\C_strcat_5
 mov r0, r3
 calld PA,#POPM
 calld PA,#RETN
DAT
' Catalina Export strchr
 alignl
C_strchr
 calld PA,#PSHM
 long $400000
 mov r22, r2
 mov r2, r22
 and r2, cviu_m1
 jmp #\@C_strchr_3
C_strchr_2
 mov r22, r3
 mov r3, r22
 adds r3, #1
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_strchr_5
 mov r0, ##0
 jmp #\@C_strchr_1
C_strchr_5
C_strchr_3
 rdbyte r22, r3
 cmps r2, r22 wz
 if_nz jmp #\C_strchr_2
 mov r0, r3
C_strchr_1
 calld PA,#POPM
 calld PA,#RETN
DAT
' Catalina Export strcmp
 alignl
C_strcmp
 calld PA,#PSHM
 long $500000
 jmp #\@C_strcmp_3
C_strcmp_2
 mov r22, r3
 mov r3, r22
 adds r3, #1
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_strcmp_5
 mov r0, #0
 jmp #\@C_strcmp_1
C_strcmp_5
C_strcmp_3
 mov r22, r2
 mov r2, r22
 adds r2, #1
 rdbyte r20, r3
 rdbyte r22, r22
 cmps r20, r22 wz
 if_z jmp #\C_strcmp_2
 rdbyte r22, r3
 cmps r22,  #0 wz
 if_nz jmp #\C_strcmp_7
 mov r0, ##-1
 jmp #\@C_strcmp_1
C_strcmp_7
 mov r22, ##-1
 adds r22, r2
 mov r2, r22
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_strcmp_9
 mov r0, #1
 jmp #\@C_strcmp_1
C_strcmp_9
 rdbyte r22, r3
 rdbyte r20, r2
 mov r0, r22
 subs r0, r20
C_strcmp_1
 calld PA,#POPM
 calld PA,#RETN
DAT
' Catalina Export strcpy
 alignl
C_strcpy
 calld PA,#PSHM
 long $d00000
 mov r23, r3
C_strcpy_2
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, r2
 mov r2, r20
 adds r2, #1
 rdbyte r20, r20
 wrbyte r20, r22
 mov r22, r20
 and r22, cviu_m1
 cmps r22,  #0 wz
 if_nz jmp #\C_strcpy_2
 mov r0, r3
 calld PA,#POPM
 calld PA,#RETN
DAT
 alignl
C_s750_65fa5698_str_cvt_L000001
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $ffa800
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 cmps r22,  #79 wcz
 if_b jmp #\C_s750_65fa5698_str_cvt_L000001_3
 mov r22, #78
 mov RI, FP
 add RI,#12
 wrlong r22, RI
C_s750_65fa5698_str_cvt_L000001_3
 mov r22, #0
 mov r15, r22
 wrlong r22, r21
 mov r13, r17
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, ##@C_s750_65fa5698_str_cvt_L000001_7_L000008
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_ae jmp #\C_s750_65fa5698_str_cvt_L000001_5
 mov r22, #1
 wrlong r22, r21
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 xor r22, Bit31
 mov RI, FP
 add RI,#8
 wrlong r22, RI
C_s750_65fa5698_str_cvt_L000001_5
 mov r2, FP
 sub r2, #-(-12)
 mov RI, FP
 add RI, #8
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_modf
 add SP, #4
 mov RI, FP
 add RI,#8
 wrlong r0, RI
 mov r11, r17
 adds r11, #80
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, ##@C_s750_65fa5698_str_cvt_L000001_7_L000008
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_z jmp #\C_s750_65fa5698_str_cvt_L000001_9
 mov r11, r17
 adds r11, #80
 jmp #\@C_s750_65fa5698_str_cvt_L000001_12
C_s750_65fa5698_str_cvt_L000001_11
 mov r2, FP
 sub r2, #-(-12)
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, ##@C_s750_65fa5698_str_cvt_L000001_14_L000015
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FDIV
 mov r3, r0
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_modf
 add SP, #4
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, ##-1
 adds r22, r11
 mov r11, r22
 mov r20, ##@C_s750_65fa5698_str_cvt_L000001_14_L000015
 rdlong r20, r20
 mov r18, FP
 sub r18, #-(-8)
 rdlong r18, r18
 mov r16, ##@C_s750_65fa5698_str_cvt_L000001_16_L000017
 rdlong r16, r16
 mov r0, r18
 mov r1, r16
 calld PA,#FADD
 mov r1, r0
 mov r0, r20
 calld PA,#FMUL
 calld PA,#INFL
 mov r20, r0
 adds r20, #48
 wrbyte r20, r22
 adds r15, #1
C_s750_65fa5698_str_cvt_L000001_12
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, ##@C_s750_65fa5698_str_cvt_L000001_7_L000008
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_nz jmp #\C_s750_65fa5698_str_cvt_L000001_11
 jmp #\@C_s750_65fa5698_str_cvt_L000001_19
C_s750_65fa5698_str_cvt_L000001_18
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, r11
 mov r11, r20
 adds r11, #1
 rdbyte r20, r20
 wrbyte r20, r22
C_s750_65fa5698_str_cvt_L000001_19
 mov r22, r11
 mov r20, r17
 adds r20, #80
 cmp r22, r20 wcz
 if_b jmp #\C_s750_65fa5698_str_cvt_L000001_18
 jmp #\@C_s750_65fa5698_str_cvt_L000001_10
C_s750_65fa5698_str_cvt_L000001_9
 mov r22, FP
 add r22, #8
 rdlong r22, r22
 mov r20, ##@C_s750_65fa5698_str_cvt_L000001_7_L000008
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_be jmp #\C_s750_65fa5698_str_cvt_L000001_21
 jmp #\@C_s750_65fa5698_str_cvt_L000001_24
C_s750_65fa5698_str_cvt_L000001_23
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov RI, FP
 add RI,#8
 wrlong r22, RI
 subs r15, #1
C_s750_65fa5698_str_cvt_L000001_24
 mov r22, ##@C_s750_65fa5698_str_cvt_L000001_14_L000015
 rdlong r22, r22
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FMUL
 mov r22, r0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r20, ##@C_s750_65fa5698_str_cvt_L000001_26_L000027
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_b jmp #\C_s750_65fa5698_str_cvt_L000001_23
C_s750_65fa5698_str_cvt_L000001_21
C_s750_65fa5698_str_cvt_L000001_10
 mov r22, FP
 add r22, #12
 rdlong r22, r22
 mov r11, r22
 adds r11, r17
 cmps r19,  #0 wz
 if_nz jmp #\C_s750_65fa5698_str_cvt_L000001_28
 adds r11, r15
C_s750_65fa5698_str_cvt_L000001_28
 wrlong r15, r23
 mov r22, r11
 mov r20, r17
 cmp r22, r20 wcz
 if_ae jmp #\C_s750_65fa5698_str_cvt_L000001_33
 mov r22, #0
 wrbyte r22, r17
 mov r0, r17
 jmp #\@C_s750_65fa5698_str_cvt_L000001_2
C_s750_65fa5698_str_cvt_L000001_32
 mov r22, ##@C_s750_65fa5698_str_cvt_L000001_14_L000015
 rdlong r22, r22
 mov r20, FP
 add r20, #8
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FMUL
 mov RI, FP
 add RI,#8
 wrlong r0, RI
 mov r2, FP
 sub r2, #-(-8)
 mov RI, FP
 add RI, #8
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_modf
 add SP, #4
 mov RI, FP
 add RI,#8
 wrlong r0, RI
 mov r22, r13
 mov r13, r22
 adds r13, #1
 mov r20, FP
 sub r20, #-(-8)
 rdlong r0, r20
 calld PA,#INFL
 mov r20, r0
 adds r20, #48
 wrbyte r20, r22
C_s750_65fa5698_str_cvt_L000001_33
 mov r20, r11
 cmp r13, r20 wcz
 if_a jmp #\C_s750_65fa5698_str_cvt_L000001_35
 mov r20, r17
 adds r20, #80
 cmp r13, r20 wcz
 if_b jmp #\C_s750_65fa5698_str_cvt_L000001_32
C_s750_65fa5698_str_cvt_L000001_35
 mov r22, r11
 mov r20, r17
 adds r20, #80
 cmp r22, r20 wcz
 if_b jmp #\C_s750_65fa5698_str_cvt_L000001_36
 mov r22, r17
 adds r22, #79
 mov r20, #0
 wrbyte r20, r22
 mov r0, r17
 jmp #\@C_s750_65fa5698_str_cvt_L000001_2
C_s750_65fa5698_str_cvt_L000001_36
 mov r13, r11
 rdbyte r22, r11
 adds r22, #5
 wrbyte r22, r11
 jmp #\@C_s750_65fa5698_str_cvt_L000001_39
C_s750_65fa5698_str_cvt_L000001_38
 mov r22, #48
 wrbyte r22, r11
 mov r22, r11
 mov r20, r17
 cmp r22, r20 wcz
 if_be jmp #\C_s750_65fa5698_str_cvt_L000001_41
 mov r22, ##-1
 adds r22, r11
 mov r11, r22
 rdbyte r20, r22
 adds r20, #1
 wrbyte r20, r22
 jmp #\@C_s750_65fa5698_str_cvt_L000001_42
C_s750_65fa5698_str_cvt_L000001_41
 mov r22, #49
 wrbyte r22, r11
 rdlong r22, r23
 adds r22, #1
 wrlong r22, r23
 cmps r19,  #0 wz
 if_nz jmp #\C_s750_65fa5698_str_cvt_L000001_43
 mov r22, r13
 mov r20, r17
 cmp r22, r20 wcz
 if_be jmp #\C_s750_65fa5698_str_cvt_L000001_45
 mov r22, #48
 wrbyte r22, r13
C_s750_65fa5698_str_cvt_L000001_45
 adds r13, #1
C_s750_65fa5698_str_cvt_L000001_43
C_s750_65fa5698_str_cvt_L000001_42
C_s750_65fa5698_str_cvt_L000001_39
 rdbyte r22, r11
 cmps r22,  #57 wcz
 if_a jmp #\C_s750_65fa5698_str_cvt_L000001_38
 mov r22, #0
 wrbyte r22, r13
 mov r0, r17
C_s750_65fa5698_str_cvt_L000001_2
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
' Catalina Export _ecvt
 alignl
C__ecvt
 calld PA,#NEWF
 calld PA,#PSHM
 long $ea0000
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r2, r17
 mov r3, #1
 mov r4, r19
 mov r5, r21
 sub SP, #16
 mov RI, r23
 wrlong RI, --PTRA
 calld PA,#PSHF
 long 8
 mov BC, #24
 add SP, #4
 calld PA,#CALA
 long @C_s750_65fa5698_str_cvt_L000001
 add SP, #20
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export _fcvt
 alignl
C__fcvt
 calld PA,#NEWF
 calld PA,#PSHM
 long $ea0000
 mov r23, r5
 mov r21, r4
 mov r19, r3
 mov r17, r2
 mov r2, r17
 mov r3, #0
 mov r4, r19
 mov r5, r21
 sub SP, #16
 mov RI, r23
 wrlong RI, --PTRA
 calld PA,#PSHF
 long 8
 mov BC, #24
 add SP, #4
 calld PA,#CALA
 long @C_s750_65fa5698_str_cvt_L000001
 add SP, #20
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import modf
DAT
DAT
' Catalina Export strlen
 alignl
C_strlen
 calld PA,#PSHM
 long $d00000
 mov r23, r2
C_strlen_2
 mov r22, r23
 mov r23, r22
 adds r23, #1
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_strlen_2
 mov r22, ##-1
 adds r22, r23
 mov r23, r22
 mov r20, r2
 sub r22, r20
 mov r0, r22
 calld PA,#POPM
 calld PA,#RETN
DAT
' Catalina Export strncmp
 alignl
C_strncmp
 calld PA,#PSHM
 long $500000
 cmp r2,  #0 wz
 if_z jmp #\C_strncmp_2
C_strncmp_4
 mov r22, r3
 mov r3, r22
 adds r3, #1
 rdbyte r20, r4
 rdbyte r22, r22
 cmps r20, r22 wz
 if_z jmp #\C_strncmp_7
 jmp #\@C_strncmp_6
C_strncmp_7
 mov r22, r4
 mov r4, r22
 adds r4, #1
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_strncmp_9
 mov r0, #0
 jmp #\@C_strncmp_1
C_strncmp_9
 mov r22, r2
 sub r22, #1
 mov r2, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_strncmp_4
C_strncmp_6
 cmp r2,  #0 wz
 if_z jmp #\C_strncmp_11
 rdbyte r22, r4
 cmps r22,  #0 wz
 if_nz jmp #\C_strncmp_13
 mov r0, ##-1
 jmp #\@C_strncmp_1
C_strncmp_13
 mov r22, ##-1
 adds r22, r3
 mov r3, r22
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_strncmp_15
 mov r0, #1
 jmp #\@C_strncmp_1
C_strncmp_15
 rdbyte r22, r4
 rdbyte r20, r3
 mov r0, r22
 subs r0, r20
 jmp #\@C_strncmp_1
C_strncmp_11
C_strncmp_2
 mov r0, #0
C_strncmp_1
 calld PA,#POPM
 calld PA,#RETN
DAT
' Catalina Export strncpy
 alignl
C_strncpy
 calld PA,#PSHM
 long $d00000
 mov r23, r4
 cmp r2,  #0 wz
 if_z jmp #\C_strncpy_2
C_strncpy_4
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, r3
 mov r3, r20
 adds r3, #1
 rdbyte r20, r20
 wrbyte r20, r22
 mov r22, r20
 and r22, cviu_m1
 cmps r22,  #0 wz
 if_z jmp #\C_strncpy_7
 mov r22, r2
 sub r22, #1
 mov r2, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_strncpy_4
C_strncpy_7
 mov r22, ##-1
 adds r22, r3
 mov r3, r22
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_strncpy_8
 mov r22, r2
 sub r22, #1
 mov r2, r22
 cmp r22,  #0 wz
 if_z jmp #\C_strncpy_8
C_strncpy_10
 mov r22, r23
 mov r23, r22
 adds r23, #1
 mov r20, #0
 wrbyte r20, r22
 mov r22, r2
 sub r22, #1
 mov r2, r22
 cmp r22,  #0 wz
 if_nz jmp #\C_strncpy_10
C_strncpy_8
C_strncpy_2
 mov r0, r4
 calld PA,#POPM
 calld PA,#RETN
DAT
' Catalina Export strstr
 alignl
C_strstr
 calld PA,#NEWF
 calld PA,#PSHM
 long $f80000
 mov r23, r3
 mov r21, r2
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_strlen
 mov r19, r0
 cmps r19,  #0 wz
 if_nz jmp #\C_strstr_5
 mov r0, r23
 jmp #\@C_strstr_1
C_strstr_4
 mov r22, r23
 mov r23, r22
 adds r23, #1
 rdbyte r22, r22
 cmps r22,  #0 wz
 if_nz jmp #\C_strstr_7
 mov r0, ##0
 jmp #\@C_strstr_1
C_strstr_7
C_strstr_5
 rdbyte r22, r23
 rdbyte r20, r21
 cmps r22, r20 wz
 if_nz jmp #\C_strstr_4
 mov r2, r19
 mov r3, r21
 mov r4, r23
 mov BC, #12
 sub SP, #8
 calld PA,#CALA
 long @C_strncmp
 add SP, #8
 cmps r0,  #0 wz
 if_nz jmp #\C_strstr_4
 mov r0, r23
C_strstr_1
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import strlen
' Catalina Import strncmp
DAT
DAT
 alignl
C_strtod
 calld PA,#NEWF
 sub SP, #24
 calld PA,#PSHM
 long $faaa80
 mov r9, #0
 mov r19, #0
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r23, r3
 jmp #\@C_strtod_7
C_strtod_6
 adds r23, #1
C_strtod_7
 rdbyte r22, r23
 mov r20, ##@C___ctype+1
 adds r22, r20
 rdbyte r22, r22
 and r22, #8
 cmps r22,  #0 wz
 if_nz jmp #\C_strtod_6
 rdbyte r22, r23
 cmps r22,  #45 wz
 if_nz jmp #\C_strtod_10
 mov r22, #1
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 adds r23, #1
 jmp #\@C_strtod_11
C_strtod_10
 rdbyte r22, r23
 cmps r22,  #43 wz
 if_nz jmp #\C_strtod_12
 adds r23, #1
C_strtod_12
 mov r22, #0
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
C_strtod_11
 mov r13, ##-1
 mov r17, #0
C_strtod_14
 rdbyte r21, r23
 mov r22, r21
 subs r22, #48
 cmp r22,  #10 wcz
 if_b jmp #\C_strtod_18
 cmps r21,  #46 wz
 if_nz jmp #\C_strtod_22
 cmps r13,  #0 wcz
 if_b jmp #\C_strtod_20
C_strtod_22
 jmp #\@C_strtod_16
C_strtod_20
 mov r13, r17
C_strtod_18
 adds r23, #1
 adds r17, #1
 jmp #\@C_strtod_14
C_strtod_16
 mov RI, FP
 sub RI, #-(-16)
 wrlong r23, RI
 subs r23, r17
 cmps r13,  #0 wcz
 if_ae jmp #\C_strtod_23
 mov r13, r17
 jmp #\@C_strtod_24
C_strtod_23
 subs r17, #1
C_strtod_24
 cmps r17,  #18 wcz
 if_be jmp #\C_strtod_25
 mov r22, #18
 mov r20, r13
 subs r20, #18
 mov RI, FP
 sub RI, #-(-8)
 wrlong r20, RI
 mov r17, r22
 jmp #\@C_strtod_26
C_strtod_25
 mov r22, r13
 subs r22, r17
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_strtod_26
 cmps r17,  #0 wz
 if_nz jmp #\C_strtod_27
 mov r7, ##@C_strtod_29_L000030
 rdlong r7, r7
 mov r23, r3
 jmp #\@C_strtod_31
C_strtod_27
 mov r22, #0
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 jmp #\@C_strtod_35
C_strtod_32
 rdbyte r21, r23
 adds r23, #1
 cmps r21,  #46 wz
 if_nz jmp #\C_strtod_36
 rdbyte r21, r23
 adds r23, #1
C_strtod_36
 mov r22, #10
 mov r20, FP
 sub r20, #-(-20)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, r21
 subs r22, #48
 adds r22, r0
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 subs r17, #1
C_strtod_35
 cmps r17,  #9 wcz
 if_a jmp #\C_strtod_32
 mov r22, #0
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 jmp #\@C_strtod_41
C_strtod_38
 rdbyte r21, r23
 adds r23, #1
 cmps r21,  #46 wz
 if_nz jmp #\C_strtod_42
 rdbyte r21, r23
 adds r23, #1
C_strtod_42
 mov r22, #10
 mov r20, FP
 sub r20, #-(-24)
 rdlong r20, r20

  stalli

 qmul r22, r20
 getqx r0

  allowi

 mov r22, r21
 subs r22, #48
 adds r22, r0
 mov RI, FP
 sub RI, #-(-24)
 wrlong r22, RI
 subs r17, #1
C_strtod_41
 cmps r17,  #0 wcz
 if_a jmp #\C_strtod_38
 mov r22, ##@C_strtod_44_L000045
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-20)
 rdlong r0, r20
 calld PA,#FLIN
 mov r1, r0
 mov r0, r22
 calld PA,#FMUL
 mov RI, FP
 sub RI, #-(-28)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-24)
 rdlong r0, r22
 calld PA,#FLIN
 mov r22, FP
 sub r22, #-(-28)
 rdlong r22, r22
 mov r1, r0
 mov r0, r22
 calld PA,#FADD
 mov r7, r0
 mov r22, FP
 sub r22, #-(-16)
 rdlong r23, r22
 rdbyte r22, r23
 cmps r22,  #69 wz
 if_z jmp #\C_strtod_48
 cmps r22,  #101 wz
 if_nz jmp #\C_strtod_46
C_strtod_48
 adds r23, #1
 rdbyte r22, r23
 cmps r22,  #45 wz
 if_nz jmp #\C_strtod_49
 mov r22, #1
 mov r9, r22
 adds r23, #1
 jmp #\@C_strtod_54
C_strtod_49
 rdbyte r22, r23
 cmps r22,  #43 wz
 if_nz jmp #\C_strtod_51
 adds r23, #1
C_strtod_51
 mov r9, #0
 jmp #\@C_strtod_54
C_strtod_53
 mov r22, #10

  stalli

 qmul r22, r19
 getqx r0

  allowi

 rdbyte r22, r23
 subs r22, #48
 mov r19, r0
 adds r19, r22
 adds r23, #1
C_strtod_54
 rdbyte r22, r23
 subs r22, #48
 cmp r22,  #10 wcz
 if_b jmp #\C_strtod_53
C_strtod_46
 cmps r9,  #0 wz
 if_z jmp #\C_strtod_56
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 subs r19, r22
 neg r19, r19
 jmp #\@C_strtod_57
C_strtod_56
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 adds r19, r22
C_strtod_57
 cmps r19,  #0 wcz
 if_ae jmp #\C_strtod_58
 mov r9, #1
 neg r19, r19
 jmp #\@C_strtod_59
C_strtod_58
 mov r9, #0
C_strtod_59
 mov r22, ##@C_sa0s_65fa5698_maxE_xponent_L000003
 rdlong r22, r22
 cmps r19, r22 wcz
 if_be jmp #\C_strtod_60
 mov r19, ##@C_sa0s_65fa5698_maxE_xponent_L000003
 rdlong r19, r19
 mov r22, #34
 wrlong r22, ##@C_errno
C_strtod_60
 mov r11, ##@C_strtod_62_L000063
 rdlong r11, r11
 mov r15, ##@C_sa0s1_65fa5698_powersO_f10_L000004
 jmp #\@C_strtod_67
C_strtod_64
 mov r22, r19
 and r22, #1
 cmps r22,  #0 wz
 if_z jmp #\C_strtod_68
 rdlong r22, r15
 mov r0, r11
 mov r1, r22
 calld PA,#FMUL
 mov r11, r0
C_strtod_68
 sar r19, #1
 adds r15, #4
C_strtod_67
 cmps r19,  #0 wz
 if_nz jmp #\C_strtod_64
 cmps r9,  #0 wz
 if_z jmp #\C_strtod_70
 mov r0, r7
 mov r1, r11
 calld PA,#FDIV
 mov r7, r0
 jmp #\@C_strtod_71
C_strtod_70
 mov r0, r7
 mov r1, r11
 calld PA,#FMUL
 mov r7, r0
C_strtod_71
C_strtod_31
 mov r22, r2
 cmp r22,  #0 wz
 if_z jmp #\C_strtod_72
 wrlong r23, r2
C_strtod_72
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_strtod_74
 mov r0, r7
 xor r0, Bit31
 jmp #\@C_strtod_5
C_strtod_74
 mov r0, r7
C_strtod_5
 calld PA,#POPM
 add SP, #24
 calld PA,#RETF
' Catalina Import errno
' Catalina Import __ctype
DAT
DAT
' Catalina Export strtol
 alignl
C_strtol
 calld PA,#NEWF
 calld PA,#PSHM
 long $e80000
 mov r23, r4
 mov r21, r3
 mov r19, r2
 mov r2, #1
 mov r3, r19
 mov r4, r21
 mov r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_s8lo_65fa5698_string2long_L000003
 add SP, #12
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export strtoul
 alignl
C_strtoul
 calld PA,#NEWF
 calld PA,#PSHM
 long $e80000
 mov r23, r4
 mov r21, r3
 mov r19, r2
 mov r2, #0
 mov r3, r19
 mov r4, r21
 mov r5, r23
 mov BC, #16
 sub SP, #12
 calld PA,#CALA
 long @C_s8lo_65fa5698_string2long_L000003
 add SP, #12
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
 alignl
C_s8lo_65fa5698_string2long_L000003
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $faa000
 mov r21, #0
 mov r17, #0
 mov r15, #1
 mov RI, FP
 sub RI, #-(-12)
 wrlong r5, RI
 mov r22, r4
 cmp r22,  #0 wz
 if_z jmp #\C_s8lo_65fa5698_string2long_L000003_10
 wrlong r5, r4
 jmp #\@C_s8lo_65fa5698_string2long_L000003_10
C_s8lo_65fa5698_string2long_L000003_9
 adds r5, #1
C_s8lo_65fa5698_string2long_L000003_10
 rdbyte r22, r5
 mov r20, ##@C___ctype+1
 adds r22, r20
 rdbyte r22, r22
 and r22, #8
 cmps r22,  #0 wz
 if_nz jmp #\C_s8lo_65fa5698_string2long_L000003_9
 rdbyte r19, r5
 cmps r19,  #45 wz
 if_z jmp #\C_s8lo_65fa5698_string2long_L000003_15
 cmps r19,  #43 wz
 if_nz jmp #\C_s8lo_65fa5698_string2long_L000003_13
C_s8lo_65fa5698_string2long_L000003_15
 cmps r19,  #45 wz
 if_nz jmp #\C_s8lo_65fa5698_string2long_L000003_16
 mov r15, ##-1
C_s8lo_65fa5698_string2long_L000003_16
 adds r5, #1
C_s8lo_65fa5698_string2long_L000003_13
 mov RI, FP
 sub RI, #-(-8)
 wrlong r5, RI
 cmps r3,  #0 wz
 if_nz jmp #\C_s8lo_65fa5698_string2long_L000003_18
 rdbyte r22, r5
 cmps r22,  #48 wz
 if_nz jmp #\C_s8lo_65fa5698_string2long_L000003_20
 mov r22, r5
 adds r22, #1
 mov r5, r22
 rdbyte r22, r22
 cmps r22,  #120 wz
 if_z jmp #\C_s8lo_65fa5698_string2long_L000003_24
 rdbyte r22, r5
 cmps r22,  #88 wz
 if_nz jmp #\C_s8lo_65fa5698_string2long_L000003_22
C_s8lo_65fa5698_string2long_L000003_24
 mov r3, #16
 adds r5, #1
 jmp #\@C_s8lo_65fa5698_string2long_L000003_29
C_s8lo_65fa5698_string2long_L000003_22
 mov r3, #8
 jmp #\@C_s8lo_65fa5698_string2long_L000003_29
C_s8lo_65fa5698_string2long_L000003_20
 mov r3, #10
 jmp #\@C_s8lo_65fa5698_string2long_L000003_29
C_s8lo_65fa5698_string2long_L000003_18
 cmps r3,  #16 wz
 if_nz jmp #\C_s8lo_65fa5698_string2long_L000003_29
 rdbyte r22, r5
 cmps r22,  #48 wz
 if_nz jmp #\C_s8lo_65fa5698_string2long_L000003_29
 mov r22, r5
 adds r22, #1
 mov r5, r22
 rdbyte r22, r22
 cmps r22,  #120 wz
 if_z jmp #\C_s8lo_65fa5698_string2long_L000003_27
 rdbyte r22, r5
 cmps r22,  #88 wz
 if_nz jmp #\C_s8lo_65fa5698_string2long_L000003_29
C_s8lo_65fa5698_string2long_L000003_27
 adds r5, #1
 jmp #\@C_s8lo_65fa5698_string2long_L000003_29
C_s8lo_65fa5698_string2long_L000003_28
 cmps r17,  #0 wz
 if_nz jmp #\C_s8lo_65fa5698_string2long_L000003_32
 mov r22, ##@C___ctype+1
 adds r22, r19
 rdbyte r22, r22
 and r22, #3
 cmps r22,  #0 wz
 if_z jmp #\C_s8lo_65fa5698_string2long_L000003_34
 mov r22, r19
 subs r22, #65
 cmp r22,  #26 wcz
 if_ae jmp #\C_s8lo_65fa5698_string2long_L000003_38
 mov r13, r19
 subs r13, #65
 jmp #\@C_s8lo_65fa5698_string2long_L000003_39
C_s8lo_65fa5698_string2long_L000003_38
 mov r13, r19
 subs r13, #97
C_s8lo_65fa5698_string2long_L000003_39
 mov r22, r13
 adds r22, #10
 mov r23, r22
 jmp #\@C_s8lo_65fa5698_string2long_L000003_35
C_s8lo_65fa5698_string2long_L000003_34
 mov r22, r19
 subs r22, #48
 mov r23, r22
C_s8lo_65fa5698_string2long_L000003_35
 mov r22, r3
 cmp r23, r22 wcz
 if_b jmp #\C_s8lo_65fa5698_string2long_L000003_40
 jmp #\@C_s8lo_65fa5698_string2long_L000003_30
C_s8lo_65fa5698_string2long_L000003_40
 mov r22, ##$ffffffff
 sub r22, r23
 mov r20, r3

  stalli

 qdiv r22, r20
 getqx r0

  allowi

 cmp r21, r0 wcz
 if_be jmp #\C_s8lo_65fa5698_string2long_L000003_42
 adds r17, #1
 jmp #\@C_s8lo_65fa5698_string2long_L000003_43
C_s8lo_65fa5698_string2long_L000003_42
 mov r22, r3

  stalli

 qmul r21, r22
 getqx r0

  allowi

 mov r21, r0
 add r21, r23
C_s8lo_65fa5698_string2long_L000003_43
C_s8lo_65fa5698_string2long_L000003_32
 adds r5, #1
C_s8lo_65fa5698_string2long_L000003_29
 rdbyte r22, r5
 mov r19, r22
 subs r22, #48
 cmp r22,  #10 wcz
 if_b jmp #\C_s8lo_65fa5698_string2long_L000003_28
 mov r22, ##@C___ctype+1
 adds r22, r19
 rdbyte r22, r22
 and r22, #3
 cmps r22,  #0 wz
 if_nz jmp #\C_s8lo_65fa5698_string2long_L000003_28
C_s8lo_65fa5698_string2long_L000003_30
 mov r22, r4
 cmp r22,  #0 wz
 if_z jmp #\C_s8lo_65fa5698_string2long_L000003_44
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, r5
 cmp r22, r20 wz
 if_nz jmp #\C_s8lo_65fa5698_string2long_L000003_46
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 wrlong r22, r4
 jmp #\@C_s8lo_65fa5698_string2long_L000003_47
C_s8lo_65fa5698_string2long_L000003_46
 wrlong r5, r4
C_s8lo_65fa5698_string2long_L000003_47
C_s8lo_65fa5698_string2long_L000003_44
 cmps r17,  #0 wz
 if_nz jmp #\C_s8lo_65fa5698_string2long_L000003_48
 mov r22, #0
 cmps r2, r22 wz
 if_z jmp #\C_s8lo_65fa5698_string2long_L000003_50
 cmps r15, r22 wcz
 if_ae jmp #\C_s8lo_65fa5698_string2long_L000003_53
 mov r22, ##$80000000
 cmp r21, r22 wcz
 if_a jmp #\C_s8lo_65fa5698_string2long_L000003_52
C_s8lo_65fa5698_string2long_L000003_53
 cmps r15,  #0 wcz
 if_be jmp #\C_s8lo_65fa5698_string2long_L000003_50
 mov r22, ##$7fffffff
 cmp r21, r22 wcz
 if_be jmp #\C_s8lo_65fa5698_string2long_L000003_50
C_s8lo_65fa5698_string2long_L000003_52
 adds r17, #1
C_s8lo_65fa5698_string2long_L000003_50
C_s8lo_65fa5698_string2long_L000003_48
 cmps r17,  #0 wz
 if_z jmp #\C_s8lo_65fa5698_string2long_L000003_54
 mov r22, #34
 wrlong r22, ##@C_errno
 cmps r2,  #0 wz
 if_z jmp #\C_s8lo_65fa5698_string2long_L000003_56
 cmps r15,  #0 wcz
 if_ae jmp #\C_s8lo_65fa5698_string2long_L000003_58
 mov r0, ##$80000000
 jmp #\@C_s8lo_65fa5698_string2long_L000003_6
C_s8lo_65fa5698_string2long_L000003_58
 mov r0, ##$7fffffff
 jmp #\@C_s8lo_65fa5698_string2long_L000003_6
C_s8lo_65fa5698_string2long_L000003_56
 mov r0, ##$ffffffff
 jmp #\@C_s8lo_65fa5698_string2long_L000003_6
C_s8lo_65fa5698_string2long_L000003_54
 mov r22, r15

  stalli

 qmul r22, r21
 getqx r0

  allowi

C_s8lo_65fa5698_string2long_L000003_6
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
' Catalina Import errno
' Catalina Import __ctype
DAT
' Catalina Export _long_service
 alignl
C__long_service
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $e00000
 mov r23, r3
 mov r21, r2
 mov RI, FP
 sub RI, #-(-8)
 wrlong r21, RI
 mov r22, FP
 sub r22, #-(-8)
 mov r2, r22
 neg r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__sys_plugin
 add SP, #4
 mov r22, r0
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Import _sys_plugin
DAT
' Catalina Export _long_service_2
 alignl
C__long_service_2
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $e80000
 mov r23, r4
 mov r21, r3
 mov r19, r2
 mov RI, FP
 sub RI, #-(-12)
 wrlong r21, RI
 mov RI, FP
 sub RI, #-(-8)
 wrlong r19, RI
 mov r22, FP
 sub r22, #-(-12)
 mov r2, r22
 neg r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__sys_plugin
 add SP, #4
 mov r22, r0
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
' Catalina Import _sys_plugin
DAT
' Catalina Export _short_service
 alignl
C__short_service
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r3
 mov r21, r2
 mov r22, ##16777215
 mov r2, r21
 and r2, r22
 neg r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__sys_plugin
 add SP, #4
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _sys_plugin
DAT
' Catalina Export t_char
 alignl
C_t_char
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r3
 mov r21, r2
 mov r22, r23
 and r22, #1
 shl r22, #23
 add r22, r21
 mov r2, r22
 mov r3, #28
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__short_service
 add SP, #4
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _short_service
DAT
' Catalina Export time
 alignl
C_time
 calld PA,#NEWF
 sub SP, #12
 calld PA,#PSHM
 long $c00000
 mov r23, r2
 mov r2, FP
 sub r2, #-(-16)
 mov r3, FP
 sub r3, #-(-12)
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__getticks
 add SP, #4
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, r23
 cmp r22,  #0 wz
 if_z jmp #\C_time_3
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 wrlong r22, r23
C_time_3
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
 calld PA,#POPM
 add SP, #12
 calld PA,#RETF
' Catalina Import _getticks
DAT
' Catalina Export toupper
 alignl
C_toupper
 calld PA,#PSHM
 long $c00000
 mov r22, r2
 subs r22, #97
 cmp r22,  #26 wcz
 if_ae jmp #\C_toupper_3
 mov r22, r2
 subs r22, #97
 mov r23, r22
 adds r23, #65
 jmp #\@C_toupper_4
C_toupper_3
 mov r23, r2
C_toupper_4
 mov r0, r23
 calld PA,#POPM
 calld PA,#RETN
DAT
' Catalina Export ungetc
 alignl
C_ungetc
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $540000
 mov r22, ##-1
 cmps r3, r22 wz
 if_z jmp #\C_ungetc_4
 mov r22, r2
 adds r22, #8
 rdlong r22, r22
 and r22, #128
 cmps r22,  #0 wz
 if_nz jmp #\C_ungetc_2
C_ungetc_4
 mov r0, ##-1
 jmp #\@C_ungetc_1
C_ungetc_2
 mov r22, r2
 adds r22, #20
 rdlong r22, r22
 mov r20, r2
 adds r20, #16
 rdlong r20, r20
 cmp r22, r20 wz
 if_nz jmp #\C_ungetc_5
 rdlong r22, r2
 cmps r22,  #0 wz
 if_z jmp #\C_ungetc_7
 mov r0, ##-1
 jmp #\@C_ungetc_1
C_ungetc_7
 mov r22, r2
 adds r22, #20
 rdlong r20, r22
 adds r20, #1
 wrlong r20, r22
C_ungetc_5
 rdlong r22, r2
 adds r22, #1
 wrlong r22, r2
 mov r22, r2
 adds r22, #20
 rdlong r20, r22
 mov r18, ##-1
 adds r20, r18
 wrlong r20, r22
 mov RI, FP
 sub RI, #-(-8)
 wrlong r20, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 rdbyte r22, r22
 mov r20, r3
 and r20, cviu_m1
 cmps r22, r20 wz
 if_z jmp #\C_ungetc_9
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, r3
 wrbyte r20, r22
C_ungetc_9
 mov r0, r3
C_ungetc_1
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
DAT
' Catalina Export _waitcnt
 alignl
C__waitcnt
 mov r0, #0
 addct1 r0, r2
 waitct1
 calld PA,#RETN
DAT
 alignl
C_s91g7_65fa570b_recalculate_L000008
 calld PA,#NEWF
 calld PA,#PSHM
 long $fc0000
 mov r23, r2
 wrlong r23, ##@C_s91g_65fa570b_old_freq_L000001
 mov r22, ##$f4240

  stalli

 qdiv r23, r22
 getqx r0

  allowi

 wrlong r0, ##@C_s91g1_65fa570b_cnt_usec_L000002
 mov r22, ##1000

  stalli

 qdiv r23, r22
 getqx r0

  allowi

 wrlong r0, ##@C_s91g2_65fa570b_cnt_msec_L000003
 mov r2, #0
 mov BC, #4
 calld PA,#CALA
 long @C__wait
 wrlong r0, ##@C_s91g3_65fa570b_min_tick_L000004
 mov BC, #0
 calld PA,#CALA
 long @C__cnt
 mov r22, r0
 mov r21, r22
 mov r2, #0
 mov BC, #4
 calld PA,#CALA
 long @C__waitus
 mov BC, #0
 calld PA,#CALA
 long @C__cnt
 mov r19, r0
 mov r22, ##@C_s91g6_65fa570b_overhead_L000007
 mov r20, r19
 sub r20, r21
 mov r18, ##@C_s91g3_65fa570b_min_tick_L000004
 rdlong r18, r18
 sub r20, r18
 wrlong r20, ##@C_s91g6_65fa570b_overhead_L000007
 rdlong r22, r22
 cmp r22,  #100 wcz
 if_be jmp #\C_s91g7_65fa570b_recalculate_L000008_10
 mov r22, ##@C_s91g6_65fa570b_overhead_L000007
 rdlong r22, r22
 sub r22, #100
 wrlong r22, ##@C_s91g6_65fa570b_overhead_L000007
C_s91g7_65fa570b_recalculate_L000008_10
 mov r22, ##@C_s91g6_65fa570b_overhead_L000007
 rdlong r22, r22
 mov r20, ##@C_s91g1_65fa570b_cnt_usec_L000002
 rdlong r20, r20
 mov r18, r22
 add r18, r20
 sub r18, #1

  stalli

 qdiv r18, r20
 getqx r0

  allowi

 wrlong r0, ##@C_s91g4_65fa570b_min_usec_L000005
 mov r20, ##@C_s91g2_65fa570b_cnt_msec_L000003
 rdlong r20, r20
 add r22, r20
 sub r22, #1

  stalli

 qdiv r22, r20
 getqx r0

  allowi

 wrlong r0, ##@C_s91g5_65fa570b_min_msec_L000006
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export min_waitus
 alignl
C_min_waitus
 calld PA,#NEWF
 calld PA,#PSHM
 long $c00000
 mov BC, #0
 calld PA,#CALA
 long @C__clockfreq
 mov r23, r0
 mov r22, ##@C_s91g_65fa570b_old_freq_L000001
 rdlong r22, r22
 cmp r23, r22 wz
 if_z jmp #\C_min_waitus_13
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_s91g7_65fa570b_recalculate_L000008
C_min_waitus_13
 mov r0, ##@C_s91g4_65fa570b_min_usec_L000005
 rdlong r0, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export min_waitms
 alignl
C_min_waitms
 calld PA,#NEWF
 calld PA,#PSHM
 long $c00000
 mov BC, #0
 calld PA,#CALA
 long @C__clockfreq
 mov r23, r0
 mov r22, ##@C_s91g_65fa570b_old_freq_L000001
 rdlong r22, r22
 cmp r23, r22 wz
 if_z jmp #\C_min_waitms_16
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_s91g7_65fa570b_recalculate_L000008
C_min_waitms_16
 mov r0, ##@C_s91g5_65fa570b_min_msec_L000006
 rdlong r0, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export min_wait
 alignl
C_min_wait
 calld PA,#NEWF
 calld PA,#PSHM
 long $c00000
 mov BC, #0
 calld PA,#CALA
 long @C__clockfreq
 mov r23, r0
 mov r22, ##@C_s91g_65fa570b_old_freq_L000001
 rdlong r22, r22
 cmp r23, r22 wz
 if_z jmp #\C_min_wait_19
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_s91g7_65fa570b_recalculate_L000008
C_min_wait_19
 mov r0, ##@C_s91g3_65fa570b_min_tick_L000004
 rdlong r0, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export _wait
 alignl
C__wait
 calld PA,#PSHM
 long $400000




 cmp r2, #0 wz
 getct  r1
 if_nz addct2 r1, r2
 if_nz waitct2
 if_z getct r0
 if_z sub r0, r1



 mov r22, r0
 calld PA,#POPM
 calld PA,#RETN
' Catalina Export _iwait
 alignl
C__iwait
   cmp    r2, #0 wz
 if_z     jmp #_IWAIT_RET
   getct  r0
_IWAIT_LOOP
   addct2 r0, r3
_IWAIT_POLL
   pollct2 wc
 if_nc jmp #_IWAIT_POLL
   djnz   r2, #_IWAIT_LOOP
_IWAIT_RET
 calld PA,#RETN
' Catalina Export _iwaitus
 alignl
C__iwaitus
 calld PA,#NEWF
 calld PA,#PSHM
 long $e80000
 mov r23, r2
 mov BC, #0
 calld PA,#CALA
 long @C__clockfreq
 mov r21, r0
 mov r22, ##@C_s91g_65fa570b_old_freq_L000001
 rdlong r22, r22
 cmp r21, r22 wz
 if_z jmp #\C__iwaitus_28
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_s91g7_65fa570b_recalculate_L000008
C__iwaitus_28
 mov r22, ##@C_s91g4_65fa570b_min_usec_L000005
 rdlong r22, r22
 cmp r23, r22 wcz
 if_be jmp #\C__iwaitus_31
 mov r22, ##@C_s91g4_65fa570b_min_usec_L000005
 rdlong r22, r22
 mov r19, r23
 sub r19, r22
 jmp #\@C__iwaitus_32
C__iwaitus_31
 mov r19, ##@C_s91g4_65fa570b_min_usec_L000005
 rdlong r19, r19
C__iwaitus_32
 mov r2, r19
 mov r3, ##@C_s91g1_65fa570b_cnt_usec_L000002
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__iwait
 add SP, #4
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export _iwaitms
 alignl
C__iwaitms
 calld PA,#NEWF
 calld PA,#PSHM
 long $e80000
 mov r23, r2
 mov BC, #0
 calld PA,#CALA
 long @C__clockfreq
 mov r21, r0
 mov r22, ##@C_s91g_65fa570b_old_freq_L000001
 rdlong r22, r22
 cmp r21, r22 wz
 if_z jmp #\C__iwaitms_34
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_s91g7_65fa570b_recalculate_L000008
C__iwaitms_34
 mov r22, ##@C_s91g5_65fa570b_min_msec_L000006
 rdlong r22, r22
 cmp r23, r22 wcz
 if_be jmp #\C__iwaitms_37
 mov r22, ##@C_s91g5_65fa570b_min_msec_L000006
 rdlong r22, r22
 mov r19, r23
 sub r19, r22
 jmp #\@C__iwaitms_38
C__iwaitms_37
 mov r19, ##@C_s91g5_65fa570b_min_msec_L000006
 rdlong r19, r19
C__iwaitms_38
 mov r2, r19
 mov r3, ##@C_s91g2_65fa570b_cnt_msec_L000003
 rdlong r3, r3
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__iwait
 add SP, #4
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export _iwaitsec
 alignl
C__iwaitsec
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r2
 mov BC, #0
 calld PA,#CALA
 long @C__clockfreq
 mov r21, r0
 mov r22, ##@C_s91g_65fa570b_old_freq_L000001
 rdlong r22, r22
 cmp r21, r22 wz
 if_z jmp #\C__iwaitsec_40
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_s91g7_65fa570b_recalculate_L000008
C__iwaitsec_40
 mov r2, r23
 mov r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C__iwait
 add SP, #4
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export _waitus
 alignl
C__waitus
 calld PA,#NEWF
 calld PA,#PSHM
 long $f80000
 mov r23, r2
 mov BC, #0
 calld PA,#CALA
 long @C__clockfreq
 mov r21, r0
 mov r22, ##@C_s91g_65fa570b_old_freq_L000001
 rdlong r22, r22
 cmp r21, r22 wz
 if_z jmp #\C__waitus_43
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_s91g7_65fa570b_recalculate_L000008
C__waitus_43
 mov r22, ##@C_s91g1_65fa570b_cnt_usec_L000002
 rdlong r22, r22

  stalli

 qmul r23, r22
 getqx r0

  allowi

 mov r19, r0
 mov r22, r19
 mov r20, ##@C_s91g6_65fa570b_overhead_L000007
 rdlong r20, r20
 cmp r22, r20 wcz
 if_b jmp #\C__waitus_48
 mov r22, r19
 mov r20, ##@C_s91g6_65fa570b_overhead_L000007
 rdlong r20, r20
 sub r22, r20
 mov r19, r22
 jmp #\@C__waitus_48
C__waitus_47
 mov r22, ##@C_s91g3_65fa570b_min_tick_L000004
 rdlong r22, r22
 mov r2, r21
 sub r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C__wait
 mov r22, r19
 sub r22, r21
 mov r19, r22
C__waitus_48
 mov r22, r19
 cmp r22, r21 wcz
 if_a jmp #\C__waitus_47
 mov r22, r19
 mov r20, ##@C_s91g3_65fa570b_min_tick_L000004
 rdlong r20, r20
 cmp r22, r20 wcz
 if_be jmp #\C__waitus_50
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C__wait
 jmp #\@C__waitus_42
C__waitus_50
 cmps r19,  #0 wcz
 if_be jmp #\C__waitus_52
 mov r2, ##@C_s91g3_65fa570b_min_tick_L000004
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C__wait
 jmp #\@C__waitus_42
C__waitus_52
 mov r22, r19
 mov r20, ##@C_s91g3_65fa570b_min_tick_L000004
 rdlong r20, r20
 cmp r22, r20 wcz
 if_be jmp #\C__waitus_54
 mov r2, #0
 mov BC, #4
 calld PA,#CALA
 long @C__wait
 jmp #\@C__waitus_42
C__waitus_54
 mov r2, #0
 mov BC, #4
 calld PA,#CALA
 long @C__wait
C__waitus_42
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export _waitms
 alignl
C__waitms
 calld PA,#NEWF
 calld PA,#PSHM
 long $e80000
 mov r23, r2
 mov BC, #0
 calld PA,#CALA
 long @C__clockfreq
 mov r21, r0
 mov r22, ##@C_s91g_65fa570b_old_freq_L000001
 rdlong r22, r22
 cmp r21, r22 wz
 if_z jmp #\C__waitms_57
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_s91g7_65fa570b_recalculate_L000008
C__waitms_57
 mov r22, ##@C_s91g2_65fa570b_cnt_msec_L000003
 rdlong r22, r22

  stalli

 qmul r23, r22
 getqx r0

  allowi

 mov r19, r0
 mov r22, ##@C_s91g6_65fa570b_overhead_L000007
 rdlong r22, r22
 cmp r19, r22 wcz
 if_b jmp #\C__waitms_62
 mov r22, ##@C_s91g6_65fa570b_overhead_L000007
 rdlong r22, r22
 sub r19, r22
 jmp #\@C__waitms_62
C__waitms_61
 mov r22, ##@C_s91g3_65fa570b_min_tick_L000004
 rdlong r22, r22
 mov r2, r21
 sub r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C__wait
 sub r19, r21
C__waitms_62
 cmp r19, r21 wcz
 if_a jmp #\C__waitms_61
 mov r22, ##@C_s91g3_65fa570b_min_tick_L000004
 rdlong r22, r22
 cmp r19, r22 wcz
 if_be jmp #\C__waitms_64
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C__wait
 jmp #\@C__waitms_56
C__waitms_64
 cmp r19,  #0 wz
 if_z jmp #\C__waitms_66
 mov r2, ##@C_s91g3_65fa570b_min_tick_L000004
 rdlong r2, r2
 mov BC, #4
 calld PA,#CALA
 long @C__wait
C__waitms_66
C__waitms_56
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export _waitsec
 alignl
C__waitsec
 calld PA,#NEWF
 calld PA,#PSHM
 long $e00000
 mov r23, r2
 mov BC, #0
 calld PA,#CALA
 long @C__clockfreq
 mov r21, r0
 mov r22, ##@C_s91g_65fa570b_old_freq_L000001
 rdlong r22, r22
 cmp r21, r22 wz
 if_z jmp #\C__waitsec_72
 mov r2, r21
 mov BC, #4
 calld PA,#CALA
 long @C_s91g7_65fa570b_recalculate_L000008
 jmp #\@C__waitsec_72
C__waitsec_71
 mov r22, ##@C_s91g3_65fa570b_min_tick_L000004
 rdlong r22, r22
 mov r2, r21
 sub r2, r22
 mov BC, #4
 calld PA,#CALA
 long @C__wait
 sub r23, #1
C__waitsec_72
 cmp r23,  #0 wz
 if_nz jmp #\C__waitsec_71
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import _clockfreq
' Catalina Import _cnt
DAT
DAT
DAT
 alignl
C_sjn0_65fa5695_asin_acos_L000001
 calld PA,#NEWF
 sub SP, #12
 calld PA,#PSHM
 long $eaa800
 mov r23, r3
 mov r21, r2
 mov r22, ##@C_sjn0_65fa5695_asin_acos_L000001_6_L000007
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_sjn0_65fa5695_asin_acos_L000001_4
 mov r15, #1
 jmp #\@C_sjn0_65fa5695_asin_acos_L000001_5
C_sjn0_65fa5695_asin_acos_L000001_4
 mov r15, #0
C_sjn0_65fa5695_asin_acos_L000001_5
 mov r17, r15
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C___I_sN_an
 cmps r0,  #0 wz
 if_z jmp #\C_sjn0_65fa5695_asin_acos_L000001_12
 mov r22, #33
 wrlong r22, ##@C_errno
 mov r0, r23
 jmp #\@C_sjn0_65fa5695_asin_acos_L000001_2
C_sjn0_65fa5695_asin_acos_L000001_12
 cmps r17,  #0 wz
 if_z jmp #\C_sjn0_65fa5695_asin_acos_L000001_14
 xor r23, Bit31
C_sjn0_65fa5695_asin_acos_L000001_14
 mov r22, ##@C_sjn0_65fa5695_asin_acos_L000001_18_L000019
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_be jmp #\C_sjn0_65fa5695_asin_acos_L000001_16
 mov r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, ##@C_sjn0_65fa5695_asin_acos_L000001_22_L000023
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_be jmp #\C_sjn0_65fa5695_asin_acos_L000001_20
 mov r22, #33
 wrlong r22, ##@C_errno
 mov r0, ##@C_sjn0_65fa5695_asin_acos_L000001_6_L000007
 rdlong r0, r0
 jmp #\@C_sjn0_65fa5695_asin_acos_L000001_2
C_sjn0_65fa5695_asin_acos_L000001_20
 mov r22, ##@C_sjn0_65fa5695_asin_acos_L000001_18_L000019
 rdlong r22, r22
 mov r0, r22
 mov r1, r23
 calld PA,#FMUL
 mov r1, r0
 mov r0, r22
 calld PA,#FSUB
 mov r19, r0
 mov r2, r19
 mov BC, #4
 calld PA,#CALA
 long @C_sqrt
 mov r22, r0
 mov r23, r22
 xor r23, Bit31
 mov r0, r23
 mov r1, r23
 calld PA,#FADD
 mov r23, r0
 jmp #\@C_sjn0_65fa5695_asin_acos_L000001_17
C_sjn0_65fa5695_asin_acos_L000001_16
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r0, r23
 mov r1, r23
 calld PA,#FMUL
 mov r19, r0
C_sjn0_65fa5695_asin_acos_L000001_17
 mov r0, r23
 mov r1, r19
 calld PA,#FMUL
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 mov r22, ##@C_sjn0_65fa5695_asin_acos_L000001_p_L000009+4+4+4+4
 rdlong r22, r22
 mov r0, r22
 mov r1, r19
 calld PA,#FMUL
 mov r22, ##@C_sjn0_65fa5695_asin_acos_L000001_p_L000009+4+4+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r19
 calld PA,#FMUL
 mov r22, ##@C_sjn0_65fa5695_asin_acos_L000001_p_L000009+4+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r19
 calld PA,#FMUL
 mov r22, ##@C_sjn0_65fa5695_asin_acos_L000001_p_L000009+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r19
 calld PA,#FMUL
 mov r22, ##@C_sjn0_65fa5695_asin_acos_L000001_p_L000009
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r1, r0
 mov r0, r22
 calld PA,#FMUL
 mov RI, FP
 sub RI, #-(-16)
 wrlong r0, RI
 mov r22, ##@C_sjn0_65fa5695_asin_acos_L000001_q_L000011+4+4+4+4+4
 rdlong r22, r22
 mov r0, r22
 mov r1, r19
 calld PA,#FMUL
 mov r22, ##@C_sjn0_65fa5695_asin_acos_L000001_q_L000011+4+4+4+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r19
 calld PA,#FMUL
 mov r22, ##@C_sjn0_65fa5695_asin_acos_L000001_q_L000011+4+4+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r19
 calld PA,#FMUL
 mov r22, ##@C_sjn0_65fa5695_asin_acos_L000001_q_L000011+4+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r19
 calld PA,#FMUL
 mov r22, ##@C_sjn0_65fa5695_asin_acos_L000001_q_L000011+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r19
 calld PA,#FMUL
 mov r22, ##@C_sjn0_65fa5695_asin_acos_L000001_q_L000011
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r1, r0
 mov r0, r22
 calld PA,#FDIV
 mov r1, r0
 mov r0, r23
 calld PA,#FADD
 mov r23, r0
 cmps r21,  #0 wz
 if_z jmp #\C_sjn0_65fa5695_asin_acos_L000001_49
 cmps r17,  #0 wz
 if_nz jmp #\C_sjn0_65fa5695_asin_acos_L000001_51
 xor r23, Bit31
C_sjn0_65fa5695_asin_acos_L000001_51
C_sjn0_65fa5695_asin_acos_L000001_49
 cmps r21,  #0 wz
 if_nz jmp #\C_sjn0_65fa5695_asin_acos_L000001_57
 mov r13, #1
 jmp #\@C_sjn0_65fa5695_asin_acos_L000001_58
C_sjn0_65fa5695_asin_acos_L000001_57
 mov r13, #0
C_sjn0_65fa5695_asin_acos_L000001_58
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #1 wz
 if_nz jmp #\C_sjn0_65fa5695_asin_acos_L000001_59
 mov r11, #1
 jmp #\@C_sjn0_65fa5695_asin_acos_L000001_60
C_sjn0_65fa5695_asin_acos_L000001_59
 mov r11, #0
C_sjn0_65fa5695_asin_acos_L000001_60
 cmps r13, r11 wz
 if_nz jmp #\C_sjn0_65fa5695_asin_acos_L000001_53
 mov r22, ##@C_sjn0_65fa5695_asin_acos_L000001_61_L000062
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FADD
 mov r1, r22
 calld PA,#FADD
 mov r23, r0
 jmp #\@C_sjn0_65fa5695_asin_acos_L000001_54
C_sjn0_65fa5695_asin_acos_L000001_53
 mov r22, #0
 cmps r21, r22 wz
 if_z jmp #\C_sjn0_65fa5695_asin_acos_L000001_63
 cmps r17, r22 wz
 if_z jmp #\C_sjn0_65fa5695_asin_acos_L000001_63
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #1 wz
 if_nz jmp #\C_sjn0_65fa5695_asin_acos_L000001_63
 mov r22, ##@C_sjn0_65fa5695_asin_acos_L000001_65_L000066
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FADD
 mov r1, r22
 calld PA,#FADD
 mov r23, r0
C_sjn0_65fa5695_asin_acos_L000001_63
C_sjn0_65fa5695_asin_acos_L000001_54
 mov r22, #0
 cmps r21, r22 wz
 if_nz jmp #\C_sjn0_65fa5695_asin_acos_L000001_67
 cmps r17, r22 wz
 if_z jmp #\C_sjn0_65fa5695_asin_acos_L000001_67
 xor r23, Bit31
C_sjn0_65fa5695_asin_acos_L000001_67
 mov r0, r23
C_sjn0_65fa5695_asin_acos_L000001_2
 calld PA,#POPM
 add SP, #12
 calld PA,#RETF
' Catalina Export asin
 alignl
C_asin
 calld PA,#NEWF
 calld PA,#PSHM
 long $c00000
 mov r23, r2
 mov r2, #0
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_sjn0_65fa5695_asin_acos_L000001
 add SP, #4
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export acos
 alignl
C_acos
 calld PA,#NEWF
 calld PA,#PSHM
 long $c00000
 mov r23, r2
 mov r2, #1
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_sjn0_65fa5695_asin_acos_L000001
 add SP, #4
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import errno
' Catalina Import sqrt
' Catalina Import __IsNan
DAT
DAT
DAT
 alignl
C_atan
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $faa000
 mov r23, r2
 mov r22, ##@C_atan_11_L000012
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_atan_9
 mov r15, #1
 jmp #\@C_atan_10
C_atan_9
 mov r15, #0
C_atan_10
 mov r17, r15
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C___I_sN_an
 cmps r0,  #0 wz
 if_z jmp #\C_atan_13
 mov r22, #33
 wrlong r22, ##@C_errno
 mov r0, r23
 jmp #\@C_atan_1
C_atan_13
 cmps r17,  #0 wz
 if_z jmp #\C_atan_15
 xor r23, Bit31
C_atan_15
 mov r22, ##@C_atan_19_L000020
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_be jmp #\C_atan_17
 mov r22, ##@C_atan_19_L000020
 rdlong r22, r22
 mov r0, r22
 mov r1, r23
 calld PA,#FDIV
 mov r23, r0
 mov r19, #2
 jmp #\@C_atan_18
C_atan_17
 mov r19, #0
C_atan_18
 mov r22, ##@C_atan_23_L000024
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_be jmp #\C_atan_21
 adds r19, #1
 mov r22, ##@C_atan_27_L000028
 rdlong r22, r22
 mov r20, ##@C_atan_25_L000026
 rdlong r20, r20
 mov r0, r20
 mov r1, r23
 calld PA,#FMUL
 mov r1, r22
 calld PA,#FSUB
 mov r1, r22
 calld PA,#FSUB
 mov r1, r23
 calld PA,#FADD
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, ##@C_atan_29_L000030
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FADD
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r1, r0
 mov r0, r22
 calld PA,#FDIV
 mov r23, r0
C_atan_21
 mov r0, r23
 mov r1, r23
 calld PA,#FMUL
 mov r21, r0
 mov r0, r23
 mov r1, r21
 calld PA,#FMUL
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, ##@C_atan_p_L000003+4+4+4
 rdlong r22, r22
 mov r0, r22
 mov r1, r21
 calld PA,#FMUL
 mov r22, ##@C_atan_p_L000003+4+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r21
 calld PA,#FMUL
 mov r22, ##@C_atan_p_L000003+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r21
 calld PA,#FMUL
 mov r22, ##@C_atan_p_L000003
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r1, r0
 mov r0, r22
 calld PA,#FMUL
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 mov r22, ##@C_atan_q_L000005+4+4+4+4
 rdlong r22, r22
 mov r0, r22
 mov r1, r21
 calld PA,#FMUL
 mov r22, ##@C_atan_q_L000005+4+4+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r21
 calld PA,#FMUL
 mov r22, ##@C_atan_q_L000005+4+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r21
 calld PA,#FMUL
 mov r22, ##@C_atan_q_L000005+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r21
 calld PA,#FMUL
 mov r22, ##@C_atan_q_L000005
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r1, r0
 mov r0, r22
 calld PA,#FDIV
 mov r1, r0
 mov r0, r23
 calld PA,#FADD
 mov r23, r0
 cmps r19,  #1 wcz
 if_be jmp #\C_atan_47
 xor r23, Bit31
C_atan_47
 mov r22, r19
 shl r22, #2
 mov r20, ##@C_atan_a_L000007
 adds r22, r20
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FADD
 mov r23, r0
 cmps r17,  #0 wz
 if_z jmp #\C_atan_50
 mov r13, r23
 xor r13, Bit31
 jmp #\@C_atan_51
C_atan_50
 mov r13, r23
C_atan_51
 mov r0, r13
C_atan_1
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
' Catalina Import errno
' Catalina Import __IsNan
DAT
DAT
DAT
 alignl
C_exp
 calld PA,#NEWF
 sub SP, #8
 calld PA,#PSHM
 long $eaa800
 mov r23, r2
 mov r22, ##@C_exp_9_L000010
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_exp_7
 mov r13, #1
 jmp #\@C_exp_8
C_exp_7
 mov r13, #0
C_exp_8
 mov r15, r13
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C___I_sN_an
 cmps r0,  #0 wz
 if_z jmp #\C_exp_11
 mov r22, #33
 wrlong r22, ##@C_errno
 mov r0, r23
 jmp #\@C_exp_1
C_exp_11
 mov r22, ##@C_exp_15_L000016
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_exp_13
 mov r22, #34
 wrlong r22, ##@C_errno
 mov r0, ##@C_exp_9_L000010
 rdlong r0, r0
 jmp #\@C_exp_1
C_exp_13
 mov r22, ##@C_exp_19_L000020
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_be jmp #\C_exp_17
 mov r22, #34
 wrlong r22, ##@C_errno
 mov BC, #0
 calld PA,#CALA
 long @C___huge_val
 mov r22, r0
 jmp #\@C_exp_1
C_exp_17
 cmps r15,  #0 wz
 if_z jmp #\C_exp_21
 xor r23, Bit31
C_exp_21
 mov r22, ##@C_exp_23_L000024
 rdlong r22, r22
 mov r0, r22
 mov r1, r23
 calld PA,#FMUL
 mov r22, ##@C_exp_25_L000026
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 calld PA,#INFL
 mov r17, r0
 mov r0, r17
 calld PA,#FLIN
 mov r21, r0
 mov r0, r23
 calld PA,#INFL
 calld PA,#FLIN
 mov r11, r0
 mov r0, r23
 mov r1, r11
 calld PA,#FSUB
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, ##@C_exp_27_L000028
 rdlong r22, r22
 mov r0, r22
 mov r1, r21
 calld PA,#FMUL
 mov r1, r0
 mov r0, r11
 calld PA,#FSUB
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 mov r22, ##@C_exp_29_L000030
 rdlong r22, r22
 mov r0, r22
 mov r1, r21
 calld PA,#FMUL
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r1, r0
 mov r0, r22
 calld PA,#FSUB
 mov r19, r0
 cmps r15,  #0 wz
 if_z jmp #\C_exp_31
 xor r19, Bit31
 neg r17, r17
C_exp_31
 mov r0, r19
 mov r1, r19
 calld PA,#FMUL
 mov r21, r0
 mov r22, ##@C_exp_p_L000003+4+4
 rdlong r22, r22
 mov r0, r22
 mov r1, r21
 calld PA,#FMUL
 mov r22, ##@C_exp_p_L000003+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r21
 calld PA,#FMUL
 mov r22, ##@C_exp_p_L000003
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r0
 mov r0, r19
 calld PA,#FMUL
 mov r23, r0
 adds r17, #1
 mov r2, r17
 mov r22, ##@C_exp_q_L000005+4+4+4
 rdlong r22, r22
 mov r0, r22
 mov r1, r21
 calld PA,#FMUL
 mov r22, ##@C_exp_q_L000005+4+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r21
 calld PA,#FMUL
 mov r22, ##@C_exp_q_L000005+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r21
 calld PA,#FMUL
 mov r22, ##@C_exp_q_L000005
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r23
 calld PA,#FSUB
 mov r1, r0
 mov r0, r23
 calld PA,#FDIV
 mov r22, ##@C_exp_25_L000026
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r3, r0
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_ldexp
 add SP, #4
 mov r22, r0
C_exp_1
 calld PA,#POPM
 add SP, #8
 calld PA,#RETF
' Catalina Import errno
' Catalina Import ldexp
' Catalina Import __IsNan
' Catalina Import __huge_val
DAT
DAT
' Catalina Export fabs
 alignl
C_fabs
 calld PA,#PSHM
 long $c00000
 mov r22, ##@C_fabs_5_L000006
 rdlong r22, r22
 mov r0, r2
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_fabs_3
 mov r23, r2
 xor r23, Bit31
 jmp #\@C_fabs_4
C_fabs_3
 mov r23, r2
C_fabs_4
 mov r0, r23
 calld PA,#POPM
 calld PA,#RETN
DAT
DAT
' Catalina Export floor
 alignl
C_floor
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $f00000
 mov r23, r2
 mov r2, FP
 sub r2, #-(-8)
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_modf
 add SP, #4
 mov r22, r0
 mov r20, ##@C_floor_5_L000006
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_ae jmp #\C_floor_3
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_floor_7_L000008
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FSUB
 mov r21, r0
 jmp #\@C_floor_4
C_floor_3
 mov r22, FP
 sub r22, #-(-8)
 rdlong r21, r22
C_floor_4
 mov r0, r21
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Import modf
DAT
DAT
' Catalina Export fmod
 alignl
C_fmod
 calld PA,#NEWF
 sub SP, #12
 calld PA,#PSHM
 long $fa8000
 mov r23, r3
 mov r21, r2
 mov r22, ##@C_fmod_4_L000005
 rdlong r22, r22
 mov r0, r21
 mov r1, r22
 calld PA,#FCMP
 if_nz jmp #\C_fmod_2
 mov r22, #33
 wrlong r22, ##@C_errno
 mov r0, ##@C_fmod_4_L000005
 rdlong r0, r0
 jmp #\@C_fmod_1
C_fmod_2
 mov r22, ##@C_fmod_4_L000005
 rdlong r22, r22
 mov r0, r21
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_fmod_6
 xor r21, Bit31
C_fmod_6
 mov r22, ##@C_fmod_4_L000005
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_fmod_8
 xor r23, Bit31
 mov r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_fmod_9
C_fmod_8
 mov r22, #0
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_fmod_9
 mov r2, FP
 sub r2, #-(-12)
 mov r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_frexp
 add SP, #4
 mov r17, r0
 mov r2, FP
 sub r2, #-(-16)
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_frexp
 add SP, #4
 mov r17, r0
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-12)
 rdlong r20, r20
 mov r19, r22
 subs r19, r20
 jmp #\@C_fmod_13
C_fmod_10
 mov r2, r19
 mov r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_ldexp
 add SP, #4
 mov r17, r0
 mov r0, r17
 mov r1, r23
 calld PA,#FCMP
 if_a jmp #\C_fmod_14
 mov r0, r23
 mov r1, r17
 calld PA,#FSUB
 mov r23, r0
C_fmod_14
 subs r19, #1
C_fmod_13
 mov r22, #0
 cmps r22, r19 wcz
 if_be jmp #\C_fmod_10
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_fmod_17
 mov r15, r23
 xor r15, Bit31
 jmp #\@C_fmod_18
C_fmod_17
 mov r15, r23
C_fmod_18
 mov r0, r15
C_fmod_1
 calld PA,#POPM
 add SP, #12
 calld PA,#RETF
' Catalina Import errno
' Catalina Import ldexp
' Catalina Import frexp
DAT
DAT
' Catalina Export frexp
 alignl
C_frexp
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $540000
 mov RI, FP
 sub RI, #-(-8)
 wrlong r3, RI
 mov r22, #0
 wrlong r22, r2
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, #255
 mov r18, r22
 shr r18, #23
 and r18, #255
 cmp r18, r20 wz
 if_z jmp #\C_frexp_4
 mov r20, #0
 mov r18, ##$7fffff
 and r18, r22
 cmp r18, r20 wz
 if_nz jmp #\C_frexp_2
 mov r18, ##$7f800000
 and r22, r18
 cmp r22, r20 wz
 if_nz jmp #\C_frexp_2
C_frexp_4
 mov r0, r3
 jmp #\@C_frexp_1
C_frexp_2
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 shr r22, #23
 and r22, #255
 cmp r22,  #1 wcz
 if_ae jmp #\C_frexp_5
 mov r22, ##@C_frexp_7_L000008
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FMUL
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, ##-23
 wrlong r22, r2
C_frexp_5
 rdlong r22, r2
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 shr r20, #23
 and r20, #255
 sub r20, #126
 add r22, r20
 wrlong r22, r2
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##$807fffff
 and r22, r20
 mov r20, ##$3f000000
 or r22, r20
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r0, r22
C_frexp_1
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
DAT
DAT
' Catalina Export __huge_val
 alignl
C___huge_val
 mov r0, ##@C___huge_val_2_L000003
 rdlong r0, r0
 calld PA,#RETN
DAT
DAT
' Catalina Export __IsNan
 alignl
C___I_sN_an
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $540000
 mov RI, FP
 sub RI, #-(-8)
 wrlong r2, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##2139095040
 mov r18, r22
 and r18, r20
 cmps r18, r20 wz
 if_nz jmp #\C___I_sN_an_2
 mov r20, ##8388607
 and r22, r20
 cmps r22,  #0 wz
 if_z jmp #\C___I_sN_an_2
 mov r0, #1
 jmp #\@C___I_sN_an_1
C___I_sN_an_2
 mov r0, #0
C___I_sN_an_1
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
DAT
' Catalina Export ldexp
 alignl
C_ldexp
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $f80000
 mov r23, r3
 mov r21, r2
 mov r19, #1
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C___I_sN_an
 cmps r0,  #0 wz
 if_z jmp #\C_ldexp_2
 mov r22, #33
 wrlong r22, ##@C_errno
 mov r0, r23
 jmp #\@C_ldexp_1
C_ldexp_2
 mov r22, ##@C_ldexp_6_L000007
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_nz jmp #\C_ldexp_4
 mov r0, ##@C_ldexp_6_L000007
 rdlong r0, r0
 jmp #\@C_ldexp_1
C_ldexp_4
 mov r22, ##@C_ldexp_6_L000007
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_ldexp_8
 xor r23, Bit31
 mov r19, ##-1
C_ldexp_8
 mov r22, ##@C_ldexp_12_L000013
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_be jmp #\C_ldexp_10
 mov r22, #34
 wrlong r22, ##@C_errno
 mov r0, r19
 calld PA,#FLIN
 mov r1, r23
 calld PA,#FMUL
 jmp #\@C_ldexp_1
C_ldexp_10
 mov r2, FP
 sub r2, #-(-8)
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_frexp
 add SP, #4
 mov r23, r0
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 adds r21, r22
 cmps r21,  #0 wcz
 if_be jmp #\C_ldexp_14
 cmps r21,  #128 wcz
 if_be jmp #\C_ldexp_19
 mov r22, #34
 wrlong r22, ##@C_errno
 mov BC, #0
 calld PA,#CALA
 long @C___huge_val
 mov r22, r0
 mov r0, r19
 calld PA,#FLIN
 mov r1, r22
 calld PA,#FMUL
 jmp #\@C_ldexp_1
C_ldexp_18
 mov r22, ##@C_ldexp_21_L000022
 rdlong r22, r22
 mov r0, r22
 mov r1, r23
 calld PA,#FMUL
 mov r23, r0
 subs r21, #30
C_ldexp_19
 cmps r21,  #30 wcz
 if_a jmp #\C_ldexp_18
 mov r22, #1
 mov r0, r22
 shl r0, r21
 calld PA,#FLIN
 mov r1, r0
 mov r0, r23
 calld PA,#FMUL
 mov r23, r0
 jmp #\@C_ldexp_15
C_ldexp_14
 mov r22, ##-149
 cmps r21, r22 wcz
 if_ae jmp #\C_ldexp_26
 mov r0, ##@C_ldexp_6_L000007
 rdlong r0, r0
 jmp #\@C_ldexp_1
C_ldexp_25
 mov r22, ##@C_ldexp_21_L000022
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FDIV
 mov r23, r0
 adds r21, #30
C_ldexp_26
 mov r22, ##-30
 cmps r21, r22 wcz
 if_b jmp #\C_ldexp_25
 mov r22, #1
 neg r20, r21
 mov r0, r22
 shl r0, r20
 calld PA,#FLIN
 mov r1, r0
 mov r0, r23
 calld PA,#FDIV
 mov r23, r0
C_ldexp_15
 mov r0, r19
 calld PA,#FLIN
 mov r1, r23
 calld PA,#FMUL
C_ldexp_1
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Import errno
' Catalina Import frexp
' Catalina Import __IsNan
' Catalina Import __huge_val
DAT
DAT
DAT
 alignl
C_log
 calld PA,#NEWF
 sub SP, #20
 calld PA,#PSHM
 long $f80000
 mov r23, r2
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C___I_sN_an
 cmps r0,  #0 wz
 if_z jmp #\C_log_6
 mov r22, #33
 wrlong r22, ##@C_errno
 mov r0, r23
 jmp #\@C_log_1
C_log_6
 mov r22, ##@C_log_10_L000011
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_log_8
 mov r22, #33
 wrlong r22, ##@C_errno
 mov BC, #0
 calld PA,#CALA
 long @C___huge_val
 mov r22, r0
 mov r0, r22
 xor r0, Bit31
 jmp #\@C_log_1
C_log_8
 mov r22, ##@C_log_10_L000011
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_nz jmp #\C_log_12
 mov r22, #34
 wrlong r22, ##@C_errno
 mov BC, #0
 calld PA,#CALA
 long @C___huge_val
 mov r22, r0
 mov r0, r22
 xor r0, Bit31
 jmp #\@C_log_1
C_log_12
 mov r22, ##@C_log_16_L000017
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_a jmp #\C_log_14
 jmp #\@C_log_15
C_log_14
 mov r0, r23
 jmp #\@C_log_1
C_log_15
 mov r2, FP
 sub r2, #-(-12)
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_frexp
 add SP, #4
 mov r23, r0
 mov r22, ##@C_log_20_L000021
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_be jmp #\C_log_18
 mov r22, ##@C_log_22_L000023
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FSUB
 mov r1, r22
 calld PA,#FSUB
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r0, r22
 mov r1, r23
 calld PA,#FMUL
 mov r1, r22
 calld PA,#FADD
 mov RI, FP
 sub RI, #-(-16)
 wrlong r0, RI
 jmp #\@C_log_19
C_log_18
 mov r22, ##@C_log_22_L000023
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FSUB
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FMUL
 mov r1, r22
 calld PA,#FADD
 mov RI, FP
 sub RI, #-(-16)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 subs r22, #1
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
C_log_19
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-16)
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FDIV
 mov r21, r0
 mov r0, r21
 mov r1, r21
 calld PA,#FMUL
 mov r19, r0
 mov r0, r21
 mov r1, r19
 calld PA,#FMUL
 mov RI, FP
 sub RI, #-(-20)
 wrlong r0, RI
 mov r22, ##@C_log_a_L000003+4+4
 rdlong r22, r22
 mov r0, r22
 mov r1, r19
 calld PA,#FMUL
 mov r22, ##@C_log_a_L000003+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r19
 calld PA,#FMUL
 mov r22, ##@C_log_a_L000003
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov RI, FP
 sub RI, #-(-24)
 wrlong r0, RI
 mov r22, ##@C_log_b_L000005+4+4+4
 rdlong r22, r22
 mov r0, r22
 mov r1, r19
 calld PA,#FMUL
 mov r22, ##@C_log_b_L000005+4+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r19
 calld PA,#FMUL
 mov r22, ##@C_log_b_L000005+4
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r1, r19
 calld PA,#FMUL
 mov r22, ##@C_log_b_L000005
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r22, FP
 sub r22, #-(-24)
 rdlong r22, r22
 mov r1, r0
 mov r0, r22
 calld PA,#FDIV
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 mov r1, r0
 mov r0, r22
 calld PA,#FMUL
 mov r1, r0
 mov r0, r21
 calld PA,#FADD
 mov r23, r0
 mov r22, FP
 sub r22, #-(-12)
 rdlong r0, r22
 calld PA,#FLIN
 mov r21, r0
 mov r22, ##@C_log_33_L000034
 rdlong r22, r22
 mov r0, r22
 mov r1, r21
 calld PA,#FMUL
 mov r1, r0
 mov r0, r23
 calld PA,#FADD
 mov r23, r0
 mov r22, ##@C_log_35_L000036
 rdlong r22, r22
 mov r0, r22
 mov r1, r21
 calld PA,#FMUL
 mov r1, r0
 mov r0, r23
 calld PA,#FADD
C_log_1
 calld PA,#POPM
 add SP, #20
 calld PA,#RETF
' Catalina Import errno
' Catalina Import frexp
' Catalina Import __IsNan
' Catalina Import __huge_val
DAT
DAT
' Catalina Export pow
 alignl
C_pow
 calld PA,#NEWF
 sub SP, #16
 calld PA,#PSHM
 long $fea800
 mov r23, r3
 mov r21, r2
 mov r22, ##@C_pow_4_L000005
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_nz jmp #\C_pow_2
 mov r0, r23
 jmp #\@C_pow_1
C_pow_2
 mov r22, ##@C_pow_8_L000009
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_nz jmp #\C_pow_6
 mov r0, r21
 mov r1, r22
 calld PA,#FCMP
 if_a jmp #\C_pow_6
 mov r22, #33
 wrlong r22, ##@C_errno
 mov r0, ##@C_pow_8_L000009
 rdlong r0, r0
 jmp #\@C_pow_1
C_pow_6
 mov r22, ##@C_pow_8_L000009
 rdlong r22, r22
 mov r0, r21
 mov r1, r22
 calld PA,#FCMP
 if_nz jmp #\C_pow_10
 mov r0, ##@C_pow_4_L000005
 rdlong r0, r0
 jmp #\@C_pow_1
C_pow_10
 mov r22, ##@C_pow_8_L000009
 rdlong r22, r22
 mov r0, r21
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_pow_12
 xor r21, Bit31
 mov r22, #1
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
 jmp #\@C_pow_13
C_pow_12
 mov r22, #0
 mov RI, FP
 sub RI, #-(-20)
 wrlong r22, RI
C_pow_13
 mov r2, FP
 sub r2, #-(-16)
 mov r3, r21
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_modf
 add SP, #4
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, ##@C_pow_8_L000009
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_z jmp #\C_pow_14
 mov r22, ##@C_pow_8_L000009
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_pow_16
 mov r22, #33
 wrlong r22, ##@C_errno
 mov r0, ##@C_pow_8_L000009
 rdlong r0, r0
 jmp #\@C_pow_1
C_pow_16
C_pow_14
 mov r13, #0
 mov r22, ##@C_pow_8_L000009
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_pow_18
 xor r23, Bit31
 mov r13, #1
C_pow_18
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r20, ##@C_pow_22_L000023
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_be jmp #\C_pow_20
 cmps r13,  #0 wz
 if_z jmp #\C_pow_24
 mov r2, FP
 sub r2, #-(-12)
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r20, ##@C_pow_26_L000027
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FDIV
 mov r3, r0
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_modf
 add SP, #4
 mov r22, r0
 mov r20, ##@C_pow_8_L000009
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_nz jmp #\C_pow_24
 mov r13, #0
C_pow_24
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_log
 mov r23, r0
 mov r22, ##@C_pow_4_L000005
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_be jmp #\C_pow_28
 mov r22, ##@C_pow_30_L000031
 rdlong r22, r22
 mov r0, r22
 mov r1, r23
 calld PA,#FDIV
 mov r1, r0
 mov r0, r21
 calld PA,#FCMP
 if_be jmp #\C_pow_28
 mov r22, #34
 wrlong r22, ##@C_errno
 mov BC, #0
 calld PA,#CALA
 long @C___huge_val
 mov r22, r0
 jmp #\@C_pow_1
C_pow_28
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_pow_32
 xor r21, Bit31
C_pow_32
 cmps r13,  #0 wz
 if_z jmp #\C_pow_34
 mov r0, r23
 mov r1, r21
 calld PA,#FMUL
 mov r2, r0
 mov BC, #4
 calld PA,#CALA
 long @C_exp
 mov r22, r0
 mov r0, r22
 xor r0, Bit31
 jmp #\@C_pow_1
C_pow_34
 mov r0, r23
 mov r1, r21
 calld PA,#FMUL
 mov r2, r0
 mov BC, #4
 calld PA,#CALA
 long @C_exp
 mov r22, r0
 jmp #\@C_pow_1
C_pow_20
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r20, ##@C_pow_8_L000009
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_z jmp #\C_pow_36
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C_log
 mov r22, r0
 mov r20, FP
 sub r20, #-(-12)
 rdlong r20, r20
 mov r0, r20
 mov r1, r22
 calld PA,#FMUL
 mov r2, r0
 mov BC, #4
 calld PA,#CALA
 long @C_exp
 mov r17, r0
 jmp #\@C_pow_37
C_pow_36
 mov r17, ##@C_pow_4_L000005
 rdlong r17, r17
C_pow_37
 mov r22, FP
 sub r22, #-(-16)
 rdlong r22, r22
 mov r20, ##@C_pow_41_L000042
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_b jmp #\C_pow_39
 mov r0, r22
 mov r1, r20
 calld PA,#FSUB
 calld PA,#INFL
 mov r20, r0
 mov r18, ##$80000000
 mov r11, r20
 add r11, r18
 jmp #\@C_pow_40
C_pow_39
 mov r0, r22
 calld PA,#INFL
 mov r11, r0
C_pow_40
 mov r19, r11
 mov r22, r19
 and r22, #1
 cmp r22,  #0 wz
 if_nz jmp #\C_pow_43
 mov r13, #0
C_pow_43
 mov r2, FP
 sub r2, #-(-8)
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_frexp
 add SP, #4
 mov r23, r0
 mov r15, #0
C_pow_45
 mov r22, r19
 and r22, #1
 cmp r22,  #0 wz
 if_z jmp #\C_pow_49
 mov r0, r17
 mov r1, r23
 calld PA,#FMUL
 mov r17, r0
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 adds r15, r22
C_pow_49
 shr r19, #1
 cmp r19,  #0 wz
 if_nz jmp #\C_pow_51
 jmp #\@C_pow_47
C_pow_51
 mov r0, r23
 mov r1, r23
 calld PA,#FMUL
 mov r23, r0
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 shl r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, ##@C_pow_55_L000056
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_pow_45
 mov r0, r23
 mov r1, r23
 calld PA,#FADD
 mov r23, r0
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 subs r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 jmp #\@C_pow_45
C_pow_47
 mov r22, FP
 sub r22, #-(-20)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_pow_57
 mov r22, ##@C_pow_4_L000005
 rdlong r22, r22
 mov r0, r22
 mov r1, r17
 calld PA,#FDIV
 mov r17, r0
 neg r15, r15
C_pow_57
 cmps r13,  #0 wz
 if_z jmp #\C_pow_59
 mov r2, r15
 mov r3, r17
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_ldexp
 add SP, #4
 mov r22, r0
 mov r0, r22
 xor r0, Bit31
 jmp #\@C_pow_1
C_pow_59
 mov r2, r15
 mov r3, r17
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_ldexp
 add SP, #4
 mov r22, r0
C_pow_1
 calld PA,#POPM
 add SP, #16
 calld PA,#RETF
' Catalina Import errno
' Catalina Import modf
' Catalina Import ldexp
' Catalina Import frexp
' Catalina Import log
' Catalina Import exp
' Catalina Import __huge_val
DAT
DAT
DAT
 alignl
C_svc_65fa5695_sinus_L000001
 calld PA,#NEWF
 sub SP, #12
 calld PA,#PSHM
 long $fe0000
 mov r23, r3
 mov r21, r2
 mov r19, #1
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C___I_sN_an
 cmps r0,  #0 wz
 if_z jmp #\C_svc_65fa5695_sinus_L000001_5
 mov r22, #33
 wrlong r22, ##@C_errno
 mov r0, r23
 jmp #\@C_svc_65fa5695_sinus_L000001_2
C_svc_65fa5695_sinus_L000001_5
 mov r22, ##@C_svc_65fa5695_sinus_L000001_9_L000010
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_svc_65fa5695_sinus_L000001_7
 xor r23, Bit31
 mov r19, ##-1
C_svc_65fa5695_sinus_L000001_7
 cmps r21,  #0 wz
 if_z jmp #\C_svc_65fa5695_sinus_L000001_11
 mov r19, #1
 mov r22, ##@C_svc_65fa5695_sinus_L000001_13_L000014
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FADD
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 jmp #\@C_svc_65fa5695_sinus_L000001_12
C_svc_65fa5695_sinus_L000001_11
 mov RI, FP
 sub RI, #-(-8)
 wrlong r23, RI
C_svc_65fa5695_sinus_L000001_12
 mov r22, ##@C_svc_65fa5695_sinus_L000001_15_L000016
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FMUL
 mov r22, ##@C_svc_65fa5695_sinus_L000001_17_L000018
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_svc_65fa5695_sinus_L000001_21_L000022
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_b jmp #\C_svc_65fa5695_sinus_L000001_19
 mov r0, ##@C_svc_65fa5695_sinus_L000001_9_L000010
 rdlong r0, r0
 jmp #\@C_svc_65fa5695_sinus_L000001_2
C_svc_65fa5695_sinus_L000001_19
 mov r2, FP
 sub r2, #-(-8)
 mov RI, FP
 sub RI, #-(-8)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_modf
 add SP, #4
 mov r2, FP
 sub r2, #-(-12)
 mov r22, ##@C_svc_65fa5695_sinus_L000001_17_L000018
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FMUL
 mov r3, r0
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_modf
 add SP, #4
 mov r22, r0
 mov r20, ##@C_svc_65fa5695_sinus_L000001_9_L000010
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_z jmp #\C_svc_65fa5695_sinus_L000001_23
 neg r19, r19
C_svc_65fa5695_sinus_L000001_23
 cmps r21,  #0 wz
 if_z jmp #\C_svc_65fa5695_sinus_L000001_25
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_svc_65fa5695_sinus_L000001_17_L000018
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FSUB
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
C_svc_65fa5695_sinus_L000001_25
 mov r2, FP
 sub r2, #-(-12)
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_modf
 add SP, #4
 mov RI, FP
 sub RI, #-(-16)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-12)
 rdlong r20, r20
 mov r18, ##@C_svc_65fa5695_sinus_L000001_27_L000028
 rdlong r18, r18
 mov r0, r18
 mov r1, r22
 calld PA,#FMUL
 mov r1, r0
 mov r0, r20
 calld PA,#FSUB
 mov r23, r0
 mov r20, FP
 sub r20, #-(-16)
 rdlong r20, r20
 mov r0, r23
 mov r1, r20
 calld PA,#FADD
 mov r23, r0
 mov r20, ##@C_svc_65fa5695_sinus_L000001_29_L000030
 rdlong r20, r20
 mov r0, r20
 mov r1, r22
 calld PA,#FMUL
 mov r1, r0
 mov r0, r23
 calld PA,#FSUB
 mov r23, r0
 mov r22, ##@C_svc_65fa5695_sinus_L000001_9_L000010
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_svc_65fa5695_sinus_L000001_31
 neg r19, r19
 xor r23, Bit31
C_svc_65fa5695_sinus_L000001_31
 mov r0, r23
 mov r1, r23
 calld PA,#FMUL
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FMUL
 mov RI, FP
 sub RI, #-(-12)
 wrlong r0, RI
 mov r20, ##@C_svc_65fa5695_sinus_L000001_r_L000004+4+4+4+4+4+4+4
 rdlong r20, r20
 mov r0, r20
 mov r1, r22
 calld PA,#FMUL
 mov r20, ##@C_svc_65fa5695_sinus_L000001_r_L000004+4+4+4+4+4+4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FADD
 mov r1, r22
 calld PA,#FMUL
 mov r20, ##@C_svc_65fa5695_sinus_L000001_r_L000004+4+4+4+4+4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FADD
 mov r1, r22
 calld PA,#FMUL
 mov r20, ##@C_svc_65fa5695_sinus_L000001_r_L000004+4+4+4+4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FADD
 mov r1, r22
 calld PA,#FMUL
 mov r20, ##@C_svc_65fa5695_sinus_L000001_r_L000004+4+4+4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FADD
 mov r1, r22
 calld PA,#FMUL
 mov r20, ##@C_svc_65fa5695_sinus_L000001_r_L000004+4+4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FADD
 mov r1, r22
 calld PA,#FMUL
 mov r20, ##@C_svc_65fa5695_sinus_L000001_r_L000004+4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FADD
 mov r1, r22
 calld PA,#FMUL
 mov r22, ##@C_svc_65fa5695_sinus_L000001_r_L000004
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 mov r1, r0
 mov r0, r22
 calld PA,#FMUL
 mov r1, r0
 mov r0, r23
 calld PA,#FADD
 mov r23, r0
 mov r22, ##-1
 cmps r19, r22 wz
 if_nz jmp #\C_svc_65fa5695_sinus_L000001_62
 mov r17, r23
 xor r17, Bit31
 jmp #\@C_svc_65fa5695_sinus_L000001_63
C_svc_65fa5695_sinus_L000001_62
 mov r17, r23
C_svc_65fa5695_sinus_L000001_63
 mov r0, r17
C_svc_65fa5695_sinus_L000001_2
 calld PA,#POPM
 add SP, #12
 calld PA,#RETF
' Catalina Export sin
 alignl
C_sin
 calld PA,#NEWF
 calld PA,#PSHM
 long $c00000
 mov r23, r2
 mov r2, #0
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_svc_65fa5695_sinus_L000001
 add SP, #4
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Export cos
 alignl
C_cos
 calld PA,#NEWF
 calld PA,#PSHM
 long $c00000
 mov r23, r2
 mov r22, ##@C_svc_65fa5695_sinus_L000001_9_L000010
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_cos_66
 xor r23, Bit31
C_cos_66
 mov r2, #1
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_svc_65fa5695_sinus_L000001
 add SP, #4
 mov r22, r0
 calld PA,#POPM
 calld PA,#RETF
' Catalina Import errno
' Catalina Import modf
' Catalina Import __IsNan
DAT
DAT
' Catalina Export sqrt
 alignl
C_sqrt
 calld PA,#NEWF
 sub SP, #4
 calld PA,#PSHM
 long $f00000
 mov r23, r2
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C___I_sN_an
 cmps r0,  #0 wz
 if_z jmp #\C_sqrt_2
 mov r22, #33
 wrlong r22, ##@C_errno
 mov r0, r23
 jmp #\@C_sqrt_1
C_sqrt_2
 mov r22, ##@C_sqrt_6_L000007
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_a jmp #\C_sqrt_4
 mov r22, ##@C_sqrt_6_L000007
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_sqrt_8
 mov r22, #33
 wrlong r22, ##@C_errno
C_sqrt_8
 mov r0, ##@C_sqrt_6_L000007
 rdlong r0, r0
 jmp #\@C_sqrt_1
C_sqrt_4
 mov r22, ##@C_sqrt_12_L000013
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_be jmp #\C_sqrt_10
 mov r0, r23
 jmp #\@C_sqrt_1
C_sqrt_10
 mov r2, FP
 sub r2, #-(-8)
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_frexp
 add SP, #4
 mov r21, r0
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 and r22, #1
 cmps r22,  #0 wz
 if_z jmp #\C_sqrt_14
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 subs r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, ##@C_sqrt_16_L000017
 rdlong r22, r22
 mov r0, r22
 mov r1, r21
 calld PA,#FMUL
 mov r21, r0
C_sqrt_14
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, #2
 mov r0, r22
 mov r1, r20
 calld PA,#DIVS
 mov r2, r0
 subs r2, #1
 mov r22, ##@C_sqrt_18_L000019
 rdlong r22, r22
 mov r0, r21
 mov r1, r22
 calld PA,#FADD
 mov r3, r0
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_ldexp
 add SP, #4
 mov r21, r0
 mov r22, #4
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
C_sqrt_20
 mov r0, r23
 mov r1, r21
 calld PA,#FDIV
 mov r1, r0
 mov r0, r21
 calld PA,#FADD
 mov r22, ##@C_sqrt_16_L000017
 rdlong r22, r22
 mov r1, r22
 calld PA,#FDIV
 mov r21, r0
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 subs r22, #1
 mov RI, FP
 sub RI, #-(-8)
 wrlong r22, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 cmps r22,  #0 wcz
 if_ae jmp #\C_sqrt_20
 mov r0, r21
C_sqrt_1
 calld PA,#POPM
 add SP, #4
 calld PA,#RETF
' Catalina Import errno
' Catalina Import ldexp
' Catalina Import frexp
' Catalina Import __IsNan
DAT
DAT
DAT
 alignl
C_tan
 calld PA,#NEWF
 sub SP, #16
 calld PA,#PSHM
 long $fe0000
 mov r23, r2
 mov r22, ##@C_tan_5_L000006
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FCMP
 if_ae jmp #\C_tan_3
 mov r19, #1
 jmp #\@C_tan_4
C_tan_3
 mov r19, #0
C_tan_4
 mov r21, r19
 mov r22, #0
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
 mov r2, r23
 mov BC, #4
 calld PA,#CALA
 long @C___I_sN_an
 cmps r0,  #0 wz
 if_z jmp #\C_tan_11
 mov r22, #33
 wrlong r22, ##@C_errno
 mov r0, r23
 jmp #\@C_tan_1
C_tan_11
 cmps r21,  #0 wz
 if_z jmp #\C_tan_13
 xor r23, Bit31
C_tan_13
 mov r22, ##@C_tan_15_L000016
 rdlong r22, r22
 mov r0, r22
 mov r1, r23
 calld PA,#FMUL
 mov r22, ##@C_tan_17_L000018
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, ##@C_tan_21_L000022
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_b jmp #\C_tan_19
 mov r0, ##@C_tan_5_L000006
 rdlong r0, r0
 jmp #\@C_tan_1
C_tan_19
 mov r2, FP
 sub r2, #-(-8)
 mov RI, FP
 sub RI, #-(-8)
 rdlong r3, RI
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_modf
 add SP, #4
 mov r2, FP
 sub r2, #-(-16)
 mov r22, ##@C_tan_17_L000018
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-8)
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FMUL
 mov r3, r0
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_modf
 add SP, #4
 mov r22, r0
 mov r20, ##@C_tan_5_L000006
 rdlong r20, r20
 mov r0, r22
 mov r1, r20
 calld PA,#FCMP
 if_z jmp #\C_tan_23
 mov r22, #1
 mov RI, FP
 sub RI, #-(-12)
 wrlong r22, RI
C_tan_23
 mov r2, FP
 sub r2, #-(-16)
 mov r3, r23
 mov BC, #8
 sub SP, #4
 calld PA,#CALA
 long @C_modf
 add SP, #4
 mov RI, FP
 sub RI, #-(-20)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r20, FP
 sub r20, #-(-16)
 rdlong r20, r20
 mov r18, ##@C_tan_25_L000026
 rdlong r18, r18
 mov r0, r18
 mov r1, r22
 calld PA,#FMUL
 mov r1, r0
 mov r0, r20
 calld PA,#FSUB
 mov r23, r0
 mov r20, FP
 sub r20, #-(-20)
 rdlong r20, r20
 mov r0, r23
 mov r1, r20
 calld PA,#FADD
 mov r23, r0
 mov r20, ##@C_tan_27_L000028
 rdlong r20, r20
 mov r0, r20
 mov r1, r22
 calld PA,#FMUL
 mov r1, r0
 mov r0, r23
 calld PA,#FSUB
 mov r23, r0
 mov r0, r23
 mov r1, r23
 calld PA,#FMUL
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FMUL
 mov RI, FP
 sub RI, #-(-16)
 wrlong r0, RI
 mov r20, ##@C_tan_p_L000008+4+4+4
 rdlong r20, r20
 mov r0, r20
 mov r1, r22
 calld PA,#FMUL
 mov r20, ##@C_tan_p_L000008+4+4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FADD
 mov r1, r22
 calld PA,#FMUL
 mov r20, ##@C_tan_p_L000008+4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FADD
 mov r20, FP
 sub r20, #-(-16)
 rdlong r20, r20
 mov r1, r0
 mov r0, r20
 calld PA,#FMUL
 mov r1, r0
 mov r0, r23
 calld PA,#FADD
 mov r23, r0
 mov r20, ##@C_tan_q_L000010+4+4+4+4
 rdlong r20, r20
 mov r0, r20
 mov r1, r22
 calld PA,#FMUL
 mov r20, ##@C_tan_q_L000010+4+4+4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FADD
 mov r1, r22
 calld PA,#FMUL
 mov r20, ##@C_tan_q_L000010+4+4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FADD
 mov r1, r22
 calld PA,#FMUL
 mov r20, ##@C_tan_q_L000010+4
 rdlong r20, r20
 mov r1, r20
 calld PA,#FADD
 mov r1, r22
 calld PA,#FMUL
 mov r22, ##@C_tan_q_L000010
 rdlong r22, r22
 mov r1, r22
 calld PA,#FADD
 mov RI, FP
 sub RI, #-(-8)
 wrlong r0, RI
 cmps r21,  #0 wz
 if_z jmp #\C_tan_45
 xor r23, Bit31
C_tan_45
 mov r22, FP
 sub r22, #-(-12)
 rdlong r22, r22
 cmps r22,  #0 wz
 if_z jmp #\C_tan_48
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 xor r22, Bit31
 mov r0, r22
 mov r1, r23
 calld PA,#FDIV
 mov r17, r0
 jmp #\@C_tan_49
C_tan_48
 mov r22, FP
 sub r22, #-(-8)
 rdlong r22, r22
 mov r0, r23
 mov r1, r22
 calld PA,#FDIV
 mov r17, r0
C_tan_49
 mov r0, r17
C_tan_1
 calld PA,#POPM
 add SP, #16
 calld PA,#RETF
' Catalina Import errno
' Catalina Import modf
' Catalina Import __IsNan
DAT
DAT

'#line 1 "/target/p2/presbrk.inc"
' This file is for plugin code and data that is required to be left in Hub
' RAM after the plugin is loaded into a cog and started.
'
' Anything placed in this file will be placed BEFORE the C sbrk. Normally,
' all plugin code and data is placed AFTER the C sbrk, and so will be lost
' once the C program execution starts (unless the symbol SBRK_AFTER_PLUGINS
' is defined).







   alignl

































'#line 58573 "//catalina.s"

' Catalina Cnst
DAT
 alignl
Catalina_Cnst
DAT
 alignl
C_tmp157001_00000006_file_char_L000003_14_L000016
 long @C_tmp157001_00000006_file_char_L000003_11
 long @C_tmp157001_00000006_file_char_L000003_9
 long @C_tmp157001_00000006_file_char_L000003_11
 long @C_tmp157001_00000006_file_char_L000003_11
 long @C_tmp157001_00000006_file_char_L000003_11
 long @C_tmp157001_00000006_file_char_L000003_11
 long @C_tmp157001_00000006_file_char_L000003_11
 long @C_tmp157001_00000006_file_char_L000003_11
 long @C_tmp157001_00000006_file_char_L000003_11
 long @C_tmp157001_00000006_file_char_L000003_9
 long @C_tmp157001_00000006_file_char_L000003_9
 long @C_tmp157001_00000006_file_char_L000003_9
 long @C_tmp157001_00000006_file_char_L000003_11
 long @C_tmp157001_00000006_file_char_L000003_11
DAT
 alignl
C_main_81_L000082
 byte 67
 byte 97
 byte 110
 byte 110
 byte 111
 byte 116
 byte 32
 byte 111
 byte 112
 byte 101
 byte 110
 byte 32
 byte 102
 byte 105
 byte 108
 byte 101
 byte 32
 byte 37
 byte 115
 byte 10
 byte 0
 alignl
C_main_73_L000074
 byte 67
 byte 97
 byte 110
 byte 110
 byte 111
 byte 116
 byte 32
 byte 111
 byte 112
 byte 101
 byte 110
 byte 32
 byte 102
 byte 105
 byte 108
 byte 101
 byte 32
 byte 37
 byte 115
 byte 32
 byte 45
 byte 32
 byte 116
 byte 114
 byte 121
 byte 32
 byte 97
 byte 103
 byte 97
 byte 105
 byte 110
 byte 10
 byte 0
 alignl
C_main_69_L000070
 byte 46
 byte 98
 byte 97
 byte 115
 byte 0
 alignl
C_main_58_L000059
 byte 10
 byte 0
 alignl
C_main_56_L000057
 byte 78
 byte 97
 byte 109
 byte 101
 byte 32
 byte 111
 byte 102
 byte 32
 byte 98
 byte 97
 byte 115
 byte 105
 byte 99
 byte 32
 byte 102
 byte 105
 byte 108
 byte 101
 byte 32
 byte 116
 byte 111
 byte 32
 byte 114
 byte 117
 byte 110
 byte 58
 byte 32
 byte 0
 alignl
C_main_51_L000052
 byte 83
 byte 101
 byte 101
 byte 32
 byte 100
 byte 111
 byte 99
 byte 117
 byte 109
 byte 101
 byte 110
 byte 116
 byte 97
 byte 116
 byte 105
 byte 111
 byte 110
 byte 32
 byte 102
 byte 111
 byte 114
 byte 32
 byte 66
 byte 65
 byte 83
 byte 73
 byte 67
 byte 32
 byte 115
 byte 121
 byte 110
 byte 116
 byte 97
 byte 120
 byte 10
 byte 10
 byte 0
 alignl
C_main_49_L000050
 byte 117
 byte 115
 byte 97
 byte 103
 byte 101
 byte 58
 byte 32
 byte 100
 byte 98
 byte 97
 byte 115
 byte 105
 byte 99
 byte 32
 byte 91
 byte 102
 byte 105
 byte 108
 byte 101
 byte 110
 byte 97
 byte 109
 byte 101
 byte 93
 byte 10
 byte 10
 byte 0
 alignl
C_main_45_L000046
 byte 68
 byte 117
 byte 109
 byte 98
 byte 111
 byte 32
 byte 66
 byte 65
 byte 83
 byte 73
 byte 67
 byte 32
 byte 118
 byte 49
 byte 46
 byte 53
 byte 0
 alignl
C_main_43_L000044
 byte 37
 byte 115
 byte 10
 byte 10
 byte 0
 alignl
C_execute_40_L000041
 byte 112
 byte 114
 byte 101
 byte 115
 byte 115
 byte 32
 byte 97
 byte 110
 byte 121
 byte 32
 byte 107
 byte 101
 byte 121
 byte 32
 byte 116
 byte 111
 byte 32
 byte 99
 byte 111
 byte 110
 byte 116
 byte 105
 byte 110
 byte 117
 byte 101
 byte 32
 byte 46
 byte 46
 byte 46
 byte 0
 alignl
C_loadfile_30_L000031
 byte 79
 byte 117
 byte 116
 byte 32
 byte 111
 byte 102
 byte 32
 byte 109
 byte 101
 byte 109
 byte 111
 byte 114
 byte 121
 byte 10
 byte 0
 alignl
C_loadfile_26_L000027
 byte 76
 byte 111
 byte 97
 byte 100
 byte 105
 byte 110
 byte 103
 byte 32
 byte 37
 byte 115
 byte 10
 byte 0
 alignl
C_loadfile_24_L000025
 byte 67
 byte 97
 byte 110
 byte 39
 byte 116
 byte 32
 byte 111
 byte 112
 byte 101
 byte 110
 byte 32
 byte 37
 byte 115
 byte 10
 byte 0
 alignl
C_loadfile_20_L000021
 byte 114
 byte 0
DAT
 alignl
C_tmp098187_0000001b_tokenize_line_L000255_351_L000353
 long @C_tmp098187_0000001b_tokenize_line_L000255_275
 long @C_tmp098187_0000001b_tokenize_line_L000255_296
 long @C_tmp098187_0000001b_tokenize_line_L000255_296
 long @C_tmp098187_0000001b_tokenize_line_L000255_296
 long @C_tmp098187_0000001b_tokenize_line_L000255_315
 long @C_tmp098187_0000001b_tokenize_line_L000255_315
 long @C_tmp098187_0000001b_tokenize_line_L000255_315
DAT
 alignl
C_tmp098187_0000001b_tokenize_line_L000255_356_L000358
 long @C_tmp098187_0000001b_tokenize_line_L000255_266
 long @C_tmp098187_0000001b_tokenize_line_L000255_264
 long @C_tmp098187_0000001b_tokenize_line_L000255_264
 long @C_tmp098187_0000001b_tokenize_line_L000255_264
 long @C_tmp098187_0000001b_tokenize_line_L000255_264
 long @C_tmp098187_0000001b_tokenize_line_L000255_267
 long @C_tmp098187_0000001b_tokenize_line_L000255_270
 long @C_tmp098187_0000001b_tokenize_line_L000255_271
 long @C_tmp098187_0000001b_tokenize_line_L000255_272
 long @C_tmp098187_0000001b_tokenize_line_L000255_273
DAT
 alignl
C_tmp098043_0000000b_reporterror_L000063_669_L000671
 long @C_tmp098043_0000000b_reporterror_L000063_505
 long @C_tmp098043_0000000b_reporterror_L000063_508
 long @C_tmp098043_0000000b_reporterror_L000063_511
 long @C_tmp098043_0000000b_reporterror_L000063_514
 long @C_tmp098043_0000000b_reporterror_L000063_517
 long @C_tmp098043_0000000b_reporterror_L000063_520
 long @C_tmp098043_0000000b_reporterror_L000063_523
 long @C_tmp098043_0000000b_reporterror_L000063_526
 long @C_tmp098043_0000000b_reporterror_L000063_529
 long @C_tmp098043_0000000b_reporterror_L000063_532
 long @C_tmp098043_0000000b_reporterror_L000063_535
 long @C_tmp098043_0000000b_reporterror_L000063_538
 long @C_tmp098043_0000000b_reporterror_L000063_541
 long @C_tmp098043_0000000b_reporterror_L000063_544
 long @C_tmp098043_0000000b_reporterror_L000063_547
 long @C_tmp098043_0000000b_reporterror_L000063_550
 long @C_tmp098043_0000000b_reporterror_L000063_553
 long @C_tmp098043_0000000b_reporterror_L000063_556
 long @C_tmp098043_0000000b_reporterror_L000063_559
 long @C_tmp098043_0000000b_reporterror_L000063_562
 long @C_tmp098043_0000000b_reporterror_L000063_565
 long @C_tmp098043_0000000b_reporterror_L000063_568
 long @C_tmp098043_0000000b_reporterror_L000063_571
 long @C_tmp098043_0000000b_reporterror_L000063_574
 long @C_tmp098043_0000000b_reporterror_L000063_577
 long @C_tmp098043_0000000b_reporterror_L000063_580
 long @C_tmp098043_0000000b_reporterror_L000063_583
 long @C_tmp098043_0000000b_reporterror_L000063_586
 long @C_tmp098043_0000000b_reporterror_L000063_589
 long @C_tmp098043_0000000b_reporterror_L000063_592
 long @C_tmp098043_0000000b_reporterror_L000063_595
 long @C_tmp098043_0000000b_reporterror_L000063_598
 long @C_tmp098043_0000000b_reporterror_L000063_601
 long @C_tmp098043_0000000b_reporterror_L000063_604
 long @C_tmp098043_0000000b_reporterror_L000063_607
 long @C_tmp098043_0000000b_reporterror_L000063_610
 long @C_tmp098043_0000000b_reporterror_L000063_613
 long @C_tmp098043_0000000b_reporterror_L000063_616
 long @C_tmp098043_0000000b_reporterror_L000063_619
 long @C_tmp098043_0000000b_reporterror_L000063_622
 long @C_tmp098043_0000000b_reporterror_L000063_625
 long @C_tmp098043_0000000b_reporterror_L000063_628
 long @C_tmp098043_0000000b_reporterror_L000063_631
 long @C_tmp098043_0000000b_reporterror_L000063_634
 long @C_tmp098043_0000000b_reporterror_L000063_637
 long @C_tmp098043_0000000b_reporterror_L000063_640
 long @C_tmp098043_0000000b_reporterror_L000063_643
 long @C_tmp098043_0000000b_reporterror_L000063_646
 long @C_tmp098043_0000000b_reporterror_L000063_649
 long @C_tmp098043_0000000b_reporterror_L000063_655
 long @C_tmp098043_0000000b_reporterror_L000063_658
 long @C_tmp098043_0000000b_reporterror_L000063_661
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_664
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_503
 long @C_tmp098043_0000000b_reporterror_L000063_652
DAT
 alignl
C_tmp098048_0000000b_execute_line_L000068_792_L000794
 long @C_tmp098048_0000000b_execute_line_L000068_736
 long @C_tmp098048_0000000b_execute_line_L000068_738
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_741
 long @C_tmp098048_0000000b_execute_line_L000068_741
 long @C_tmp098048_0000000b_execute_line_L000068_741
 long @C_tmp098048_0000000b_execute_line_L000068_741
 long @C_tmp098048_0000000b_execute_line_L000068_741
 long @C_tmp098048_0000000b_execute_line_L000068_741
DAT
 alignl
C_tmp098048_0000000b_execute_line_L000068_797_L000799
 long @C_tmp098048_0000000b_execute_line_L000068_741
 long @C_tmp098048_0000000b_execute_line_L000068_741
 long @C_tmp098048_0000000b_execute_line_L000068_741
 long @C_tmp098048_0000000b_execute_line_L000068_741
 long @C_tmp098048_0000000b_execute_line_L000068_741
 long @C_tmp098048_0000000b_execute_line_L000068_741
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_739
 long @C_tmp098048_0000000b_execute_line_L000068_740
 long @C_tmp098048_0000000b_execute_line_L000068_778
 long @C_tmp098048_0000000b_execute_line_L000068_779
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_780
 long @C_tmp098048_0000000b_execute_line_L000068_781
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_782
 long @C_tmp098048_0000000b_execute_line_L000068_783
 long @C_tmp098048_0000000b_execute_line_L000068_784
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_785
 long @C_tmp098048_0000000b_execute_line_L000068_741
 long @C_tmp098048_0000000b_execute_line_L000068_736
 long @C_tmp098048_0000000b_execute_line_L000068_743
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_744
 long @C_tmp098048_0000000b_execute_line_L000068_746
 long @C_tmp098048_0000000b_execute_line_L000068_749
 long @C_tmp098048_0000000b_execute_line_L000068_752
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_753
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_761
 long @C_tmp098048_0000000b_execute_line_L000068_762
 long @C_tmp098048_0000000b_execute_line_L000068_748
 long @C_tmp098048_0000000b_execute_line_L000068_759
 long @C_tmp098048_0000000b_execute_line_L000068_758
 long @C_tmp098048_0000000b_execute_line_L000068_756
 long @C_tmp098048_0000000b_execute_line_L000068_757
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_760
 long @C_tmp098048_0000000b_execute_line_L000068_736
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_774
 long @C_tmp098048_0000000b_execute_line_L000068_754
 long @C_tmp098048_0000000b_execute_line_L000068_755
 long @C_tmp098048_0000000b_execute_line_L000068_763
 long @C_tmp098048_0000000b_execute_line_L000068_766
 long @C_tmp098048_0000000b_execute_line_L000068_767
 long @C_tmp098048_0000000b_execute_line_L000068_768
 long @C_tmp098048_0000000b_execute_line_L000068_769
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_786
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_747
 long @C_tmp098048_0000000b_execute_line_L000068_775
 long @C_tmp098048_0000000b_execute_line_L000068_770
 long @C_tmp098048_0000000b_execute_line_L000068_750
 long @C_tmp098048_0000000b_execute_line_L000068_751
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_776
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_735
 long @C_tmp098048_0000000b_execute_line_L000068_745
DAT
 alignl
C_tmp098054_0000000b_do_dim_L000074_1141_L001143
 long @C_tmp098054_0000000b_do_dim_L000074_1126
 long @C_tmp098054_0000000b_do_dim_L000074_1127
 long @C_tmp098054_0000000b_do_dim_L000074_1129
 long @C_tmp098054_0000000b_do_dim_L000074_1132
 long @C_tmp098054_0000000b_do_dim_L000074_1136
DAT
 alignl
C_tmp098292_000001c4_cvalue_L001932_1973_L001975
 long @C_tmp098292_000001c4_cvalue_L001932_1936
 long @C_tmp098292_000001c4_cvalue_L001932_1936
 long @C_tmp098292_000001c4_cvalue_L001932_1936
 long @C_tmp098292_000001c4_cvalue_L001932_1952
 long @C_tmp098292_000001c4_cvalue_L001932_1952
 long @C_tmp098292_000001c4_cvalue_L001932_1952
DAT
 alignl
C_tmp098292_000001c4_cvalue_L001932_1977_L001979
 long @C_tmp098292_000001c4_cvalue_L001932_1943
 long @C_tmp098292_000001c4_cvalue_L001932_1943
 long @C_tmp098292_000001c4_cvalue_L001932_1943
 long @C_tmp098292_000001c4_cvalue_L001932_1961
 long @C_tmp098292_000001c4_cvalue_L001932_1961
 long @C_tmp098292_000001c4_cvalue_L001932_1961
DAT
 alignl
C_tmp098101_0000000c_do_call_L000121_1982_L001983
 long $0
 long $0
 long $0
 long $0
 alignl
C_tmp098101_0000000c_do_call_L000121_1984_L001985
 long 0
 long 0
 long 0
 long 0
DAT
 alignl
C_tmp098306_00000244_argtype_L002380_2391_L002393
 long @C_tmp098306_00000244_argtype_L002380_2389
 long @C_tmp098306_00000244_argtype_L002380_2384
 long @C_tmp098306_00000244_argtype_L002380_2389
 long @C_tmp098306_00000244_argtype_L002380_2388
 long @C_tmp098306_00000244_argtype_L002380_2387
DAT
 alignl
C_tmp098103_0000000c_lvalue_L000123_2673_L002675
 long @C_tmp098103_0000000c_lvalue_L000123_2650
 long @C_tmp098103_0000000c_lvalue_L000123_2650
 long @C_tmp098103_0000000c_lvalue_L000123_2650
 long @C_tmp098103_0000000c_lvalue_L000123_2666
 long @C_tmp098103_0000000c_lvalue_L000123_2666
 long @C_tmp098103_0000000c_lvalue_L000123_2666
DAT
 alignl
C_tmp098103_0000000c_lvalue_L000123_2677_L002679
 long @C_tmp098103_0000000c_lvalue_L000123_2657
 long @C_tmp098103_0000000c_lvalue_L000123_2657
 long @C_tmp098103_0000000c_lvalue_L000123_2657
 long @C_tmp098103_0000000c_lvalue_L000123_2669
 long @C_tmp098103_0000000c_lvalue_L000123_2669
 long @C_tmp098103_0000000c_lvalue_L000123_2669
DAT
 alignl
C_tmp098103_0000000c_lvalue_L000123_2721_L002723
 long @C_tmp098103_0000000c_lvalue_L000123_2686
 long @C_tmp098103_0000000c_lvalue_L000123_2689
 long @C_tmp098103_0000000c_lvalue_L000123_2694
 long @C_tmp098103_0000000c_lvalue_L000123_2701
 long @C_tmp098103_0000000c_lvalue_L000123_2710
DAT
 alignl
C_precedence_2747_L002749
 long @C_precedence_2735
 long @C_precedence_2737
 long @C_precedence_2732
 long @C_precedence_2737
 long @C_precedence_2732
 long @C_precedence_2735
DAT
 alignl
C_tmp098105_0000000c_binop_L000125_3014_L003016
 long @C_tmp098105_0000000c_binop_L000125_2945
 long @C_tmp098105_0000000c_binop_L000125_2931
 long @C_tmp098105_0000000c_binop_L000125_2781
 long @C_tmp098105_0000000c_binop_L000125_2938
 long @C_tmp098105_0000000c_binop_L000125_2781
 long @C_tmp098105_0000000c_binop_L000125_2952
DAT
 alignl
C_tmp098107_0000000c_factor_L000127_3424_L003426
 long @C_tmp098107_0000000c_factor_L000127_3089
 long @C_tmp098107_0000000c_factor_L000127_3089
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3090
 long @C_tmp098107_0000000c_factor_L000127_3090
DAT
 alignl
C_tmp098107_0000000c_factor_L000127_3430_L003432
 long @C_tmp098107_0000000c_factor_L000127_3337
 long @C_tmp098107_0000000c_factor_L000127_3345
 long @C_tmp098107_0000000c_factor_L000127_3353
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3361
 long @C_tmp098107_0000000c_factor_L000127_3370
 long @C_tmp098107_0000000c_factor_L000127_3384
DAT
 alignl
C_tmp098107_0000000c_factor_L000127_3434_L003436
 long @C_tmp098107_0000000c_factor_L000127_3073
 long @C_tmp098107_0000000c_factor_L000127_3089
 long @C_tmp098107_0000000c_factor_L000127_3089
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3090
 long @C_tmp098107_0000000c_factor_L000127_3090
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3091
DAT
 alignl
C_tmp098107_0000000c_factor_L000127_3438_L003440
 long @C_tmp098107_0000000c_factor_L000127_3395
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3081
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3315
 long @C_tmp098107_0000000c_factor_L000127_3330
 long @C_tmp098107_0000000c_factor_L000127_3335
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3097
 long @C_tmp098107_0000000c_factor_L000127_3104
 long @C_tmp098107_0000000c_factor_L000127_3111
 long @C_tmp098107_0000000c_factor_L000127_3118
 long @C_tmp098107_0000000c_factor_L000127_3131
 long @C_tmp098107_0000000c_factor_L000127_3156
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3169
 long @C_tmp098107_0000000c_factor_L000127_3202
 long @C_tmp098107_0000000c_factor_L000127_3207
 long @C_tmp098107_0000000c_factor_L000127_3212
 long @C_tmp098107_0000000c_factor_L000127_3231
 long @C_tmp098107_0000000c_factor_L000127_3246
 long @C_tmp098107_0000000c_factor_L000127_3253
 long @C_tmp098107_0000000c_factor_L000127_3305
 long @C_tmp098107_0000000c_factor_L000127_3319
 long @C_tmp098107_0000000c_factor_L000127_3323
 long @C_tmp098107_0000000c_factor_L000127_3328
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3268
 long @C_tmp098107_0000000c_factor_L000127_3300
 long @C_tmp098107_0000000c_factor_L000127_3300
 long @C_tmp098107_0000000c_factor_L000127_3095
 long @C_tmp098107_0000000c_factor_L000127_3070
 long @C_tmp098107_0000000c_factor_L000127_3258
 long @C_tmp098107_0000000c_factor_L000127_3246
 long @C_tmp098107_0000000c_factor_L000127_3179
 long @C_tmp098107_0000000c_factor_L000127_3149
DAT
 alignl
C_tmp098107_0000000c_factor_L000127_3410_L003412
 long @C_tmp098107_0000000c_factor_L000127_3406
 long @C_tmp098107_0000000c_factor_L000127_3406
 long @C_tmp098107_0000000c_factor_L000127_3398
 long @C_tmp098107_0000000c_factor_L000127_3407
 long @C_tmp098107_0000000c_factor_L000127_3407
DAT
 alignl
C_tmp098107_0000000c_factor_L000127_3414_L003416
 long @C_tmp098107_0000000c_factor_L000127_3406
 long @C_tmp098107_0000000c_factor_L000127_3406
 long @C_tmp098107_0000000c_factor_L000127_3398
 long @C_tmp098107_0000000c_factor_L000127_3407
 long @C_tmp098107_0000000c_factor_L000127_3407
DAT
 alignl
C_tmp098109_0000000c_dimvariable_L000129_3591_L003593
 long @C_tmp098109_0000000c_dimvariable_L000129_3566
 long @C_tmp098109_0000000c_dimvariable_L000129_3567
 long @C_tmp098109_0000000c_dimvariable_L000129_3570
 long @C_tmp098109_0000000c_dimvariable_L000129_3575
 long @C_tmp098109_0000000c_dimvariable_L000129_3582
DAT
 alignl
C_tmp098111_0000000c_dimvariable_addr_L000131_3671_L003673
 long @C_tmp098111_0000000c_dimvariable_addr_L000131_3646
 long @C_tmp098111_0000000c_dimvariable_addr_L000131_3647
 long @C_tmp098111_0000000c_dimvariable_addr_L000131_3650
 long @C_tmp098111_0000000c_dimvariable_addr_L000131_3655
 long @C_tmp098111_0000000c_dimvariable_addr_L000131_3662
DAT
 alignl
C_tmp098124_0000000d_getdimvar_L000144_3814_L003816
 long @C_tmp098124_0000000d_getdimvar_L000144_3799
 long @C_tmp098124_0000000d_getdimvar_L000144_3800
 long @C_tmp098124_0000000d_getdimvar_L000144_3802
 long @C_tmp098124_0000000d_getdimvar_L000144_3805
 long @C_tmp098124_0000000d_getdimvar_L000144_3809
DAT
 alignl
C_tmp098124_0000000d_getdimvar_L000144_3838_L003840
 long @C_tmp098124_0000000d_getdimvar_L000144_3823
 long @C_tmp098124_0000000d_getdimvar_L000144_3824
 long @C_tmp098124_0000000d_getdimvar_L000144_3826
 long @C_tmp098124_0000000d_getdimvar_L000144_3829
 long @C_tmp098124_0000000d_getdimvar_L000144_3833
DAT
 alignl
C_tmp098124_0000000d_getdimvar_L000144_3862_L003864
 long @C_tmp098124_0000000d_getdimvar_L000144_3847
 long @C_tmp098124_0000000d_getdimvar_L000144_3848
 long @C_tmp098124_0000000d_getdimvar_L000144_3850
 long @C_tmp098124_0000000d_getdimvar_L000144_3853
 long @C_tmp098124_0000000d_getdimvar_L000144_3857
DAT
 alignl
C_tmp098130_0000000d_autodimvar_L000150_3908_L003910
 long @C_tmp098130_0000000d_autodimvar_L000150_3903
 long @C_tmp098130_0000000d_autodimvar_L000150_3904
 long @C_tmp098130_0000000d_autodimvar_L000150_3905
 long @C_tmp098130_0000000d_autodimvar_L000150_3906
 long @C_tmp098130_0000000d_autodimvar_L000150_3907
DAT
 alignl
C_tmp098131_0000000d_stringexpr_L000151_3966_L003968
 long @C_tmp098131_0000000d_stringexpr_L000151_3943
 long @C_tmp098131_0000000d_stringexpr_L000151_3944
 long @C_tmp098131_0000000d_stringexpr_L000151_3945
 long @C_tmp098131_0000000d_stringexpr_L000151_3946
 long @C_tmp098131_0000000d_stringexpr_L000151_3947
 long @C_tmp098131_0000000d_stringexpr_L000151_3948
 long @C_tmp098131_0000000d_stringexpr_L000151_3949
 long @C_tmp098131_0000000d_stringexpr_L000151_3950
 long @C_tmp098131_0000000d_stringexpr_L000151_3951
 long @C_tmp098131_0000000d_stringexpr_L000151_3952
 long @C_tmp098131_0000000d_stringexpr_L000151_3954
 long @C_tmp098131_0000000d_stringexpr_L000151_3955
 long @C_tmp098131_0000000d_stringexpr_L000151_3956
 long @C_tmp098131_0000000d_stringexpr_L000151_3957
 long @C_tmp098131_0000000d_stringexpr_L000151_3953
DAT
 alignl
C_tmp098148_0000000d_stringdimvar_L000168_4201_L004203
 long @C_tmp098148_0000000d_stringdimvar_L000168_4176
 long @C_tmp098148_0000000d_stringdimvar_L000168_4177
 long @C_tmp098148_0000000d_stringdimvar_L000168_4180
 long @C_tmp098148_0000000d_stringdimvar_L000168_4185
 long @C_tmp098148_0000000d_stringdimvar_L000168_4192
DAT
 alignl
C_tmp098168_0000000d_gettoken_L000188_4425_L004427
 long @C_tmp098168_0000000d_gettoken_L000188_4380
 long @C_tmp098168_0000000d_gettoken_L000188_4380
 long @C_tmp098168_0000000d_gettoken_L000188_4375
 long @C_tmp098168_0000000d_gettoken_L000188_4375
 long @C_tmp098168_0000000d_gettoken_L000188_4375
 long @C_tmp098168_0000000d_gettoken_L000188_4380
 long @C_tmp098168_0000000d_gettoken_L000188_4380
 long @C_tmp098168_0000000d_gettoken_L000188_4380
 long @C_tmp098168_0000000d_gettoken_L000188_4380
 long @C_tmp098168_0000000d_gettoken_L000188_4380
 long @C_tmp098168_0000000d_gettoken_L000188_4380
 long @C_tmp098168_0000000d_gettoken_L000188_4380
 long @C_tmp098168_0000000d_gettoken_L000188_4375
 long @C_tmp098168_0000000d_gettoken_L000188_4380
 long @C_tmp098168_0000000d_gettoken_L000188_4375
 long @C_tmp098168_0000000d_gettoken_L000188_4375
 long @C_tmp098168_0000000d_gettoken_L000188_4375
 long @C_tmp098168_0000000d_gettoken_L000188_4375
 long @C_tmp098168_0000000d_gettoken_L000188_4375
 long @C_tmp098168_0000000d_gettoken_L000188_4375
 long @C_tmp098168_0000000d_gettoken_L000188_4375
 long @C_tmp098168_0000000d_gettoken_L000188_4375
 long @C_tmp098168_0000000d_gettoken_L000188_4375
 long @C_tmp098168_0000000d_gettoken_L000188_4375
 long @C_tmp098168_0000000d_gettoken_L000188_4380
 long @C_tmp098168_0000000d_gettoken_L000188_4380
 long @C_tmp098168_0000000d_gettoken_L000188_4381
 long @C_tmp098168_0000000d_gettoken_L000188_4380
 long @C_tmp098168_0000000d_gettoken_L000188_4386
 long @C_tmp098168_0000000d_gettoken_L000188_4380
DAT
 alignl
C_tmp098168_0000000d_gettoken_L000188_4418_L004420
 long @C_tmp098168_0000000d_gettoken_L000188_4411
 long @C_tmp098168_0000000d_gettoken_L000188_4400
 long @C_tmp098168_0000000d_gettoken_L000188_4411
 long @C_tmp098168_0000000d_gettoken_L000188_4407
 long @C_tmp098168_0000000d_gettoken_L000188_4403
 long @C_tmp098168_0000000d_gettoken_L000188_4400
 long @C_tmp098168_0000000d_gettoken_L000188_4400
 long @C_tmp098168_0000000d_gettoken_L000188_4415
DAT
 alignl
C_tmp098171_0000000d_tokenlen_L000191_4439_L004441
 long @C_tmp098171_0000000d_tokenlen_L000191_4434
 long @C_tmp098171_0000000d_tokenlen_L000191_4434
 long @C_tmp098171_0000000d_tokenlen_L000191_4434
 long @C_tmp098171_0000000d_tokenlen_L000191_4437
 long @C_tmp098171_0000000d_tokenlen_L000191_4437
 long @C_tmp098171_0000000d_tokenlen_L000191_4437
 long @C_tmp098171_0000000d_tokenlen_L000191_4437
 long @C_tmp098171_0000000d_tokenlen_L000191_4437
 long @C_tmp098171_0000000d_tokenlen_L000191_4437
 long @C_tmp098171_0000000d_tokenlen_L000191_4437
 long @C_tmp098171_0000000d_tokenlen_L000191_4437
 long @C_tmp098171_0000000d_tokenlen_L000191_4437
 long @C_tmp098171_0000000d_tokenlen_L000191_4437
 long @C_tmp098171_0000000d_tokenlen_L000191_4437
 long @C_tmp098171_0000000d_tokenlen_L000191_4437
DAT
 alignl
C_tmp098171_0000000d_tokenlen_L000191_4442_L004444
 long @C_tmp098171_0000000d_tokenlen_L000191_4435
 long @C_tmp098171_0000000d_tokenlen_L000191_4436
 long @C_tmp098171_0000000d_tokenlen_L000191_4436
 long @C_tmp098171_0000000d_tokenlen_L000191_4436
 long @C_tmp098171_0000000d_tokenlen_L000191_4436
 long @C_tmp098171_0000000d_tokenlen_L000191_4436
 long @C_tmp098171_0000000d_tokenlen_L000191_4436
DAT
 alignl
C_tmp098171_0000000d_tokenlen_L000191_4459_L004461
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4448
 long @C_tmp098171_0000000d_tokenlen_L000191_4448
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4450
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4455
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4449
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4457
 long @C_tmp098171_0000000d_tokenlen_L000191_4458
 long @C_tmp098171_0000000d_tokenlen_L000191_4458
 long @C_tmp098171_0000000d_tokenlen_L000191_4458
 long @C_tmp098171_0000000d_tokenlen_L000191_4458
 long @C_tmp098171_0000000d_tokenlen_L000191_4458
 long @C_tmp098171_0000000d_tokenlen_L000191_4458
 long @C_tmp098171_0000000d_tokenlen_L000191_4446
 long @C_tmp098171_0000000d_tokenlen_L000191_4450
 long @C_tmp098171_0000000d_tokenlen_L000191_4450
 long @C_tmp098171_0000000d_tokenlen_L000191_4450
 long @C_tmp098171_0000000d_tokenlen_L000191_4450
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4450
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4450
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4450
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4455
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4450
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4456
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4451
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4455
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4453
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4452
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
 long @C_tmp098171_0000000d_tokenlen_L000191_4454
DAT
 alignl
C_tmp098162_0000000d_is_string_L000182_4477_L004479
 long @C_tmp098162_0000000d_is_string_L000182_4472
 long @C_tmp098162_0000000d_is_string_L000182_4472
 long @C_tmp098162_0000000d_is_string_L000182_4472
 long @C_tmp098162_0000000d_is_string_L000182_4472
 long @C_tmp098162_0000000d_is_string_L000182_4472
 long @C_tmp098162_0000000d_is_string_L000182_4472
 long @C_tmp098162_0000000d_is_string_L000182_4472
 long @C_tmp098162_0000000d_is_string_L000182_4472
 long @C_tmp098162_0000000d_is_string_L000182_4472
 long @C_tmp098162_0000000d_is_string_L000182_4472
 long @C_tmp098162_0000000d_is_string_L000182_4472
 long @C_tmp098162_0000000d_is_string_L000182_4472
 long @C_tmp098162_0000000d_is_string_L000182_4472
 long @C_tmp098162_0000000d_is_string_L000182_4472
 long @C_tmp098162_0000000d_is_string_L000182_4472
DAT
 alignl
C_tmp098178_0000000e_factorial_L000198_4655_L004656
 long $447a0000
 alignl
C_tmp098174_0000000e_linecount_L000194_4637_L004638
 byte 73
 byte 110
 byte 118
 byte 97
 byte 108
 byte 105
 byte 100
 byte 32
 byte 99
 byte 104
 byte 97
 byte 114
 byte 97
 byte 99
 byte 116
 byte 101
 byte 114
 byte 32
 byte 40
 byte 104
 byte 101
 byte 120
 byte 32
 byte 37
 byte 50
 byte 88
 byte 41
 byte 32
 byte 105
 byte 110
 byte 32
 byte 115
 byte 99
 byte 114
 byte 105
 byte 112
 byte 116
 byte 32
 byte 112
 byte 111
 byte 115
 byte 105
 byte 116
 byte 105
 byte 111
 byte 110
 byte 32
 byte 37
 byte 100
 byte 10
 byte 0
 alignl
C_tmp098172_0000000d_mystrgrablit_L000192_4597_L004598
 byte 65
 byte 115
 byte 115
 byte 101
 byte 114
 byte 116
 byte 105
 byte 111
 byte 110
 byte 32
 byte 34
 byte 42
 byte 115
 byte 114
 byte 99
 byte 32
 byte 61
 byte 61
 byte 32
 byte 39
 byte 34
 byte 39
 byte 34
 byte 32
 byte 102
 byte 97
 byte 105
 byte 108
 byte 101
 byte 100
 byte 44
 byte 32
 byte 102
 byte 105
 byte 108
 byte 101
 byte 32
 byte 34
 byte 98
 byte 97
 byte 115
 byte 105
 byte 99
 byte 46
 byte 99
 byte 34
 byte 44
 byte 32
 byte 108
 byte 105
 byte 110
 byte 101
 byte 32
 byte 49
 byte 48
 byte 57
 byte 53
 byte 55
 byte 10
 byte 0
 alignl
C_tmp098158_0000000d_untokenized_eol_L000178_4327_L004328
 byte 114
 byte 101
 byte 109
 byte 0
 alignl
C_tmp098139_0000000d_datestring_L000159_4103_L004104
 byte 37
 byte 48
 byte 50
 byte 100
 byte 45
 byte 37
 byte 48
 byte 50
 byte 100
 byte 45
 byte 37
 byte 48
 byte 52
 byte 100
 byte 0
 alignl
C_tmp098140_0000000d_timestring_L000160_4098_L004099
 byte 37
 byte 48
 byte 50
 byte 100
 byte 58
 byte 37
 byte 48
 byte 50
 byte 100
 byte 58
 byte 37
 byte 48
 byte 50
 byte 100
 byte 0
 alignl
C_tmp098138_0000000d_octstring_L000158_4017_L004018
 byte 37
 byte 111
 byte 0
 alignl
C_tmp098137_0000000d_hexstring_L000157_4008_L004009
 byte 37
 byte 88
 byte 0
 alignl
C_tmp098133_0000000d_strstring_L000153_3999_L004000
 byte 32
 byte 37
 byte 103
 byte 0
 alignl
C_tmp098133_0000000d_strstring_L000153_3992_L003993
 byte 32
 byte 37
 byte 100
 byte 0
 alignl
C_tmp098126_0000000d_addinteger_L000146_3876_L003877
 byte 111
 byte 117
 byte 116
 byte 32
 byte 111
 byte 102
 byte 32
 byte 82
 byte 65
 byte 77
 byte 63
 byte 32
 byte 40
 byte 37
 byte 100
 byte 41
 byte 10
 byte 0
 alignl
C_tmp098107_0000000c_factor_L000127_3312_L003313
 long $47000000
 alignl
C_tmp098107_0000000c_factor_L000127_3294_L003295
 long $bf000000
 alignl
C_tmp098107_0000000c_factor_L000127_3281_L003282
 long $3f000000
 alignl
C_tmp098107_0000000c_factor_L000127_3227_L003228
 long $3f800000
 alignl
C_tmp098107_0000000c_factor_L000127_3225_L003226
 long $bf800000
 alignl
C_tmp098107_0000000c_factor_L000127_3195_L003196
 long $bf800000
 alignl
C_tmp098107_0000000c_factor_L000127_3093_L003094
 long $40000000
 alignl
C_timer_3064_L003065
 long $447a0000
 alignl
C_timer_3062_L003063
 long $40000000
 alignl
C_tmp098324_000002b6_debug_val_L002753_2759_L002760
 byte 37
 byte 102
 byte 32
 byte 0
 alignl
C_tmp098324_000002b6_debug_val_L002753_2757_L002758
 byte 37
 byte 100
 byte 32
 byte 0
 alignl
C_tmp098060_0000000c_do_lineinput_L000080_2621_L002622
 byte 37
 byte 115
 byte 0
 alignl
C_tmp098059_0000000c_do_input_L000079_2571_L002572
 byte 63
 byte 32
 byte 0
 alignl
C_tmp098059_0000000c_do_input_L000079_2569_L002570
 byte 37
 byte 115
 byte 63
 byte 32
 byte 0
 alignl
C_tmp098059_0000000c_do_input_L000079_2567_L002568
 byte 37
 byte 115
 byte 32
 byte 0
 alignl
C_tmp098090_0000000c_do_randomize_L000110_2439_L002440
 byte 82
 byte 97
 byte 110
 byte 100
 byte 111
 byte 109
 byte 32
 byte 110
 byte 117
 byte 109
 byte 98
 byte 101
 byte 114
 byte 32
 byte 115
 byte 101
 byte 101
 byte 100
 byte 32
 byte 40
 byte 45
 byte 51
 byte 50
 byte 55
 byte 54
 byte 56
 byte 32
 byte 116
 byte 111
 byte 32
 byte 51
 byte 50
 byte 55
 byte 54
 byte 55
 byte 41
 byte 63
 byte 32
 byte 0
 alignl
C_tmp098087_0000000c_do_datestring_L000107_2401_L002402
 byte 37
 byte 100
 byte 37
 byte 99
 byte 37
 byte 100
 byte 37
 byte 99
 byte 37
 byte 100
 byte 0
 alignl
C_tmp098303_00000236_line_index_L002327_2338_L002339
 long $4f000000
 alignl
C_tmp098303_00000236_line_index_L002327_2336_L002337
 long $cf000000
 alignl
C_tmp098073_0000000c_do_stop_L000093_2325_L002326
 byte 66
 byte 114
 byte 101
 byte 97
 byte 107
 byte 32
 byte 105
 byte 110
 byte 32
 byte 108
 byte 105
 byte 110
 byte 101
 byte 32
 byte 37
 byte 100
 byte 10
 byte 0
 alignl
C_tmp098066_0000000c_do_for_L000086_2184_L002185
 byte 37
 byte 115
 byte 32
 byte 97
 byte 110
 byte 100
 byte 32
 byte 37
 byte 115
 byte 32
 byte 100
 byte 111
 byte 110
 byte 39
 byte 116
 byte 32
 byte 109
 byte 97
 byte 116
 byte 99
 byte 104
 byte 10
 byte 0
 alignl
C_tmp098066_0000000c_do_for_L000086_2126_L002127
 long $3f800000
 alignl
C_tmp098061_0000000c_do_fileinput_L000081_1691_L001692
 byte 37
 byte 102
 byte 0
 alignl
C_tmp098093_0000000c_do_open_L000113_1481_L001482
 byte 97
 byte 43
 byte 0
 alignl
C_tmp098093_0000000c_do_open_L000113_1475_L001476
 byte 114
 byte 43
 byte 0
 alignl
C_tmp098093_0000000c_do_open_L000113_1469_L001470
 byte 119
 byte 43
 byte 0
 alignl
C_tmp098093_0000000c_do_open_L000113_1465_L001466
 byte 114
 byte 0
 alignl
C_tmp098054_0000000b_do_dim_L000074_1198_L001199
 long $0
 alignl
C_print_to_buff_952_L000953
 byte 37
 byte 115
 byte 37
 byte 115
 byte 37
 byte 115
 byte 37
 byte 115
 byte 0
 alignl
C_print_to_buff_936_L000937
 long $0
 alignl
C_print_to_buff_923_L000924
 byte 37
 byte 46
 byte 42
 byte 102
 byte 0
 alignl
C_tmp098050_0000000b_do_write_L000070_898_L000899
 byte 37
 byte 103
 byte 0
 alignl
C_tmp098050_0000000b_do_write_L000070_895_L000896
 byte 37
 byte 100
 byte 0
 alignl
C_tmp098050_0000000b_do_write_L000070_887_L000888
 byte 34
 byte 37
 byte 115
 byte 34
 byte 0
 alignl
C_tmp098263_00000095_decode_using_L000802_821_L000822
 byte 42
 byte 42
 byte 0
 alignl
C_tmp098263_00000095_decode_using_L000802_817_L000818
 byte 36
 byte 36
 byte 0
 alignl
C_tmp098263_00000095_decode_using_L000802_813_L000814
 byte 42
 byte 42
 byte 36
 byte 0
 alignl
C_tmp098048_0000000b_execute_line_L000068_733_L000734
 byte 91
 byte 45
 byte 93
 byte 32
 byte 0
 alignl
C_tmp098048_0000000b_execute_line_L000068_731_L000732
 byte 91
 byte 37
 byte 100
 byte 93
 byte 32
 byte 0
 alignl
C_tmp098044_0000000b_findline_L000064_721_L000722
 byte 108
 byte 105
 byte 110
 byte 101
 byte 32
 byte 37
 byte 100
 byte 32
 byte 110
 byte 111
 byte 116
 byte 32
 byte 102
 byte 111
 byte 117
 byte 110
 byte 100
 byte 10
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_682_L000683
 byte 44
 byte 32
 byte 108
 byte 105
 byte 110
 byte 101
 byte 32
 byte 37
 byte 100
 byte 10
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_676_L000677
 byte 44
 byte 32
 byte 108
 byte 105
 byte 110
 byte 101
 byte 58
 byte 10
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_667_L000668
 byte 85
 byte 110
 byte 107
 byte 110
 byte 111
 byte 119
 byte 110
 byte 32
 byte 101
 byte 114
 byte 114
 byte 111
 byte 114
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_665_L000666
 byte 68
 byte 105
 byte 115
 byte 107
 byte 32
 byte 102
 byte 117
 byte 108
 byte 108
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_662_L000663
 byte 73
 byte 108
 byte 108
 byte 101
 byte 103
 byte 97
 byte 108
 byte 32
 byte 102
 byte 117
 byte 110
 byte 99
 byte 116
 byte 105
 byte 111
 byte 110
 byte 32
 byte 99
 byte 97
 byte 108
 byte 108
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_659_L000660
 byte 78
 byte 111
 byte 32
 byte 115
 byte 117
 byte 99
 byte 104
 byte 32
 byte 85
 byte 83
 byte 82
 byte 32
 byte 102
 byte 117
 byte 110
 byte 99
 byte 116
 byte 105
 byte 111
 byte 110
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_656_L000657
 byte 66
 byte 97
 byte 100
 byte 32
 byte 82
 byte 101
 byte 99
 byte 111
 byte 114
 byte 100
 byte 32
 byte 78
 byte 117
 byte 109
 byte 98
 byte 101
 byte 114
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_653_L000654
 byte 73
 byte 110
 byte 116
 byte 101
 byte 114
 byte 110
 byte 97
 byte 108
 byte 32
 byte 101
 byte 114
 byte 114
 byte 111
 byte 114
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_650_L000651
 byte 70
 byte 105
 byte 101
 byte 108
 byte 100
 byte 32
 byte 79
 byte 118
 byte 101
 byte 114
 byte 102
 byte 108
 byte 111
 byte 119
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_647_L000648
 byte 70
 byte 105
 byte 108
 byte 101
 byte 32
 byte 110
 byte 111
 byte 116
 byte 32
 byte 102
 byte 111
 byte 117
 byte 110
 byte 100
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_644_L000645
 byte 73
 byte 110
 byte 118
 byte 97
 byte 108
 byte 105
 byte 100
 byte 32
 byte 114
 byte 101
 byte 99
 byte 111
 byte 114
 byte 100
 byte 32
 byte 108
 byte 101
 byte 110
 byte 103
 byte 116
 byte 104
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_641_L000642
 byte 73
 byte 110
 byte 118
 byte 97
 byte 108
 byte 105
 byte 100
 byte 32
 byte 102
 byte 105
 byte 108
 byte 101
 byte 32
 byte 110
 byte 97
 byte 109
 byte 101
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_638_L000639
 byte 73
 byte 110
 byte 118
 byte 97
 byte 108
 byte 105
 byte 100
 byte 32
 byte 102
 byte 105
 byte 108
 byte 101
 byte 32
 byte 110
 byte 117
 byte 109
 byte 98
 byte 101
 byte 114
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_635_L000636
 byte 73
 byte 110
 byte 118
 byte 97
 byte 108
 byte 105
 byte 100
 byte 32
 byte 102
 byte 105
 byte 108
 byte 101
 byte 32
 byte 109
 byte 111
 byte 100
 byte 101
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_632_L000633
 byte 82
 byte 69
 byte 83
 byte 85
 byte 77
 byte 69
 byte 32
 byte 119
 byte 105
 byte 116
 byte 104
 byte 111
 byte 117
 byte 116
 byte 32
 byte 101
 byte 114
 byte 114
 byte 111
 byte 114
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_629_L000630
 byte 76
 byte 105
 byte 110
 byte 101
 byte 32
 byte 116
 byte 111
 byte 111
 byte 32
 byte 108
 byte 111
 byte 110
 byte 103
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_626_L000627
 byte 85
 byte 110
 byte 116
 byte 101
 byte 114
 byte 109
 byte 105
 byte 110
 byte 97
 byte 116
 byte 101
 byte 100
 byte 32
 byte 115
 byte 116
 byte 114
 byte 105
 byte 110
 byte 103
 byte 32
 byte 108
 byte 105
 byte 116
 byte 101
 byte 114
 byte 97
 byte 108
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_623_L000624
 byte 73
 byte 110
 byte 118
 byte 97
 byte 108
 byte 105
 byte 100
 byte 32
 byte 116
 byte 105
 byte 109
 byte 101
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_620_L000621
 byte 73
 byte 110
 byte 118
 byte 97
 byte 108
 byte 105
 byte 100
 byte 32
 byte 100
 byte 97
 byte 116
 byte 101
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_617_L000618
 byte 65
 byte 114
 byte 105
 byte 116
 byte 104
 byte 109
 byte 101
 byte 116
 byte 105
 byte 99
 byte 32
 byte 111
 byte 118
 byte 101
 byte 114
 byte 102
 byte 108
 byte 111
 byte 119
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_614_L000615
 byte 70
 byte 117
 byte 110
 byte 99
 byte 116
 byte 105
 byte 111
 byte 110
 byte 115
 byte 32
 byte 110
 byte 111
 byte 116
 byte 32
 byte 97
 byte 108
 byte 108
 byte 111
 byte 119
 byte 101
 byte 100
 byte 32
 byte 119
 byte 105
 byte 116
 byte 104
 byte 105
 byte 110
 byte 32
 byte 102
 byte 117
 byte 110
 byte 99
 byte 116
 byte 105
 byte 111
 byte 110
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_611_L000612
 byte 84
 byte 111
 byte 111
 byte 32
 byte 109
 byte 97
 byte 110
 byte 121
 byte 32
 byte 97
 byte 114
 byte 103
 byte 117
 byte 109
 byte 101
 byte 110
 byte 116
 byte 115
 byte 32
 byte 116
 byte 111
 byte 32
 byte 117
 byte 115
 byte 101
 byte 114
 byte 32
 byte 100
 byte 101
 byte 102
 byte 105
 byte 110
 byte 101
 byte 100
 byte 32
 byte 102
 byte 117
 byte 110
 byte 99
 byte 116
 byte 105
 byte 111
 byte 110
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_608_L000609
 byte 84
 byte 111
 byte 111
 byte 32
 byte 109
 byte 97
 byte 110
 byte 121
 byte 32
 byte 117
 byte 115
 byte 101
 byte 114
 byte 32
 byte 100
 byte 101
 byte 102
 byte 105
 byte 110
 byte 101
 byte 100
 byte 32
 byte 102
 byte 117
 byte 110
 byte 99
 byte 116
 byte 105
 byte 111
 byte 110
 byte 115
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_605_L000606
 byte 73
 byte 108
 byte 108
 byte 101
 byte 103
 byte 97
 byte 108
 byte 32
 byte 101
 byte 120
 byte 112
 byte 111
 byte 110
 byte 101
 byte 110
 byte 116
 byte 105
 byte 97
 byte 116
 byte 105
 byte 111
 byte 110
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_602_L000603
 byte 66
 byte 97
 byte 100
 byte 108
 byte 121
 byte 32
 byte 102
 byte 111
 byte 114
 byte 109
 byte 101
 byte 100
 byte 32
 byte 101
 byte 120
 byte 112
 byte 114
 byte 101
 byte 115
 byte 115
 byte 105
 byte 111
 byte 110
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_599_L000600
 byte 79
 byte 117
 byte 116
 byte 32
 byte 111
 byte 102
 byte 32
 byte 100
 byte 97
 byte 116
 byte 97
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_596_L000597
 byte 73
 byte 108
 byte 108
 byte 101
 byte 103
 byte 97
 byte 108
 byte 32
 byte 115
 byte 101
 byte 108
 byte 101
 byte 99
 byte 116
 byte 111
 byte 114
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_593_L000594
 byte 71
 byte 111
 byte 115
 byte 117
 byte 98
 byte 32
 byte 119
 byte 105
 byte 116
 byte 104
 byte 111
 byte 117
 byte 116
 byte 32
 byte 109
 byte 97
 byte 116
 byte 99
 byte 104
 byte 105
 byte 110
 byte 103
 byte 32
 byte 114
 byte 101
 byte 116
 byte 117
 byte 114
 byte 110
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_590_L000591
 byte 84
 byte 111
 byte 111
 byte 32
 byte 109
 byte 97
 byte 110
 byte 121
 byte 32
 byte 110
 byte 101
 byte 115
 byte 116
 byte 101
 byte 100
 byte 32
 byte 103
 byte 111
 byte 115
 byte 117
 byte 98
 byte 115
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_587_L000588
 byte 82
 byte 101
 byte 116
 byte 117
 byte 114
 byte 110
 byte 32
 byte 119
 byte 105
 byte 116
 byte 104
 byte 111
 byte 117
 byte 116
 byte 32
 byte 109
 byte 97
 byte 116
 byte 99
 byte 104
 byte 105
 byte 110
 byte 103
 byte 32
 byte 103
 byte 111
 byte 115
 byte 117
 byte 98
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_584_L000585
 byte 69
 byte 110
 byte 100
 byte 32
 byte 105
 byte 102
 byte 32
 byte 119
 byte 105
 byte 116
 byte 104
 byte 111
 byte 117
 byte 116
 byte 32
 byte 109
 byte 97
 byte 116
 byte 99
 byte 104
 byte 105
 byte 110
 byte 103
 byte 32
 byte 105
 byte 102
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_581_L000582
 byte 87
 byte 104
 byte 105
 byte 108
 byte 101
 byte 32
 byte 119
 byte 105
 byte 116
 byte 104
 byte 111
 byte 117
 byte 116
 byte 32
 byte 109
 byte 97
 byte 116
 byte 99
 byte 104
 byte 105
 byte 110
 byte 103
 byte 32
 byte 119
 byte 101
 byte 110
 byte 100
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_578_L000579
 byte 84
 byte 111
 byte 111
 byte 32
 byte 109
 byte 97
 byte 110
 byte 121
 byte 32
 byte 110
 byte 101
 byte 115
 byte 116
 byte 101
 byte 100
 byte 32
 byte 119
 byte 104
 byte 105
 byte 108
 byte 101
 byte 115
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_575_L000576
 byte 87
 byte 101
 byte 110
 byte 100
 byte 32
 byte 119
 byte 105
 byte 116
 byte 104
 byte 111
 byte 117
 byte 116
 byte 32
 byte 109
 byte 97
 byte 116
 byte 99
 byte 104
 byte 105
 byte 110
 byte 103
 byte 32
 byte 119
 byte 104
 byte 105
 byte 108
 byte 101
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_572_L000573
 byte 85
 byte 110
 byte 101
 byte 120
 byte 112
 byte 101
 byte 99
 byte 116
 byte 101
 byte 100
 byte 32
 byte 99
 byte 104
 byte 97
 byte 114
 byte 97
 byte 99
 byte 116
 byte 101
 byte 114
 byte 32
 byte 102
 byte 111
 byte 108
 byte 108
 byte 111
 byte 119
 byte 115
 byte 32
 byte 115
 byte 116
 byte 97
 byte 116
 byte 101
 byte 109
 byte 101
 byte 110
 byte 116
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_569_L000570
 byte 78
 byte 111
 byte 116
 byte 32
 byte 97
 byte 110
 byte 32
 byte 105
 byte 110
 byte 116
 byte 101
 byte 103
 byte 101
 byte 114
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_566_L000567
 byte 66
 byte 97
 byte 100
 byte 32
 byte 118
 byte 97
 byte 108
 byte 117
 byte 101
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_563_L000564
 byte 73
 byte 110
 byte 112
 byte 117
 byte 116
 byte 32
 byte 116
 byte 111
 byte 111
 byte 32
 byte 108
 byte 111
 byte 110
 byte 103
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_560_L000561
 byte 84
 byte 121
 byte 112
 byte 101
 byte 32
 byte 109
 byte 105
 byte 115
 byte 109
 byte 97
 byte 116
 byte 99
 byte 104
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_557_L000558
 byte 73
 byte 108
 byte 108
 byte 101
 byte 103
 byte 97
 byte 108
 byte 32
 byte 111
 byte 102
 byte 102
 byte 115
 byte 101
 byte 116
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_554_L000555
 byte 85
 byte 110
 byte 101
 byte 120
 byte 112
 byte 101
 byte 99
 byte 116
 byte 101
 byte 100
 byte 32
 byte 101
 byte 110
 byte 100
 byte 32
 byte 111
 byte 102
 byte 32
 byte 105
 byte 110
 byte 112
 byte 117
 byte 116
 byte 32
 byte 102
 byte 105
 byte 108
 byte 101
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_551_L000552
 byte 83
 byte 105
 byte 110
 byte 101
 byte 32
 byte 111
 byte 114
 byte 32
 byte 99
 byte 111
 byte 115
 byte 105
 byte 110
 byte 101
 byte 32
 byte 111
 byte 117
 byte 116
 byte 32
 byte 111
 byte 102
 byte 32
 byte 114
 byte 97
 byte 110
 byte 103
 byte 101
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_548_L000549
 byte 78
 byte 101
 byte 103
 byte 97
 byte 116
 byte 105
 byte 118
 byte 101
 byte 32
 byte 115
 byte 113
 byte 117
 byte 97
 byte 114
 byte 101
 byte 32
 byte 114
 byte 111
 byte 111
 byte 116
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_545_L000546
 byte 78
 byte 101
 byte 103
 byte 97
 byte 116
 byte 105
 byte 118
 byte 101
 byte 32
 byte 108
 byte 111
 byte 103
 byte 97
 byte 114
 byte 105
 byte 116
 byte 104
 byte 109
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_542_L000543
 byte 68
 byte 105
 byte 118
 byte 105
 byte 100
 byte 101
 byte 32
 byte 98
 byte 121
 byte 32
 byte 122
 byte 101
 byte 114
 byte 111
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_539_L000540
 byte 78
 byte 101
 byte 120
 byte 116
 byte 32
 byte 119
 byte 105
 byte 116
 byte 104
 byte 111
 byte 117
 byte 116
 byte 32
 byte 109
 byte 97
 byte 116
 byte 99
 byte 104
 byte 105
 byte 110
 byte 103
 byte 32
 byte 102
 byte 111
 byte 114
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_536_L000537
 byte 70
 byte 111
 byte 114
 byte 32
 byte 119
 byte 105
 byte 116
 byte 104
 byte 111
 byte 117
 byte 116
 byte 32
 byte 109
 byte 97
 byte 116
 byte 99
 byte 104
 byte 105
 byte 110
 byte 103
 byte 32
 byte 110
 byte 101
 byte 120
 byte 116
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_533_L000534
 byte 84
 byte 111
 byte 111
 byte 32
 byte 109
 byte 97
 byte 110
 byte 121
 byte 32
 byte 110
 byte 101
 byte 115
 byte 116
 byte 101
 byte 100
 byte 32
 byte 102
 byte 111
 byte 114
 byte 115
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_530_L000531
 byte 73
 byte 108
 byte 108
 byte 101
 byte 103
 byte 97
 byte 108
 byte 32
 byte 116
 byte 121
 byte 112
 byte 101
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_527_L000528
 byte 84
 byte 111
 byte 111
 byte 32
 byte 109
 byte 97
 byte 110
 byte 121
 byte 32
 byte 105
 byte 110
 byte 105
 byte 116
 byte 105
 byte 97
 byte 108
 byte 105
 byte 115
 byte 101
 byte 114
 byte 115
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_524_L000525
 byte 84
 byte 111
 byte 111
 byte 32
 byte 109
 byte 97
 byte 110
 byte 121
 byte 32
 byte 100
 byte 105
 byte 109
 byte 101
 byte 110
 byte 115
 byte 105
 byte 111
 byte 110
 byte 115
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_521_L000522
 byte 66
 byte 97
 byte 100
 byte 32
 byte 115
 byte 117
 byte 98
 byte 115
 byte 99
 byte 114
 byte 105
 byte 112
 byte 116
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_518_L000519
 byte 78
 byte 111
 byte 32
 byte 115
 byte 117
 byte 99
 byte 104
 byte 32
 byte 118
 byte 97
 byte 114
 byte 105
 byte 97
 byte 98
 byte 108
 byte 101
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_515_L000516
 byte 73
 byte 100
 byte 101
 byte 110
 byte 116
 byte 105
 byte 102
 byte 105
 byte 101
 byte 114
 byte 32
 byte 116
 byte 111
 byte 111
 byte 32
 byte 108
 byte 111
 byte 110
 byte 103
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_512_L000513
 byte 79
 byte 117
 byte 116
 byte 32
 byte 111
 byte 102
 byte 32
 byte 109
 byte 101
 byte 109
 byte 111
 byte 114
 byte 121
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_509_L000510
 byte 83
 byte 121
 byte 110
 byte 116
 byte 97
 byte 120
 byte 32
 byte 101
 byte 114
 byte 114
 byte 111
 byte 114
 byte 0
 alignl
C_tmp098043_0000000b_reporterror_L000063_506_L000507
 byte 78
 byte 79
 byte 32
 byte 69
 byte 82
 byte 82
 byte 79
 byte 82
 byte 32
 byte 40
 byte 63
 byte 41
 byte 0
 alignl
C_tmp098041_0000000b_setup_L000061_430_L000431
 byte 112
 byte 114
 byte 111
 byte 103
 byte 114
 byte 97
 byte 109
 byte 32
 byte 108
 byte 105
 byte 110
 byte 101
 byte 115
 byte 32
 byte 37
 byte 100
 byte 32
 byte 97
 byte 110
 byte 100
 byte 32
 byte 37
 byte 100
 byte 32
 byte 110
 byte 111
 byte 116
 byte 32
 byte 105
 byte 110
 byte 32
 byte 111
 byte 114
 byte 100
 byte 101
 byte 114
 byte 10
 byte 0
 alignl
C_tmp098041_0000000b_setup_L000061_424_L000425
 byte 100
 byte 117
 byte 112
 byte 108
 byte 105
 byte 99
 byte 97
 byte 116
 byte 101
 byte 32
 byte 108
 byte 105
 byte 110
 byte 101
 byte 32
 byte 110
 byte 117
 byte 109
 byte 98
 byte 101
 byte 114
 byte 32
 byte 37
 byte 100
 byte 10
 byte 0
 alignl
C_tmp098041_0000000b_setup_L000061_410_L000411
 byte 67
 byte 97
 byte 110
 byte 39
 byte 116
 byte 32
 byte 114
 byte 101
 byte 97
 byte 100
 byte 32
 byte 112
 byte 114
 byte 111
 byte 103
 byte 114
 byte 97
 byte 109
 byte 10
 byte 0
 alignl
C_tmp098041_0000000b_setup_L000061_380_L000381
 byte 79
 byte 117
 byte 116
 byte 32
 byte 111
 byte 102
 byte 32
 byte 109
 byte 101
 byte 109
 byte 111
 byte 114
 byte 121
 byte 10
 byte 0
 alignl
C_tmp098187_0000001b_tokenize_line_L000255_337_L000338
 byte 84
 byte 111
 byte 107
 byte 101
 byte 110
 byte 105
 byte 122
 byte 101
 byte 114
 byte 32
 byte 101
 byte 114
 byte 114
 byte 111
 byte 114
 byte 32
 byte 105
 byte 110
 byte 32
 byte 108
 byte 105
 byte 110
 byte 101
 byte 32
 byte 37
 byte 100
 byte 44
 byte 32
 byte 97
 byte 116
 byte 32
 byte 116
 byte 111
 byte 107
 byte 101
 byte 110
 byte 32
 byte 37
 byte 100
 byte 10
 byte 0
 alignl
C_tmp098182_00000014_print_tokenized_line_L000230_244_L000245
 byte 91
 byte 37
 byte 50
 byte 88
 byte 93
 byte 32
 byte 0
 alignl
C_tmp098182_00000014_print_tokenized_line_L000230_238_L000239
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 58
 byte 32
 byte 0
 alignl
C_tmp098182_00000014_print_tokenized_line_L000230_236_L000237
 byte 37
 byte 54
 byte 100
 byte 58
 byte 32
 byte 0
 alignl
C_basic_222_L000223
 byte 10
 byte 10
 byte 66
 byte 65
 byte 83
 byte 73
 byte 67
 byte 32
 byte 101
 byte 120
 byte 105
 byte 116
 byte 105
 byte 110
 byte 103
 byte 32
 byte 45
 byte 32
 byte 112
 byte 114
 byte 101
 byte 115
 byte 115
 byte 32
 byte 69
 byte 78
 byte 84
 byte 69
 byte 82
 byte 32
 byte 116
 byte 111
 byte 32
 byte 99
 byte 111
 byte 110
 byte 116
 byte 105
 byte 110
 byte 117
 byte 101
 byte 0
 alignl
C_tmp098002_00000009_21_L000022
 byte 0
DAT
 alignl
C_token_parser_921_L000923
 long @C_token_parser_5
 long @C_token_parser_77
 long @C_token_parser_94
 long @C_token_parser_171
 long @C_token_parser_239
 long @C_token_parser_299
 long @C_token_parser_327
 long @C_token_parser_352
 long @C_token_parser_357
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_402
 long @C_token_parser_451
 long @C_token_parser_484
 long @C_token_parser_500
 long @C_token_parser_545
 long @C_token_parser_13
 long @C_token_parser_587
 long @C_token_parser_681
 long @C_token_parser_758
 long @C_token_parser_817
 long @C_token_parser_844
 long @C_token_parser_886
 long @C_token_parser_916
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_5
 long @C_token_parser_77
 long @C_token_parser_94
 long @C_token_parser_171
 long @C_token_parser_239
 long @C_token_parser_299
 long @C_token_parser_327
 long @C_token_parser_352
 long @C_token_parser_357
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_402
 long @C_token_parser_451
 long @C_token_parser_484
 long @C_token_parser_500
 long @C_token_parser_545
 long @C_token_parser_13
 long @C_token_parser_587
 long @C_token_parser_681
 long @C_token_parser_758
 long @C_token_parser_817
 long @C_token_parser_844
 long @C_token_parser_886
 long @C_token_parser_916
DAT
 alignl
C_token_parser_68_L000070
 long @C_token_parser_31
 long @C_token_parser_13
 long @C_token_parser_35
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_42
 long @C_token_parser_54
DAT
 alignl
C_token_parser_73_L000075
 long @C_token_parser_31
 long @C_token_parser_13
 long @C_token_parser_35
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_42
 long @C_token_parser_54
DAT
 alignl
C_token_parser_161_L000163
 long @C_token_parser_108
 long @C_token_parser_112
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_117
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_137
DAT
 alignl
C_token_parser_167_L000169
 long @C_token_parser_108
 long @C_token_parser_112
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_117
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_137
DAT
 alignl
C_token_parser_290_L000292
 long @C_token_parser_243
 long @C_token_parser_13
 long @C_token_parser_248
 long @C_token_parser_252
 long @C_token_parser_13
 long @C_token_parser_256
 long @C_token_parser_260
DAT
 alignl
C_token_parser_295_L000297
 long @C_token_parser_243
 long @C_token_parser_13
 long @C_token_parser_248
 long @C_token_parser_252
 long @C_token_parser_13
 long @C_token_parser_256
 long @C_token_parser_260
DAT
 alignl
C_token_parser_536_L000538
 long @C_token_parser_508
 long @C_token_parser_13
 long @C_token_parser_509
 long @C_token_parser_13
 long @C_token_parser_526
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_527
DAT
 alignl
C_token_parser_541_L000543
 long @C_token_parser_508
 long @C_token_parser_13
 long @C_token_parser_509
 long @C_token_parser_13
 long @C_token_parser_526
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_527
DAT
 alignl
C_token_parser_749_L000751
 long @C_token_parser_700
 long @C_token_parser_711
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_715
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_742
DAT
 alignl
C_token_parser_754_L000756
 long @C_token_parser_700
 long @C_token_parser_711
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_715
 long @C_token_parser_13
 long @C_token_parser_13
 long @C_token_parser_742
DAT
 alignl
C_D_F_S__O_penF_ile_116_L000117
 byte 46
 byte 46
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 0
 alignl
C_D_F_S__O_penF_ile_110_L000111
 byte 46
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 0
DAT
 alignl
C__doprnt_149_L000151
 long @C__doprnt_129
 long @C__doprnt_137
 long @C__doprnt_134
 long @C__doprnt_141
 long @C__doprnt_141
 long @C__doprnt_138
 long @C__doprnt_105
 long @C__doprnt_134
 long @C__doprnt_105
 long @C__doprnt_105
 long @C__doprnt_105
 long @C__doprnt_105
 long @C__doprnt_113
 long @C__doprnt_129
 long @C__doprnt_128
 long @C__doprnt_105
 long @C__doprnt_146
 long @C__doprnt_118
 long @C__doprnt_105
 long @C__doprnt_129
 long @C__doprnt_105
 long @C__doprnt_105
 long @C__doprnt_129
DAT
 alignl
C__doprnt_121_L000122
 byte 40
 byte 110
 byte 117
 byte 108
 byte 108
 byte 41
 byte 0
DAT
 alignl
C__doscan_304_L000306
 long @C__doscan_176
 long @C__doscan_162
 long @C__doscan_162
 long @C__doscan_237
 long @C__doscan_162
 long @C__doscan_162
 long @C__doscan_162
 long @C__doscan_162
 long @C__doscan_162
 long @C__doscan_162
 long @C__doscan_176
 long @C__doscan_195
 long @C__doscan_176
 long @C__doscan_286
 long @C__doscan_286
 long @C__doscan_286
 long @C__doscan_162
 long @C__doscan_176
DAT
 alignl
C__doscan_308_L000310
 long @C__doscan_168
 long @C__doscan_176
 long @C__doscan_175
 long @C__doscan_162
 long @C__doscan_162
 long @C__doscan_214
 long @C__doscan_162
 long @C__doscan_176
 long @C__doscan_162
 long @C__doscan_162
 long @C__doscan_176
DAT
 alignl
C_sbjo4_65fa5715__pscien_L000050_70_L000071
 long $0
 alignl
C_sbjo_65fa5715_N_anO_rI_nf_L000001_17_L000018
 byte 110
 byte 97
 byte 110
 byte 0
 alignl
C_sbjo_65fa5715_N_anO_rI_nf_L000001_11_L000012
 byte 105
 byte 110
 byte 102
 byte 0
DAT
 alignl
C_getenv_38_L000039
 byte 84
 byte 90
 byte 0
DAT
 alignl
C__getticks_3_L000004
 long $0
 long $0
' Catalina Export _getticks
DAT
 alignl
C_slaop_65fa569c_parseD_ate_L000100_102_L000103
 long 1
 long 12
 long 1
 long 5
 long 0
 long 6
DAT
 alignl
C__tzset_206_L000207
 byte 84
 byte 90
 byte 0
 alignl
C_slaom_65fa569c_43_L000044
 byte 68
 byte 101
 byte 99
 byte 101
 byte 109
 byte 98
 byte 101
 byte 114
 byte 0
 alignl
C_slaol_65fa569c_41_L000042
 byte 78
 byte 111
 byte 118
 byte 101
 byte 109
 byte 98
 byte 101
 byte 114
 byte 0
 alignl
C_slaok_65fa569c_39_L000040
 byte 79
 byte 99
 byte 116
 byte 111
 byte 98
 byte 101
 byte 114
 byte 0
 alignl
C_slaoj_65fa569c_37_L000038
 byte 83
 byte 101
 byte 112
 byte 116
 byte 101
 byte 109
 byte 98
 byte 101
 byte 114
 byte 0
 alignl
C_slaoi_65fa569c_35_L000036
 byte 65
 byte 117
 byte 103
 byte 117
 byte 115
 byte 116
 byte 0
 alignl
C_slaoh_65fa569c_33_L000034
 byte 74
 byte 117
 byte 108
 byte 121
 byte 0
 alignl
C_slaog_65fa569c_31_L000032
 byte 74
 byte 117
 byte 110
 byte 101
 byte 0
 alignl
C_slaof_65fa569c_29_L000030
 byte 77
 byte 97
 byte 121
 byte 0
 alignl
C_slaoe_65fa569c_27_L000028
 byte 65
 byte 112
 byte 114
 byte 105
 byte 108
 byte 0
 alignl
C_slaod_65fa569c_25_L000026
 byte 77
 byte 97
 byte 114
 byte 99
 byte 104
 byte 0
 alignl
C_slaoc_65fa569c_23_L000024
 byte 70
 byte 101
 byte 98
 byte 114
 byte 117
 byte 97
 byte 114
 byte 121
 byte 0
 alignl
C_slaob_65fa569c_21_L000022
 byte 74
 byte 97
 byte 110
 byte 117
 byte 97
 byte 114
 byte 121
 byte 0
 alignl
C_slaoa_65fa569c_19_L000020
 byte 83
 byte 97
 byte 116
 byte 117
 byte 114
 byte 100
 byte 97
 byte 121
 byte 0
 alignl
C_slao9_65fa569c_17_L000018
 byte 70
 byte 114
 byte 105
 byte 100
 byte 97
 byte 121
 byte 0
 alignl
C_slao8_65fa569c_15_L000016
 byte 84
 byte 104
 byte 117
 byte 114
 byte 115
 byte 100
 byte 97
 byte 121
 byte 0
 alignl
C_slao7_65fa569c_13_L000014
 byte 87
 byte 101
 byte 100
 byte 110
 byte 101
 byte 115
 byte 100
 byte 97
 byte 121
 byte 0
 alignl
C_slao6_65fa569c_11_L000012
 byte 84
 byte 117
 byte 101
 byte 115
 byte 100
 byte 97
 byte 121
 byte 0
 alignl
C_slao5_65fa569c_9_L000010
 byte 77
 byte 111
 byte 110
 byte 100
 byte 97
 byte 121
 byte 0
 alignl
C_slao4_65fa569c_7_L000008
 byte 83
 byte 117
 byte 110
 byte 100
 byte 97
 byte 121
 byte 0
DAT
 alignl
C_s750_65fa5698_str_cvt_L000001_26_L000027
 long $3f800000
 alignl
C_s750_65fa5698_str_cvt_L000001_16_L000017
 long $3cf5c28f
 alignl
C_s750_65fa5698_str_cvt_L000001_14_L000015
 long $41200000
 alignl
C_s750_65fa5698_str_cvt_L000001_7_L000008
 long $0
DAT
 alignl
C_strtod_62_L000063
 long $3f800000
 alignl
C_strtod_44_L000045
 long $4e6e6b28
 alignl
C_strtod_29_L000030
 long $0
DAT
 alignl
C_sjn0_65fa5695_asin_acos_L000001_65_L000066
 long $3fc90fdb
 alignl
C_sjn0_65fa5695_asin_acos_L000001_61_L000062
 long $3f490fdb
 alignl
C_sjn0_65fa5695_asin_acos_L000001_22_L000023
 long $3f800000
 alignl
C_sjn0_65fa5695_asin_acos_L000001_18_L000019
 long $3f000000
 alignl
C_sjn0_65fa5695_asin_acos_L000001_6_L000007
 long $0
DAT
 alignl
C_atan_29_L000030
 long $3fddb3d7
 alignl
C_atan_27_L000028
 long $3f000000
 alignl
C_atan_25_L000026
 long $3f3b67af
 alignl
C_atan_23_L000024
 long $3e8930a3
 alignl
C_atan_19_L000020
 long $3f800000
 alignl
C_atan_11_L000012
 long $0
DAT
 alignl
C_exp_29_L000030
 long $b95e8083
 alignl
C_exp_27_L000028
 long $3f318000
 alignl
C_exp_25_L000026
 long $3f000000
 alignl
C_exp_23_L000024
 long $3fb8aa3b
 alignl
C_exp_19_L000020
 long $42b17218
 alignl
C_exp_15_L000016
 long $c2aeac50
 alignl
C_exp_9_L000010
 long $0
DAT
 alignl
C_fabs_5_L000006
 long $0
DAT
 alignl
C_floor_7_L000008
 long $3f800000
 alignl
C_floor_5_L000006
 long $0
DAT
 alignl
C_fmod_4_L000005
 long $0
DAT
 alignl
C_frexp_7_L000008
 long $4b000000
DAT
 alignl
C___huge_val_2_L000003
 long $7f800000
DAT
 alignl
C_ldexp_21_L000022
 long $4e800000
 alignl
C_ldexp_12_L000013
 long $7f7fffff
 alignl
C_ldexp_6_L000007
 long $0
DAT
 alignl
C_log_35_L000036
 long $3f318000
 alignl
C_log_33_L000034
 long $b95e8083
 alignl
C_log_22_L000023
 long $3f000000
 alignl
C_log_20_L000021
 long $3f3504f3
 alignl
C_log_16_L000017
 long $7f7fffff
 alignl
C_log_10_L000011
 long $0
DAT
 alignl
C_pow_55_L000056
 long $3f000000
 alignl
C_pow_41_L000042
 long $4f000000
 alignl
C_pow_30_L000031
 long $7f7fffff
 alignl
C_pow_26_L000027
 long $40000000
 alignl
C_pow_22_L000023
 long $4f800000
 alignl
C_pow_8_L000009
 long $0
 alignl
C_pow_4_L000005
 long $3f800000
DAT
 alignl
C_svc_65fa5695_sinus_L000001_29_L000030
 long $b715777a
 alignl
C_svc_65fa5695_sinus_L000001_27_L000028
 long $40491000
 alignl
C_svc_65fa5695_sinus_L000001_21_L000022
 long $7ea2f983
 alignl
C_svc_65fa5695_sinus_L000001_17_L000018
 long $3f000000
 alignl
C_svc_65fa5695_sinus_L000001_15_L000016
 long $3ea2f983
 alignl
C_svc_65fa5695_sinus_L000001_13_L000014
 long $3fc90fdb
 alignl
C_svc_65fa5695_sinus_L000001_9_L000010
 long $0
DAT
 alignl
C_sqrt_18_L000019
 long $3f800000
 alignl
C_sqrt_16_L000017
 long $40000000
 alignl
C_sqrt_12_L000013
 long $7f7fffff
 alignl
C_sqrt_6_L000007
 long $0
DAT
 alignl
C_tan_27_L000028
 long $b695777a
 alignl
C_tan_25_L000026
 long $3fc91000
 alignl
C_tan_21_L000022
 long $7f22f983
 alignl
C_tan_17_L000018
 long $3f000000
 alignl
C_tan_15_L000016
 long $3f22f983
 alignl
C_tan_5_L000006
 long $0
DAT
 alignl
Catalina_RO_Ends
DAT
Catalina_RW_Base
' Catalina Init
DAT
 alignl
Catalina_Init
DAT
' Catalina Export errno
 alignl
C_errno long 0
DAT
 alignl
C_tmp098001_00000009_nullstr_L000020
 long @C_tmp098002_00000009_21_L000022
 alignl
C_tmp098021_00000009_tron_L000041
 long 0
 alignl
C_tmp098022_00000009_pos_L000042
 long 1
 alignl
C_tmp098023_00000009_last_char_L000043
 byte $0
 alignl
C_tmp098024_00000009_width_L000044
 long 80
 alignl
C_tmp098025_0000000a_base_L000045
 long 0
 alignl
C_tmp098026_0000000a_base_set_L000046
 long 0
 alignl
C_tmp098030_0000000a_current_indx_L000050
 long 0
 alignl
C_tmp098031_0000000a_current_offs_L000051
 long 0
 alignl
C_tmp098032_0000000a_tokenized_L000052
 long 0
 alignl
C_tmp098033_0000000a_token_L000053
 long 0
 alignl
C_tmp098034_0000000a_errorflag_L000054
 long 0
 alignl
C_tmp098035_0000000a_errorlast_L000055
 long 0
 alignl
C_tmp098036_0000000a_errorindx_L000056
 long 0
 alignl
C_tmp098037_0000000b_resume_indx_L000057
 long 0
 alignl
C_tmp098038_0000000b_data_indx_L000058
 long 0
 alignl
C_tmp098039_0000000b_data_offs_L000059
 long 0
 alignl
C_tmp098040_0000000b_in_call_L000060
 long 0
' Catalina Export assembly_addr
 alignl
C_assembly_addr
 long 0
' Catalina Export assembly_retn
 alignl
C_assembly_retn
 long 0
 alignl
C_tmp098116_0000000c_D_U_M_M_Y__I_V_A_L_U_E__L000136
 byte $81
 byte 0[3]
 long $0
 alignl
C_tmp098117_0000000d_D_U_M_M_Y__F_V_A_L_U_E__L000137
 byte $82
 byte 0[3]
 long $0
' Catalina Export basic
DAT
' Catalina Export __pstart
 alignl
C___pstart
 long $ffffffff
DAT
 alignl
C_s7hc_65fa5712_unget_count_L000002
 long 0
' Catalina Export catalina_getc
DAT
' Catalina Export __ctype
 alignl
C___ctype
 byte 0
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 40
 byte 40
 byte 40
 byte 40
 byte 40
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 32
 byte 8
 byte 16
 byte 16
 byte 16
 byte 16
 byte 16
 byte 16
 byte 16
 byte 16
 byte 16
 byte 16
 byte 16
 byte 16
 byte 16
 byte 16
 byte 16
 byte 4
 byte 4
 byte 4
 byte 4
 byte 4
 byte 4
 byte 4
 byte 4
 byte 4
 byte 4
 byte 16
 byte 16
 byte 16
 byte 16
 byte 16
 byte 16
 byte 16
 byte 65
 byte 65
 byte 65
 byte 65
 byte 65
 byte 65
 byte 1
 byte 1
 byte 1
 byte 1
 byte 1
 byte 1
 byte 1
 byte 1
 byte 1
 byte 1
 byte 1
 byte 1
 byte 1
 byte 1
 byte 1
 byte 1
 byte 1
 byte 1
 byte 1
 byte 1
 byte 16
 byte 16
 byte 16
 byte 16
 byte 16
 byte 16
 byte 66
 byte 66
 byte 66
 byte 66
 byte 66
 byte 66
 byte 2
 byte 2
 byte 2
 byte 2
 byte 2
 byte 2
 byte 2
 byte 2
 byte 2
 byte 2
 byte 2
 byte 2
 byte 2
 byte 2
 byte 2
 byte 2
 byte 2
 byte 2
 byte 2
 byte 2
 byte 16
 byte 16
 byte 16
 byte 16
 byte 32
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
 byte 0
DAT
' Catalina Export __stdin
 alignl
C___stdin
 long 0
 long 0
 long 1
 long 0
 long $0
 long $0
' Catalina Export __stdout
 alignl
C___stdout
 long 0
 long 1
 long 2
 long 0
 long $0
 long $0
' Catalina Export __stderr
 alignl
C___stderr
 long 0
 long 2
 long 66
 long 0
 long $0
 long $0
' Catalina Export __iotab
 alignl
C___iotab
 long @C___stdin
 long @C___stdout
 long @C___stderr
 long $0
 byte 0[240]
DAT
' Catalina Export __funccnt
 alignl
C___funccnt
 long 0
' Catalina Export _clean
 alignl
C__clean
 long $0
DAT
 alignl
C_getenv_timezone_L000005
 byte 71
 byte 77
 byte 84
 byte 0
 alignl
C_getenv_eaddr_L000007
 long $0
' Catalina Export getenv
DAT
 alignl
C_slao_65fa569c_ntstr_L000003
 byte 71
 byte 77
 byte 84
 byte 0
 byte 0[7]
 alignl
C_slao1_65fa569c_dststr_L000004
 byte 71
 byte 68
 byte 84
 byte 0
 byte 0[7]
' Catalina Export _timezone
 alignl
C__timezone
 long 0
' Catalina Export _dst_off
 alignl
C__dst_off
 long 3600
' Catalina Export _daylight
 alignl
C__daylight
 long 0
' Catalina Export _tzname
 alignl
C__tzname
 long @C_slao_65fa569c_ntstr_L000003
 long @C_slao1_65fa569c_dststr_L000004
' Catalina Export tzname
 alignl
C_tzname
 long @C_slao_65fa569c_ntstr_L000003
 long @C_slao1_65fa569c_dststr_L000004
 alignl
C_slao2_65fa569c_dststart_L000005
 byte $55
 byte 0[3]
 long 0
 long 0
 long 0
 long 7200
 alignl
C_slao3_65fa569c_dstend_L000006
 byte $55
 byte 0[3]
 long 0
 long 0
 long 0
 long 7200
' Catalina Export _days
 alignl
C__days
 long @C_slao4_65fa569c_7_L000008
 long @C_slao5_65fa569c_9_L000010
 long @C_slao6_65fa569c_11_L000012
 long @C_slao7_65fa569c_13_L000014
 long @C_slao8_65fa569c_15_L000016
 long @C_slao9_65fa569c_17_L000018
 long @C_slaoa_65fa569c_19_L000020
' Catalina Export _months
 alignl
C__months
 long @C_slaob_65fa569c_21_L000022
 long @C_slaoc_65fa569c_23_L000024
 long @C_slaod_65fa569c_25_L000026
 long @C_slaoe_65fa569c_27_L000028
 long @C_slaof_65fa569c_29_L000030
 long @C_slaog_65fa569c_31_L000032
 long @C_slaoh_65fa569c_33_L000034
 long @C_slaoi_65fa569c_35_L000036
 long @C_slaoj_65fa569c_37_L000038
 long @C_slaok_65fa569c_39_L000040
 long @C_slaol_65fa569c_41_L000042
 long @C_slaom_65fa569c_43_L000044
DAT
' Catalina Export _ytab
 alignl
C__ytab
 long 31
 long 28
 long 31
 long 30
 long 31
 long 30
 long 31
 long 31
 long 30
 long 31
 long 30
 long 31
 long 31
 long 29
 long 31
 long 30
 long 31
 long 30
 long 31
 long 31
 long 30
 long 31
 long 30
 long 31
DAT
 alignl
C_shpc_65fa5696__sig_handler_L000001
 long $1
 byte 0[60]
' Catalina Export raise
DAT
 alignl
C_si08_65fa5697_next_L000003
 long $1
' Catalina Export rand
DAT
 alignl
sbrkbeg long @sbrkinit
sbrkval long @sbrkinit
sbrkerr long -1
DAT
 alignl
C_sa0s_65fa5698_maxE_xponent_L000003
 long 511
 alignl
C_sa0s1_65fa5698_powersO_f10_L000004
 long $41200000
 long $42c80000
 long $461c4000
 long $4cbebc20
 long $5a0e1bca
 long $749dc5ae
 long $7f800000
 long $7f800000
 long $7f800000
' Catalina Export strtod
DAT
 alignl
C_sjn0_65fa5695_asin_acos_L000001_p_L000009
 long $c1daf2ad
 long $4264d53a
 long $c21ec165
 long $412270bb
 long $bf325dee
 alignl
C_sjn0_65fa5695_asin_acos_L000001_q_L000011
 long $c3243602
 long $43d09279
 long $c3beee78
 long $4316f3e5
 long $c1be9743
 long $3f800000
DAT
 alignl
C_atan_p_L000003
 long $c15b0533
 long $c1a40bfe
 long $c107e9fb
 long $bf566bd7
 alignl
C_atan_q_L000005
 long $422443e6
 long $42ac5090
 long $426e5052
 long $4170624f
 long $3f800000
 alignl
C_atan_a_L000007
 long $0
 long $3f060a92
 long $3fc90fdb
 long $3f860a92
' Catalina Export atan
DAT
 alignl
C_exp_p_L000003
 long $3e800000
 long $3bf83a60
 long $38045a21
 alignl
C_exp_q_L000005
 long $3f000000
 long $3d68b943
 long $3a257863
 long $35499b18
' Catalina Export exp
DAT
 alignl
C_log_a_L000003
 long $c2803ff9
 long $41831251
 long $bf4a20ae
 alignl
C_log_b_L000005
 long $c4405ff5
 long $439c0420
 long $c20eac02
 long $3f800000
' Catalina Export log
DAT
 alignl
C_svc_65fa5695_sinus_L000001_r_L000004
 long $be2aaaab
 long $3c088889
 long $b9500d01
 long $3638ef1d
 long $b2d7322a
 long $2f3091e3
 long $ab572107
 long $274407fb
DAT
 alignl
C_tan_p_L000008
 long $3f800000
 long $be0895af
 long $3b607415
 long $b795d5b9
 alignl
C_tan_q_L000010
 long $3f800000
 long $beeef582
 long $3cd23cf5
 long $b9a37b25
 long $3505bba8
' Catalina Export tan
' Catalina Data
DAT
 alignl
Catalina_Data
DAT
 alignl
C_tmp098263_00000095_decode_using_L000802_using_prefix_L000805
 byte 0[25]
 alignl
C_tmp098263_00000095_decode_using_L000802_using_suffix_L000807
 byte 0[25]
DAT
 alignl
C_tmp098029_0000000a_fperr_L000049
 byte 0[4]
 alignl
C_tmp098028_0000000a_fpout_L000048
 byte 0[4]
 alignl
C_tmp098027_0000000a_fpin_L000047
 byte 0[4]
' Catalina Export last_rnd
 alignl
C_last_rnd
 byte 0[4]
 alignl
C_tmp098020_00000009_nlines_L000040
 byte 0[4]
 alignl
C_tmp098019_00000009_lines_L000039
 byte 0[4]
 alignl
C_tmp098018_00000009_ndimvariables_L000038
 byte 0[4]
 alignl
C_tmp098017_00000009_dimvariables_L000037
 byte 0[4]
 alignl
C_tmp098016_00000009_nvariables_L000036
 byte 0[4]
 alignl
C_tmp098015_00000009_variables_L000035
 byte 0[4]
 alignl
C_tmp098014_00000009_F_I_L_E_S__L000034
 byte 0[420]
 alignl
C_tmp098013_00000009_ngosubs_L000033
 byte 0[4]
 alignl
C_tmp098012_00000009_gosubstack_L000032
 byte 0[128]
 alignl
C_tmp098011_00000009_nwhiles_L000031
 byte 0[4]
 alignl
C_tmp098010_00000009_whilestack_L000030
 byte 0[128]
 alignl
C_tmp098009_00000009_nfors_L000029
 byte 0[4]
 alignl
C_tmp098008_00000009_forstack_L000028
 byte 0[2432]
 alignl
C_tmp098007_00000009_context_L000027
 byte 0[4]
 alignl
C_tmp098006_00000009_nfunctions_L000026
 byte 0[4]
 alignl
C_tmp098005_00000009_functions_L000025
 byte 0[10112]
 alignl
C_tmp098004_00000009_usr_function_L000024
 byte 0[40]
 alignl
C_tmp098003_00000009_deftype_L000023
 byte 0[104]
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
DAT
' Catalina Export __vi
 alignl
C___vi
 byte 0[52]
' Catalina Export __fdtab
 alignl
C___fdtab
 byte 0[256]
DAT
 alignl
C_s7hc1_65fa5712_unget_buff_L000003
 byte 0[40]
DAT
DAT
DAT
DAT
' Catalina Export __functab
 alignl
C___functab
 byte 0[128]
DAT
 alignl
C___fillbuf_ch_L000005
 byte 0[64]
' Catalina Export __fillbuf
DAT
' Catalina Export _malloc_store
 alignl
C__malloc_store
 byte 0[128]
' Catalina Export ml_last
 alignl
C_ml_last
 byte 0[4]
DAT
 alignl
C_gmtime_br_time_L000003
 byte 0[36]
' Catalina Export gmtime
DAT
' Catalina Export _malloc_free_list
 alignl
C__malloc_free_list
 byte 0[88]
DAT
 alignl
C_slaos_65fa569c_parseT_Z__L000160_lastT_Z__L000163
 byte 0[240]
 alignl
C_slaos_65fa569c_parseT_Z__L000160_buffer_L000165
 byte 0[120]
DAT
 alignl
C_s91g6_65fa570b_overhead_L000007
 byte 0[4]
 alignl
C_s91g5_65fa570b_min_msec_L000006
 byte 0[4]
 alignl
C_s91g4_65fa570b_min_usec_L000005
 byte 0[4]
 alignl
C_s91g3_65fa570b_min_tick_L000004
 byte 0[4]
 alignl
C_s91g2_65fa570b_cnt_msec_L000003
 byte 0[4]
 alignl
C_s91g1_65fa570b_cnt_usec_L000002
 byte 0[4]
 alignl
C_s91g_65fa570b_old_freq_L000001
 byte 0[4]
DAT

 alignl
sbrkinit

DAT
 alignl
Catalina_RW_Ends
 alignl
Catalina_Ends
'#line 178 "/target/p2/nmmdef.t"



'#line 1 "/target/p2/plugins.inc"
{{
'-------------------------------------------------------------------------------
'
' plugins.inc - include the code for all the selected plugins.
'               The plugin support code is included by 'plugsup.inc'
'
' Version 7.1  - Initial version
'
'-------------------------------------------------------------------------------
'
'    Copyright 2011 Ross Higson
'
'    This file is part of the Catalina Target Package.
'
'    The Catalina Target Package is free software: you can redistribute
'    it and/or modify it under the terms of the GNU Lesser General Public
'    License as published by the Free Software Foundation, either version
'    3 of the License, or (at your option) any later version.
'
'    The Catalina Target Package is distributed in the hope that it will
'    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
'    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
'    See the GNU Lesser General Public License for more details.
'
'    You should have received a copy of the GNU Lesser General Public
'    License along with the Catalina Target Package.  If not, see
'    <http://www.gnu.org/licenses/>.
'
'------------------------------------------------------------------------------
}}

' The following file must be included for HMI support

'#line 1 "/target/p2/hmi.t"
{{
'-------------------------------------------------------------------------------
'
' HMI - This file is loaded by all target files to load the correct HMI driver.
'       The following symbols can be used ...
'
'       NO_HMI - do not load any HMI drivers
'       TTY    - load full function Serial driver
' 1 - load Simple Serial driver
'       VGA    - load a VGA driver, which can be additionaly specified as:
'                LORES_VGA or VGA_640 (same as just VGA)
'                HIRES_VGA or VGA_800
'                VGA_1024
'
'
'       The appropriate symbols are usually specified on the Catalina command
'       line (e.g. -C TTY).
'
'
' This file is included by the following target files:
'
'   cmm_default.spin
'   lmm_blackcat.spin
'   nmm_blackcat.spin
'
'   Version 3.15 - Initial version for 1 .
'
'-------------------------------------------------------------------------------
'
'    Copyright 2011 Ross Higson
'
'    This file is part of the Catalina Target Package.
'
'    The Catalina Target Package is free software: you can redistribute
'    it and/or modify it under the terms of the GNU Lesser General Public
'    License as published by the Free Software Foundation, either version
'    3 of the License, or (at your option) any later version.
'
'    The Catalina Target Package is distributed in the hope that it will
'    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
'    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
'    See the GNU Lesser General Public License for more details.
'
'    You should have received a copy of the GNU Lesser General Public
'    License along with the Catalina Target Package.  If not, see
'    <http://www.gnu.org/licenses/>.
'
'------------------------------------------------------------------------------
}}
'
CON



' if any VGA related options are defined, ensure VGA itself is defined (this
' simplifies subsequent cases).











' set default HMI










'#line 1 "/target/p2/hmisimpl.t"
{{
'-------------------------------------------------------------------------------
'
' Catalina HMI Plugin - 1
'
' This plugin provides Catalina with access to some basic HMI drivers
'   - keyboard
'   - screen
'
' This plugin implements a serial driver intended to allow a terminal emulator
' to be used instead of local devices. It uses smart pins to provide the
' serial interface, which avoids the need to use another cog. It buffers
' serial input and output using the LUT but doesn't use interrupts - it just
' polls the smart pins periodically. This is fast enough for most uses, such
' as a serial terminal emulator, but it may not be suitable for high speed
' serial comms applications - use one of the other serial options (e.g. TTY
' for a single HMI port), or the 2 port or 8 port serial libraries for
' multi-port use).
'
' Version 4.9.4 - initial version.
'
'-------------------------------------------------------------------------------
' Keyboard services:
'
'name: k_present
'code: 1
'type: short request
'data: (none)
'rslt: 0 = not present, > 0 = present

'name: k_get
'code: 2
'type: short request
'data: (none)
'rslt: 0 = no key available, > 0 = key code

'name: k_wait
'code: 3
'type: short request
'data: (none)
'rslt: key code

'name: k_new
'code: 4
'type: short request
'data: (none)
'rslt: key code

'name: k_ready
'code: 5
'type: short request
'data: (none)
'rslt: 0 = no key, > 0 = key available

'name: k_clear
'code: 6
'type: short request
'data: (none)
'rslt: (none)

'name: k_state
'code: 7
'type: short request
'data: key code
'rslt: ignored (always zero)

'-------------------------------------------------------------------------------
' Screen/display (text) services:
'
'name: t_geometry
'code: 21
'type: short request
'data: (none)
'rslt: curs<<23 + cols<<8 + rows

'name: t_char
'code: 22
'type: short request
'data: curs<<23 + char
'rslt: 0 = ok

'name: t_string
'code: 23
'type: short request
'data: curs<<23 + address (max 23 bits)
'rslt: 0 = ok

'name: t_int
'code: 24
'type: short request
'data: curs<<23 + address (max 23 bits)
'rslt: 0 = ok

'name: t_unsigned
'code: 25
'type: short request
'data: curs<<23 + address (max 23 bits)
'rslt: 0 = ok

'name: t_hex
'code: 26
'type: short request
'data: curs<<23 + address (max 23 bits)
'rslt: 0 = ok

'name: t_bin
'code: 27
'type: short request
'data: curs<<23 + address (max 23 bits)
'rslt: 0 = ok

'name: t_setpos
'code: 28
'type: short request
'data: curs<<23 + col<<8 + row
'rslt: 0 = ok

'name: t_getpos
'code: 29
'type: short request
'data: curs<<23
'rslt: 0 (i.e. request ignored for PC)

'name: t_mode
'code: 30
'type: short request
'data: curs<<23 + mode
'rslt: 0 (i.e. request ignored for PC)

'name: t_scroll
'code: 31
'type: short request
'data: count<<16 + firstrow<<8 + lastrow
'rslt: 0 (i.e. request ignored for PC)

'name: t_color
'code: 32
'type: short request
'data: curs<<23 + cursor
'rslt: 0 (i.e. request ignored for PC)
'
'-------------------------------------------------------------------------------
}}

CON

'#line 1 "/target/p2/constant.inc"
'--------------------------- START OF CONSTANTS -------------------------------









































































































































































































































































































































































































































































































































'#line 148 "/target/p2/hmisimpl.t"

CON

rxmode     = %0000_0000_000_0000000000000_00_11111_0 'async rx mode, input  enabled for smart input

txmode     = %0000_0000_000_0000000000000_01_11110_0 'async tx mode, output enabled for smart output

baud       = _BAUDRATE

bitrate    = 7 + ((_CLOCKFREQ / baud) << 16)

' size of HMI block (in bytes) to be allocated by startup code (may differ
' for each type of HMI) - this assumes at most one HMI plugin is included

' Note we allocate 8 longs even though we currently only use the first 4 -
' just in case the cogserial plugin assumes it has all 8 longs allocated

' Note the block must be at least 4 bytes, since we use it to send the
' address of the registry to HMI plugins

HMI_BLOCK_SIZE = 4      ' size in bytes

LUT_BUFF_SIZE  = 512    ' rx and tx buffer size (in bytes) - must be <= 512

'-------------------------------------------------------------------------------

DAT
        alignl
        org     0

HMI_START
        call    #simple_setup
loop
        call    #rx_check       ' yes - check/perform rx
        call    #tx_check       ' yes - check/perform tx
        rdlong  rqst,rqstptr wz ' wait ...
  if_z  jmp     #loop           ' ... for a request
        mov     tmp1,rqst
        shr     tmp1,#24
        cmp     tmp1,#32 wcz
  if_a  jmp     #done_bad
        ror     tmp1,#2         ' lookup code address
        add     tmp1,#svctable
        sets    table,tmp1
        rol     tmp1,#2
        shl     tmp1,#3
table   mov     tmp2,0
        shr     tmp2,tmp1
        and     tmp2,#$FF
        jmp     tmp2            ' jump to code routine

svctable
        byte    initialize      ' 0
        byte    k_present       ' 1
        byte    k_get           ' 2
        byte    k_wait          ' 3
        byte    k_new           ' 4
        byte    k_ready         ' 5
        byte    k_clear         ' 6
        byte    done_ok         ' 7 k_state ignored (always return 0)
        byte    done_bad        ' 8
        byte    done_bad        ' 9
        byte    done_bad        '10
        byte    done_ok         '11 m_present ignored
        byte    done_ok         '12 m_button ignored
        byte    done_ok         '13 m_buttons ignored
        byte    done_ok         '14 m_abs_x ignored
        byte    done_ok         '15 m_abs_y ignored
        byte    done_ok         '16 m_abs_z ignored
        byte    done_ok         '17 m_delta_x ignored
        byte    done_ok         '18 m_delta_y ignored
        byte    done_ok         '19 m_delta_z ignored
        byte    done_ok         '20 m_reset ignored
        byte    done_ok         '21 t_geometry ignored (always return 0)
        byte    t_char          '22
        byte    t_string        '23
        byte    t_int           '24
        byte    t_unsigned      '25
        byte    t_hex           '26
        byte    t_bin           '27
        byte    done_ok         '28 t_setpos ignored
        byte    done_ok         '29 t_getpos ignored
        byte    done_ok         '30 t_mode ignored
        byte    done_ok         '31 t_scroll ignored
        byte    done_ok         '32 t_color ignored
        byte    done_bad
        byte    done_bad
        byte    done_bad

'------------------------------------------------------------------
' jump table routines - must be within first 255 longs
'
initialize




        jmp     #k_clear        ' initialize keyboard














k_present
        mov     rslt,#1         ' presume ...
        jmp     #done           ' ... always present

k_get
        call    #rx_size        ' get size of rx buffer
   if_z jmp     #done_ok        ' if no keys, just return
k_get1
        call    #get_rx         ' get key from rx buffer ...
        mov     rslt,tmpch      ' ... and return it ...
        jmp     #k_trans        ' ... transated if required
k_wait
        call    #rx_size        ' get size of rx buffer
  if_nz jmp     #k_get1         ' if keys available, get one
        call    #serial_rx      ' otherwise wait for key
        mov     rslt,tmpch      ' is it ...
k_trans

        cmp     rslt,#$0d wz    ' ... CR?
 if_z   mov     rslt,#$0a       ' if so, correct it

        cmp     rslt,#$04 wz    ' ... EOT?
 if_z   neg     rslt,#1         ' if so, return -1 (EOF)
        jmp     #done

k_new
        mov     rx_head, #0     ' clear ...
        mov     rx_tail, #0     ' ... any buffered keys
        jmp     #k_wait         ' wait for new key

k_ready
        call    #rx_size        ' get size of rx buffer
        mov     rslt,lut_temp   ' return 0 if no keys available
        jmp     #done

k_clear
        mov     rx_head, #0     ' clear ...
        mov     rx_tail, #0     ' ... any buffered keys
        jmp     #done_ok



'------------------------------------------------------------------
'

t_char
        mov     tmp5,rqst       ' get ...
        and     tmp5,#$ff       ' ... char to write

        cmp     tmp5,#$0a wz    ' translate ...
  if_nz jmp     #t_char_1       ' ... lf ...
        mov     tmp5,#$0d       ' ... to ...
        call    #t_put5         ' ... cr ...
        mov     tmp5,#$0a       ' ... lf
t_char_1

        call    #t_put5         ' write char to tx buffer
        jmp     #done_ok

t_string
        and     rqst,low23      ' source address is lower 23 bits of request
:t_strloop
        rdbyte  tmp5,rqst wz    ' get char to write
  if_z  jmp     #done_ok        ' finished if null byte

        cmp     tmp5,#$0a wz    ' translate ...
  if_nz jmp     #:t_str_1       ' ... lf ...
        mov     tmp5,#$0d       ' ... to ...
        call    #t_put5         ' ... cr ...
        mov     tmp5,#$0a       ' ... lf
:t_str_1

        call    #t_put5         ' write char to screen
        add     rqst,#1         ' increment string pointer
        jmp     #:t_strloop     ' put more chars

t_int
        call    #t_getnum       ' get number to print
        cmps    rqst,#0 wcz     ' positive?
 if_ae  jmp     #t_uint         ' yes - no sign
        mov     tmp5,#$2d       ' no - prefix number with '-'
        call    #t_put5         ' write char to tx buffer
        abs     rqst,rqst wcz   ' make number positive
t_uint
  if_z  jmp     #:t_int4        ' if zero, just print one digit
        mov     tmp4,maxdec     ' get largest possible decimal divisor
:t_int2
        cmp     rqst,tmp4 wcz   ' is our number larger than that?
 if_ae  jmp     #:t_int3        ' yes - start extracting decimal digits
        mov     tmp0,tmp4           ' no - divide divisor ...
        mov     tmp1,#10        ' ... by 10 ...
        call    #d32u           ' ... and ...
        mov     tmp4,tmp0       ' ... try ...
        jmp     #:t_int2        ' ... again
:t_int3
        cmp     tmp4,#10 wcz    ' is this the last digit?
 if_b   jmp     #:t_int4        ' yes - no need to divide any more
        mov     tmp0,rqst       ' no - divide number ...
        mov     tmp1,tmp4       ' ... by  ...
        call    #d32u           ' ... divisor
        mov     tmp5,tmp0       ' convert quotient ...
        add     tmp5,#$30       ' ... to digit char
        mov     rqst,tmp1       ' save remainder for next time
        call    #t_put5         ' write char to tx buffer
        mov     tmp0,tmp4       ' divide divisor ...
        mov     tmp1,#10        ' ... by 10 ...
        call    #d32u           ' ... and ...
        mov     tmp4,tmp0       ' ... continue ...
        jmp     #:t_int3        ' ... with next digit
:t_int4
        mov     tmp5,rqst       ' convert last decimal digit ...
        add     tmp5,#$30       ' ... to digit char
        call    #t_put5         ' write char to screen
        jmp     #done_ok

t_unsigned
        call    #t_getnum       ' get number to print
        jmp     #t_uint         ' no sign, just print digits

t_hex
        call    #t_getnum       ' and get number to print
        mov     tmp4,#8         ' print 8 digits
:t_hex1
        rol     rqst,#4         ' convert 4 bits ...
        mov     tmp5,rqst       ' ... to '0' .. '9'
        and     tmp5,#$f        ' ... or ...
        cmp     tmp5,#10 wcz    ' ... 'A' .. 'F' ...
 if_ae  add     tmp5,#($41-$30-10)' ... depending ...
        add     tmp5,#$30       ' ... on the digit value
        call    #t_put5         ' write char to screen
        djnz    tmp4,#:t_hex1   ' continue with next digit
        jmp     #done_ok

t_bin
        call    #t_getnum       ' get number to print
        mov     tmp4,#32        ' print 32 digits
:t_bin1
        rol     rqst,#1         ' convert bit ...
        mov     tmp5,rqst       ' ... to '0' ...
        and     tmp5,#1         ' ... or ...
        add     tmp5,#$30       ' ... '1'
        call    #t_put5         ' write char to screen
        djnz    tmp4,#:t_bin1   ' continue with next digit
        jmp     #done_ok

done_bad
        neg     rslt,#1         ' unknown code specified
        jmp     #done

done_ok
        mov      rslt,#0        ' return zero
done
        wrlong   rslt,rsltptr   ' save result
done_rslt
        mov      rslt,#0        ' indicate ...
        wrlong   rslt,rqstptr   ' ... request complete
        jmp      #loop          ' wait for next request

'------------------------------------------------------------------
' internal routines - can be beyond long 255
'
' simple_setup
' On entry:
'       PTRA = pointer to our HMI block, which will initially contain
'              the registry address as the first long.
'
simple_setup
        cogid   tmp0            ' get our cog id
        mov     tmp6,tmp0       ' save cog id for registering services
        shl     tmp0,#2         ' ... calculate ...
        rdlong  regptr,PTRA     ' ... our ...
        add     tmp0,regptr     ' ... request ...
        rdlong  rqstptr,tmp0    ' ... block ...
        and     rqstptr,low23   ' ... address (only use 23 bits)
        mov     rsltptr,rqstptr ' calculate ...
        add     rsltptr,#4      ' ... our result address
        mov     tmp1,#0         ' zero ...
        wrlong  tmp1,rqstptr    ' ... the request ...
        wrlong  tmp1,rsltptr    ' ... and result
        mov     tmp1,#LMM_HMI   ' register ...
        shl     tmp1,#24        ' ... this cog ...
        or      tmp1,rqstptr    ' ... as a ...
        wrlong  tmp1,tmp0       ' ... HMI cog
        mov     tmpch,##bitrate ' initialize ...
        call    #serial_init    ' ... serial
        ret

'-------[ Serial Initialize (uses SmartPins) ]--------------------------------
' Call Format:
'      call      #serial_init       ' provide addr & baud
' On Entry:
'      tmpch     = bitrate          ' tx & rx bit period + #(bits-1)
'                                   ' = (_clkfreq / _BAUDRATE) << 16 + 7
' On Return:
'      tmpch = #0D

serial_init
        wrpin   ##txmode, txpin      ' set asynchronous tx mode in smart pin tx
        wxpin   tmpch, txpin         ' set tx bit period + #(bits-1)
        dirh    txpin                ' enable smart pin tx

        wrpin   ##rxmode, rxpin      ' set asynchronous rx mode in smart pin rx
        wxpin   tmpch, rxpin         ' set rx bit period + #(bits-1)
        dirh    rxpin                ' enable smart pin rx

        mov     tmpch, #$0D          ' we have to prime send buffer empty flag,
        wypin   tmpch, txpin         ' ... so send <cr> to tx pin
        mov     rxtx_flag,#1         ' enable rx/tx
        ret

'-------[ Transmit Char(s) ]--------------------------------------------------
' Call Format:
'      call    #serial_tx           ' tx 1-4 char(s)
' On Entry:
'      tmpch = char                 ' up to 4 chars; B0 first;
'                                   ' <nul> terminates, but if =$0, tx <nul>
' On Return:
'      tmpch = -lost-

serial_tx
        testp   txpin         wc     ' wait for buffer empty on tx pin
 if_nc  jmp     #serial_tx           '
        wypin   tmpch, txpin         ' send byte (bits7:0) to tx pin

        shr     tmpch, #8     wz     ' any more chars to send?
 if_nz  jmp     #serial_tx           ' (nz = another char in tmpch)
        ret

'-------[ Receive a char ]----------------------------------------------------
' Call Format:
'      call    #serial_rx           ' rx 1 char (waits till char ready)
'      call    #serial_rx1          ' rx 1 char (assumes char ready)
' On Entry:
'      tmpch = -anything-
' On Return:
'      tmpch = char

serial_rx
        testp   rxpin        wc      ' char ready?
  if_c  jmp     #serial_rx1          ' yes - get it
        call    #tx_check            ' no - check for tx
        jmp     #serial_rx           ' keep waiting
serial_rx1
        rdpin   tmpch, rxpin         ' recv byte (bits31:24) from rx pin
  _ret_ shr     tmpch, #24           ' shift rx bits

'-------[ Check if rx char available - if so, put it in rx buffer ]------------
' Call Format:
'      call    #rx_check            ' check if char ready
' On Entry:
'      tmpch = -anything-
' On Return:
'      tmpch = char (if available)

rx_check
        cmp     rxtx_flag,#0 wz      ' rx/tx enabled?
  if_z  ret                          ' no - just return
        testp   rxpin        wc      ' char ready?
  if_nc ret                          ' no - just return
        call    #serial_rx1          ' yes, get it
        call    #put_rx              ' add char to rx buffer
        ret

'-------[ Check if tx ready - if so, tx a char if available ]------------------
' Call Format:
'      call    #tx_check            ' check if char ready
' On Entry:
'      tmpch = -anything-
' On Return:
'      tmpch = char (if sent)

tx_check
        cmp     rxtx_flag,#0 wz      ' rx/tx enabled?
  if_z  ret                          ' no - just return
        testp   txpin        wc      ' ready for tx?
 if_nc  ret                          ' no - just return
        call    #get_tx              ' character waiting?
 if_z   ret                          ' no - just return
 _ret_  wypin   tmpch, txpin         ' send char (bits7:0) to tx pin

'
'
't_getnum - set up for converting and printing numbers
'
t_getnum
        and     rqst,low23      ' source address is lower 23 bits of request
        rdlong  rqst,rqst wz    ' get the actual number in the rquest
        ret

'
' t_put_rqst - write char pointed to by rqst ptr
' On entry
'    rqstptr : address of byte to write
'
t_put_rqst
        rdbyte  tmp5,rqstptr

' t_put5     - write character in t5
' On entry
'    tmp5      : char to write
'
t_put5
        mov     tmpch,tmp5
        call    #put_tx         ' char added to tx buffer?
  if_nz jmp     #t_put51        ' yes - just check rx
        cmp     rxtx_flag,#0 wz ' no - tx/rx enabled?
  if_z  ret                     ' no - can't do anything
        call    #tx_check       ' yes - check/perform tx ...
        call    #rx_check       ' ... and rx to see if we ...
        jmp     #t_put5         ' ... free up buffer space
t_put51
        call    #rx_check       ' check for rx
        ret
'
'd32u - Unsigned 32 bit division
' On entry:
'    tmp1 = divisor
'    tmp0 = dividend
' On exit:
'    tmp0 = quotient (i.e. tmp0/tmp1)
'    tmp1 = remainder

d32u
        qdiv  tmp0,tmp1
        getqx tmp0
 _ret_  getqy tmp1

'
' LUT buffer processing. The LUT buffer is LUT_BUFF_SIZE/4 longs, which can
' store LUT_BUFF_SIZE-1 characters (the buffer is empty if head == tail).
'

' put_rx - put char in tmpch into the rx buffer (if possible), incrementing
'          the buffer head pointer. Return with Z set if buffer is full.

put_rx
           call    #rx_size              ' get size of rx buffer
           cmp     lut_temp, #LUT_BUFF_SIZE-1 wz ' rx buffer full?
  if_z     ret                           ' yes - can't store another byte
           mov     lut_addr, rx_addr     ' point to rx buffer
           shl     lut_addr, #2          ' convert to byte addr
           add     lut_addr, rx_head     ' point to head
           mov     lut_indx, lut_addr    ' calc ...
           and     lut_indx, #%11        ' ... index in long to put byte
           shr     lut_addr, #2          ' restore long addr
           rdlut   lut_temp, lut_addr    ' read the long
           altsb   lut_indx, #lut_temp    ' set ...
           setbyte 0, tmpch, #0          ' ... tmpch as correct byte ...
           wrlut   lut_temp, lut_addr    ' ... in lut buffer
   _ret_   incmod  rx_head, #LUT_BUFF_SIZE-1 ' increment buffer head

' rx_size - return number of bytes in rx buffer (in lut_temp)

rx_size
           mov     lut_temp, rx_head
           sub     lut_temp, rx_tail wcz
     if_c  add     lut_temp, ##LUT_BUFF_SIZE
           ret

' get_rx - return earliest byte in rx buffer in tmpch, incrementing
'          the buffer tail pointer. Return with Z set if buffer is empty

get_rx
           call    #rx_size              ' get size of rx buffer
      if_z ret                           ' return Z set if buffer empty
           mov     lut_addr, rx_addr     ' point to rx buffer
           shl     lut_addr, #2          ' convert to byte addr
           add     lut_addr, rx_tail     ' point to tail
           mov     lut_indx, lut_addr    ' calc ...
           and     lut_indx, #%11        ' ... index in long
           shr     lut_addr, #2          ' restore long addr
           rdlut   lut_temp, lut_addr    ' read the long
           altgb   lut_indx, #lut_temp       ' get ...
           getbyte tmpch, 0, #0      ' ... correct byte into tmpch
   _ret_   incmod  rx_tail, #LUT_BUFF_SIZE-1 ' increment buffer tail

' put_tx - put char in tmpch into the tx buffer (if possible), incrementing
'          the buffer head pointer. Return with Z set if buffer is full.

put_tx
           call    #tx_size              ' get size of tx buffer
           cmp     lut_temp, #LUT_BUFF_SIZE-1 wz ' tx buffer full?
  if_z     ret                           ' yes - can't store another byte
           mov     lut_addr, tx_addr     ' point to tx buffer
           shl     lut_addr, #2          ' convert to byte addr
           add     lut_addr, tx_head     ' point to head
           mov     lut_indx, lut_addr    ' calc ...
           and     lut_indx, #%11        ' ... index in long to put byte
           shr     lut_addr, #2          ' restore long addr
           rdlut   lut_temp, lut_addr    ' read the long
           altsb   lut_indx, #lut_temp    ' set ...
           setbyte 0, tmpch, #0          ' ... tmpch as correct byte ...
           wrlut   lut_temp, lut_addr    ' ... in lut buffer
   _ret_   incmod  tx_head, #LUT_BUFF_SIZE-1 ' increment buffer head

' tx_size - return number of bytes in tx buffer (in lut_temp)

tx_size
           mov     lut_temp, tx_head
           sub     lut_temp, tx_tail wcz
     if_c  add     lut_temp, ##LUT_BUFF_SIZE
           ret

' get_tx - return earliest byte in tx buffer in tmpch, incrementing
'          the buffer tail pointer. Return with Z set if buffer is empty

get_tx
           call    #tx_size              ' get size of tx buffer
      if_z ret                           ' return Z set if buffer empty
           mov     lut_addr, tx_addr     ' point to tx buffer
           shl     lut_addr, #2          ' convert to byte addr
           add     lut_addr, tx_tail     ' point to tail
           mov     lut_indx, lut_addr    ' calc ...
           and     lut_indx, #%11        ' ... index in long
           shr     lut_addr, #2          ' restore long addr
           rdlut   lut_temp, lut_addr    ' read the long
           altgb   lut_indx, #lut_temp       ' get ...
           getbyte tmpch, 0, #0      ' ... correct byte into tmpch
   _ret_   incmod  tx_tail, #LUT_BUFF_SIZE-1 ' increment buffer tail

' common lut buffer registers

lut_addr   long 0                    ' long address of long in LUT buffer
lut_indx   long 0                    ' index of byte in long (0 .. 3)
lut_temp   long 0                    ' temp while adjusting byte in long

' tx lut buffer registers

tx_addr    long 0                    ' long address of tx buffer in LUT
tx_head    long 0                    ' tx buffer head (0 .. LUT_BUFF_SIZE - 1)
tx_tail    long 0                    ' tx buffer tail (0 .. LUT_BUFF_SIZE - 1)

' rx lut buffer registers

rx_addr    long (LUT_BUFF_SIZE+3)/4  ' long address of rx buffer in LUT
rx_head    long 0                    ' rx buffer head (0 .. LUT_BUFF_SIZE - 1)
rx_tail    long 0                    ' rx buffer tail (0 .. LUT_BUFF_SIZE - 1)

' internal registers

regptr   long 0         ' address of registry
rqstptr  long 0         ' address of request block
rsltptr  long 0         ' address to put results
rqst     long 0         ' request being processed
rslt     long 0         ' result to return

' temporary registers

tmp0     long 0
tmp1     long 0
tmp2     long 0
tmp3     long 0
tmp4     long 0
tmp5     long 0
tmp6     long 0

' command variables

rxpin     long _RX_PIN          ' rx pin (typically 63)
txpin     long _TX_PIN          ' tx pin (typically 62)
tmpch     long 0
rxtx_flag long 0                ' set to 1 after initialization

' internal constants

minus1   long -1
minus10  long -10

' initialized data

low23    long $007FFFFF
maxdec   long 1000000000        ' maximum decimal divisor for 32 bit values

         fit   $1f0

'=======================================================================

' setup function for HMI

   orgh
   alignl

DAT

HMI_Setup
 rdlong  r0, ##FREE_MEM
 sub     r0, ##HMI_BLOCK_SIZE+4  ' allocate HMI block (min 4 bytes)
 andn    r0, #$3                 ' FREE_MEM should always be long aligned
 wrlong  r0, ##FREE_MEM
 mov     r6, ##REGISTRY
 wrlong  r6, r0
 mov     r6, #%10000
 setq    r0                      ' start ...
 coginit r6, ##@HMI_START wc     ' ... HMI plugin
 mov     r0, ##@HMI_Service_Table
 call    #Register_Services
 ret

' service table for registering HMI services

HMI_Service_Table
  byte SVC_K_PRESENT , 1
  byte SVC_K_GET     , 2
  byte SVC_K_WAIT    , 3
  byte SVC_K_NEW     , 4
  byte SVC_K_READY   , 5
  byte SVC_K_CLEAR   , 6
  byte SVC_K_STATE   , 7
  byte SVC_M_PRESENT , 11
  byte SVC_M_BUTTON  , 12
  byte SVC_M_BUTTONS , 13
  byte SVC_M_ABS_X   , 14
  byte SVC_M_ABS_Y   , 15
  byte SVC_M_ABS_Z   , 16
  byte SVC_M_DELTA_X , 17
  byte SVC_M_DELTA_Y , 18
  byte SVC_M_DELTA_Z , 19
  byte SVC_M_RESET   , 20
  byte SVC_T_GEOMETRY, 21
  byte SVC_T_CHAR    , 22
  byte SVC_T_STRING  , 23
  byte SVC_T_INT     , 24
  byte SVC_T_UNSIGNED, 25
  byte SVC_T_HEX     , 26
  byte SVC_T_BIN     , 27
  byte SVC_T_SETPOS  , 28
  byte SVC_T_GETPOS  , 29
  byte SVC_T_MODE    , 30
  byte SVC_T_SCROLL  , 31
  byte SVC_T_COLOR   , 32
  byte 0             , 0

  alignl ' align long

{{
                            TERMS OF USE: MIT License

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
}}
'#line 80 "/target/p2/hmi.t"








'#line 35 "/target/p2/plugins.inc"

' The following file must be included for Floating Point support

'#line 1 "/target/p2/float.t"
{{
'-------------------------------------------------------------------------------
'
' Floating_Point - This object is loaded by all target files to include
'           the correct Floating Point plugins, based on the following
'           symbols (the logic is in constant.inc):
'
'           NEED_FLOAT_A    include Float A plugin
'           NEED_FLOAT_B    include Float B plugin
'
' This object is included by the following target files:
'
'   nmm_default.t
'   cmm_default.t
'   lmm_default.t
'
' Version 3.15 - Initial 1 version
' Version 3.16 - The P8X32A_ROM_TABLES are now included by the lmm_progend.t,
'                cmm_progend.t and nmm_progend.t files, to ensure they are
'                before sbrkinit (i.e. not overwritten by memory allocation)
'
'-------------------------------------------------------------------------------
'
'    Copyright 2011 Ross Higson
'
'    This file is part of the Catalina Target Package.
'
'    The Catalina Target Package is free software: you can redistribute
'    it and/or modify it under the terms of the GNU Lesser General Public
'    License as published by the Free Software Foundation, either version
'    3 of the License, or (at your option) any later version.
'
'    The Catalina Target Package is distributed in the hope that it will
'    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
'    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
'    See the GNU Lesser General Public License for more details.
'
'    You should have received a copy of the GNU Lesser General Public
'    License along with the Catalina Target Package.  If not, see
'    <http://www.gnu.org/licenses/>.
'
'------------------------------------------------------------------------------
}}

DAT



















































































'#line 39 "/target/p2/plugins.inc"

' The following file must be included for Real-Time Clock support

'#line 1 "/target/p2/clock.t"
{{
'-------------------------------------------------------------------------------
'
' Clock   - This object is loaded by all target files to include
'           a Real-Time Clock, based on the following symbols:
'
'           CLOCK      - include clock plugin
'           RTC        - include RTC support
'
'           Clock support can be included by specifying -C CLOCK or -C RTC on
'           the Catalina Command. Note that the clock support is also
'           included in the Card plugin, and that version will be
'           used if the plugin is loaded (this saves a cog) unless
'           SEPARATE_CLOCK is also defined and RTC is not defined .
'
' This object is included by the following target files:
'
'   nmm_default.spin2, nmm_blackcat.spin2
'   cmm_default.spin2, cmm_blackcat.spin2
'   lmm_default.spin2, lmm_blackcat.spin2
'   xmm_default.spin2, xmm_blackcat.spin2
'
' Version 3.15 - Initial 1 version
'
'-------------------------------------------------------------------------------
'
'    Copyright 2011 Ross Higson
'
'    This file is part of the Catalina Target Package.
'
'    The Catalina Target Package is free software: you can redistribute
'    it and/or modify it under the terms of the GNU Lesser General Public
'    License as published by the Free Software Foundation, either version
'    3 of the License, or (at your option) any later version.
'
'    The Catalina Target Package is distributed in the hope that it will
'    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
'    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
'    See the GNU Lesser General Public License for more details.
'
'    You should have received a copy of the GNU Lesser General Public
'    License along with the Catalina Target Package.  If not, see
'    <http://www.gnu.org/licenses/>.
'
'------------------------------------------------------------------------------
}}
'

DAT














































'#line 43 "/target/p2/plugins.inc"

' The following file must be included for Card support

'#line 1 "/target/p2/sd.t"
{{
'-------------------------------------------------------------------------------
'
' SDCard  - This object is loaded by all target files to include
'           a support. This plugin can also provide clock support.
'           The plugin is loaded depending on the following symbols
'           (the logic is in Catalina_Plugin.inc):
'
'         - include support
'
' 1      - include support
'           libcix     - include support
'
'           CLOCK      - include clock support
'
'           If you link with the appropriate floating point library
'           (i.e. -lcx or -lcix) then loading the Card plugin is
'           handled automatically. The clock support must still be
'           included by specifying -C CLOCK in the Catalina command.
'
' This object is included by the following target files:
'
'   nmm_default.t
'   cmm_default.t
'   lmm_default.t
'
' Version 3.15 - Initial 1 version
'
'-------------------------------------------------------------------------------
'
'    Copyright 2011 Ross Higson
'
'    This file is part of the Catalina Target Package.
'
'    The Catalina Target Package is free software: you can redistribute
'    it and/or modify it under the terms of the GNU Lesser General Public
'    License as published by the Free Software Foundation, either version
'    3 of the License, or (at your option) any later version.
'
'    The Catalina Target Package is distributed in the hope that it will
'    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
'    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
'    See the GNU Lesser General Public License for more details.
'
'    You should have received a copy of the GNU Lesser General Public
'    License along with the Catalina Target Package.  If not, see
'    <http://www.gnu.org/licenses/>.
'
'------------------------------------------------------------------------------
}}
'

DAT



'#line 1 "/target/p2/cogsd.t"
{{
''=============================================================================
''
'' Catalina_SD_Plugin.spin2 - Implement Card support for the Propeller 2.
''                            Also implements Real-Time Clock functionality
''                            if the Catalina symbol CLOCK is defined .
''
'' Implemented for Catalina by:
''     Ross Higson
''
'' Incorporates code originally written by Ray Rodrick (Cluso99).
''
'' History:
''   Version 1.0 - Initial version.
''   Version 2.0 - Fixed a bug that meant some Cards could not be written.
''                 On write failure, now returns data response token.
''   Version 3.0 - Added extra wait times when clock speed is above 200 Mhz,
''                 to keep the bus down to a maximum of 8Mhz.
''                 Fixed a race condition in integration of RTC and code.
''   Version 4.0 - Added 8 extra clocks after each operation. Added a new
''                 "ready" check before each operation.
''
''=============================================================================
}}
CON

'#line 1 "/target/p2/constant.inc"
'--------------------------- START OF CONSTANTS -------------------------------









































































































































































































































































































































































































































































































































'#line 28 "/target/p2/cogsd.t"

CON

delay1s       = _CLOCKFREQ                 ' 1s  (xtal * pll)
delay2s       = _CLOCKFREQ * 2             ' 2s  (xtal * pll)
delay5ms      = _CLOCKFREQ / 200           ' 5ms
delay10ms     = _CLOCKFREQ / 100           ' 10ms
delay20ms     = _CLOCKFREQ / 50            ' 20ms
delay1ms      = _CLOCKFREQ / 1_000         ' 1ms
delay5us      = _CLOCKFREQ / 200_000       ' 5us
delay250us    = _CLOCKFREQ / 4_000         ' 250us

' FLAG that extra clocks are needed above 200 Mhz (the flag will be 0 for
' any clock frequency less than 200Mh, and 1 for any frequency above that):
EXTRA_FLAG    = ((_CLOCKFREQ+336_870_911)>>29)

' calculate how many extra clocks are required to keep the SPI bus at 8 Mhz:
CLOCK_EXTRA   = EXTRA_FLAG*((_CLOCKFREQ-200_000_000)/8_000_000)

SD_First      = 1
SD_Init       = 1
SD_Read       = 2
SD_Write      = 3
SD_ByteIO     = 4
SD_StopIO     = 5





















SD_Last        = 5              ' last valid command if CLOCK not defined


' services:
'
' The command to perform is encoded in the top 8 bits of the parameter
' The address of a parameter block is encoded in the bottom 24 bits.
' The parameter block is 2 longs:
'    - the buffer adress to use
'    - the sector number to read/write

'name: SD_Init - Initialize the driver
'code: 1
'type: long request
'data: parameter block address
'rslt: (none)
'
'name: SD_Read - Read a sector
'code: 2
'type: long request
'data: parameter block address
'rslt: (none)
'
'name: SD_Write - Write a sector
'code: 3
'type: long request
'data: parameter block address
'rslt: 0 on success, data response token on failure (with bit 8 set to ensure not zero!)

'name: SD_ByteIO - Write a sector
'code: 4
'type: short request
'data: byte to write
'rslt: 0 on success, data response token on failure (with bit 8 set to ensure not zero!)

'name: SD_StopIO - disable the card (required on the TRIBLADEPROP and RAMBLADE)
'code: 5
'type: short request
'data: byte to write
'rslt: (none)

'
' RTC services:
'
'name: SD_RTC_SetFreq
'code: 6
'type: long request
'data: frequency to set (note that the clock will be zeroed)
'rslt: (none)

'name: SD_RTC_GetClock
'code: 7
'type: long request
'data: (none)
'rslt: -1, or the current clock value

'name: SD_RTC_SetTime
'code: 8
'type: long request
'data: the time (in seconds) to set
'rslt: key code

'name: SD_RTC_GetTime
'code: 9
'type: long request
'data: (none)
'rslt: the current time (in seconds)

'name: SD_RTC_Debug (only works on Hydra and Hybrid)
'code: 10
'type: long request
'data: 0 = no debug, 1 = toggle debug flag every second
'rslt: none

'name: SD_RTC_GetTicks (new time function also implemented in plugin)
'code: 11
'type: short request
'data: address of 2 long buffer to receive seconds and ticks
'rslt: none

DAT
          alignl
          org 0

SD_START

.t1       cogid   .t1                     ' get ...
.t2       shl     .t1,#2                  ' ... our ...
.rqstptr  add     .t1,PTRA                ' ... registry block entry
.rsltptr  rdlong  .rqstptr,.t1            ' register ...
.t0       and     .rqstptr,Mask24         ' ... this ...
.t3       wrlong  ZeroVal,.rqstptr
.t4       mov     .t2,#LMM_FIL            ' ... plugin ...
.t5       shl     .t2,#24                 ' ... as the ...
.paramptr or      .t2,.rqstptr            ' ... appropriate ...
.param    wrlong  .t2,.t1                 ' ... type
.rslt     mov     .rsltptr,.rqstptr       ' set up a pointer to ...
          add     .rsltptr,#4             ' ... our result address

          call    #_SDCard_Init




.pause
        waitx   ##delay5us




        rdlong  .t1,.rqstptr wz
   if_z jmp     #.pause
        mov     .paramptr,.t1
        and     .paramptr,Mask24
        mov     .t5,.paramptr
        rdlong  .param, .paramptr
        rdlong  bufaddr,.paramptr
        add     .paramptr,#4
        rdlong  blocknr,.paramptr
        shr     .t1,#24                  ' get command ...
        and     .t1,#$ff                 ' ... to execute
        cmp     .t1,#SD_First wcz        ' check for valid command
  if_b  jmp     #.err_command
        cmp     .t1,#SD_Last wcz         ' check for valid command
  if_a  jmp     #.err_command
        mov     .rslt, #0
        sub     .t1,#SD_First
        shl     .t1,#1
        add     .t1,#.cmdTable
        jmp     .t1                      ' jump to command

.cmdTable
        call    #.SD_Init
        jmp     #.end_command
        call    #.SD_Read
        jmp     #.end_command
        call    #.SD_Write
        jmp     #.end_command
        call    #.SD_ByteIO
        jmp     #.end_command
        call    #.SD_StopIO
        jmp     #.end_command















.err_command
        neg     .rslt,#1                 ' return -1 on error
        jmp     #.end_command
.end_command
        wrlong  .rslt,.rsltptr           ' return .rslt
        wrlong  Zeroval,.rqstptr         ' clear command status
        jmp     #.pause                  ' pause before next command




















































































































































































'-------------------- Card Functions -----------------------------------------

.SD_Init
        call    #_SDcard_Init
  if_z  mov     .rslt,#0
  if_nz neg     .rslt,#1
        ret

.SD_Write
        call    #_SD_Ready      ' card ready?
  if_nz jmp     #.SD_Result     ' no - return result from card
        call    #_writeSECTOR   ' yes - write sector
        jmp     #.SD_Result     ' return result

.SD_Read
        call    #_SD_Ready      ' card ready?
  if_nz jmp     #.SD_Result     ' no - return result from card
        call    #_readSECTOR    ' yes - read sector, return result
.SD_Result
  if_z  mov     .rslt,#0
  if_nz mov     .rslt, reply
        call    #_sendFF
        ret                     ' return data response

.SD_ByteIO
' ??? not implemented ???
        neg     .rslt,#1
        ret

.SD_StopIO
' ??? not implemented - disable card ???
        neg     .rslt,#1
        ret

'------------------------------------------------------------------------------------------------

CON

'------------------------------------------------------------------------------------------------
' Commands & Responses...
'------------------------------------------------------------------------------------------------
' Command              Argument        Response/Data    Description
  CMD0   = 0  +$40   ' 0               R1       -       GO_IDLE_STATE            *Reqs valid CRC
  CMD1   = 1  +$40   ' 0               R1       -       SEND_OP_COND
  ACMD41 = 41 +$40   ' $4000_0000      R1       -       APP_SEND_OP_COND         *Reqs CMD55 first
  CMD8   = 8  +$40   ' 0               R1+R7    -       SEND_IF_COND             *Reqs valid CRC
  CMD9   = 9  +$40   ' 0               R1       Y       SEND_CSD
  CMD10  = 10 +$40   ' 0               R1       Y       SEND_CID
'  CMD12  = 12 +$40   ' 0               R2       -       STOP_TRANSMISSION
  CMD13  = 13 +$40   ' 0               R2       -       SEND_STATUS
  CMD16  = 16 +$40   ' BlkLen[31:0]    R1       -       SET_BLOCKLEN
  CMD17  = 17 +$40   ' Addr[31:0]      R1       Y       READ_SINGLE_BLOCK
'  CMD18  = 18 +$40   ' Addr[31:0]      R1       Y       READ_MULTIPLE_BLOCK
'  CMD23  = 23 +$40   ' NoBlks[15:0]    R1       -       SET_BLOCK_COUNT
'  ACMD23 = 23 +$40   ' NoBlks[22:0]    R1       -       SET_WR_BLOCK_ERASE_COUNT *Reqs CMD55 first
  CMD24  = 24 +$40   ' Addr[31:0]      R1       Y*      WRITE_BLOCK
'  CMD25  = 25 +$40   ' Addr[31:0]      R1       Y*      WRITE_MULTIPLE_BLOCK
  CMD55  = 55 +$40   ' 0               R1       -       APP_CMD                  *Prefix for ACMD41/ACMD23
  CMD58  = 58 +$40   ' 0               R1+R3    -       READ_OCR


' R1 response:  $FF = busy/wait (0-8 bytes?)
'               b7: 0 (msb first)
'               b6: Parameter Error
'               b5: Address Error
'               b4: Erase Sequence Error
'               b3: Command CRC Error
'               b2: Illegal Command
'               b1: Erase Reset
'               b0: In Idle State
' R1b response: ???
' R3 response:  R1 + OCR(32b)
' R7 response:  R1($01) + 32b(b11..b0 = $1AA = SDC V2 2V7-3V6, else reject)
'
' DataPacket:   DataToken(1byte) + DataBlock(1-2048bytes) + CRC(2bytes)
'   DataToken:  $FE = CMD17/18/24 (read'1'block/read'n'blocks/write'1'block)
'               $FC = CMD25 (write'n'blocks)
'               $FD = CMD25 StopToken  (Single byte packet without data or CRC)
' ErrorToken:   Single Byte Reply
'               b7-b5: 000
'               b4: Card Locked
'               b3: Out of Range
'               b2: Card ECC failed
'               b1: CC Error
'               b0: Error
' DataResponse:
'               b7-b4: xxx0
'               $x5: Data Accepted
'               $xB: Data Rejected - CRC Error
'               $xD: Data Rejected - Write Error


DAT

'
' Check pin pull-up
'
check_pullup
        drvl    pa              ' drive pin low
check_pulldn
        waitx   ##300*1         ' wait >1us
        fltl    pa              ' float pin
        waitx   ##300*5         ' wait >5us
  _ret_ testp   pa      wc      ' sample pin

'+-------[ Card Initialisation ]--------------------------------------------+ <--- initialisation --->
'+ On Entry:                                                                   +
'+ Call Format:                                                                +
'+              CALL    #_SDcard_Init                   '                      + < call: sd initialise >
'+ On Return:                                                                  +
'+      hub $20   = CSD[16] + CID[16]                   ' csd/cid data         +
'+      Returns  "Z" if ok, "NZ" if error                                      +
'+-----------------------------------------------------------------------------+

'+-----------------------------------------------------------------------------+
'+ /SDHC/sdxc SPI Initialisation                                        +
'+-----------------------------------------------------------------------------+
'+      Send >74 clocks with /CS=1 & DI=1 starting & ending with CLK=0         +
'+-----------------------------------------------------------------------------+
_SDcard_Init
                mov     _hubdata,         #$20          ' init hub data ptr=$20
                                                        ' ie. after CLKFREQ ($14), CLKMODE ($18) & BAUDRATE ($1C)
                'callpa  #_SD_CS,          #check_pullup ' check for pull-up on sd_cs
        'if_nc   jmp     #_fail '_pullup                 '

                drvh    #_SD_CS                         ' cs=1 & output
                drvl    #_SD_CK                         ' ck=0 & output
                drvh    #_SD_DI                         ' di=1 & output

                mov     ctr1,             #(96*2)
.count          waitx   ##delay5us                      '\ 5us+5us (ie 100KHz)
                outnot  #_SD_CK                         '| CLK=0-->1-->0
                djnz    ctr1,             #.count       '/
                waitx   ##delay5us                      '  CLK=0 (idle) & /CS=1
'+-----------------------------------------------------------------------------+
'+ Software Reset:                                                             +
'+      CMD0,  PAR=$0,        CRC=$95, REPLY=R1($01)                           +
'+-----------------------------------------------------------------------------+
.Command0       getct   ini_time                        '\ set timeout up to CMD9
                mov     time_out,         ##delay10ms   '/
                mov     ctr1,             #10           ' try a few times
.again0         mov     cmdout,           #CMD0
                mov     cmdpar,           #0
                mov     cmdcrc,           #$95
'+-----------------------------------------------------------------------------+
                call    #_cmdR1          ' /CS=0, send cmd, recv R1, /CS=1
'+-----------------------------------------------------------------------------+
  if_nc         mov     time_out,         ##delay1s     ' increase timeout to 1s
                                                        '\ $01(idle): /MMC, not fully validated
  if_nc         jmp     #.Command8                      '/ $00(good): (dane card response)
'+-----------------------------------------------------------------------------+
                waitx   ##delay5us                      ' delay 5us
                djnz    ctr1,             #.again0      ' n: try again?
                jmp     #_fail '00                      '

'+-----------------------------------------------------------------------------+
'+ _SD_Ready: check card is ready (send $FF until $FF received)             +
'+            return Z if ok, NZ and reply on timeout                          +
'+-----------------------------------------------------------------------------+
_SD_Ready       getct   ini_time                        '\ set timeout
                mov     time_out,         ##delay1s     '/
                outl    #_SD_CS                         ' /CS=0 (enable)
.again1         call    #_recvbyte                      ' read data byte
                cmp     reply,            #$FF wz       ' $FF?
        if_z    jmp     #.ready1
                getct   replyR1                         '\ timeout ?
                sub     replyR1,          ini_time      '|
                cmp     replyR1,          time_out  wc  '| c if < timeout
        if_nc   jmp     #.error1                        '/ n: not ready
                waitx   ##delay5us                      ' delay 5us
                jmp     #.again1                        ' try again
.error1         or      reply,#$100 wz                  ' ensure NZ on error
.ready1 _RET_   outh    #_SD_CS                         ' /CS=1 (disable)

'+=============================================================================+

' we know we now have an /MMC card but its not fully validated yet...
'+-----------------------------------------------------------------------------+
'+ Check Voltage:                                                              +
'+      CMD8,  PAR=$1AA,      CRC=$87, REPLY=R1($01)+R7($xx1AA) ($05=try SDV1) +
'+-----------------------------------------------------------------------------+
.Command8       mov     cmdout,           #CMD8
                mov     cmdpar,           #$1AA
                mov     cmdcrc,           #$87
'+-----------------------------------------------------------------------------+
                call    #_cmdR1R7        ' /CS=0, send cmd, recv R1+R7, /CS=1
'+-----------------------------------------------------------------------------+
  if_c_or_z     jmp     #.illegal                       ' j if <> $01 (not idle)
.idle           and     reply,            ##$FFF        '\
                cmp     reply,            #$1AA     wz  '/ R7[11:0]=$1AA ?
                mov     cmdpar2,          ##$40000000   ' preset for SDV2
  if_ne         jmp     #_fail '98                      ' n: unknown R7
                jmp     #.Command55                     ' y: CMD55+ACMD41($4000_0000)

.illegal        cmp     replyR1,          #$05      wz  ' $05(illegal cmd) ?
  if_ne         jmp     #_fail '08                      ' <>$01/$05 (not idle/illegal)
                mov     cmdpar2,          #0            ' try SDV1
                                                        ' CMD55+ACMD41($0) fall thru
'+-----------------------------------------------------------------------------+
'+ Prefix to ACMD41 & ACMD23:                                                  +
'+      CMD55, PAR=$0,        CRC=$xx, REPLY=R1($01)                           +
'+-----------------------------------------------------------------------------+
.Command55      mov     cmdout,           #CMD55        '
                mov     cmdpar,           #0            '
'+-----------------------------------------------------------------------------+
                call    #_cmdRZA41       ' /CS=0, send cmd, recv R1, /CS=0(ena)
'+-----------------------------------------------------------------------------+
  if_c_or_z     jmp     #_fail '55                      ' <>$01 (not idle)
                                                        '              fall thru
'+-----------------------------------------------------------------------------+
'+ Check SDV1/SDV2:  (follows CMD55)                                           +
'+     ACMD41, PAR=$0,        CRC=$xx, REPLY=R1($00)-V1                     +
'+     ACMD41, PAR=$40000000, CRC=$xx, REPLY=R1($00)-V2                     +
'+-----------------------------------------------------------------------------+
.CommandA41     mov     cmdout,           #ACMD41       '
                mov     cmdpar,           cmdpar2       ' SDV1=0 / SDV2=$40000000
'+-----------------------------------------------------------------------------+
                call    #_cmdR1          ' /CS=0, send cmd, recv R1, /CS=1
'+-----------------------------------------------------------------------------+
  if_nc_and_nz  jmp     #.Command55                     '  =$01(busy): CMD55+CMD41 again
  if_c          jmp     #_fail '41                      ' <>$00/$01: error

                cmp     cmdpar2,          #0        wz  ' SDV1 ?
        if_z    mov     blocksh,          #9            ' y: #1 SDV1(byte address)
        if_z    jmp     #.Command16                     ' y: SDV1 does not use CMD58
                                                        ' SDV2         fall thru
'+-----------------------------------------------------------------------------+
'+ Check OCR CCS bit:                                                          +
'+      CMD58, PAR=$0,        CRC=$xx, REPLY=R1($00)+R3(b30=1)                 +
'+-----------------------------------------------------------------------------+
.Command58      mov     cmdout,           #CMD58        ' SDHC ?
                mov     cmdpar,           #0            '
'+-----------------------------------------------------------------------------+
                call    #_cmdR1R3        ' /CS=0, send cmd, recv R1+R3, /CS=1
'+-----------------------------------------------------------------------------+
  if_c_or_nz    jmp     #_fail '58                      ' <>$00(good): error
                testbn  reply,            #30       wz  ' bit30=CCS=1? $40000000?
        if_z    mov     blocksh,          #9            ' n: #2 SDV2(byte address)
        if_nz   mov     blocksh,          #0            ' y: #3 SDHC/SDV2(block address)
''      if_nz   jmp     #.Command9x                     ' y: does not req cmd16?                        ?????????
                                                        ' SDV2(byte)   fall thru
'+-----------------------------------------------------------------------------+
'+ Force block size to 512 bytes:                                              +
'+      CMD16, PAR=$200,      CRC=$xx, REPLY=R1($00)                           +
'+-----------------------------------------------------------------------------+
.Command16      mov     cmdout,           #CMD16        ' force blocksize=512bytes
                mov     cmdpar,           ##512         ' 512 bytes
'+-----------------------------------------------------------------------------+
                call    #_cmdR1          ' /CS=0, send cmd, recv R1, /CS=1
'+-----------------------------------------------------------------------------+
  if_nc_and_nz  jmp     #.Command16                     '  =$01(idle): again
  if_c_or_nz    jmp     #_fail '16                      ' <>$00(good): error
'+-----------------------------------------------------------------------------+
.Command9x      mov     bufaddr,          _hubdata      ' where to store CSD/CID
'+-----------------------------------------------------------------------------+
'+ Read CSD register (16 bytes):                                               +
'+      CMD9,  PAR=$0,        CRC=$xx, REPLY=R1($00)                           +
'+-----------------------------------------------------------------------------+
.Command9       mov     cmdout,           #CMD9         ' read CSD register
                call    #_readREG                       '
'+-----------------------------------------------------------------------------+
'+ Read CID register (16 bytes):                                               +
'+      CMD10, PAR=$0,        CRC=$xx, REPLY=R1($00)                           +
'+-----------------------------------------------------------------------------+
.Command10      mov     cmdout,           #CMD10        ' read CID register
                call    #_readREG                       '
'+-----------------------------------------------------------------------------+
        _RET_   MODZ    _set                      wz    ' "Z" = success
'+=============================================================================+

'+-----------------------------------------------------------------------------+
'+ Read Sector:                                                                +
'+-----------------------------------------------------------------------------+
_readSECTOR
'+-----------------------------------------------------------------------------+
'+ Read Block/Sector:  (512 bytes)                                             +
'+      CMD17, PAR=blocknr,   CRC=$xx, REPLY=R1($] +n*$FF +($FE+block+CRC16) +
'+-----------------------------------------------------------------------------+
.Command17      mov     bytescnt,         ##512         ' read block (no. bytes)
                mov     cmdout,           #CMD17        '
                mov     cmdpar,           blocknr       '
                shl     cmdpar,           blocksh       ' <<0 or <<9
'+-----------------------------------------------------------------------------+
                call    #_readBLOCK                     ' read 512 bytes
'+-----------------------------------------------------------------------------+
                RET                                     ' "Z" = success
'+-----------------------------------------------------------------------------+
'+ Write Sector:                                                               +
'+-----------------------------------------------------------------------------+
_writeSECTOR
'+-----------------------------------------------------------------------------+
'+ Write Block/Sector:  (512 bytes)                                            +
'+      CMD24, PAR=blocknr,   CRC=$xx, REPLY=R1($] +n*$FF +($FE+block+CRC16) +
'+-----------------------------------------------------------------------------+
.Command24      mov     bytescnt,         ##512         ' write block (no. bytes)
                mov     cmdout,           #CMD24        '
                mov     cmdpar,           blocknr       '
                shl     cmdpar,           blocksh       ' <<0 or <<9
'+-----------------------------------------------------------------------------+
                call    #_writeBLOCK                    ' write 512 bytes
'+-----------------------------------------------------------------------------+
                RET                                     ' "Z" = success
'+=============================================================================+

'+-----------------------------------------------------------------------------+
'+ Read Block/Sector:  (512 bytes)                                             +
'+      CMD9,  PAR=$0,        CRC=$xx, REPLY=R1($00)                           +
'+      CMD10, PAR=$0,        CRC=$xx, REPLY=R1($00)                           +
'+      CMD17, PAR=blocknr,   CRC=$xx, REPLY=R1($] +n*$FF +($FE+block+CRC16) +
'+-----------------------------------------------------------------------------+
_readREG        mov     bytescnt,         #16           ' CMD9,10: CSD,CID register
                mov     cmdpar,           #0            '        PAR=$0,      16 bytes
_readBLOCK                                              ' CMD17: PAR=sector, 512 bytes
                getct   ini_time                        '\ set timeout for cmd9,10,17
                mov     time_out,         ##delay1s     '/
'+-----------------------------------------------------------------------------+
                call    #_cmdRZtoken     ' /CS=0, send cmd, recv R1, /CS=0(ena)
        if_nz   jmp     #_fail '17                      ' <>$00(good): error
'+-----------------------------------------------------------------------------+
                call    #_getreply                      ' n*$FF+$FE
                cmp     reply,            #$FE      wz  ' $FE=valid Data Token
        if_z    jmp     #.readbyte
                or      reply,#$100                     ' ensure we don't return 0 on error!
                jmp     #_fail '97                      '
 '+-----------------------------------------------------------------------------+
.readbyte       call    #_recvbyte                      ' read data byte
                wrbyte  reply,            bufaddr       ' save byte
                add     bufaddr,          #1            ' bufaddr++
                djnz    bytescnt,         #.readbyte    ' byte--
                call    #_recvbyte                      ' read CRC16 1/2
                call    #_recvbyte                      ' read CRC16 2/2
' NOTE: CRC16 not checked - do we want to do this?                                         ??????????
                outl    #_SD_CK                         ' CLK=0 (idle)          already=0
                call    #_recvbyte                      ' SEND 8 CLOCKS BEFORE DISABLING CS
                outh    #_SD_CS                         ' /CS=1 (disable)
        _RET_   MODZ    _set                        wz  ' "Z" = success
'+=============================================================================+
'+-----------------------------------------------------------------------------+
'+ Write Block/Sector:  (512 bytes)                                            +
'+      CMD24, PAR=blocknr                                                     +
'+-----------------------------------------------------------------------------+
_writeBLOCK                                             ' CMD24: PAR=sector, 512 bytes
                getct   ini_time                        '\ set timeout for cmd24
                mov     time_out,         ##delay2s     '/
'+-----------------------------------------------------------------------------+
                call    #_cmdRZtoken     ' /CS=0, send cmd, recv R1, /CS=0(ena)
        if_nz   jmp     #_fail '24                      ' <>$00(good): error
'+-----------------------------------------------------------------------------+
                mov     dataout,          #$FE          ' start block token
                call    #_sendbyte                      ' write data byte
'+-----------------------------------------------------------------------------+
.writebyte      rdbyte  dataout,          bufaddr       ' load byte
                call    #_sendbyte                      ' write data byte
                add     bufaddr,          #1            ' bufaddr++
                djnz    bytescnt,         #.writebyte   ' byte--
' NOTE: CRC16 is ignored in SPI mode
                call    #_sendFF                        ' CRC16 byte 1/2
                call    #_sendFF                        ' CRC16 byte 2/2
                waitx   ##delay10ms                     ' why is this necessary???
                call    #_getreply                      '
                and     reply,            #$1f
                cmp     reply,            #$5 wz
       if_z     jmp     #.waitdelay
                or      reply,#$100                     ' ensure reply is not zero
                jmp     #_fail
.waitdelay
                waitx   ##delay10ms                     ' why is this necessary???
.waitbusy
                call    #_recvbyte                      ' get a byte
                cmp     reply,            #$FF      wz  ' reply=$FF=busy ?
        if_nz   jmp     #.writedone                     ' n: done
                getct   replyR1                         '\ y: timeout ?
                sub     replyR1,          ini_time      '|
                cmp     replyR1,          time_out  wc  '| c if < timeout
        if_c    jmp     #.waitbusy                      '| n: try again
                jmp     #_fail '90                      '/ y: timed out
.writedone
        _RET_   MODZ    _set                            ' "Z" = success
'+=============================================================================+
'+-----------------------------------------------------------------------------+
'+      SEND: CMDx, PARx, CRCx, GET REPLY                                      +
'+-----------------------------------------------------------------------------+
_cmdRZA41                                               ' CMD55:       R1 response
_cmdRZtoken                                             ' CMD9,10,17,24: R1+$FE response
                mov     cmdtype,          #1            ' returns w /CS=0(ena)
                jmp     #_cmdxx                         '
_cmdR1R3                                                ' CMD58:    R1+R3 response
_cmdR1R7                                                ' CMD8:     R1+R7 response
_cmdR1                                                  ' CMD0,A41,16: R1 response
                mov     cmdtype,          #0            ' returns w /CS=1(disabled)
_cmdxx                                                  '
'+-----------------------------------------------------------------------------+
                outl    #_SD_CS                         ' /CS=0 (enable)
'+-----------------------------------------------------------------------------+
                call    #_sendFF                        ' send $FF byte first
                mov     dataout,          cmdout        ' CMD
                call    #_sendbyte                      ' send cmd byte
                mov     dataout,          cmdpar        ' Parameter
                call    #_sendlong                      ' send 4 bytes (MSB first)
                mov     dataout,          cmdcrc        ' CRC
                call    #_sendbyte                      ' send crc byte
'+-----------------------------------------------------------------------------+
                call    #_getreply                      ' recv R1/R1+R3/R1+R7/RZ..+Token
'+-----------------------------------------------------------------------------+
                outl    #_SD_CK                         ' CLK=0 (idle)           already=0

                skip    cmdtype                         '\ skips next instr if #1
                outh    #_SD_CS                         '| /CS=1(disable) if reqd
              RET                                       '/ else /CS=0 cmdRZA41/cmdRZtoken
'+=============================================================================+

'+-----------------------------------------------------------------------------+
'+      READ REPLY: R1/R1+R3/R1+R7/R1+token                                    +
'+-----------------------------------------------------------------------------+
_getreply       call    #_recvbyte                      ' recv R1 byte
                cmp     reply,            #$FF      wz  ' reply=$FF=busy ?
        if_nz   jmp     #.doneR1                        ' n:

' timeout set in CMD0(for CMD0,8,55,A41,58,16) and CMD9,10,17(readblock)
                getct   replyR1                         '\ timeout ?
                sub     replyR1,          ini_time      '|
                cmp     replyR1,          time_out  wc  '| c if < timeout
        if_c    jmp     #_getreply                      '| n: try again
                jmp     #_fail '90                      '/ timeout:

.doneR1         mov     replyR1,          reply         ' save R1/Token reply
'+-----------------------------------------------------------------------------+
                cmp     cmdout,           #CMD8     wz
        if_nz   cmp     cmdout,           #CMD58    wz
        if_nz   jmp     #.end                           ' ret if not CMD8/CMD58
'+-----------------------------------------------------------------------------+
                call    #_recvlong                      ' R7=CMD8=volts/R3=CMD58=OCR
'+-----------------------------------------------------------------------------+
.end                                                    '\ returns with...
                                                        '| nc+z  replyR1=$00(success)
                test    replyR1,          #1        wz  '| nc+nz replyR1=$01(idle)
        _RET_   cmpr    replyR1,          #$01      wc  '/  c    replyR1>$01(error)

'+=============================================================================+

'+-----------------------------------------------------------------------------+
'+ SPI Send/Recv Routines... (write/read byte/long simultaneously)     +
'+              /CS=0 & CLK=0 on both entry and exit                           +
'+-----------------------------------------------------------------------------+
_recvlong       neg     dataout,          #1            ' call here to Recv a Long (+send 1's)
_sendlong       mov     bitscnt,          #32           ' call here to Send a Long (long=32bits)
                jmp     #_sendrecv                      '
_sendFF                                                 ' call here to Send $FF Byte
_recvbyte       neg     dataout,          #1            ' call here to Recv a Byte (+send 1's)
_sendbyte       rol     dataout,          #24           ' call here to Send a Byte (msbit first)
                mov     bitscnt,          #8            '                          (byte=8bits)
_sendrecv       mov     reply,            #0            ' clear reply
' 8+15 low/high clk cycles (8.7MHz@200MHz, 1.3MHz@30MHz)
.nextbit        rol     dataout,          #1        wc  ' \ prepare output bit (DI=0/1)..
                outl    #_SD_CK                         ' | CLK=0  (already 0 first time)
                outc    #_SD_DI                         ' / write output bit: output on CLK falling edge
                waitx   #(2+CLOCK_EXTRA/2)              ' |   setup time to be safe
                outh    #_SD_CK                         ' \ CLK=1
                waitx   #(3+CLOCK_EXTRA/2)              ' |   setup time to be safe
                testp   #_SD_DO                     wc  ' | read input bit:   sample on CLK rising edge
                rcl     reply,            #1            ' / accum DO input bits
                djnz    bitscnt,          #.nextbit     '   8/32 bits?
        _RET_   outl    #_SD_CK                         ' CLK=0 on exit
'+=============================================================================+

'+-----------------------------------------------------------------------------+
_fail           outh    #_SD_CS                         ' /CS=1 (disable)
        _RET_   MODCZ   _set,_clr                   wcz ' C & NZ = fail
'+=============================================================================+

'-------------------------------------------------------------------------------

ZeroVal         long    0
Mask24          long    $FFFFFF
cmdout          long    0                       ' The 8b CMDxx | $40
cmdpar          long    0                       ' The 32b parameters
cmdcrc          long    0                       ' The 8b CRC (must be valid for CMD0 & CMD8)
cmdpar2         long    0                       ' SDV1=$0, SDV2=$40000000
cmdtype         long    0                       ' reply is R1=1, R3=3, R7=7, else 0
reply           long    0                       ' R1 reply (moved to replyR1 when R3/R7 32b reply here)
replyR1         long    0                       ' R1 reply (8b saved when R3/R7 32b reply follows)
replyR2         long    0                       ' R2 reply (32 bits)
dataout         long    0                       ' 8/32 bit data being shifted out
bytescnt        long    0                       ' #bytes to send/recv
bitscnt         long    0                       ' #bits to be shifted in/out
ctr1            long    0
ini_time        long    0                       ' initial time
time_out        long    0                       ' length of timeout
                                                '\ 1=SDV1, 2=SDV2(byte address), 3=SDHC/SDV2(block address)
blocksh         long    0                       '/ block shift 0/9 bits

bufaddr         long    0                       ' ptr sector buffer
blocknr         long    0                       ' sector#
_hubdata        long    0

                fit     $1F0

{{
+------------------------------------------------------------------------------------------------------------------------------+
|                                                   TERMS OF USE: MIT License                                                  |
+------------------------------------------------------------------------------------------------------------------------------+
|Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation    |
|files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,    |
|modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software|
|is furnished to do so, subject to the following conditions:                                                                   |
|                                                                                                                              |
|The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.|
|                                                                                                                              |
|THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE          |
|WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR         |
|COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,   |
|ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                         |
+------------------------------------------------------------------------------------------------------------------------------+
}}

'#line 58 "/target/p2/sd.t"

' setup function for Card

   orgh
   alignl

SD_Setup
 mov     r0, ##@SD_Service_Table
 call    #Register_Services      ' register services
















         ret

SD_Service_Table
  byte SVC_SD_INIT,       1
  byte SVC_SD_READ,       2
  byte SVC_SD_WRITE,      3
  byte SVC_SD_BYTEIO,     4
  byte SVC_SD_STOPIO,     5



  byte SVC_GETTICKS,     11
  byte 0,                 0

  alignl


'#line 47 "/target/p2/plugins.inc"

' The following file must be included for 2 Port Serial support

'#line 1 "/target/p2/serial2.t"
{{
'-------------------------------------------------------------------------------
'
' Serial2  - This object is loaded by all target files to include
'            2 Port Serial support.
'            The plugin is loaded depending on the following symbols
'            (the logic is in Catalina_Plugin.inc):
'
'            libserial2 - include 2 Port Serial support
'
' This object is included by the following target files:
'
'   nmm_default.t
'   cmm_default.t
'   lmm_default.t
'   nmm_blackcat.t
'   cmm_blackcat.t
'   lmm_blackcat.t
'
' Version 4.0 - Initial 1 version
'
'-------------------------------------------------------------------------------
'
'    Copyright 2011 Ross Higson
'
'    This file is part of the Catalina Target Package.
'
'    The Catalina Target Package is free software: you can redistribute
'    it and/or modify it under the terms of the GNU Lesser General Public
'    License as published by the Free Software Foundation, either version
'    3 of the License, or (at your option) any later version.
'
'    The Catalina Target Package is distributed in the hope that it will
'    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
'    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
'    See the GNU Lesser General Public License for more details.
'
'    You should have received a copy of the GNU Lesser General Public
'    License along with the Catalina Target Package.  If not, see
'    <http://www.gnu.org/licenses/>.
'
'------------------------------------------------------------------------------
}}
'

CON

S2_BLOCK_SIZE = 32

DAT
































'#line 51 "/target/p2/plugins.inc"

' The following file must be included for Multi Port Serial
' (aka 8 Port Serial) support

'#line 1 "/target/p2/serial8.t"
{{
'-------------------------------------------------------------------------------
'
' Serial8  - This object is loaded by all target files to include
'            Multi Port Serial (aka 8 Port Serial) support.
'            The plugin is loaded depending on the following symbols
'            (the logic is in Catalina_Plugin.inc):
'
'            libserial8 - include Multi Port Serial support
'
' This object is included by the following target files:
'
'   nmm_default.t
'   cmm_default.t
'   lmm_default.t
'   nmm_blackcat.t
'   cmm_blackcat.t
'   lmm_blackcat.t
'
' Version 4.7 - Initial 1 version
'
'-------------------------------------------------------------------------------
'
'    Copyright 2021 Ross Higson
'
'    This file is part of the Catalina Target Package.
'
'    The Catalina Target Package is free software: you can redistribute
'    it and/or modify it under the terms of the GNU Lesser General Public
'    License as published by the Free Software Foundation, either version
'    3 of the License, or (at your option) any later version.
'
'    The Catalina Target Package is distributed in the hope that it will
'    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
'    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
'    See the GNU Lesser General Public License for more details.
'
'    You should have received a copy of the GNU Lesser General Public
'    License along with the Catalina Target Package.  If not, see
'    <http://www.gnu.org/licenses/>.
'
'------------------------------------------------------------------------------
}}
'

CON

S8_BLOCK_SIZE = 16 + (4 * 4 * 16) ' Size in Bytes. Assumes 16 pins (i.e. 8 ports)

DAT




















































































'#line 56 "/target/p2/plugins.inc"

' The following file must be included for PSRAM support

'#line 1 "/target/p2/psram.t"
{{
'-------------------------------------------------------------------------------
'
' PSRAM  - This object is loaded by all target files to include
'          PSRAM Memory (16 Bit) support.
'          The plugin is loaded depending on the following symbols
'          (the logic is in Catalina_Plugin.inc):
'
'            libpsram - include PSRAM support
'
' This object is included by the following target files:
'
'   nmm_default.t
'   cmm_default.t
'   lmm_default.t
'   xmm_default.t
'   nmm_blackcat.t
'   cmm_blackcat.t
'   lmm_blackcat.t
'   xmm_blackcat.t
'
' Version 5.4 - Initial 1 version
'
'-------------------------------------------------------------------------------
'
'    Copyright 2022 Ross Higson
'
'    This file is part of the Catalina Target Package.
'
'    The Catalina Target Package is free software: you can redistribute
'    it and/or modify it under the terms of the GNU Lesser General Public
'    License as published by the Free Software Foundation, either version
'    3 of the License, or (at your option) any later version.
'
'    The Catalina Target Package is distributed in the hope that it will
'    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
'    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
'    See the GNU Lesser General Public License for more details.
'
'    You should have received a copy of the GNU Lesser General Public
'    License along with the Catalina Target Package.  If not, see
'    <http://www.gnu.org/licenses/>.
'
'------------------------------------------------------------------------------
}}
'

CON

PSRAM_BLOCK_SIZE = 8*4 + 16*2*4 + 8*4 + 8*3*4 ' Size in Bytes to allocate for startupData.

DAT
















































































'#line 60 "/target/p2/plugins.inc"

' The following file must be included for HYPER Ram support

'#line 1 "/target/p2/hyper.t"
{{
'-------------------------------------------------------------------------------
'
' HYPER  - This object is loaded by all target files to include
'          HYPER Ram/Hyper Flash Memory support.
'          The plugin is loaded depending on the following symbols
'          (the logic is in Catalina_Plugin.inc):
'
'            libhyper - include HYPER Ram support
'
' This object is included by the following target files:
'
'   nmm_default.t
'   cmm_default.t
'   lmm_default.t
'   xmm_default.t
'   nmm_blackcat.t
'   cmm_blackcat.t
'   lmm_blackcat.t
'   xmm_blackcat.t
'
' Version 5.8 - Initial 1 version
'
'-------------------------------------------------------------------------------
'
'    Copyright 2022 Ross Higson
'
'    This file is part of the Catalina Target Package.
'
'    The Catalina Target Package is free software: you can redistribute
'    it and/or modify it under the terms of the GNU Lesser General Public
'    License as published by the Free Software Foundation, either version
'    3 of the License, or (at your option) any later version.
'
'    The Catalina Target Package is distributed in the hope that it will
'    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
'    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
'    See the GNU Lesser General Public License for more details.
'
'    You should have received a copy of the GNU Lesser General Public
'    License along with the Catalina Target Package.  If not, see
'    <http://www.gnu.org/licenses/>.
'
'------------------------------------------------------------------------------
}}
'

CON

HYPER_BLOCK_SIZE = 8*4 + 16*2*4 + 8*4 + 8*3*4 ' Size in Bytes to allocate for startupData.

DAT
























































































'#line 64 "/target/p2/plugins.inc"

' The following file must be included for Cache support

'#line 1 "/target/p2/cache.t"
{{
'-------------------------------------------------------------------------------
'
' Cache  - This object is loaded by all target files to include
'          Cache support.
'          The plugin is loaded depending on the following symbols
'          (the logic is in Catalina_Plugin.inc):
'
'            CACHED - include Cache support
'
' This object is included by the following target files:
'
'   xmm_default.t
'   xmm_blackcat.t
'
' Version 5.4 - Initial 1 version
'
'-------------------------------------------------------------------------------
'
'    Copyright 2022 Ross Higson
'
'    This file is part of the Catalina Target Package.
'
'    The Catalina Target Package is free software: you can redistribute
'    it and/or modify it under the terms of the GNU Lesser General Public
'    License as published by the Free Software Foundation, either version
'    3 of the License, or (at your option) any later version.
'
'    The Catalina Target Package is distributed in the hope that it will
'    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
'    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
'    See the GNU Lesser General Public License for more details.
'
'    You should have received a copy of the GNU Lesser General Public
'    License along with the Catalina Target Package.  If not, see
'    <http://www.gnu.org/licenses/>.
'
'------------------------------------------------------------------------------
}}
'

{
PUB Start : okay | init_mbox, init_cache, init_iwidth, init_owidth

    if CACHE_COG > 0

      if not Running
        init_mbox := XMM_CACHE_CMD
        init_cache := XMM_CACHE
        init_iwidth := DEFAULT_INDEX_WIDTH
        init_owidth := DEFAULT_OFFSET_WIDTH
        long[XMM_CACHE_CMD] := $ffffffff
        coginit(CACHE_COG, @init_vm, @init_mbox)
        repeat while long[XMM_CACHE_CMD]

      okay := TRUE

    else

      okay := FALSE


PUB Running : okay

    long[XMM_CACHE_CMD] := $fffffffe
    repeat 1000
       if long[XMM_CACHE_CMD] == 0
          quit
    okay := (long[XMM_CACHE_RSP] == UNIQUE_RESPONSE)


}

CON

CACHE_BLOCK_SIZE = 4*4 ' Size in bytes to allocate for cache initialization.

DAT































'#line 68 "/target/p2/plugins.inc"


'#line 182 "/target/p2/nmmdef.t"




' Catalina Data

DAT ' unitialized data segment


















