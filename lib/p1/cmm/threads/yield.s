'
' CMM PASM implementations of fundamental multi-threading operations
'
' void * _thread_yield();
'    force a context switch 
' on exit:
'    r0 = thread id

' NOTE: If this code changes, check memory_lock_compact.e, which has the 
'       same code.

' Catalina Code

DAT ' code segment

' Catalina Export _thread_yield

' Even though we don't use it, we import thread_setup here. This ensures
' that COMPACT programs that start threaded kernels also include the
' thread_setup code even if they are not threaded themselves. We need
' to do this because a call to thread_setup is generated by the
' COMPACT code generator if the thread library is used, assuming
' that the program is itself threaded ... but it need not be!

' Catalina Import thread_setup

 alignl ' align long

C__thread_yield
#ifdef P2
 word I16B_PASM
 alignl ' align long
 call #TRY_KERNEL_LOCK                 ' if we can't get kernel lock ...
 long I32_BRAE + @thread_yield_1<<S32  ' ... then try setting ticks
 word I16B_PASM                        ' otherwise force context switch
 alignl ' align long
   jmp #\CMM_force                       
#else
 word I16B_PASM 
 alignl ' align long
   lockset lock wc                     ' if we can't get kernel lock ...
 long I32_BR_B + @thread_yield_1<<S32  ' ... then try settng ticks
 long I32_CALA + @C__thread_force_switch<<S32 ' otherwise force context switch
#endif
 long I32_JMPA + @thread_yield_2<<S32  ' and then return
thread_yield_1
 word I16B_PASM                        ' force a context switch ...
 alignl ' align long
   mov ticks, #1                       ' ... after the next instruction
thread_yield_2
 word I16B_RETN
' end
