                   SOME NOTES ABOUT CATALINA UNDER LINUX
                   =====================================

Catalina is provided with binaries suitable for use with Ubuntu 18, and these
binaries may work under other Linux distributions. If not, Catalina can be 
built from source under Linux with a just a few commands, provided all the 
required packages have been installed. See the document BUILD.TXT for full
details.

To use Catalina, open a command window (akak Terminal window), and execute 
the folowing command from a bash shell (assuming you installed Catalina to 
/opt/catalina):

   LCCDIR=/opt/catalina
   export LCCDIR
   source $LCCDIR/use_catalina

This will set up the LCCDIR environment variable and add the Catalina binary
directories to your path. You may want to add these commands to your profile 
so you don't need to execute them every time you open a command window. 

Now you should be ready to go. Check out the document "Getting Started with 
Catalina" and the other documents in the catalina/documents directory.
 
           A NOTE ON ACCESSING USB SERIAL PORTS UNDER LINUX
           ================================================

Linux has stricter permissions than Windows, including permission to use the
serial ports. To give user <username> permanent access to the serial ports,
the user needs to be added to the 'dialout' user group. This can be done 
using the following command:

   sudo usermod -a -G dialout <username>

NOTE: you will have to log out and log back in for this command to take effect.

To find out the name of the last USB serial device just plugged in:

   dmesg | grep tty

Note that in payload, you can refer to the port by name or number. To find out
the port number associated with a specific name, run payload and use the -d 
option:

   payload -d

Then (for example) if this shows that /dev/ttyUSB0 is port 17, the following 
would be equivalent:

   payload -p /dev/ttyUSB0 program.bin

   payload -p 17 program.bin

Note that on some instances of Linux, the -z option may be required for payload
to correctly detect the Propeller. For example:

   payload -z -p 17 program.bin

Under Linux, payload's various timeouts may need to be extended, especially 
when loading multiple files (e.g. when loading XMM programs). Try adding 
one or more of the following to the payload command (refer to the Catalina
Reference Manual for details):

   -f 1000               <-- extend interfile timeout to 1000ms
   -t 1000               <-- extend read timeout to 1000ms
   -k 100                <-- extent interpage timeout to 100ms
   -u 100                <-- extend reset time to 100ms

For example:

   payload -f 500 -t 1000 -u 100 -k 100 SRAM hello_world -i

Once the payload command is working, adjust the timeouts one at a time
to identify the timeout(s) that need adjusting and a suitable value.

Be aware that if you build programs for both the Propeller 1 and the
Propeller 2, you can confuse payload as to which one it should load. If, 
for instance, you build a ".bin" program for the Propeller 2, but there is 
still a ".binary" file in the same directory from previously building the 
same program for the Propeller 1, then payload may still load the ".binary"
file (or vice versa!). You can use payload's -o option to override this, 
and also set the correct default baude rate for the Propeller 1 or 2:

   payload -o1 hello_world    <-- load hello_world.binary at 115200 baud
   payload -o2 hello_world    <-- load hello_world.bin at 230400 baud

If you are using Geany, the appropriate -o option can be put in the "Loader"
field of the Project Options.

Also, it is worth noting that the payload loader can make use of environment 
variables. For instance, if you are using a Propeller 2 and compile your 
programs to use the default TTY serial HMI at 230400 baud, it is worth 
considering setting the following in your environment, such as in your 
~/.bashrc file:

   export PAYLOAD_BAUD=230400
   export PAYLOAD_PORT=/dev/ttyUSB0

These environment variables will then be used by payload whether started 
from the command line or from within Geany. Note that you may need to log 
out and back in again for any such change to take effect.

